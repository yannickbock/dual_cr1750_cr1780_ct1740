
dual-cr1750-stm32g070rbt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009758  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08009810  08009810  00019810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099c0  080099c0  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  080099c0  080099c0  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080099c0  080099c0  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099c0  080099c0  000199c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099c4  080099c4  000199c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080099c8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000310  2000011c  08009ae4  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08009ae4  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011dc6  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd0  00000000  00000000  00031f0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f90  00000000  00000000  00035db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181a7  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ce  00000000  00000000  0004eee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097ad5  00000000  00000000  000630b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fab8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e6c  00000000  00000000  000fabe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000011c 	.word	0x2000011c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080097e8 	.word	0x080097e8

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000120 	.word	0x20000120
 80000fc:	080097e8 	.word	0x080097e8

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c10      	adds	r0, r2, #0
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	1c19      	adds	r1, r3, #0
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff33 	bl	8001268 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe7d 	bl	800110c <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 ff25 	bl	8001268 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff1b 	bl	8001268 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe9f 	bl	8001184 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fe95 	bl	8001184 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	46d6      	mov	lr, sl
 800046e:	4646      	mov	r6, r8
 8000470:	000d      	movs	r5, r1
 8000472:	0001      	movs	r1, r0
 8000474:	0018      	movs	r0, r3
 8000476:	b5c0      	push	{r6, r7, lr}
 8000478:	0017      	movs	r7, r2
 800047a:	032b      	lsls	r3, r5, #12
 800047c:	0a5a      	lsrs	r2, r3, #9
 800047e:	0f4b      	lsrs	r3, r1, #29
 8000480:	4313      	orrs	r3, r2
 8000482:	00ca      	lsls	r2, r1, #3
 8000484:	4691      	mov	r9, r2
 8000486:	0302      	lsls	r2, r0, #12
 8000488:	006e      	lsls	r6, r5, #1
 800048a:	0041      	lsls	r1, r0, #1
 800048c:	0a52      	lsrs	r2, r2, #9
 800048e:	0fec      	lsrs	r4, r5, #31
 8000490:	0f7d      	lsrs	r5, r7, #29
 8000492:	4315      	orrs	r5, r2
 8000494:	0d76      	lsrs	r6, r6, #21
 8000496:	0d49      	lsrs	r1, r1, #21
 8000498:	0fc0      	lsrs	r0, r0, #31
 800049a:	4682      	mov	sl, r0
 800049c:	46ac      	mov	ip, r5
 800049e:	00ff      	lsls	r7, r7, #3
 80004a0:	1a72      	subs	r2, r6, r1
 80004a2:	4284      	cmp	r4, r0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x40>
 80004a6:	e098      	b.n	80005da <__aeabi_dadd+0x172>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	dc00      	bgt.n	80004ae <__aeabi_dadd+0x46>
 80004ac:	e081      	b.n	80005b2 <__aeabi_dadd+0x14a>
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_dadd+0x4c>
 80004b2:	e0b6      	b.n	8000622 <__aeabi_dadd+0x1ba>
 80004b4:	49c9      	ldr	r1, [pc, #804]	; (80007dc <__aeabi_dadd+0x374>)
 80004b6:	428e      	cmp	r6, r1
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x54>
 80004ba:	e172      	b.n	80007a2 <__aeabi_dadd+0x33a>
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0028      	movs	r0, r5
 80004c0:	0409      	lsls	r1, r1, #16
 80004c2:	4308      	orrs	r0, r1
 80004c4:	4684      	mov	ip, r0
 80004c6:	2a38      	cmp	r2, #56	; 0x38
 80004c8:	dd00      	ble.n	80004cc <__aeabi_dadd+0x64>
 80004ca:	e15e      	b.n	800078a <__aeabi_dadd+0x322>
 80004cc:	2a1f      	cmp	r2, #31
 80004ce:	dd00      	ble.n	80004d2 <__aeabi_dadd+0x6a>
 80004d0:	e1ee      	b.n	80008b0 <__aeabi_dadd+0x448>
 80004d2:	2020      	movs	r0, #32
 80004d4:	0039      	movs	r1, r7
 80004d6:	4665      	mov	r5, ip
 80004d8:	1a80      	subs	r0, r0, r2
 80004da:	4087      	lsls	r7, r0
 80004dc:	40d1      	lsrs	r1, r2
 80004de:	4085      	lsls	r5, r0
 80004e0:	430d      	orrs	r5, r1
 80004e2:	0039      	movs	r1, r7
 80004e4:	1e4f      	subs	r7, r1, #1
 80004e6:	41b9      	sbcs	r1, r7
 80004e8:	4667      	mov	r7, ip
 80004ea:	40d7      	lsrs	r7, r2
 80004ec:	4329      	orrs	r1, r5
 80004ee:	1bdb      	subs	r3, r3, r7
 80004f0:	464a      	mov	r2, r9
 80004f2:	1a55      	subs	r5, r2, r1
 80004f4:	45a9      	cmp	r9, r5
 80004f6:	4189      	sbcs	r1, r1
 80004f8:	4249      	negs	r1, r1
 80004fa:	1a5b      	subs	r3, r3, r1
 80004fc:	4698      	mov	r8, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	d400      	bmi.n	8000506 <__aeabi_dadd+0x9e>
 8000504:	e0cc      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000506:	4643      	mov	r3, r8
 8000508:	025b      	lsls	r3, r3, #9
 800050a:	0a5b      	lsrs	r3, r3, #9
 800050c:	4698      	mov	r8, r3
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0xae>
 8000514:	e12c      	b.n	8000770 <__aeabi_dadd+0x308>
 8000516:	4640      	mov	r0, r8
 8000518:	f001 fda0 	bl	800205c <__clzsi2>
 800051c:	0001      	movs	r1, r0
 800051e:	3908      	subs	r1, #8
 8000520:	2220      	movs	r2, #32
 8000522:	0028      	movs	r0, r5
 8000524:	4643      	mov	r3, r8
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	408b      	lsls	r3, r1
 800052a:	40d0      	lsrs	r0, r2
 800052c:	408d      	lsls	r5, r1
 800052e:	4303      	orrs	r3, r0
 8000530:	428e      	cmp	r6, r1
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0xce>
 8000534:	e117      	b.n	8000766 <__aeabi_dadd+0x2fe>
 8000536:	1b8e      	subs	r6, r1, r6
 8000538:	1c72      	adds	r2, r6, #1
 800053a:	2a1f      	cmp	r2, #31
 800053c:	dd00      	ble.n	8000540 <__aeabi_dadd+0xd8>
 800053e:	e1a7      	b.n	8000890 <__aeabi_dadd+0x428>
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	002e      	movs	r6, r5
 8000546:	1a89      	subs	r1, r1, r2
 8000548:	408d      	lsls	r5, r1
 800054a:	4088      	lsls	r0, r1
 800054c:	40d6      	lsrs	r6, r2
 800054e:	40d3      	lsrs	r3, r2
 8000550:	1e69      	subs	r1, r5, #1
 8000552:	418d      	sbcs	r5, r1
 8000554:	4330      	orrs	r0, r6
 8000556:	4698      	mov	r8, r3
 8000558:	2600      	movs	r6, #0
 800055a:	4305      	orrs	r5, r0
 800055c:	076b      	lsls	r3, r5, #29
 800055e:	d009      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000560:	230f      	movs	r3, #15
 8000562:	402b      	ands	r3, r5
 8000564:	2b04      	cmp	r3, #4
 8000566:	d005      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000568:	1d2b      	adds	r3, r5, #4
 800056a:	42ab      	cmp	r3, r5
 800056c:	41ad      	sbcs	r5, r5
 800056e:	426d      	negs	r5, r5
 8000570:	44a8      	add	r8, r5
 8000572:	001d      	movs	r5, r3
 8000574:	4643      	mov	r3, r8
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	d400      	bmi.n	800057c <__aeabi_dadd+0x114>
 800057a:	e094      	b.n	80006a6 <__aeabi_dadd+0x23e>
 800057c:	4b97      	ldr	r3, [pc, #604]	; (80007dc <__aeabi_dadd+0x374>)
 800057e:	1c72      	adds	r2, r6, #1
 8000580:	429a      	cmp	r2, r3
 8000582:	d100      	bne.n	8000586 <__aeabi_dadd+0x11e>
 8000584:	e09d      	b.n	80006c2 <__aeabi_dadd+0x25a>
 8000586:	4641      	mov	r1, r8
 8000588:	4b95      	ldr	r3, [pc, #596]	; (80007e0 <__aeabi_dadd+0x378>)
 800058a:	08ed      	lsrs	r5, r5, #3
 800058c:	4019      	ands	r1, r3
 800058e:	000b      	movs	r3, r1
 8000590:	0552      	lsls	r2, r2, #21
 8000592:	0749      	lsls	r1, r1, #29
 8000594:	025b      	lsls	r3, r3, #9
 8000596:	4329      	orrs	r1, r5
 8000598:	0b1b      	lsrs	r3, r3, #12
 800059a:	0d52      	lsrs	r2, r2, #21
 800059c:	0512      	lsls	r2, r2, #20
 800059e:	4313      	orrs	r3, r2
 80005a0:	07e4      	lsls	r4, r4, #31
 80005a2:	4323      	orrs	r3, r4
 80005a4:	0008      	movs	r0, r1
 80005a6:	0019      	movs	r1, r3
 80005a8:	bce0      	pop	{r5, r6, r7}
 80005aa:	46ba      	mov	sl, r7
 80005ac:	46b1      	mov	r9, r6
 80005ae:	46a8      	mov	r8, r5
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d043      	beq.n	800063e <__aeabi_dadd+0x1d6>
 80005b6:	1b8a      	subs	r2, r1, r6
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_dadd+0x156>
 80005bc:	e12a      	b.n	8000814 <__aeabi_dadd+0x3ac>
 80005be:	464c      	mov	r4, r9
 80005c0:	431c      	orrs	r4, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x15e>
 80005c4:	e1d1      	b.n	800096a <__aeabi_dadd+0x502>
 80005c6:	1e54      	subs	r4, r2, #1
 80005c8:	2a01      	cmp	r2, #1
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x166>
 80005cc:	e21f      	b.n	8000a0e <__aeabi_dadd+0x5a6>
 80005ce:	4d83      	ldr	r5, [pc, #524]	; (80007dc <__aeabi_dadd+0x374>)
 80005d0:	42aa      	cmp	r2, r5
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x16e>
 80005d4:	e272      	b.n	8000abc <__aeabi_dadd+0x654>
 80005d6:	0022      	movs	r2, r4
 80005d8:	e123      	b.n	8000822 <__aeabi_dadd+0x3ba>
 80005da:	2a00      	cmp	r2, #0
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_dadd+0x178>
 80005de:	e098      	b.n	8000712 <__aeabi_dadd+0x2aa>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d042      	beq.n	800066a <__aeabi_dadd+0x202>
 80005e4:	497d      	ldr	r1, [pc, #500]	; (80007dc <__aeabi_dadd+0x374>)
 80005e6:	428e      	cmp	r6, r1
 80005e8:	d100      	bne.n	80005ec <__aeabi_dadd+0x184>
 80005ea:	e0da      	b.n	80007a2 <__aeabi_dadd+0x33a>
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0028      	movs	r0, r5
 80005f0:	0409      	lsls	r1, r1, #16
 80005f2:	4308      	orrs	r0, r1
 80005f4:	4684      	mov	ip, r0
 80005f6:	2a38      	cmp	r2, #56	; 0x38
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x194>
 80005fa:	e129      	b.n	8000850 <__aeabi_dadd+0x3e8>
 80005fc:	2a1f      	cmp	r2, #31
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_dadd+0x19a>
 8000600:	e187      	b.n	8000912 <__aeabi_dadd+0x4aa>
 8000602:	0011      	movs	r1, r2
 8000604:	4665      	mov	r5, ip
 8000606:	3920      	subs	r1, #32
 8000608:	40cd      	lsrs	r5, r1
 800060a:	2a20      	cmp	r2, #32
 800060c:	d004      	beq.n	8000618 <__aeabi_dadd+0x1b0>
 800060e:	2040      	movs	r0, #64	; 0x40
 8000610:	4661      	mov	r1, ip
 8000612:	1a82      	subs	r2, r0, r2
 8000614:	4091      	lsls	r1, r2
 8000616:	430f      	orrs	r7, r1
 8000618:	0039      	movs	r1, r7
 800061a:	1e4f      	subs	r7, r1, #1
 800061c:	41b9      	sbcs	r1, r7
 800061e:	430d      	orrs	r5, r1
 8000620:	e11b      	b.n	800085a <__aeabi_dadd+0x3f2>
 8000622:	0029      	movs	r1, r5
 8000624:	4339      	orrs	r1, r7
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1c2>
 8000628:	e0b5      	b.n	8000796 <__aeabi_dadd+0x32e>
 800062a:	1e51      	subs	r1, r2, #1
 800062c:	2a01      	cmp	r2, #1
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x1ca>
 8000630:	e1ab      	b.n	800098a <__aeabi_dadd+0x522>
 8000632:	486a      	ldr	r0, [pc, #424]	; (80007dc <__aeabi_dadd+0x374>)
 8000634:	4282      	cmp	r2, r0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x1d2>
 8000638:	e1b2      	b.n	80009a0 <__aeabi_dadd+0x538>
 800063a:	000a      	movs	r2, r1
 800063c:	e743      	b.n	80004c6 <__aeabi_dadd+0x5e>
 800063e:	4969      	ldr	r1, [pc, #420]	; (80007e4 <__aeabi_dadd+0x37c>)
 8000640:	1c75      	adds	r5, r6, #1
 8000642:	420d      	tst	r5, r1
 8000644:	d000      	beq.n	8000648 <__aeabi_dadd+0x1e0>
 8000646:	e0cf      	b.n	80007e8 <__aeabi_dadd+0x380>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d000      	beq.n	800064e <__aeabi_dadd+0x1e6>
 800064c:	e193      	b.n	8000976 <__aeabi_dadd+0x50e>
 800064e:	4649      	mov	r1, r9
 8000650:	4319      	orrs	r1, r3
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x1ee>
 8000654:	e1d1      	b.n	80009fa <__aeabi_dadd+0x592>
 8000656:	4661      	mov	r1, ip
 8000658:	4339      	orrs	r1, r7
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x1f6>
 800065c:	e1e3      	b.n	8000a26 <__aeabi_dadd+0x5be>
 800065e:	4649      	mov	r1, r9
 8000660:	0758      	lsls	r0, r3, #29
 8000662:	08c9      	lsrs	r1, r1, #3
 8000664:	4301      	orrs	r1, r0
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	e026      	b.n	80006b8 <__aeabi_dadd+0x250>
 800066a:	0029      	movs	r1, r5
 800066c:	4339      	orrs	r1, r7
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x20a>
 8000670:	e091      	b.n	8000796 <__aeabi_dadd+0x32e>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d005      	beq.n	8000684 <__aeabi_dadd+0x21c>
 8000678:	4858      	ldr	r0, [pc, #352]	; (80007dc <__aeabi_dadd+0x374>)
 800067a:	4282      	cmp	r2, r0
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x218>
 800067e:	e18f      	b.n	80009a0 <__aeabi_dadd+0x538>
 8000680:	000a      	movs	r2, r1
 8000682:	e7b8      	b.n	80005f6 <__aeabi_dadd+0x18e>
 8000684:	003d      	movs	r5, r7
 8000686:	444d      	add	r5, r9
 8000688:	454d      	cmp	r5, r9
 800068a:	4189      	sbcs	r1, r1
 800068c:	4463      	add	r3, ip
 800068e:	4698      	mov	r8, r3
 8000690:	4249      	negs	r1, r1
 8000692:	4488      	add	r8, r1
 8000694:	4643      	mov	r3, r8
 8000696:	2602      	movs	r6, #2
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	d500      	bpl.n	800069e <__aeabi_dadd+0x236>
 800069c:	e0eb      	b.n	8000876 <__aeabi_dadd+0x40e>
 800069e:	3e01      	subs	r6, #1
 80006a0:	076b      	lsls	r3, r5, #29
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x23e>
 80006a4:	e75c      	b.n	8000560 <__aeabi_dadd+0xf8>
 80006a6:	4643      	mov	r3, r8
 80006a8:	08e9      	lsrs	r1, r5, #3
 80006aa:	075a      	lsls	r2, r3, #29
 80006ac:	4311      	orrs	r1, r2
 80006ae:	0032      	movs	r2, r6
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	484a      	ldr	r0, [pc, #296]	; (80007dc <__aeabi_dadd+0x374>)
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d021      	beq.n	80006fc <__aeabi_dadd+0x294>
 80006b8:	031b      	lsls	r3, r3, #12
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	0b1b      	lsrs	r3, r3, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	e76c      	b.n	800059c <__aeabi_dadd+0x134>
 80006c2:	2300      	movs	r3, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	e769      	b.n	800059c <__aeabi_dadd+0x134>
 80006c8:	002a      	movs	r2, r5
 80006ca:	433a      	orrs	r2, r7
 80006cc:	d069      	beq.n	80007a2 <__aeabi_dadd+0x33a>
 80006ce:	464a      	mov	r2, r9
 80006d0:	0758      	lsls	r0, r3, #29
 80006d2:	08d1      	lsrs	r1, r2, #3
 80006d4:	08da      	lsrs	r2, r3, #3
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	031b      	lsls	r3, r3, #12
 80006da:	4308      	orrs	r0, r1
 80006dc:	421a      	tst	r2, r3
 80006de:	d007      	beq.n	80006f0 <__aeabi_dadd+0x288>
 80006e0:	0029      	movs	r1, r5
 80006e2:	08ed      	lsrs	r5, r5, #3
 80006e4:	421d      	tst	r5, r3
 80006e6:	d103      	bne.n	80006f0 <__aeabi_dadd+0x288>
 80006e8:	002a      	movs	r2, r5
 80006ea:	08ff      	lsrs	r7, r7, #3
 80006ec:	0748      	lsls	r0, r1, #29
 80006ee:	4338      	orrs	r0, r7
 80006f0:	0f43      	lsrs	r3, r0, #29
 80006f2:	00c1      	lsls	r1, r0, #3
 80006f4:	075b      	lsls	r3, r3, #29
 80006f6:	08c9      	lsrs	r1, r1, #3
 80006f8:	4319      	orrs	r1, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	000a      	movs	r2, r1
 80006fe:	431a      	orrs	r2, r3
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x29c>
 8000702:	e213      	b.n	8000b2c <__aeabi_dadd+0x6c4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0312      	lsls	r2, r2, #12
 8000708:	4313      	orrs	r3, r2
 800070a:	031b      	lsls	r3, r3, #12
 800070c:	4a33      	ldr	r2, [pc, #204]	; (80007dc <__aeabi_dadd+0x374>)
 800070e:	0b1b      	lsrs	r3, r3, #12
 8000710:	e744      	b.n	800059c <__aeabi_dadd+0x134>
 8000712:	2a00      	cmp	r2, #0
 8000714:	d04b      	beq.n	80007ae <__aeabi_dadd+0x346>
 8000716:	1b8a      	subs	r2, r1, r6
 8000718:	2e00      	cmp	r6, #0
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x2b6>
 800071c:	e0e7      	b.n	80008ee <__aeabi_dadd+0x486>
 800071e:	482f      	ldr	r0, [pc, #188]	; (80007dc <__aeabi_dadd+0x374>)
 8000720:	4281      	cmp	r1, r0
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x2be>
 8000724:	e195      	b.n	8000a52 <__aeabi_dadd+0x5ea>
 8000726:	2080      	movs	r0, #128	; 0x80
 8000728:	0400      	lsls	r0, r0, #16
 800072a:	4303      	orrs	r3, r0
 800072c:	2a38      	cmp	r2, #56	; 0x38
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x2ca>
 8000730:	e143      	b.n	80009ba <__aeabi_dadd+0x552>
 8000732:	2a1f      	cmp	r2, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x2d0>
 8000736:	e1db      	b.n	8000af0 <__aeabi_dadd+0x688>
 8000738:	2020      	movs	r0, #32
 800073a:	001d      	movs	r5, r3
 800073c:	464e      	mov	r6, r9
 800073e:	1a80      	subs	r0, r0, r2
 8000740:	4085      	lsls	r5, r0
 8000742:	40d6      	lsrs	r6, r2
 8000744:	4335      	orrs	r5, r6
 8000746:	464e      	mov	r6, r9
 8000748:	4086      	lsls	r6, r0
 800074a:	0030      	movs	r0, r6
 800074c:	40d3      	lsrs	r3, r2
 800074e:	1e46      	subs	r6, r0, #1
 8000750:	41b0      	sbcs	r0, r6
 8000752:	449c      	add	ip, r3
 8000754:	4305      	orrs	r5, r0
 8000756:	19ed      	adds	r5, r5, r7
 8000758:	42bd      	cmp	r5, r7
 800075a:	419b      	sbcs	r3, r3
 800075c:	425b      	negs	r3, r3
 800075e:	4463      	add	r3, ip
 8000760:	4698      	mov	r8, r3
 8000762:	000e      	movs	r6, r1
 8000764:	e07f      	b.n	8000866 <__aeabi_dadd+0x3fe>
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <__aeabi_dadd+0x378>)
 8000768:	1a76      	subs	r6, r6, r1
 800076a:	4013      	ands	r3, r2
 800076c:	4698      	mov	r8, r3
 800076e:	e6f5      	b.n	800055c <__aeabi_dadd+0xf4>
 8000770:	0028      	movs	r0, r5
 8000772:	f001 fc73 	bl	800205c <__clzsi2>
 8000776:	0001      	movs	r1, r0
 8000778:	3118      	adds	r1, #24
 800077a:	291f      	cmp	r1, #31
 800077c:	dc00      	bgt.n	8000780 <__aeabi_dadd+0x318>
 800077e:	e6cf      	b.n	8000520 <__aeabi_dadd+0xb8>
 8000780:	002b      	movs	r3, r5
 8000782:	3808      	subs	r0, #8
 8000784:	4083      	lsls	r3, r0
 8000786:	2500      	movs	r5, #0
 8000788:	e6d2      	b.n	8000530 <__aeabi_dadd+0xc8>
 800078a:	4662      	mov	r2, ip
 800078c:	433a      	orrs	r2, r7
 800078e:	0011      	movs	r1, r2
 8000790:	1e4f      	subs	r7, r1, #1
 8000792:	41b9      	sbcs	r1, r7
 8000794:	e6ac      	b.n	80004f0 <__aeabi_dadd+0x88>
 8000796:	4649      	mov	r1, r9
 8000798:	0758      	lsls	r0, r3, #29
 800079a:	08c9      	lsrs	r1, r1, #3
 800079c:	4301      	orrs	r1, r0
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	e787      	b.n	80006b2 <__aeabi_dadd+0x24a>
 80007a2:	4649      	mov	r1, r9
 80007a4:	075a      	lsls	r2, r3, #29
 80007a6:	08c9      	lsrs	r1, r1, #3
 80007a8:	4311      	orrs	r1, r2
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e7a6      	b.n	80006fc <__aeabi_dadd+0x294>
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <__aeabi_dadd+0x37c>)
 80007b0:	1c70      	adds	r0, r6, #1
 80007b2:	4208      	tst	r0, r1
 80007b4:	d000      	beq.n	80007b8 <__aeabi_dadd+0x350>
 80007b6:	e0bb      	b.n	8000930 <__aeabi_dadd+0x4c8>
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_dadd+0x356>
 80007bc:	e114      	b.n	80009e8 <__aeabi_dadd+0x580>
 80007be:	4649      	mov	r1, r9
 80007c0:	4319      	orrs	r1, r3
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x35e>
 80007c4:	e175      	b.n	8000ab2 <__aeabi_dadd+0x64a>
 80007c6:	0029      	movs	r1, r5
 80007c8:	4339      	orrs	r1, r7
 80007ca:	d000      	beq.n	80007ce <__aeabi_dadd+0x366>
 80007cc:	e17e      	b.n	8000acc <__aeabi_dadd+0x664>
 80007ce:	4649      	mov	r1, r9
 80007d0:	0758      	lsls	r0, r3, #29
 80007d2:	08c9      	lsrs	r1, r1, #3
 80007d4:	4301      	orrs	r1, r0
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	e76e      	b.n	80006b8 <__aeabi_dadd+0x250>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	000007ff 	.word	0x000007ff
 80007e0:	ff7fffff 	.word	0xff7fffff
 80007e4:	000007fe 	.word	0x000007fe
 80007e8:	4649      	mov	r1, r9
 80007ea:	1bcd      	subs	r5, r1, r7
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a58      	subs	r0, r3, r1
 80007f0:	45a9      	cmp	r9, r5
 80007f2:	4189      	sbcs	r1, r1
 80007f4:	4249      	negs	r1, r1
 80007f6:	4688      	mov	r8, r1
 80007f8:	0001      	movs	r1, r0
 80007fa:	4640      	mov	r0, r8
 80007fc:	1a09      	subs	r1, r1, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	0209      	lsls	r1, r1, #8
 8000802:	d500      	bpl.n	8000806 <__aeabi_dadd+0x39e>
 8000804:	e0a6      	b.n	8000954 <__aeabi_dadd+0x4ec>
 8000806:	4641      	mov	r1, r8
 8000808:	4329      	orrs	r1, r5
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x3a6>
 800080c:	e67f      	b.n	800050e <__aeabi_dadd+0xa6>
 800080e:	2300      	movs	r3, #0
 8000810:	2400      	movs	r4, #0
 8000812:	e751      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000814:	4cc7      	ldr	r4, [pc, #796]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000816:	42a1      	cmp	r1, r4
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x3b4>
 800081a:	e0c7      	b.n	80009ac <__aeabi_dadd+0x544>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	0424      	lsls	r4, r4, #16
 8000820:	4323      	orrs	r3, r4
 8000822:	2a38      	cmp	r2, #56	; 0x38
 8000824:	dc54      	bgt.n	80008d0 <__aeabi_dadd+0x468>
 8000826:	2a1f      	cmp	r2, #31
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x3c4>
 800082a:	e0cc      	b.n	80009c6 <__aeabi_dadd+0x55e>
 800082c:	2420      	movs	r4, #32
 800082e:	4648      	mov	r0, r9
 8000830:	1aa4      	subs	r4, r4, r2
 8000832:	001d      	movs	r5, r3
 8000834:	464e      	mov	r6, r9
 8000836:	40a0      	lsls	r0, r4
 8000838:	40d6      	lsrs	r6, r2
 800083a:	40a5      	lsls	r5, r4
 800083c:	0004      	movs	r4, r0
 800083e:	40d3      	lsrs	r3, r2
 8000840:	4662      	mov	r2, ip
 8000842:	4335      	orrs	r5, r6
 8000844:	1e66      	subs	r6, r4, #1
 8000846:	41b4      	sbcs	r4, r6
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	469c      	mov	ip, r3
 800084c:	4325      	orrs	r5, r4
 800084e:	e044      	b.n	80008da <__aeabi_dadd+0x472>
 8000850:	4662      	mov	r2, ip
 8000852:	433a      	orrs	r2, r7
 8000854:	0015      	movs	r5, r2
 8000856:	1e6f      	subs	r7, r5, #1
 8000858:	41bd      	sbcs	r5, r7
 800085a:	444d      	add	r5, r9
 800085c:	454d      	cmp	r5, r9
 800085e:	4189      	sbcs	r1, r1
 8000860:	4249      	negs	r1, r1
 8000862:	4688      	mov	r8, r1
 8000864:	4498      	add	r8, r3
 8000866:	4643      	mov	r3, r8
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x406>
 800086c:	e718      	b.n	80006a0 <__aeabi_dadd+0x238>
 800086e:	4bb1      	ldr	r3, [pc, #708]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d049      	beq.n	800090a <__aeabi_dadd+0x4a2>
 8000876:	4642      	mov	r2, r8
 8000878:	4baf      	ldr	r3, [pc, #700]	; (8000b38 <__aeabi_dadd+0x6d0>)
 800087a:	2101      	movs	r1, #1
 800087c:	401a      	ands	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	086a      	lsrs	r2, r5, #1
 8000882:	400d      	ands	r5, r1
 8000884:	4315      	orrs	r5, r2
 8000886:	07d9      	lsls	r1, r3, #31
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	4698      	mov	r8, r3
 800088c:	430d      	orrs	r5, r1
 800088e:	e665      	b.n	800055c <__aeabi_dadd+0xf4>
 8000890:	0018      	movs	r0, r3
 8000892:	3e1f      	subs	r6, #31
 8000894:	40f0      	lsrs	r0, r6
 8000896:	2a20      	cmp	r2, #32
 8000898:	d003      	beq.n	80008a2 <__aeabi_dadd+0x43a>
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	1a8a      	subs	r2, r1, r2
 800089e:	4093      	lsls	r3, r2
 80008a0:	431d      	orrs	r5, r3
 80008a2:	1e69      	subs	r1, r5, #1
 80008a4:	418d      	sbcs	r5, r1
 80008a6:	2300      	movs	r3, #0
 80008a8:	2600      	movs	r6, #0
 80008aa:	4698      	mov	r8, r3
 80008ac:	4305      	orrs	r5, r0
 80008ae:	e6f7      	b.n	80006a0 <__aeabi_dadd+0x238>
 80008b0:	0011      	movs	r1, r2
 80008b2:	4665      	mov	r5, ip
 80008b4:	3920      	subs	r1, #32
 80008b6:	40cd      	lsrs	r5, r1
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d004      	beq.n	80008c6 <__aeabi_dadd+0x45e>
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	4661      	mov	r1, ip
 80008c0:	1a82      	subs	r2, r0, r2
 80008c2:	4091      	lsls	r1, r2
 80008c4:	430f      	orrs	r7, r1
 80008c6:	0039      	movs	r1, r7
 80008c8:	1e4f      	subs	r7, r1, #1
 80008ca:	41b9      	sbcs	r1, r7
 80008cc:	4329      	orrs	r1, r5
 80008ce:	e60f      	b.n	80004f0 <__aeabi_dadd+0x88>
 80008d0:	464a      	mov	r2, r9
 80008d2:	4313      	orrs	r3, r2
 80008d4:	001d      	movs	r5, r3
 80008d6:	1e6b      	subs	r3, r5, #1
 80008d8:	419d      	sbcs	r5, r3
 80008da:	1b7d      	subs	r5, r7, r5
 80008dc:	42af      	cmp	r7, r5
 80008de:	419b      	sbcs	r3, r3
 80008e0:	4662      	mov	r2, ip
 80008e2:	425b      	negs	r3, r3
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4698      	mov	r8, r3
 80008e8:	4654      	mov	r4, sl
 80008ea:	000e      	movs	r6, r1
 80008ec:	e607      	b.n	80004fe <__aeabi_dadd+0x96>
 80008ee:	4648      	mov	r0, r9
 80008f0:	4318      	orrs	r0, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x48e>
 80008f4:	e0b3      	b.n	8000a5e <__aeabi_dadd+0x5f6>
 80008f6:	1e50      	subs	r0, r2, #1
 80008f8:	2a01      	cmp	r2, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x496>
 80008fc:	e10d      	b.n	8000b1a <__aeabi_dadd+0x6b2>
 80008fe:	4d8d      	ldr	r5, [pc, #564]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000900:	42aa      	cmp	r2, r5
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x49e>
 8000904:	e0a5      	b.n	8000a52 <__aeabi_dadd+0x5ea>
 8000906:	0002      	movs	r2, r0
 8000908:	e710      	b.n	800072c <__aeabi_dadd+0x2c4>
 800090a:	0032      	movs	r2, r6
 800090c:	2300      	movs	r3, #0
 800090e:	2100      	movs	r1, #0
 8000910:	e644      	b.n	800059c <__aeabi_dadd+0x134>
 8000912:	2120      	movs	r1, #32
 8000914:	0038      	movs	r0, r7
 8000916:	1a89      	subs	r1, r1, r2
 8000918:	4665      	mov	r5, ip
 800091a:	408f      	lsls	r7, r1
 800091c:	408d      	lsls	r5, r1
 800091e:	40d0      	lsrs	r0, r2
 8000920:	1e79      	subs	r1, r7, #1
 8000922:	418f      	sbcs	r7, r1
 8000924:	4305      	orrs	r5, r0
 8000926:	433d      	orrs	r5, r7
 8000928:	4667      	mov	r7, ip
 800092a:	40d7      	lsrs	r7, r2
 800092c:	19db      	adds	r3, r3, r7
 800092e:	e794      	b.n	800085a <__aeabi_dadd+0x3f2>
 8000930:	4a80      	ldr	r2, [pc, #512]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000932:	4290      	cmp	r0, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4d0>
 8000936:	e0ec      	b.n	8000b12 <__aeabi_dadd+0x6aa>
 8000938:	0039      	movs	r1, r7
 800093a:	4449      	add	r1, r9
 800093c:	4549      	cmp	r1, r9
 800093e:	4192      	sbcs	r2, r2
 8000940:	4463      	add	r3, ip
 8000942:	4252      	negs	r2, r2
 8000944:	189b      	adds	r3, r3, r2
 8000946:	07dd      	lsls	r5, r3, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	4698      	mov	r8, r3
 800094e:	0006      	movs	r6, r0
 8000950:	430d      	orrs	r5, r1
 8000952:	e6a5      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000954:	464a      	mov	r2, r9
 8000956:	1abd      	subs	r5, r7, r2
 8000958:	42af      	cmp	r7, r5
 800095a:	4189      	sbcs	r1, r1
 800095c:	4662      	mov	r2, ip
 800095e:	4249      	negs	r1, r1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	4698      	mov	r8, r3
 8000966:	4654      	mov	r4, sl
 8000968:	e5d1      	b.n	800050e <__aeabi_dadd+0xa6>
 800096a:	076c      	lsls	r4, r5, #29
 800096c:	08f9      	lsrs	r1, r7, #3
 800096e:	4321      	orrs	r1, r4
 8000970:	08eb      	lsrs	r3, r5, #3
 8000972:	0004      	movs	r4, r0
 8000974:	e69d      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000976:	464a      	mov	r2, r9
 8000978:	431a      	orrs	r2, r3
 800097a:	d175      	bne.n	8000a68 <__aeabi_dadd+0x600>
 800097c:	4661      	mov	r1, ip
 800097e:	4339      	orrs	r1, r7
 8000980:	d114      	bne.n	80009ac <__aeabi_dadd+0x544>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	2400      	movs	r4, #0
 8000986:	031b      	lsls	r3, r3, #12
 8000988:	e6bc      	b.n	8000704 <__aeabi_dadd+0x29c>
 800098a:	464a      	mov	r2, r9
 800098c:	1bd5      	subs	r5, r2, r7
 800098e:	45a9      	cmp	r9, r5
 8000990:	4189      	sbcs	r1, r1
 8000992:	4662      	mov	r2, ip
 8000994:	4249      	negs	r1, r1
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	1a5b      	subs	r3, r3, r1
 800099a:	4698      	mov	r8, r3
 800099c:	2601      	movs	r6, #1
 800099e:	e5ae      	b.n	80004fe <__aeabi_dadd+0x96>
 80009a0:	464a      	mov	r2, r9
 80009a2:	08d1      	lsrs	r1, r2, #3
 80009a4:	075a      	lsls	r2, r3, #29
 80009a6:	4311      	orrs	r1, r2
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	e6a7      	b.n	80006fc <__aeabi_dadd+0x294>
 80009ac:	4663      	mov	r3, ip
 80009ae:	08f9      	lsrs	r1, r7, #3
 80009b0:	075a      	lsls	r2, r3, #29
 80009b2:	4654      	mov	r4, sl
 80009b4:	4311      	orrs	r1, r2
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	e6a0      	b.n	80006fc <__aeabi_dadd+0x294>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4313      	orrs	r3, r2
 80009be:	001d      	movs	r5, r3
 80009c0:	1e6b      	subs	r3, r5, #1
 80009c2:	419d      	sbcs	r5, r3
 80009c4:	e6c7      	b.n	8000756 <__aeabi_dadd+0x2ee>
 80009c6:	0014      	movs	r4, r2
 80009c8:	001e      	movs	r6, r3
 80009ca:	3c20      	subs	r4, #32
 80009cc:	40e6      	lsrs	r6, r4
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d005      	beq.n	80009de <__aeabi_dadd+0x576>
 80009d2:	2440      	movs	r4, #64	; 0x40
 80009d4:	1aa2      	subs	r2, r4, r2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	464a      	mov	r2, r9
 80009da:	431a      	orrs	r2, r3
 80009dc:	4691      	mov	r9, r2
 80009de:	464d      	mov	r5, r9
 80009e0:	1e6b      	subs	r3, r5, #1
 80009e2:	419d      	sbcs	r5, r3
 80009e4:	4335      	orrs	r5, r6
 80009e6:	e778      	b.n	80008da <__aeabi_dadd+0x472>
 80009e8:	464a      	mov	r2, r9
 80009ea:	431a      	orrs	r2, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x588>
 80009ee:	e66b      	b.n	80006c8 <__aeabi_dadd+0x260>
 80009f0:	076b      	lsls	r3, r5, #29
 80009f2:	08f9      	lsrs	r1, r7, #3
 80009f4:	4319      	orrs	r1, r3
 80009f6:	08eb      	lsrs	r3, r5, #3
 80009f8:	e680      	b.n	80006fc <__aeabi_dadd+0x294>
 80009fa:	4661      	mov	r1, ip
 80009fc:	4339      	orrs	r1, r7
 80009fe:	d054      	beq.n	8000aaa <__aeabi_dadd+0x642>
 8000a00:	4663      	mov	r3, ip
 8000a02:	08f9      	lsrs	r1, r7, #3
 8000a04:	075c      	lsls	r4, r3, #29
 8000a06:	4321      	orrs	r1, r4
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	0004      	movs	r4, r0
 8000a0c:	e654      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000a0e:	464a      	mov	r2, r9
 8000a10:	1abd      	subs	r5, r7, r2
 8000a12:	42af      	cmp	r7, r5
 8000a14:	4189      	sbcs	r1, r1
 8000a16:	4662      	mov	r2, ip
 8000a18:	4249      	negs	r1, r1
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	4698      	mov	r8, r3
 8000a20:	0004      	movs	r4, r0
 8000a22:	2601      	movs	r6, #1
 8000a24:	e56b      	b.n	80004fe <__aeabi_dadd+0x96>
 8000a26:	464a      	mov	r2, r9
 8000a28:	1bd5      	subs	r5, r2, r7
 8000a2a:	45a9      	cmp	r9, r5
 8000a2c:	4189      	sbcs	r1, r1
 8000a2e:	4662      	mov	r2, ip
 8000a30:	4249      	negs	r1, r1
 8000a32:	1a9a      	subs	r2, r3, r2
 8000a34:	1a52      	subs	r2, r2, r1
 8000a36:	4690      	mov	r8, r2
 8000a38:	0212      	lsls	r2, r2, #8
 8000a3a:	d532      	bpl.n	8000aa2 <__aeabi_dadd+0x63a>
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1abd      	subs	r5, r7, r2
 8000a40:	42af      	cmp	r7, r5
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	4662      	mov	r2, ip
 8000a46:	4249      	negs	r1, r1
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	0004      	movs	r4, r0
 8000a50:	e584      	b.n	800055c <__aeabi_dadd+0xf4>
 8000a52:	4663      	mov	r3, ip
 8000a54:	08f9      	lsrs	r1, r7, #3
 8000a56:	075a      	lsls	r2, r3, #29
 8000a58:	4311      	orrs	r1, r2
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	e64e      	b.n	80006fc <__aeabi_dadd+0x294>
 8000a5e:	08f9      	lsrs	r1, r7, #3
 8000a60:	0768      	lsls	r0, r5, #29
 8000a62:	4301      	orrs	r1, r0
 8000a64:	08eb      	lsrs	r3, r5, #3
 8000a66:	e624      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	433a      	orrs	r2, r7
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x608>
 8000a6e:	e698      	b.n	80007a2 <__aeabi_dadd+0x33a>
 8000a70:	464a      	mov	r2, r9
 8000a72:	08d1      	lsrs	r1, r2, #3
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	4311      	orrs	r1, r2
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	031b      	lsls	r3, r3, #12
 8000a7e:	421a      	tst	r2, r3
 8000a80:	d008      	beq.n	8000a94 <__aeabi_dadd+0x62c>
 8000a82:	4660      	mov	r0, ip
 8000a84:	08c5      	lsrs	r5, r0, #3
 8000a86:	421d      	tst	r5, r3
 8000a88:	d104      	bne.n	8000a94 <__aeabi_dadd+0x62c>
 8000a8a:	4654      	mov	r4, sl
 8000a8c:	002a      	movs	r2, r5
 8000a8e:	08f9      	lsrs	r1, r7, #3
 8000a90:	0743      	lsls	r3, r0, #29
 8000a92:	4319      	orrs	r1, r3
 8000a94:	0f4b      	lsrs	r3, r1, #29
 8000a96:	00c9      	lsls	r1, r1, #3
 8000a98:	075b      	lsls	r3, r3, #29
 8000a9a:	08c9      	lsrs	r1, r1, #3
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	e62c      	b.n	80006fc <__aeabi_dadd+0x294>
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	4329      	orrs	r1, r5
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x642>
 8000aa8:	e5fa      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	000a      	movs	r2, r1
 8000aae:	2400      	movs	r4, #0
 8000ab0:	e602      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000ab2:	076b      	lsls	r3, r5, #29
 8000ab4:	08f9      	lsrs	r1, r7, #3
 8000ab6:	4319      	orrs	r1, r3
 8000ab8:	08eb      	lsrs	r3, r5, #3
 8000aba:	e5fd      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000abc:	4663      	mov	r3, ip
 8000abe:	08f9      	lsrs	r1, r7, #3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4319      	orrs	r1, r3
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e617      	b.n	80006fc <__aeabi_dadd+0x294>
 8000acc:	003d      	movs	r5, r7
 8000ace:	444d      	add	r5, r9
 8000ad0:	4463      	add	r3, ip
 8000ad2:	454d      	cmp	r5, r9
 8000ad4:	4189      	sbcs	r1, r1
 8000ad6:	4698      	mov	r8, r3
 8000ad8:	4249      	negs	r1, r1
 8000ada:	4488      	add	r8, r1
 8000adc:	4643      	mov	r3, r8
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_dadd+0x67c>
 8000ae2:	e5dd      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000ae4:	4642      	mov	r2, r8
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <__aeabi_dadd+0x6d0>)
 8000ae8:	2601      	movs	r6, #1
 8000aea:	401a      	ands	r2, r3
 8000aec:	4690      	mov	r8, r2
 8000aee:	e5d7      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000af0:	0010      	movs	r0, r2
 8000af2:	001e      	movs	r6, r3
 8000af4:	3820      	subs	r0, #32
 8000af6:	40c6      	lsrs	r6, r0
 8000af8:	2a20      	cmp	r2, #32
 8000afa:	d005      	beq.n	8000b08 <__aeabi_dadd+0x6a0>
 8000afc:	2040      	movs	r0, #64	; 0x40
 8000afe:	1a82      	subs	r2, r0, r2
 8000b00:	4093      	lsls	r3, r2
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	464d      	mov	r5, r9
 8000b0a:	1e6b      	subs	r3, r5, #1
 8000b0c:	419d      	sbcs	r5, r3
 8000b0e:	4335      	orrs	r5, r6
 8000b10:	e621      	b.n	8000756 <__aeabi_dadd+0x2ee>
 8000b12:	0002      	movs	r2, r0
 8000b14:	2300      	movs	r3, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	e540      	b.n	800059c <__aeabi_dadd+0x134>
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	19d5      	adds	r5, r2, r7
 8000b1e:	42bd      	cmp	r5, r7
 8000b20:	4189      	sbcs	r1, r1
 8000b22:	4463      	add	r3, ip
 8000b24:	4698      	mov	r8, r3
 8000b26:	4249      	negs	r1, r1
 8000b28:	4488      	add	r8, r1
 8000b2a:	e5b3      	b.n	8000694 <__aeabi_dadd+0x22c>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4a01      	ldr	r2, [pc, #4]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000b30:	000b      	movs	r3, r1
 8000b32:	e533      	b.n	800059c <__aeabi_dadd+0x134>
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff

08000b3c <__aeabi_ddiv>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	4657      	mov	r7, sl
 8000b40:	464e      	mov	r6, r9
 8000b42:	4645      	mov	r5, r8
 8000b44:	46de      	mov	lr, fp
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	4681      	mov	r9, r0
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	030c      	lsls	r4, r1, #12
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	4692      	mov	sl, r2
 8000b52:	001f      	movs	r7, r3
 8000b54:	b085      	sub	sp, #20
 8000b56:	0b24      	lsrs	r4, r4, #12
 8000b58:	0d40      	lsrs	r0, r0, #21
 8000b5a:	0fce      	lsrs	r6, r1, #31
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d059      	beq.n	8000c14 <__aeabi_ddiv+0xd8>
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x2c>
 8000b66:	e098      	b.n	8000c9a <__aeabi_ddiv+0x15e>
 8000b68:	0f6b      	lsrs	r3, r5, #29
 8000b6a:	00e4      	lsls	r4, r4, #3
 8000b6c:	431c      	orrs	r4, r3
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4323      	orrs	r3, r4
 8000b74:	4698      	mov	r8, r3
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <__aeabi_ddiv+0x248>)
 8000b78:	00ed      	lsls	r5, r5, #3
 8000b7a:	469b      	mov	fp, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4699      	mov	r9, r3
 8000b80:	4483      	add	fp, r0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	033c      	lsls	r4, r7, #12
 8000b86:	007b      	lsls	r3, r7, #1
 8000b88:	4650      	mov	r0, sl
 8000b8a:	0b24      	lsrs	r4, r4, #12
 8000b8c:	0d5b      	lsrs	r3, r3, #21
 8000b8e:	0fff      	lsrs	r7, r7, #31
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d067      	beq.n	8000c64 <__aeabi_ddiv+0x128>
 8000b94:	4a7a      	ldr	r2, [pc, #488]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d018      	beq.n	8000bcc <__aeabi_ddiv+0x90>
 8000b9a:	497a      	ldr	r1, [pc, #488]	; (8000d84 <__aeabi_ddiv+0x248>)
 8000b9c:	0f42      	lsrs	r2, r0, #29
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	00e4      	lsls	r4, r4, #3
 8000ba2:	4659      	mov	r1, fp
 8000ba4:	4314      	orrs	r4, r2
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	4463      	add	r3, ip
 8000baa:	0412      	lsls	r2, r2, #16
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	4314      	orrs	r4, r2
 8000bb0:	469b      	mov	fp, r3
 8000bb2:	00c2      	lsls	r2, r0, #3
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	0033      	movs	r3, r6
 8000bb8:	407b      	eors	r3, r7
 8000bba:	469a      	mov	sl, r3
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d900      	bls.n	8000bc4 <__aeabi_ddiv+0x88>
 8000bc2:	e0ef      	b.n	8000da4 <__aeabi_ddiv+0x268>
 8000bc4:	4970      	ldr	r1, [pc, #448]	; (8000d88 <__aeabi_ddiv+0x24c>)
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	58cb      	ldr	r3, [r1, r3]
 8000bca:	469f      	mov	pc, r3
 8000bcc:	4b6f      	ldr	r3, [pc, #444]	; (8000d8c <__aeabi_ddiv+0x250>)
 8000bce:	4652      	mov	r2, sl
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	4322      	orrs	r2, r4
 8000bd4:	44e3      	add	fp, ip
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_ddiv+0xa0>
 8000bda:	e095      	b.n	8000d08 <__aeabi_ddiv+0x1cc>
 8000bdc:	4649      	mov	r1, r9
 8000bde:	2302      	movs	r3, #2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	4689      	mov	r9, r1
 8000be4:	2400      	movs	r4, #0
 8000be6:	2002      	movs	r0, #2
 8000be8:	e7e5      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000bea:	2300      	movs	r3, #0
 8000bec:	2400      	movs	r4, #0
 8000bee:	2500      	movs	r5, #0
 8000bf0:	4652      	mov	r2, sl
 8000bf2:	051b      	lsls	r3, r3, #20
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	07d2      	lsls	r2, r2, #31
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	b005      	add	sp, #20
 8000c00:	bcf0      	pop	{r4, r5, r6, r7}
 8000c02:	46bb      	mov	fp, r7
 8000c04:	46b2      	mov	sl, r6
 8000c06:	46a9      	mov	r9, r5
 8000c08:	46a0      	mov	r8, r4
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	2500      	movs	r5, #0
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000c12:	e7ed      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000c14:	464b      	mov	r3, r9
 8000c16:	4323      	orrs	r3, r4
 8000c18:	4698      	mov	r8, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0xe2>
 8000c1c:	e089      	b.n	8000d32 <__aeabi_ddiv+0x1f6>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_ddiv+0xe8>
 8000c22:	e1e0      	b.n	8000fe6 <__aeabi_ddiv+0x4aa>
 8000c24:	0020      	movs	r0, r4
 8000c26:	f001 fa19 	bl	800205c <__clzsi2>
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	390b      	subs	r1, #11
 8000c30:	231d      	movs	r3, #29
 8000c32:	1a5b      	subs	r3, r3, r1
 8000c34:	4649      	mov	r1, r9
 8000c36:	0010      	movs	r0, r2
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	3808      	subs	r0, #8
 8000c3c:	4084      	lsls	r4, r0
 8000c3e:	000b      	movs	r3, r1
 8000c40:	464d      	mov	r5, r9
 8000c42:	4323      	orrs	r3, r4
 8000c44:	4698      	mov	r8, r3
 8000c46:	4085      	lsls	r5, r0
 8000c48:	4851      	ldr	r0, [pc, #324]	; (8000d90 <__aeabi_ddiv+0x254>)
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	1a83      	subs	r3, r0, r2
 8000c4e:	469b      	mov	fp, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	4699      	mov	r9, r3
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	007b      	lsls	r3, r7, #1
 8000c58:	4650      	mov	r0, sl
 8000c5a:	0b24      	lsrs	r4, r4, #12
 8000c5c:	0d5b      	lsrs	r3, r3, #21
 8000c5e:	0fff      	lsrs	r7, r7, #31
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d197      	bne.n	8000b94 <__aeabi_ddiv+0x58>
 8000c64:	4652      	mov	r2, sl
 8000c66:	4322      	orrs	r2, r4
 8000c68:	d055      	beq.n	8000d16 <__aeabi_ddiv+0x1da>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x134>
 8000c6e:	e1ca      	b.n	8001006 <__aeabi_ddiv+0x4ca>
 8000c70:	0020      	movs	r0, r4
 8000c72:	f001 f9f3 	bl	800205c <__clzsi2>
 8000c76:	0002      	movs	r2, r0
 8000c78:	3a0b      	subs	r2, #11
 8000c7a:	231d      	movs	r3, #29
 8000c7c:	0001      	movs	r1, r0
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	4652      	mov	r2, sl
 8000c82:	3908      	subs	r1, #8
 8000c84:	40da      	lsrs	r2, r3
 8000c86:	408c      	lsls	r4, r1
 8000c88:	4314      	orrs	r4, r2
 8000c8a:	4652      	mov	r2, sl
 8000c8c:	408a      	lsls	r2, r1
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <__aeabi_ddiv+0x258>)
 8000c90:	4458      	add	r0, fp
 8000c92:	469b      	mov	fp, r3
 8000c94:	4483      	add	fp, r0
 8000c96:	2000      	movs	r0, #0
 8000c98:	e78d      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	d140      	bne.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	3b06      	subs	r3, #6
 8000ca8:	2500      	movs	r5, #0
 8000caa:	4683      	mov	fp, r0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	e769      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000cb0:	46b2      	mov	sl, r6
 8000cb2:	9b00      	ldr	r3, [sp, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d0a9      	beq.n	8000c0c <__aeabi_ddiv+0xd0>
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d100      	bne.n	8000cbe <__aeabi_ddiv+0x182>
 8000cbc:	e211      	b.n	80010e2 <__aeabi_ddiv+0x5a6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d093      	beq.n	8000bea <__aeabi_ddiv+0xae>
 8000cc2:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <__aeabi_ddiv+0x25c>)
 8000cc4:	445a      	add	r2, fp
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_ddiv+0x190>
 8000cca:	e13c      	b.n	8000f46 <__aeabi_ddiv+0x40a>
 8000ccc:	076b      	lsls	r3, r5, #29
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_ddiv+0x196>
 8000cd0:	e1a7      	b.n	8001022 <__aeabi_ddiv+0x4e6>
 8000cd2:	08ed      	lsrs	r5, r5, #3
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	01db      	lsls	r3, r3, #7
 8000cd8:	d506      	bpl.n	8000ce8 <__aeabi_ddiv+0x1ac>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <__aeabi_ddiv+0x260>)
 8000cde:	401a      	ands	r2, r3
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	445a      	add	r2, fp
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <__aeabi_ddiv+0x264>)
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dc8e      	bgt.n	8000c0c <__aeabi_ddiv+0xd0>
 8000cee:	4643      	mov	r3, r8
 8000cf0:	0552      	lsls	r2, r2, #21
 8000cf2:	0758      	lsls	r0, r3, #29
 8000cf4:	025c      	lsls	r4, r3, #9
 8000cf6:	4305      	orrs	r5, r0
 8000cf8:	0b24      	lsrs	r4, r4, #12
 8000cfa:	0d53      	lsrs	r3, r2, #21
 8000cfc:	e778      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000cfe:	46ba      	mov	sl, r7
 8000d00:	46a0      	mov	r8, r4
 8000d02:	0015      	movs	r5, r2
 8000d04:	9000      	str	r0, [sp, #0]
 8000d06:	e7d4      	b.n	8000cb2 <__aeabi_ddiv+0x176>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4691      	mov	r9, r2
 8000d10:	2003      	movs	r0, #3
 8000d12:	4652      	mov	r2, sl
 8000d14:	e74f      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000d16:	4649      	mov	r1, r9
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4319      	orrs	r1, r3
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	2400      	movs	r4, #0
 8000d20:	2001      	movs	r0, #1
 8000d22:	e748      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000d24:	230c      	movs	r3, #12
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b09      	subs	r3, #9
 8000d2a:	46a0      	mov	r8, r4
 8000d2c:	4683      	mov	fp, r0
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	e728      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000d32:	2304      	movs	r3, #4
 8000d34:	4699      	mov	r9, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	469b      	mov	fp, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	e720      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2480      	movs	r4, #128	; 0x80
 8000d46:	469a      	mov	sl, r3
 8000d48:	2500      	movs	r5, #0
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d4c:	0324      	lsls	r4, r4, #12
 8000d4e:	e74f      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	4641      	mov	r1, r8
 8000d54:	031b      	lsls	r3, r3, #12
 8000d56:	4219      	tst	r1, r3
 8000d58:	d008      	beq.n	8000d6c <__aeabi_ddiv+0x230>
 8000d5a:	421c      	tst	r4, r3
 8000d5c:	d106      	bne.n	8000d6c <__aeabi_ddiv+0x230>
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	0324      	lsls	r4, r4, #12
 8000d62:	46ba      	mov	sl, r7
 8000d64:	0015      	movs	r5, r2
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d68:	0b24      	lsrs	r4, r4, #12
 8000d6a:	e741      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d6c:	2480      	movs	r4, #128	; 0x80
 8000d6e:	4643      	mov	r3, r8
 8000d70:	0324      	lsls	r4, r4, #12
 8000d72:	431c      	orrs	r4, r3
 8000d74:	0324      	lsls	r4, r4, #12
 8000d76:	46b2      	mov	sl, r6
 8000d78:	4b01      	ldr	r3, [pc, #4]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	e738      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	000007ff 	.word	0x000007ff
 8000d84:	fffffc01 	.word	0xfffffc01
 8000d88:	08009830 	.word	0x08009830
 8000d8c:	fffff801 	.word	0xfffff801
 8000d90:	fffffc0d 	.word	0xfffffc0d
 8000d94:	000003f3 	.word	0x000003f3
 8000d98:	000003ff 	.word	0x000003ff
 8000d9c:	feffffff 	.word	0xfeffffff
 8000da0:	000007fe 	.word	0x000007fe
 8000da4:	4544      	cmp	r4, r8
 8000da6:	d200      	bcs.n	8000daa <__aeabi_ddiv+0x26e>
 8000da8:	e116      	b.n	8000fd8 <__aeabi_ddiv+0x49c>
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x272>
 8000dac:	e111      	b.n	8000fd2 <__aeabi_ddiv+0x496>
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	469c      	mov	ip, r3
 8000db4:	002e      	movs	r6, r5
 8000db6:	4640      	mov	r0, r8
 8000db8:	2500      	movs	r5, #0
 8000dba:	44e3      	add	fp, ip
 8000dbc:	0223      	lsls	r3, r4, #8
 8000dbe:	0e14      	lsrs	r4, r2, #24
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0423      	lsls	r3, r4, #16
 8000dc8:	0c1f      	lsrs	r7, r3, #16
 8000dca:	0212      	lsls	r2, r2, #8
 8000dcc:	4649      	mov	r1, r9
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9701      	str	r7, [sp, #4]
 8000dd2:	f7ff fa1b 	bl	800020c <__aeabi_uidivmod>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	437a      	muls	r2, r7
 8000dda:	040b      	lsls	r3, r1, #16
 8000ddc:	0c31      	lsrs	r1, r6, #16
 8000dde:	4680      	mov	r8, r0
 8000de0:	4319      	orrs	r1, r3
 8000de2:	428a      	cmp	r2, r1
 8000de4:	d90b      	bls.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000de6:	2301      	movs	r3, #1
 8000de8:	425b      	negs	r3, r3
 8000dea:	469c      	mov	ip, r3
 8000dec:	1909      	adds	r1, r1, r4
 8000dee:	44e0      	add	r8, ip
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d804      	bhi.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d902      	bls.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000df8:	1e83      	subs	r3, r0, #2
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	1909      	adds	r1, r1, r4
 8000dfe:	1a88      	subs	r0, r1, r2
 8000e00:	4649      	mov	r1, r9
 8000e02:	f7ff fa03 	bl	800020c <__aeabi_uidivmod>
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	468c      	mov	ip, r1
 8000e0a:	0431      	lsls	r1, r6, #16
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	9a01      	ldr	r2, [sp, #4]
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	4342      	muls	r2, r0
 8000e14:	0003      	movs	r3, r0
 8000e16:	4331      	orrs	r1, r6
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d904      	bls.n	8000e26 <__aeabi_ddiv+0x2ea>
 8000e1c:	1909      	adds	r1, r1, r4
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d800      	bhi.n	8000e26 <__aeabi_ddiv+0x2ea>
 8000e24:	e111      	b.n	800104a <__aeabi_ddiv+0x50e>
 8000e26:	1a89      	subs	r1, r1, r2
 8000e28:	4642      	mov	r2, r8
 8000e2a:	9e00      	ldr	r6, [sp, #0]
 8000e2c:	0412      	lsls	r2, r2, #16
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	0c33      	lsrs	r3, r6, #16
 8000e32:	001f      	movs	r7, r3
 8000e34:	0c10      	lsrs	r0, r2, #16
 8000e36:	4690      	mov	r8, r2
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	0413      	lsls	r3, r2, #16
 8000e3c:	0432      	lsls	r2, r6, #16
 8000e3e:	0c16      	lsrs	r6, r2, #16
 8000e40:	0032      	movs	r2, r6
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	435a      	muls	r2, r3
 8000e46:	9603      	str	r6, [sp, #12]
 8000e48:	437b      	muls	r3, r7
 8000e4a:	4346      	muls	r6, r0
 8000e4c:	4378      	muls	r0, r7
 8000e4e:	0c17      	lsrs	r7, r2, #16
 8000e50:	46bc      	mov	ip, r7
 8000e52:	199b      	adds	r3, r3, r6
 8000e54:	4463      	add	r3, ip
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d903      	bls.n	8000e62 <__aeabi_ddiv+0x326>
 8000e5a:	2680      	movs	r6, #128	; 0x80
 8000e5c:	0276      	lsls	r6, r6, #9
 8000e5e:	46b4      	mov	ip, r6
 8000e60:	4460      	add	r0, ip
 8000e62:	0c1e      	lsrs	r6, r3, #16
 8000e64:	1830      	adds	r0, r6, r0
 8000e66:	0416      	lsls	r6, r2, #16
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c36      	lsrs	r6, r6, #16
 8000e6c:	199e      	adds	r6, r3, r6
 8000e6e:	4281      	cmp	r1, r0
 8000e70:	d200      	bcs.n	8000e74 <__aeabi_ddiv+0x338>
 8000e72:	e09c      	b.n	8000fae <__aeabi_ddiv+0x472>
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x33c>
 8000e76:	e097      	b.n	8000fa8 <__aeabi_ddiv+0x46c>
 8000e78:	1bae      	subs	r6, r5, r6
 8000e7a:	1a09      	subs	r1, r1, r0
 8000e7c:	42b5      	cmp	r5, r6
 8000e7e:	4180      	sbcs	r0, r0
 8000e80:	4240      	negs	r0, r0
 8000e82:	1a08      	subs	r0, r1, r0
 8000e84:	4284      	cmp	r4, r0
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0x34e>
 8000e88:	e111      	b.n	80010ae <__aeabi_ddiv+0x572>
 8000e8a:	4649      	mov	r1, r9
 8000e8c:	f7ff f9be 	bl	800020c <__aeabi_uidivmod>
 8000e90:	9a01      	ldr	r2, [sp, #4]
 8000e92:	040b      	lsls	r3, r1, #16
 8000e94:	4342      	muls	r2, r0
 8000e96:	0c31      	lsrs	r1, r6, #16
 8000e98:	0005      	movs	r5, r0
 8000e9a:	4319      	orrs	r1, r3
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d907      	bls.n	8000eb0 <__aeabi_ddiv+0x374>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3d01      	subs	r5, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d803      	bhi.n	8000eb0 <__aeabi_ddiv+0x374>
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d901      	bls.n	8000eb0 <__aeabi_ddiv+0x374>
 8000eac:	1e85      	subs	r5, r0, #2
 8000eae:	1909      	adds	r1, r1, r4
 8000eb0:	1a88      	subs	r0, r1, r2
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	f7ff f9aa 	bl	800020c <__aeabi_uidivmod>
 8000eb8:	0409      	lsls	r1, r1, #16
 8000eba:	468c      	mov	ip, r1
 8000ebc:	0431      	lsls	r1, r6, #16
 8000ebe:	4666      	mov	r6, ip
 8000ec0:	9a01      	ldr	r2, [sp, #4]
 8000ec2:	0c09      	lsrs	r1, r1, #16
 8000ec4:	4342      	muls	r2, r0
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	4331      	orrs	r1, r6
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	d907      	bls.n	8000ede <__aeabi_ddiv+0x3a2>
 8000ece:	1909      	adds	r1, r1, r4
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	428c      	cmp	r4, r1
 8000ed4:	d803      	bhi.n	8000ede <__aeabi_ddiv+0x3a2>
 8000ed6:	428a      	cmp	r2, r1
 8000ed8:	d901      	bls.n	8000ede <__aeabi_ddiv+0x3a2>
 8000eda:	1e83      	subs	r3, r0, #2
 8000edc:	1909      	adds	r1, r1, r4
 8000ede:	9e03      	ldr	r6, [sp, #12]
 8000ee0:	1a89      	subs	r1, r1, r2
 8000ee2:	0032      	movs	r2, r6
 8000ee4:	042d      	lsls	r5, r5, #16
 8000ee6:	431d      	orrs	r5, r3
 8000ee8:	9f02      	ldr	r7, [sp, #8]
 8000eea:	042b      	lsls	r3, r5, #16
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	435a      	muls	r2, r3
 8000ef0:	437b      	muls	r3, r7
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	0c28      	lsrs	r0, r5, #16
 8000ef6:	4346      	muls	r6, r0
 8000ef8:	0c13      	lsrs	r3, r2, #16
 8000efa:	44b4      	add	ip, r6
 8000efc:	4463      	add	r3, ip
 8000efe:	4378      	muls	r0, r7
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d903      	bls.n	8000f0c <__aeabi_ddiv+0x3d0>
 8000f04:	2680      	movs	r6, #128	; 0x80
 8000f06:	0276      	lsls	r6, r6, #9
 8000f08:	46b4      	mov	ip, r6
 8000f0a:	4460      	add	r0, ip
 8000f0c:	0c1e      	lsrs	r6, r3, #16
 8000f0e:	0412      	lsls	r2, r2, #16
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	0c12      	lsrs	r2, r2, #16
 8000f14:	1830      	adds	r0, r6, r0
 8000f16:	189b      	adds	r3, r3, r2
 8000f18:	4281      	cmp	r1, r0
 8000f1a:	d306      	bcc.n	8000f2a <__aeabi_ddiv+0x3ee>
 8000f1c:	d002      	beq.n	8000f24 <__aeabi_ddiv+0x3e8>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	431d      	orrs	r5, r3
 8000f22:	e6ce      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x3ee>
 8000f28:	e6cb      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	1e6e      	subs	r6, r5, #1
 8000f2e:	42a1      	cmp	r1, r4
 8000f30:	d200      	bcs.n	8000f34 <__aeabi_ddiv+0x3f8>
 8000f32:	e0a4      	b.n	800107e <__aeabi_ddiv+0x542>
 8000f34:	4281      	cmp	r1, r0
 8000f36:	d200      	bcs.n	8000f3a <__aeabi_ddiv+0x3fe>
 8000f38:	e0c9      	b.n	80010ce <__aeabi_ddiv+0x592>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x402>
 8000f3c:	e0d9      	b.n	80010f2 <__aeabi_ddiv+0x5b6>
 8000f3e:	0035      	movs	r5, r6
 8000f40:	e7ed      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 8000f42:	2501      	movs	r5, #1
 8000f44:	426d      	negs	r5, r5
 8000f46:	2101      	movs	r1, #1
 8000f48:	1a89      	subs	r1, r1, r2
 8000f4a:	2938      	cmp	r1, #56	; 0x38
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_ddiv+0x414>
 8000f4e:	e64c      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000f50:	291f      	cmp	r1, #31
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_ddiv+0x41a>
 8000f54:	e07f      	b.n	8001056 <__aeabi_ddiv+0x51a>
 8000f56:	231f      	movs	r3, #31
 8000f58:	425b      	negs	r3, r3
 8000f5a:	1a9a      	subs	r2, r3, r2
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	40d3      	lsrs	r3, r2
 8000f60:	2920      	cmp	r1, #32
 8000f62:	d004      	beq.n	8000f6e <__aeabi_ddiv+0x432>
 8000f64:	4644      	mov	r4, r8
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <__aeabi_ddiv+0x5c0>)
 8000f68:	445a      	add	r2, fp
 8000f6a:	4094      	lsls	r4, r2
 8000f6c:	4325      	orrs	r5, r4
 8000f6e:	1e6a      	subs	r2, r5, #1
 8000f70:	4195      	sbcs	r5, r2
 8000f72:	2207      	movs	r2, #7
 8000f74:	432b      	orrs	r3, r5
 8000f76:	0015      	movs	r5, r2
 8000f78:	2400      	movs	r4, #0
 8000f7a:	401d      	ands	r5, r3
 8000f7c:	421a      	tst	r2, r3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x446>
 8000f80:	e0a1      	b.n	80010c6 <__aeabi_ddiv+0x58a>
 8000f82:	220f      	movs	r2, #15
 8000f84:	2400      	movs	r4, #0
 8000f86:	401a      	ands	r2, r3
 8000f88:	2a04      	cmp	r2, #4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x452>
 8000f8c:	e098      	b.n	80010c0 <__aeabi_ddiv+0x584>
 8000f8e:	1d1a      	adds	r2, r3, #4
 8000f90:	429a      	cmp	r2, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	425b      	negs	r3, r3
 8000f96:	18e4      	adds	r4, r4, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	0222      	lsls	r2, r4, #8
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_ddiv+0x464>
 8000f9e:	e08f      	b.n	80010c0 <__aeabi_ddiv+0x584>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e623      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000fa8:	42b5      	cmp	r5, r6
 8000faa:	d300      	bcc.n	8000fae <__aeabi_ddiv+0x472>
 8000fac:	e764      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	9b00      	ldr	r3, [sp, #0]
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	4465      	add	r5, ip
 8000fb8:	001f      	movs	r7, r3
 8000fba:	429d      	cmp	r5, r3
 8000fbc:	419b      	sbcs	r3, r3
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	191b      	adds	r3, r3, r4
 8000fc2:	18c9      	adds	r1, r1, r3
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d23a      	bcs.n	800103e <__aeabi_ddiv+0x502>
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	d863      	bhi.n	8001094 <__aeabi_ddiv+0x558>
 8000fcc:	d060      	beq.n	8001090 <__aeabi_ddiv+0x554>
 8000fce:	4690      	mov	r8, r2
 8000fd0:	e752      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 8000fd2:	42aa      	cmp	r2, r5
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x49c>
 8000fd6:	e6ea      	b.n	8000dae <__aeabi_ddiv+0x272>
 8000fd8:	4643      	mov	r3, r8
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	0858      	lsrs	r0, r3, #1
 8000fde:	086b      	lsrs	r3, r5, #1
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	07ed      	lsls	r5, r5, #31
 8000fe4:	e6ea      	b.n	8000dbc <__aeabi_ddiv+0x280>
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	f001 f838 	bl	800205c <__clzsi2>
 8000fec:	0001      	movs	r1, r0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	3115      	adds	r1, #21
 8000ff2:	3220      	adds	r2, #32
 8000ff4:	291c      	cmp	r1, #28
 8000ff6:	dc00      	bgt.n	8000ffa <__aeabi_ddiv+0x4be>
 8000ff8:	e61a      	b.n	8000c30 <__aeabi_ddiv+0xf4>
 8000ffa:	464b      	mov	r3, r9
 8000ffc:	3808      	subs	r0, #8
 8000ffe:	4083      	lsls	r3, r0
 8001000:	2500      	movs	r5, #0
 8001002:	4698      	mov	r8, r3
 8001004:	e620      	b.n	8000c48 <__aeabi_ddiv+0x10c>
 8001006:	f001 f829 	bl	800205c <__clzsi2>
 800100a:	0003      	movs	r3, r0
 800100c:	001a      	movs	r2, r3
 800100e:	3215      	adds	r2, #21
 8001010:	3020      	adds	r0, #32
 8001012:	2a1c      	cmp	r2, #28
 8001014:	dc00      	bgt.n	8001018 <__aeabi_ddiv+0x4dc>
 8001016:	e630      	b.n	8000c7a <__aeabi_ddiv+0x13e>
 8001018:	4654      	mov	r4, sl
 800101a:	3b08      	subs	r3, #8
 800101c:	2200      	movs	r2, #0
 800101e:	409c      	lsls	r4, r3
 8001020:	e635      	b.n	8000c8e <__aeabi_ddiv+0x152>
 8001022:	230f      	movs	r3, #15
 8001024:	402b      	ands	r3, r5
 8001026:	2b04      	cmp	r3, #4
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x4f0>
 800102a:	e652      	b.n	8000cd2 <__aeabi_ddiv+0x196>
 800102c:	2305      	movs	r3, #5
 800102e:	425b      	negs	r3, r3
 8001030:	42ab      	cmp	r3, r5
 8001032:	419b      	sbcs	r3, r3
 8001034:	3504      	adds	r5, #4
 8001036:	425b      	negs	r3, r3
 8001038:	08ed      	lsrs	r5, r5, #3
 800103a:	4498      	add	r8, r3
 800103c:	e64a      	b.n	8000cd4 <__aeabi_ddiv+0x198>
 800103e:	428c      	cmp	r4, r1
 8001040:	d1c5      	bne.n	8000fce <__aeabi_ddiv+0x492>
 8001042:	42af      	cmp	r7, r5
 8001044:	d9c0      	bls.n	8000fc8 <__aeabi_ddiv+0x48c>
 8001046:	4690      	mov	r8, r2
 8001048:	e716      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 800104a:	428a      	cmp	r2, r1
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x514>
 800104e:	e6ea      	b.n	8000e26 <__aeabi_ddiv+0x2ea>
 8001050:	1e83      	subs	r3, r0, #2
 8001052:	1909      	adds	r1, r1, r4
 8001054:	e6e7      	b.n	8000e26 <__aeabi_ddiv+0x2ea>
 8001056:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <__aeabi_ddiv+0x5c4>)
 8001058:	0028      	movs	r0, r5
 800105a:	445a      	add	r2, fp
 800105c:	4643      	mov	r3, r8
 800105e:	4095      	lsls	r5, r2
 8001060:	4093      	lsls	r3, r2
 8001062:	40c8      	lsrs	r0, r1
 8001064:	1e6a      	subs	r2, r5, #1
 8001066:	4195      	sbcs	r5, r2
 8001068:	4644      	mov	r4, r8
 800106a:	4303      	orrs	r3, r0
 800106c:	432b      	orrs	r3, r5
 800106e:	40cc      	lsrs	r4, r1
 8001070:	075a      	lsls	r2, r3, #29
 8001072:	d092      	beq.n	8000f9a <__aeabi_ddiv+0x45e>
 8001074:	220f      	movs	r2, #15
 8001076:	401a      	ands	r2, r3
 8001078:	2a04      	cmp	r2, #4
 800107a:	d188      	bne.n	8000f8e <__aeabi_ddiv+0x452>
 800107c:	e78d      	b.n	8000f9a <__aeabi_ddiv+0x45e>
 800107e:	0035      	movs	r5, r6
 8001080:	4281      	cmp	r1, r0
 8001082:	d000      	beq.n	8001086 <__aeabi_ddiv+0x54a>
 8001084:	e74b      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 8001086:	9a00      	ldr	r2, [sp, #0]
 8001088:	4293      	cmp	r3, r2
 800108a:	d000      	beq.n	800108e <__aeabi_ddiv+0x552>
 800108c:	e747      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 800108e:	e618      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8001090:	42ae      	cmp	r6, r5
 8001092:	d99c      	bls.n	8000fce <__aeabi_ddiv+0x492>
 8001094:	2302      	movs	r3, #2
 8001096:	425b      	negs	r3, r3
 8001098:	469c      	mov	ip, r3
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	44e0      	add	r8, ip
 800109e:	469c      	mov	ip, r3
 80010a0:	4465      	add	r5, ip
 80010a2:	429d      	cmp	r5, r3
 80010a4:	419b      	sbcs	r3, r3
 80010a6:	425b      	negs	r3, r3
 80010a8:	191b      	adds	r3, r3, r4
 80010aa:	18c9      	adds	r1, r1, r3
 80010ac:	e6e4      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <__aeabi_ddiv+0x5c8>)
 80010b0:	445a      	add	r2, fp
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	dc00      	bgt.n	80010b8 <__aeabi_ddiv+0x57c>
 80010b6:	e744      	b.n	8000f42 <__aeabi_ddiv+0x406>
 80010b8:	2301      	movs	r3, #1
 80010ba:	2500      	movs	r5, #0
 80010bc:	4498      	add	r8, r3
 80010be:	e609      	b.n	8000cd4 <__aeabi_ddiv+0x198>
 80010c0:	0765      	lsls	r5, r4, #29
 80010c2:	0264      	lsls	r4, r4, #9
 80010c4:	0b24      	lsrs	r4, r4, #12
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	431d      	orrs	r5, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	e590      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 80010ce:	9e00      	ldr	r6, [sp, #0]
 80010d0:	3d02      	subs	r5, #2
 80010d2:	0072      	lsls	r2, r6, #1
 80010d4:	42b2      	cmp	r2, r6
 80010d6:	41bf      	sbcs	r7, r7
 80010d8:	427f      	negs	r7, r7
 80010da:	193c      	adds	r4, r7, r4
 80010dc:	1909      	adds	r1, r1, r4
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	e7ce      	b.n	8001080 <__aeabi_ddiv+0x544>
 80010e2:	2480      	movs	r4, #128	; 0x80
 80010e4:	4643      	mov	r3, r8
 80010e6:	0324      	lsls	r4, r4, #12
 80010e8:	431c      	orrs	r4, r3
 80010ea:	0324      	lsls	r4, r4, #12
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <__aeabi_ddiv+0x5cc>)
 80010ee:	0b24      	lsrs	r4, r4, #12
 80010f0:	e57e      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 80010f2:	9a00      	ldr	r2, [sp, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3ea      	bcc.n	80010ce <__aeabi_ddiv+0x592>
 80010f8:	0035      	movs	r5, r6
 80010fa:	e7c4      	b.n	8001086 <__aeabi_ddiv+0x54a>
 80010fc:	0000043e 	.word	0x0000043e
 8001100:	0000041e 	.word	0x0000041e
 8001104:	000003ff 	.word	0x000003ff
 8001108:	000007ff 	.word	0x000007ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	4694      	mov	ip, r2
 8001116:	4691      	mov	r9, r2
 8001118:	031a      	lsls	r2, r3, #12
 800111a:	0b12      	lsrs	r2, r2, #12
 800111c:	4d18      	ldr	r5, [pc, #96]	; (8001180 <__eqdf2+0x74>)
 800111e:	b5c0      	push	{r6, r7, lr}
 8001120:	004c      	lsls	r4, r1, #1
 8001122:	030f      	lsls	r7, r1, #12
 8001124:	4692      	mov	sl, r2
 8001126:	005a      	lsls	r2, r3, #1
 8001128:	0006      	movs	r6, r0
 800112a:	4680      	mov	r8, r0
 800112c:	0b3f      	lsrs	r7, r7, #12
 800112e:	2001      	movs	r0, #1
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	0d52      	lsrs	r2, r2, #21
 8001136:	0fdb      	lsrs	r3, r3, #31
 8001138:	42ac      	cmp	r4, r5
 800113a:	d00a      	beq.n	8001152 <__eqdf2+0x46>
 800113c:	42aa      	cmp	r2, r5
 800113e:	d003      	beq.n	8001148 <__eqdf2+0x3c>
 8001140:	4294      	cmp	r4, r2
 8001142:	d101      	bne.n	8001148 <__eqdf2+0x3c>
 8001144:	4557      	cmp	r7, sl
 8001146:	d00d      	beq.n	8001164 <__eqdf2+0x58>
 8001148:	bce0      	pop	{r5, r6, r7}
 800114a:	46ba      	mov	sl, r7
 800114c:	46b1      	mov	r9, r6
 800114e:	46a8      	mov	r8, r5
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001152:	003d      	movs	r5, r7
 8001154:	4335      	orrs	r5, r6
 8001156:	d1f7      	bne.n	8001148 <__eqdf2+0x3c>
 8001158:	42a2      	cmp	r2, r4
 800115a:	d1f5      	bne.n	8001148 <__eqdf2+0x3c>
 800115c:	4652      	mov	r2, sl
 800115e:	4665      	mov	r5, ip
 8001160:	432a      	orrs	r2, r5
 8001162:	d1f1      	bne.n	8001148 <__eqdf2+0x3c>
 8001164:	2001      	movs	r0, #1
 8001166:	45c8      	cmp	r8, r9
 8001168:	d1ee      	bne.n	8001148 <__eqdf2+0x3c>
 800116a:	4299      	cmp	r1, r3
 800116c:	d006      	beq.n	800117c <__eqdf2+0x70>
 800116e:	2c00      	cmp	r4, #0
 8001170:	d1ea      	bne.n	8001148 <__eqdf2+0x3c>
 8001172:	433e      	orrs	r6, r7
 8001174:	0030      	movs	r0, r6
 8001176:	1e46      	subs	r6, r0, #1
 8001178:	41b0      	sbcs	r0, r6
 800117a:	e7e5      	b.n	8001148 <__eqdf2+0x3c>
 800117c:	2000      	movs	r0, #0
 800117e:	e7e3      	b.n	8001148 <__eqdf2+0x3c>
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	464e      	mov	r6, r9
 8001188:	4645      	mov	r5, r8
 800118a:	4657      	mov	r7, sl
 800118c:	46de      	mov	lr, fp
 800118e:	0004      	movs	r4, r0
 8001190:	0018      	movs	r0, r3
 8001192:	b5e0      	push	{r5, r6, r7, lr}
 8001194:	0016      	movs	r6, r2
 8001196:	031b      	lsls	r3, r3, #12
 8001198:	0b1b      	lsrs	r3, r3, #12
 800119a:	4d32      	ldr	r5, [pc, #200]	; (8001264 <__gedf2+0xe0>)
 800119c:	030f      	lsls	r7, r1, #12
 800119e:	004a      	lsls	r2, r1, #1
 80011a0:	4699      	mov	r9, r3
 80011a2:	0043      	lsls	r3, r0, #1
 80011a4:	46a4      	mov	ip, r4
 80011a6:	46b0      	mov	r8, r6
 80011a8:	0b3f      	lsrs	r7, r7, #12
 80011aa:	0d52      	lsrs	r2, r2, #21
 80011ac:	0fc9      	lsrs	r1, r1, #31
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	0fc0      	lsrs	r0, r0, #31
 80011b2:	42aa      	cmp	r2, r5
 80011b4:	d029      	beq.n	800120a <__gedf2+0x86>
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	d018      	beq.n	80011ec <__gedf2+0x68>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d12a      	bne.n	8001214 <__gedf2+0x90>
 80011be:	433c      	orrs	r4, r7
 80011c0:	46a3      	mov	fp, r4
 80011c2:	4265      	negs	r5, r4
 80011c4:	4165      	adcs	r5, r4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <__gedf2+0x4c>
 80011ca:	464c      	mov	r4, r9
 80011cc:	4326      	orrs	r6, r4
 80011ce:	d027      	beq.n	8001220 <__gedf2+0x9c>
 80011d0:	2d00      	cmp	r5, #0
 80011d2:	d115      	bne.n	8001200 <__gedf2+0x7c>
 80011d4:	4281      	cmp	r1, r0
 80011d6:	d028      	beq.n	800122a <__gedf2+0xa6>
 80011d8:	2002      	movs	r0, #2
 80011da:	3901      	subs	r1, #1
 80011dc:	4008      	ands	r0, r1
 80011de:	3801      	subs	r0, #1
 80011e0:	bcf0      	pop	{r4, r5, r6, r7}
 80011e2:	46bb      	mov	fp, r7
 80011e4:	46b2      	mov	sl, r6
 80011e6:	46a9      	mov	r9, r5
 80011e8:	46a0      	mov	r8, r4
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ec:	464d      	mov	r5, r9
 80011ee:	432e      	orrs	r6, r5
 80011f0:	d12f      	bne.n	8001252 <__gedf2+0xce>
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d1ee      	bne.n	80011d4 <__gedf2+0x50>
 80011f6:	433c      	orrs	r4, r7
 80011f8:	4265      	negs	r5, r4
 80011fa:	4165      	adcs	r5, r4
 80011fc:	2d00      	cmp	r5, #0
 80011fe:	d0e9      	beq.n	80011d4 <__gedf2+0x50>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1ed      	bne.n	80011e0 <__gedf2+0x5c>
 8001204:	2001      	movs	r0, #1
 8001206:	4240      	negs	r0, r0
 8001208:	e7ea      	b.n	80011e0 <__gedf2+0x5c>
 800120a:	003d      	movs	r5, r7
 800120c:	4325      	orrs	r5, r4
 800120e:	d120      	bne.n	8001252 <__gedf2+0xce>
 8001210:	4293      	cmp	r3, r2
 8001212:	d0eb      	beq.n	80011ec <__gedf2+0x68>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1dd      	bne.n	80011d4 <__gedf2+0x50>
 8001218:	464c      	mov	r4, r9
 800121a:	4326      	orrs	r6, r4
 800121c:	d1da      	bne.n	80011d4 <__gedf2+0x50>
 800121e:	e7db      	b.n	80011d8 <__gedf2+0x54>
 8001220:	465b      	mov	r3, fp
 8001222:	2000      	movs	r0, #0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0db      	beq.n	80011e0 <__gedf2+0x5c>
 8001228:	e7d6      	b.n	80011d8 <__gedf2+0x54>
 800122a:	429a      	cmp	r2, r3
 800122c:	dc0a      	bgt.n	8001244 <__gedf2+0xc0>
 800122e:	dbe7      	blt.n	8001200 <__gedf2+0x7c>
 8001230:	454f      	cmp	r7, r9
 8001232:	d8d1      	bhi.n	80011d8 <__gedf2+0x54>
 8001234:	d010      	beq.n	8001258 <__gedf2+0xd4>
 8001236:	2000      	movs	r0, #0
 8001238:	454f      	cmp	r7, r9
 800123a:	d2d1      	bcs.n	80011e0 <__gedf2+0x5c>
 800123c:	2900      	cmp	r1, #0
 800123e:	d0e1      	beq.n	8001204 <__gedf2+0x80>
 8001240:	0008      	movs	r0, r1
 8001242:	e7cd      	b.n	80011e0 <__gedf2+0x5c>
 8001244:	4243      	negs	r3, r0
 8001246:	4158      	adcs	r0, r3
 8001248:	2302      	movs	r3, #2
 800124a:	4240      	negs	r0, r0
 800124c:	4018      	ands	r0, r3
 800124e:	3801      	subs	r0, #1
 8001250:	e7c6      	b.n	80011e0 <__gedf2+0x5c>
 8001252:	2002      	movs	r0, #2
 8001254:	4240      	negs	r0, r0
 8001256:	e7c3      	b.n	80011e0 <__gedf2+0x5c>
 8001258:	45c4      	cmp	ip, r8
 800125a:	d8bd      	bhi.n	80011d8 <__gedf2+0x54>
 800125c:	2000      	movs	r0, #0
 800125e:	45c4      	cmp	ip, r8
 8001260:	d2be      	bcs.n	80011e0 <__gedf2+0x5c>
 8001262:	e7eb      	b.n	800123c <__gedf2+0xb8>
 8001264:	000007ff 	.word	0x000007ff

08001268 <__ledf2>:
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	4657      	mov	r7, sl
 8001270:	46de      	mov	lr, fp
 8001272:	0004      	movs	r4, r0
 8001274:	0018      	movs	r0, r3
 8001276:	b5e0      	push	{r5, r6, r7, lr}
 8001278:	0016      	movs	r6, r2
 800127a:	031b      	lsls	r3, r3, #12
 800127c:	0b1b      	lsrs	r3, r3, #12
 800127e:	4d31      	ldr	r5, [pc, #196]	; (8001344 <__ledf2+0xdc>)
 8001280:	030f      	lsls	r7, r1, #12
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	0043      	lsls	r3, r0, #1
 8001288:	46a4      	mov	ip, r4
 800128a:	46b0      	mov	r8, r6
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d52      	lsrs	r2, r2, #21
 8001290:	0fc9      	lsrs	r1, r1, #31
 8001292:	0d5b      	lsrs	r3, r3, #21
 8001294:	0fc0      	lsrs	r0, r0, #31
 8001296:	42aa      	cmp	r2, r5
 8001298:	d011      	beq.n	80012be <__ledf2+0x56>
 800129a:	42ab      	cmp	r3, r5
 800129c:	d014      	beq.n	80012c8 <__ledf2+0x60>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d12f      	bne.n	8001302 <__ledf2+0x9a>
 80012a2:	433c      	orrs	r4, r7
 80012a4:	46a3      	mov	fp, r4
 80012a6:	4265      	negs	r5, r4
 80012a8:	4165      	adcs	r5, r4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d114      	bne.n	80012d8 <__ledf2+0x70>
 80012ae:	464c      	mov	r4, r9
 80012b0:	4326      	orrs	r6, r4
 80012b2:	d111      	bne.n	80012d8 <__ledf2+0x70>
 80012b4:	465b      	mov	r3, fp
 80012b6:	2000      	movs	r0, #0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <__ledf2+0x84>
 80012bc:	e010      	b.n	80012e0 <__ledf2+0x78>
 80012be:	003d      	movs	r5, r7
 80012c0:	4325      	orrs	r5, r4
 80012c2:	d112      	bne.n	80012ea <__ledf2+0x82>
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d11c      	bne.n	8001302 <__ledf2+0x9a>
 80012c8:	464d      	mov	r5, r9
 80012ca:	432e      	orrs	r6, r5
 80012cc:	d10d      	bne.n	80012ea <__ledf2+0x82>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d104      	bne.n	80012dc <__ledf2+0x74>
 80012d2:	433c      	orrs	r4, r7
 80012d4:	4265      	negs	r5, r4
 80012d6:	4165      	adcs	r5, r4
 80012d8:	2d00      	cmp	r5, #0
 80012da:	d10d      	bne.n	80012f8 <__ledf2+0x90>
 80012dc:	4281      	cmp	r1, r0
 80012de:	d016      	beq.n	800130e <__ledf2+0xa6>
 80012e0:	2002      	movs	r0, #2
 80012e2:	3901      	subs	r1, #1
 80012e4:	4008      	ands	r0, r1
 80012e6:	3801      	subs	r0, #1
 80012e8:	e000      	b.n	80012ec <__ledf2+0x84>
 80012ea:	2002      	movs	r0, #2
 80012ec:	bcf0      	pop	{r4, r5, r6, r7}
 80012ee:	46bb      	mov	fp, r7
 80012f0:	46b2      	mov	sl, r6
 80012f2:	46a9      	mov	r9, r5
 80012f4:	46a0      	mov	r8, r4
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d1f7      	bne.n	80012ec <__ledf2+0x84>
 80012fc:	2001      	movs	r0, #1
 80012fe:	4240      	negs	r0, r0
 8001300:	e7f4      	b.n	80012ec <__ledf2+0x84>
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ea      	bne.n	80012dc <__ledf2+0x74>
 8001306:	464c      	mov	r4, r9
 8001308:	4326      	orrs	r6, r4
 800130a:	d1e7      	bne.n	80012dc <__ledf2+0x74>
 800130c:	e7e8      	b.n	80012e0 <__ledf2+0x78>
 800130e:	429a      	cmp	r2, r3
 8001310:	dd06      	ble.n	8001320 <__ledf2+0xb8>
 8001312:	4243      	negs	r3, r0
 8001314:	4158      	adcs	r0, r3
 8001316:	2302      	movs	r3, #2
 8001318:	4240      	negs	r0, r0
 800131a:	4018      	ands	r0, r3
 800131c:	3801      	subs	r0, #1
 800131e:	e7e5      	b.n	80012ec <__ledf2+0x84>
 8001320:	429a      	cmp	r2, r3
 8001322:	dbe9      	blt.n	80012f8 <__ledf2+0x90>
 8001324:	454f      	cmp	r7, r9
 8001326:	d8db      	bhi.n	80012e0 <__ledf2+0x78>
 8001328:	d006      	beq.n	8001338 <__ledf2+0xd0>
 800132a:	2000      	movs	r0, #0
 800132c:	454f      	cmp	r7, r9
 800132e:	d2dd      	bcs.n	80012ec <__ledf2+0x84>
 8001330:	2900      	cmp	r1, #0
 8001332:	d0e3      	beq.n	80012fc <__ledf2+0x94>
 8001334:	0008      	movs	r0, r1
 8001336:	e7d9      	b.n	80012ec <__ledf2+0x84>
 8001338:	45c4      	cmp	ip, r8
 800133a:	d8d1      	bhi.n	80012e0 <__ledf2+0x78>
 800133c:	2000      	movs	r0, #0
 800133e:	45c4      	cmp	ip, r8
 8001340:	d2d4      	bcs.n	80012ec <__ledf2+0x84>
 8001342:	e7f5      	b.n	8001330 <__ledf2+0xc8>
 8001344:	000007ff 	.word	0x000007ff

08001348 <__aeabi_dmul>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	4657      	mov	r7, sl
 800134c:	464e      	mov	r6, r9
 800134e:	4645      	mov	r5, r8
 8001350:	46de      	mov	lr, fp
 8001352:	b5e0      	push	{r5, r6, r7, lr}
 8001354:	4698      	mov	r8, r3
 8001356:	030c      	lsls	r4, r1, #12
 8001358:	004b      	lsls	r3, r1, #1
 800135a:	0006      	movs	r6, r0
 800135c:	4692      	mov	sl, r2
 800135e:	b087      	sub	sp, #28
 8001360:	0b24      	lsrs	r4, r4, #12
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fcf      	lsrs	r7, r1, #31
 8001366:	2b00      	cmp	r3, #0
 8001368:	d06c      	beq.n	8001444 <__aeabi_dmul+0xfc>
 800136a:	4add      	ldr	r2, [pc, #884]	; (80016e0 <__aeabi_dmul+0x398>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d100      	bne.n	8001372 <__aeabi_dmul+0x2a>
 8001370:	e086      	b.n	8001480 <__aeabi_dmul+0x138>
 8001372:	0f42      	lsrs	r2, r0, #29
 8001374:	00e4      	lsls	r4, r4, #3
 8001376:	4314      	orrs	r4, r2
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	0412      	lsls	r2, r2, #16
 800137c:	4314      	orrs	r4, r2
 800137e:	4ad9      	ldr	r2, [pc, #868]	; (80016e4 <__aeabi_dmul+0x39c>)
 8001380:	00c5      	lsls	r5, r0, #3
 8001382:	4694      	mov	ip, r2
 8001384:	4463      	add	r3, ip
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2300      	movs	r3, #0
 800138a:	4699      	mov	r9, r3
 800138c:	469b      	mov	fp, r3
 800138e:	4643      	mov	r3, r8
 8001390:	4642      	mov	r2, r8
 8001392:	031e      	lsls	r6, r3, #12
 8001394:	0fd2      	lsrs	r2, r2, #31
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4650      	mov	r0, sl
 800139a:	4690      	mov	r8, r2
 800139c:	0b36      	lsrs	r6, r6, #12
 800139e:	0d5b      	lsrs	r3, r3, #21
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0x5c>
 80013a2:	e078      	b.n	8001496 <__aeabi_dmul+0x14e>
 80013a4:	4ace      	ldr	r2, [pc, #824]	; (80016e0 <__aeabi_dmul+0x398>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01d      	beq.n	80013e6 <__aeabi_dmul+0x9e>
 80013aa:	49ce      	ldr	r1, [pc, #824]	; (80016e4 <__aeabi_dmul+0x39c>)
 80013ac:	0f42      	lsrs	r2, r0, #29
 80013ae:	468c      	mov	ip, r1
 80013b0:	9900      	ldr	r1, [sp, #0]
 80013b2:	4463      	add	r3, ip
 80013b4:	00f6      	lsls	r6, r6, #3
 80013b6:	468c      	mov	ip, r1
 80013b8:	4316      	orrs	r6, r2
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	449c      	add	ip, r3
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	4663      	mov	r3, ip
 80013c2:	4316      	orrs	r6, r2
 80013c4:	00c2      	lsls	r2, r0, #3
 80013c6:	2000      	movs	r0, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	9900      	ldr	r1, [sp, #0]
 80013cc:	4643      	mov	r3, r8
 80013ce:	3101      	adds	r1, #1
 80013d0:	468c      	mov	ip, r1
 80013d2:	4649      	mov	r1, r9
 80013d4:	407b      	eors	r3, r7
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	290f      	cmp	r1, #15
 80013da:	d900      	bls.n	80013de <__aeabi_dmul+0x96>
 80013dc:	e07e      	b.n	80014dc <__aeabi_dmul+0x194>
 80013de:	4bc2      	ldr	r3, [pc, #776]	; (80016e8 <__aeabi_dmul+0x3a0>)
 80013e0:	0089      	lsls	r1, r1, #2
 80013e2:	5859      	ldr	r1, [r3, r1]
 80013e4:	468f      	mov	pc, r1
 80013e6:	4652      	mov	r2, sl
 80013e8:	9b00      	ldr	r3, [sp, #0]
 80013ea:	4332      	orrs	r2, r6
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dmul+0xa8>
 80013ee:	e156      	b.n	800169e <__aeabi_dmul+0x356>
 80013f0:	49bb      	ldr	r1, [pc, #748]	; (80016e0 <__aeabi_dmul+0x398>)
 80013f2:	2600      	movs	r6, #0
 80013f4:	468c      	mov	ip, r1
 80013f6:	4463      	add	r3, ip
 80013f8:	4649      	mov	r1, r9
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	4319      	orrs	r1, r3
 8001400:	4689      	mov	r9, r1
 8001402:	2002      	movs	r0, #2
 8001404:	e7e1      	b.n	80013ca <__aeabi_dmul+0x82>
 8001406:	4643      	mov	r3, r8
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	0034      	movs	r4, r6
 800140c:	0015      	movs	r5, r2
 800140e:	4683      	mov	fp, r0
 8001410:	465b      	mov	r3, fp
 8001412:	2b02      	cmp	r3, #2
 8001414:	d05e      	beq.n	80014d4 <__aeabi_dmul+0x18c>
 8001416:	2b03      	cmp	r3, #3
 8001418:	d100      	bne.n	800141c <__aeabi_dmul+0xd4>
 800141a:	e1f3      	b.n	8001804 <__aeabi_dmul+0x4bc>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d000      	beq.n	8001422 <__aeabi_dmul+0xda>
 8001420:	e118      	b.n	8001654 <__aeabi_dmul+0x30c>
 8001422:	2200      	movs	r2, #0
 8001424:	2400      	movs	r4, #0
 8001426:	2500      	movs	r5, #0
 8001428:	9b01      	ldr	r3, [sp, #4]
 800142a:	0512      	lsls	r2, r2, #20
 800142c:	4322      	orrs	r2, r4
 800142e:	07db      	lsls	r3, r3, #31
 8001430:	431a      	orrs	r2, r3
 8001432:	0028      	movs	r0, r5
 8001434:	0011      	movs	r1, r2
 8001436:	b007      	add	sp, #28
 8001438:	bcf0      	pop	{r4, r5, r6, r7}
 800143a:	46bb      	mov	fp, r7
 800143c:	46b2      	mov	sl, r6
 800143e:	46a9      	mov	r9, r5
 8001440:	46a0      	mov	r8, r4
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001444:	0025      	movs	r5, r4
 8001446:	4305      	orrs	r5, r0
 8001448:	d100      	bne.n	800144c <__aeabi_dmul+0x104>
 800144a:	e141      	b.n	80016d0 <__aeabi_dmul+0x388>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_dmul+0x10a>
 8001450:	e1ad      	b.n	80017ae <__aeabi_dmul+0x466>
 8001452:	0020      	movs	r0, r4
 8001454:	f000 fe02 	bl	800205c <__clzsi2>
 8001458:	0001      	movs	r1, r0
 800145a:	0002      	movs	r2, r0
 800145c:	390b      	subs	r1, #11
 800145e:	231d      	movs	r3, #29
 8001460:	0010      	movs	r0, r2
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	0031      	movs	r1, r6
 8001466:	0035      	movs	r5, r6
 8001468:	3808      	subs	r0, #8
 800146a:	4084      	lsls	r4, r0
 800146c:	40d9      	lsrs	r1, r3
 800146e:	4085      	lsls	r5, r0
 8001470:	430c      	orrs	r4, r1
 8001472:	489e      	ldr	r0, [pc, #632]	; (80016ec <__aeabi_dmul+0x3a4>)
 8001474:	1a83      	subs	r3, r0, r2
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	4699      	mov	r9, r3
 800147c:	469b      	mov	fp, r3
 800147e:	e786      	b.n	800138e <__aeabi_dmul+0x46>
 8001480:	0005      	movs	r5, r0
 8001482:	4325      	orrs	r5, r4
 8001484:	d000      	beq.n	8001488 <__aeabi_dmul+0x140>
 8001486:	e11c      	b.n	80016c2 <__aeabi_dmul+0x37a>
 8001488:	2208      	movs	r2, #8
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	2400      	movs	r4, #0
 8001490:	4691      	mov	r9, r2
 8001492:	469b      	mov	fp, r3
 8001494:	e77b      	b.n	800138e <__aeabi_dmul+0x46>
 8001496:	4652      	mov	r2, sl
 8001498:	4332      	orrs	r2, r6
 800149a:	d100      	bne.n	800149e <__aeabi_dmul+0x156>
 800149c:	e10a      	b.n	80016b4 <__aeabi_dmul+0x36c>
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dmul+0x15c>
 80014a2:	e176      	b.n	8001792 <__aeabi_dmul+0x44a>
 80014a4:	0030      	movs	r0, r6
 80014a6:	f000 fdd9 	bl	800205c <__clzsi2>
 80014aa:	0002      	movs	r2, r0
 80014ac:	3a0b      	subs	r2, #11
 80014ae:	231d      	movs	r3, #29
 80014b0:	0001      	movs	r1, r0
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	4652      	mov	r2, sl
 80014b6:	3908      	subs	r1, #8
 80014b8:	40da      	lsrs	r2, r3
 80014ba:	408e      	lsls	r6, r1
 80014bc:	4316      	orrs	r6, r2
 80014be:	4652      	mov	r2, sl
 80014c0:	408a      	lsls	r2, r1
 80014c2:	9b00      	ldr	r3, [sp, #0]
 80014c4:	4989      	ldr	r1, [pc, #548]	; (80016ec <__aeabi_dmul+0x3a4>)
 80014c6:	1a18      	subs	r0, r3, r0
 80014c8:	0003      	movs	r3, r0
 80014ca:	468c      	mov	ip, r1
 80014cc:	4463      	add	r3, ip
 80014ce:	2000      	movs	r0, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	e77a      	b.n	80013ca <__aeabi_dmul+0x82>
 80014d4:	2400      	movs	r4, #0
 80014d6:	2500      	movs	r5, #0
 80014d8:	4a81      	ldr	r2, [pc, #516]	; (80016e0 <__aeabi_dmul+0x398>)
 80014da:	e7a5      	b.n	8001428 <__aeabi_dmul+0xe0>
 80014dc:	0c2f      	lsrs	r7, r5, #16
 80014de:	042d      	lsls	r5, r5, #16
 80014e0:	0c2d      	lsrs	r5, r5, #16
 80014e2:	002b      	movs	r3, r5
 80014e4:	0c11      	lsrs	r1, r2, #16
 80014e6:	0412      	lsls	r2, r2, #16
 80014e8:	0c12      	lsrs	r2, r2, #16
 80014ea:	4353      	muls	r3, r2
 80014ec:	4698      	mov	r8, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	0028      	movs	r0, r5
 80014f2:	437b      	muls	r3, r7
 80014f4:	4699      	mov	r9, r3
 80014f6:	4348      	muls	r0, r1
 80014f8:	4448      	add	r0, r9
 80014fa:	4683      	mov	fp, r0
 80014fc:	4640      	mov	r0, r8
 80014fe:	000b      	movs	r3, r1
 8001500:	0c00      	lsrs	r0, r0, #16
 8001502:	4682      	mov	sl, r0
 8001504:	4658      	mov	r0, fp
 8001506:	437b      	muls	r3, r7
 8001508:	4450      	add	r0, sl
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	4581      	cmp	r9, r0
 800150e:	d906      	bls.n	800151e <__aeabi_dmul+0x1d6>
 8001510:	469a      	mov	sl, r3
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4699      	mov	r9, r3
 8001518:	44ca      	add	sl, r9
 800151a:	4653      	mov	r3, sl
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	0c03      	lsrs	r3, r0, #16
 8001520:	469b      	mov	fp, r3
 8001522:	4643      	mov	r3, r8
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	0400      	lsls	r0, r0, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	4698      	mov	r8, r3
 800152c:	0003      	movs	r3, r0
 800152e:	4443      	add	r3, r8
 8001530:	9304      	str	r3, [sp, #16]
 8001532:	0c33      	lsrs	r3, r6, #16
 8001534:	4699      	mov	r9, r3
 8001536:	002b      	movs	r3, r5
 8001538:	0436      	lsls	r6, r6, #16
 800153a:	0c36      	lsrs	r6, r6, #16
 800153c:	4373      	muls	r3, r6
 800153e:	4698      	mov	r8, r3
 8001540:	0033      	movs	r3, r6
 8001542:	437b      	muls	r3, r7
 8001544:	469a      	mov	sl, r3
 8001546:	464b      	mov	r3, r9
 8001548:	435d      	muls	r5, r3
 800154a:	435f      	muls	r7, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4455      	add	r5, sl
 8001550:	0c18      	lsrs	r0, r3, #16
 8001552:	1940      	adds	r0, r0, r5
 8001554:	4582      	cmp	sl, r0
 8001556:	d903      	bls.n	8001560 <__aeabi_dmul+0x218>
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	469a      	mov	sl, r3
 800155e:	4457      	add	r7, sl
 8001560:	0c05      	lsrs	r5, r0, #16
 8001562:	19eb      	adds	r3, r5, r7
 8001564:	9305      	str	r3, [sp, #20]
 8001566:	4643      	mov	r3, r8
 8001568:	041d      	lsls	r5, r3, #16
 800156a:	0c2d      	lsrs	r5, r5, #16
 800156c:	0400      	lsls	r0, r0, #16
 800156e:	1940      	adds	r0, r0, r5
 8001570:	0c25      	lsrs	r5, r4, #16
 8001572:	0424      	lsls	r4, r4, #16
 8001574:	0c24      	lsrs	r4, r4, #16
 8001576:	0027      	movs	r7, r4
 8001578:	4357      	muls	r7, r2
 800157a:	436a      	muls	r2, r5
 800157c:	4690      	mov	r8, r2
 800157e:	002a      	movs	r2, r5
 8001580:	0c3b      	lsrs	r3, r7, #16
 8001582:	469a      	mov	sl, r3
 8001584:	434a      	muls	r2, r1
 8001586:	4361      	muls	r1, r4
 8001588:	4441      	add	r1, r8
 800158a:	4451      	add	r1, sl
 800158c:	4483      	add	fp, r0
 800158e:	4588      	cmp	r8, r1
 8001590:	d903      	bls.n	800159a <__aeabi_dmul+0x252>
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	4698      	mov	r8, r3
 8001598:	4442      	add	r2, r8
 800159a:	043f      	lsls	r7, r7, #16
 800159c:	0c0b      	lsrs	r3, r1, #16
 800159e:	0c3f      	lsrs	r7, r7, #16
 80015a0:	0409      	lsls	r1, r1, #16
 80015a2:	19c9      	adds	r1, r1, r7
 80015a4:	0027      	movs	r7, r4
 80015a6:	4698      	mov	r8, r3
 80015a8:	464b      	mov	r3, r9
 80015aa:	4377      	muls	r7, r6
 80015ac:	435c      	muls	r4, r3
 80015ae:	436e      	muls	r6, r5
 80015b0:	435d      	muls	r5, r3
 80015b2:	0c3b      	lsrs	r3, r7, #16
 80015b4:	4699      	mov	r9, r3
 80015b6:	19a4      	adds	r4, r4, r6
 80015b8:	444c      	add	r4, r9
 80015ba:	4442      	add	r2, r8
 80015bc:	9503      	str	r5, [sp, #12]
 80015be:	42a6      	cmp	r6, r4
 80015c0:	d904      	bls.n	80015cc <__aeabi_dmul+0x284>
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	4698      	mov	r8, r3
 80015c8:	4445      	add	r5, r8
 80015ca:	9503      	str	r5, [sp, #12]
 80015cc:	9b02      	ldr	r3, [sp, #8]
 80015ce:	043f      	lsls	r7, r7, #16
 80015d0:	445b      	add	r3, fp
 80015d2:	001e      	movs	r6, r3
 80015d4:	4283      	cmp	r3, r0
 80015d6:	4180      	sbcs	r0, r0
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	4698      	mov	r8, r3
 80015dc:	9b05      	ldr	r3, [sp, #20]
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	4447      	add	r7, r8
 80015e2:	4698      	mov	r8, r3
 80015e4:	1876      	adds	r6, r6, r1
 80015e6:	428e      	cmp	r6, r1
 80015e8:	4189      	sbcs	r1, r1
 80015ea:	4447      	add	r7, r8
 80015ec:	4240      	negs	r0, r0
 80015ee:	183d      	adds	r5, r7, r0
 80015f0:	46a8      	mov	r8, r5
 80015f2:	4693      	mov	fp, r2
 80015f4:	4249      	negs	r1, r1
 80015f6:	468a      	mov	sl, r1
 80015f8:	44c3      	add	fp, r8
 80015fa:	429f      	cmp	r7, r3
 80015fc:	41bf      	sbcs	r7, r7
 80015fe:	4580      	cmp	r8, r0
 8001600:	4180      	sbcs	r0, r0
 8001602:	9b03      	ldr	r3, [sp, #12]
 8001604:	44da      	add	sl, fp
 8001606:	4698      	mov	r8, r3
 8001608:	4653      	mov	r3, sl
 800160a:	4240      	negs	r0, r0
 800160c:	427f      	negs	r7, r7
 800160e:	4307      	orrs	r7, r0
 8001610:	0c24      	lsrs	r4, r4, #16
 8001612:	4593      	cmp	fp, r2
 8001614:	4192      	sbcs	r2, r2
 8001616:	458a      	cmp	sl, r1
 8001618:	4189      	sbcs	r1, r1
 800161a:	193f      	adds	r7, r7, r4
 800161c:	0ddc      	lsrs	r4, r3, #23
 800161e:	9b04      	ldr	r3, [sp, #16]
 8001620:	0275      	lsls	r5, r6, #9
 8001622:	431d      	orrs	r5, r3
 8001624:	1e68      	subs	r0, r5, #1
 8001626:	4185      	sbcs	r5, r0
 8001628:	4653      	mov	r3, sl
 800162a:	4252      	negs	r2, r2
 800162c:	4249      	negs	r1, r1
 800162e:	430a      	orrs	r2, r1
 8001630:	18bf      	adds	r7, r7, r2
 8001632:	4447      	add	r7, r8
 8001634:	0df6      	lsrs	r6, r6, #23
 8001636:	027f      	lsls	r7, r7, #9
 8001638:	4335      	orrs	r5, r6
 800163a:	025a      	lsls	r2, r3, #9
 800163c:	433c      	orrs	r4, r7
 800163e:	4315      	orrs	r5, r2
 8001640:	01fb      	lsls	r3, r7, #7
 8001642:	d400      	bmi.n	8001646 <__aeabi_dmul+0x2fe>
 8001644:	e0c1      	b.n	80017ca <__aeabi_dmul+0x482>
 8001646:	2101      	movs	r1, #1
 8001648:	086a      	lsrs	r2, r5, #1
 800164a:	400d      	ands	r5, r1
 800164c:	4315      	orrs	r5, r2
 800164e:	07e2      	lsls	r2, r4, #31
 8001650:	4315      	orrs	r5, r2
 8001652:	0864      	lsrs	r4, r4, #1
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <__aeabi_dmul+0x3a8>)
 8001656:	4461      	add	r1, ip
 8001658:	2900      	cmp	r1, #0
 800165a:	dd56      	ble.n	800170a <__aeabi_dmul+0x3c2>
 800165c:	076b      	lsls	r3, r5, #29
 800165e:	d009      	beq.n	8001674 <__aeabi_dmul+0x32c>
 8001660:	220f      	movs	r2, #15
 8001662:	402a      	ands	r2, r5
 8001664:	2a04      	cmp	r2, #4
 8001666:	d005      	beq.n	8001674 <__aeabi_dmul+0x32c>
 8001668:	1d2a      	adds	r2, r5, #4
 800166a:	42aa      	cmp	r2, r5
 800166c:	41ad      	sbcs	r5, r5
 800166e:	426d      	negs	r5, r5
 8001670:	1964      	adds	r4, r4, r5
 8001672:	0015      	movs	r5, r2
 8001674:	01e3      	lsls	r3, r4, #7
 8001676:	d504      	bpl.n	8001682 <__aeabi_dmul+0x33a>
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <__aeabi_dmul+0x3ac>)
 800167c:	00c9      	lsls	r1, r1, #3
 800167e:	4014      	ands	r4, r2
 8001680:	4461      	add	r1, ip
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <__aeabi_dmul+0x3b0>)
 8001684:	4291      	cmp	r1, r2
 8001686:	dd00      	ble.n	800168a <__aeabi_dmul+0x342>
 8001688:	e724      	b.n	80014d4 <__aeabi_dmul+0x18c>
 800168a:	0762      	lsls	r2, r4, #29
 800168c:	08ed      	lsrs	r5, r5, #3
 800168e:	0264      	lsls	r4, r4, #9
 8001690:	0549      	lsls	r1, r1, #21
 8001692:	4315      	orrs	r5, r2
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d4a      	lsrs	r2, r1, #21
 8001698:	e6c6      	b.n	8001428 <__aeabi_dmul+0xe0>
 800169a:	9701      	str	r7, [sp, #4]
 800169c:	e6b8      	b.n	8001410 <__aeabi_dmul+0xc8>
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <__aeabi_dmul+0x398>)
 80016a0:	2003      	movs	r0, #3
 80016a2:	4694      	mov	ip, r2
 80016a4:	4463      	add	r3, ip
 80016a6:	464a      	mov	r2, r9
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2303      	movs	r3, #3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4691      	mov	r9, r2
 80016b0:	4652      	mov	r2, sl
 80016b2:	e68a      	b.n	80013ca <__aeabi_dmul+0x82>
 80016b4:	4649      	mov	r1, r9
 80016b6:	2301      	movs	r3, #1
 80016b8:	4319      	orrs	r1, r3
 80016ba:	4689      	mov	r9, r1
 80016bc:	2600      	movs	r6, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	e683      	b.n	80013ca <__aeabi_dmul+0x82>
 80016c2:	220c      	movs	r2, #12
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2303      	movs	r3, #3
 80016c8:	0005      	movs	r5, r0
 80016ca:	4691      	mov	r9, r2
 80016cc:	469b      	mov	fp, r3
 80016ce:	e65e      	b.n	800138e <__aeabi_dmul+0x46>
 80016d0:	2304      	movs	r3, #4
 80016d2:	4699      	mov	r9, r3
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	2400      	movs	r4, #0
 80016dc:	469b      	mov	fp, r3
 80016de:	e656      	b.n	800138e <__aeabi_dmul+0x46>
 80016e0:	000007ff 	.word	0x000007ff
 80016e4:	fffffc01 	.word	0xfffffc01
 80016e8:	08009870 	.word	0x08009870
 80016ec:	fffffc0d 	.word	0xfffffc0d
 80016f0:	000003ff 	.word	0x000003ff
 80016f4:	feffffff 	.word	0xfeffffff
 80016f8:	000007fe 	.word	0x000007fe
 80016fc:	2300      	movs	r3, #0
 80016fe:	2480      	movs	r4, #128	; 0x80
 8001700:	2500      	movs	r5, #0
 8001702:	4a44      	ldr	r2, [pc, #272]	; (8001814 <__aeabi_dmul+0x4cc>)
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	0324      	lsls	r4, r4, #12
 8001708:	e68e      	b.n	8001428 <__aeabi_dmul+0xe0>
 800170a:	2001      	movs	r0, #1
 800170c:	1a40      	subs	r0, r0, r1
 800170e:	2838      	cmp	r0, #56	; 0x38
 8001710:	dd00      	ble.n	8001714 <__aeabi_dmul+0x3cc>
 8001712:	e686      	b.n	8001422 <__aeabi_dmul+0xda>
 8001714:	281f      	cmp	r0, #31
 8001716:	dd5b      	ble.n	80017d0 <__aeabi_dmul+0x488>
 8001718:	221f      	movs	r2, #31
 800171a:	0023      	movs	r3, r4
 800171c:	4252      	negs	r2, r2
 800171e:	1a51      	subs	r1, r2, r1
 8001720:	40cb      	lsrs	r3, r1
 8001722:	0019      	movs	r1, r3
 8001724:	2820      	cmp	r0, #32
 8001726:	d003      	beq.n	8001730 <__aeabi_dmul+0x3e8>
 8001728:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <__aeabi_dmul+0x4d0>)
 800172a:	4462      	add	r2, ip
 800172c:	4094      	lsls	r4, r2
 800172e:	4325      	orrs	r5, r4
 8001730:	1e6a      	subs	r2, r5, #1
 8001732:	4195      	sbcs	r5, r2
 8001734:	002a      	movs	r2, r5
 8001736:	430a      	orrs	r2, r1
 8001738:	2107      	movs	r1, #7
 800173a:	000d      	movs	r5, r1
 800173c:	2400      	movs	r4, #0
 800173e:	4015      	ands	r5, r2
 8001740:	4211      	tst	r1, r2
 8001742:	d05b      	beq.n	80017fc <__aeabi_dmul+0x4b4>
 8001744:	210f      	movs	r1, #15
 8001746:	2400      	movs	r4, #0
 8001748:	4011      	ands	r1, r2
 800174a:	2904      	cmp	r1, #4
 800174c:	d053      	beq.n	80017f6 <__aeabi_dmul+0x4ae>
 800174e:	1d11      	adds	r1, r2, #4
 8001750:	4291      	cmp	r1, r2
 8001752:	4192      	sbcs	r2, r2
 8001754:	4252      	negs	r2, r2
 8001756:	18a4      	adds	r4, r4, r2
 8001758:	000a      	movs	r2, r1
 800175a:	0223      	lsls	r3, r4, #8
 800175c:	d54b      	bpl.n	80017f6 <__aeabi_dmul+0x4ae>
 800175e:	2201      	movs	r2, #1
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	e660      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	031b      	lsls	r3, r3, #12
 800176a:	421c      	tst	r4, r3
 800176c:	d009      	beq.n	8001782 <__aeabi_dmul+0x43a>
 800176e:	421e      	tst	r6, r3
 8001770:	d107      	bne.n	8001782 <__aeabi_dmul+0x43a>
 8001772:	4333      	orrs	r3, r6
 8001774:	031c      	lsls	r4, r3, #12
 8001776:	4643      	mov	r3, r8
 8001778:	0015      	movs	r5, r2
 800177a:	0b24      	lsrs	r4, r4, #12
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <__aeabi_dmul+0x4cc>)
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	e652      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0312      	lsls	r2, r2, #12
 8001786:	4314      	orrs	r4, r2
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <__aeabi_dmul+0x4cc>)
 800178c:	0b24      	lsrs	r4, r4, #12
 800178e:	9701      	str	r7, [sp, #4]
 8001790:	e64a      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001792:	f000 fc63 	bl	800205c <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	001a      	movs	r2, r3
 800179a:	3215      	adds	r2, #21
 800179c:	3020      	adds	r0, #32
 800179e:	2a1c      	cmp	r2, #28
 80017a0:	dc00      	bgt.n	80017a4 <__aeabi_dmul+0x45c>
 80017a2:	e684      	b.n	80014ae <__aeabi_dmul+0x166>
 80017a4:	4656      	mov	r6, sl
 80017a6:	3b08      	subs	r3, #8
 80017a8:	2200      	movs	r2, #0
 80017aa:	409e      	lsls	r6, r3
 80017ac:	e689      	b.n	80014c2 <__aeabi_dmul+0x17a>
 80017ae:	f000 fc55 	bl	800205c <__clzsi2>
 80017b2:	0001      	movs	r1, r0
 80017b4:	0002      	movs	r2, r0
 80017b6:	3115      	adds	r1, #21
 80017b8:	3220      	adds	r2, #32
 80017ba:	291c      	cmp	r1, #28
 80017bc:	dc00      	bgt.n	80017c0 <__aeabi_dmul+0x478>
 80017be:	e64e      	b.n	800145e <__aeabi_dmul+0x116>
 80017c0:	0034      	movs	r4, r6
 80017c2:	3808      	subs	r0, #8
 80017c4:	2500      	movs	r5, #0
 80017c6:	4084      	lsls	r4, r0
 80017c8:	e653      	b.n	8001472 <__aeabi_dmul+0x12a>
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	469c      	mov	ip, r3
 80017ce:	e741      	b.n	8001654 <__aeabi_dmul+0x30c>
 80017d0:	4912      	ldr	r1, [pc, #72]	; (800181c <__aeabi_dmul+0x4d4>)
 80017d2:	0022      	movs	r2, r4
 80017d4:	4461      	add	r1, ip
 80017d6:	002e      	movs	r6, r5
 80017d8:	408d      	lsls	r5, r1
 80017da:	408a      	lsls	r2, r1
 80017dc:	40c6      	lsrs	r6, r0
 80017de:	1e69      	subs	r1, r5, #1
 80017e0:	418d      	sbcs	r5, r1
 80017e2:	4332      	orrs	r2, r6
 80017e4:	432a      	orrs	r2, r5
 80017e6:	40c4      	lsrs	r4, r0
 80017e8:	0753      	lsls	r3, r2, #29
 80017ea:	d0b6      	beq.n	800175a <__aeabi_dmul+0x412>
 80017ec:	210f      	movs	r1, #15
 80017ee:	4011      	ands	r1, r2
 80017f0:	2904      	cmp	r1, #4
 80017f2:	d1ac      	bne.n	800174e <__aeabi_dmul+0x406>
 80017f4:	e7b1      	b.n	800175a <__aeabi_dmul+0x412>
 80017f6:	0765      	lsls	r5, r4, #29
 80017f8:	0264      	lsls	r4, r4, #9
 80017fa:	0b24      	lsrs	r4, r4, #12
 80017fc:	08d2      	lsrs	r2, r2, #3
 80017fe:	4315      	orrs	r5, r2
 8001800:	2200      	movs	r2, #0
 8001802:	e611      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0312      	lsls	r2, r2, #12
 8001808:	4314      	orrs	r4, r2
 800180a:	0324      	lsls	r4, r4, #12
 800180c:	4a01      	ldr	r2, [pc, #4]	; (8001814 <__aeabi_dmul+0x4cc>)
 800180e:	0b24      	lsrs	r4, r4, #12
 8001810:	e60a      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	000007ff 	.word	0x000007ff
 8001818:	0000043e 	.word	0x0000043e
 800181c:	0000041e 	.word	0x0000041e

08001820 <__aeabi_dsub>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	4657      	mov	r7, sl
 8001824:	464e      	mov	r6, r9
 8001826:	4645      	mov	r5, r8
 8001828:	46de      	mov	lr, fp
 800182a:	0004      	movs	r4, r0
 800182c:	b5e0      	push	{r5, r6, r7, lr}
 800182e:	001f      	movs	r7, r3
 8001830:	0010      	movs	r0, r2
 8001832:	030b      	lsls	r3, r1, #12
 8001834:	0f62      	lsrs	r2, r4, #29
 8001836:	004e      	lsls	r6, r1, #1
 8001838:	0fcd      	lsrs	r5, r1, #31
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	0339      	lsls	r1, r7, #12
 800183e:	4313      	orrs	r3, r2
 8001840:	0a49      	lsrs	r1, r1, #9
 8001842:	00e2      	lsls	r2, r4, #3
 8001844:	0f44      	lsrs	r4, r0, #29
 8001846:	4321      	orrs	r1, r4
 8001848:	4cc2      	ldr	r4, [pc, #776]	; (8001b54 <__aeabi_dsub+0x334>)
 800184a:	4691      	mov	r9, r2
 800184c:	4692      	mov	sl, r2
 800184e:	00c0      	lsls	r0, r0, #3
 8001850:	007a      	lsls	r2, r7, #1
 8001852:	4680      	mov	r8, r0
 8001854:	0d76      	lsrs	r6, r6, #21
 8001856:	0d52      	lsrs	r2, r2, #21
 8001858:	0fff      	lsrs	r7, r7, #31
 800185a:	42a2      	cmp	r2, r4
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x40>
 800185e:	e0b4      	b.n	80019ca <__aeabi_dsub+0x1aa>
 8001860:	2401      	movs	r4, #1
 8001862:	4067      	eors	r7, r4
 8001864:	46bb      	mov	fp, r7
 8001866:	42bd      	cmp	r5, r7
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x4c>
 800186a:	e088      	b.n	800197e <__aeabi_dsub+0x15e>
 800186c:	1ab4      	subs	r4, r6, r2
 800186e:	46a4      	mov	ip, r4
 8001870:	2c00      	cmp	r4, #0
 8001872:	dc00      	bgt.n	8001876 <__aeabi_dsub+0x56>
 8001874:	e0b2      	b.n	80019dc <__aeabi_dsub+0x1bc>
 8001876:	2a00      	cmp	r2, #0
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x5c>
 800187a:	e0c5      	b.n	8001a08 <__aeabi_dsub+0x1e8>
 800187c:	4ab5      	ldr	r2, [pc, #724]	; (8001b54 <__aeabi_dsub+0x334>)
 800187e:	4296      	cmp	r6, r2
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x64>
 8001882:	e28b      	b.n	8001d9c <__aeabi_dsub+0x57c>
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0412      	lsls	r2, r2, #16
 8001888:	4311      	orrs	r1, r2
 800188a:	4662      	mov	r2, ip
 800188c:	2a38      	cmp	r2, #56	; 0x38
 800188e:	dd00      	ble.n	8001892 <__aeabi_dsub+0x72>
 8001890:	e1a1      	b.n	8001bd6 <__aeabi_dsub+0x3b6>
 8001892:	2a1f      	cmp	r2, #31
 8001894:	dd00      	ble.n	8001898 <__aeabi_dsub+0x78>
 8001896:	e216      	b.n	8001cc6 <__aeabi_dsub+0x4a6>
 8001898:	2720      	movs	r7, #32
 800189a:	000c      	movs	r4, r1
 800189c:	1abf      	subs	r7, r7, r2
 800189e:	40bc      	lsls	r4, r7
 80018a0:	0002      	movs	r2, r0
 80018a2:	46a0      	mov	r8, r4
 80018a4:	4664      	mov	r4, ip
 80018a6:	40b8      	lsls	r0, r7
 80018a8:	40e2      	lsrs	r2, r4
 80018aa:	4644      	mov	r4, r8
 80018ac:	4314      	orrs	r4, r2
 80018ae:	0002      	movs	r2, r0
 80018b0:	1e50      	subs	r0, r2, #1
 80018b2:	4182      	sbcs	r2, r0
 80018b4:	4660      	mov	r0, ip
 80018b6:	40c1      	lsrs	r1, r0
 80018b8:	4322      	orrs	r2, r4
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	4649      	mov	r1, r9
 80018be:	1a8c      	subs	r4, r1, r2
 80018c0:	45a1      	cmp	r9, r4
 80018c2:	4192      	sbcs	r2, r2
 80018c4:	4252      	negs	r2, r2
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	4698      	mov	r8, r3
 80018ca:	4643      	mov	r3, r8
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	d400      	bmi.n	80018d2 <__aeabi_dsub+0xb2>
 80018d0:	e117      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 80018d2:	4643      	mov	r3, r8
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	4698      	mov	r8, r3
 80018da:	4643      	mov	r3, r8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0xc2>
 80018e0:	e16c      	b.n	8001bbc <__aeabi_dsub+0x39c>
 80018e2:	4640      	mov	r0, r8
 80018e4:	f000 fbba 	bl	800205c <__clzsi2>
 80018e8:	0002      	movs	r2, r0
 80018ea:	3a08      	subs	r2, #8
 80018ec:	2120      	movs	r1, #32
 80018ee:	0020      	movs	r0, r4
 80018f0:	4643      	mov	r3, r8
 80018f2:	1a89      	subs	r1, r1, r2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	40c8      	lsrs	r0, r1
 80018f8:	4094      	lsls	r4, r2
 80018fa:	4303      	orrs	r3, r0
 80018fc:	4296      	cmp	r6, r2
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dsub+0xe2>
 8001900:	e157      	b.n	8001bb2 <__aeabi_dsub+0x392>
 8001902:	1b96      	subs	r6, r2, r6
 8001904:	1c71      	adds	r1, r6, #1
 8001906:	291f      	cmp	r1, #31
 8001908:	dd00      	ble.n	800190c <__aeabi_dsub+0xec>
 800190a:	e1cb      	b.n	8001ca4 <__aeabi_dsub+0x484>
 800190c:	2220      	movs	r2, #32
 800190e:	0018      	movs	r0, r3
 8001910:	0026      	movs	r6, r4
 8001912:	1a52      	subs	r2, r2, r1
 8001914:	4094      	lsls	r4, r2
 8001916:	4090      	lsls	r0, r2
 8001918:	40ce      	lsrs	r6, r1
 800191a:	40cb      	lsrs	r3, r1
 800191c:	1e62      	subs	r2, r4, #1
 800191e:	4194      	sbcs	r4, r2
 8001920:	4330      	orrs	r0, r6
 8001922:	4698      	mov	r8, r3
 8001924:	2600      	movs	r6, #0
 8001926:	4304      	orrs	r4, r0
 8001928:	0763      	lsls	r3, r4, #29
 800192a:	d009      	beq.n	8001940 <__aeabi_dsub+0x120>
 800192c:	230f      	movs	r3, #15
 800192e:	4023      	ands	r3, r4
 8001930:	2b04      	cmp	r3, #4
 8001932:	d005      	beq.n	8001940 <__aeabi_dsub+0x120>
 8001934:	1d23      	adds	r3, r4, #4
 8001936:	42a3      	cmp	r3, r4
 8001938:	41a4      	sbcs	r4, r4
 800193a:	4264      	negs	r4, r4
 800193c:	44a0      	add	r8, r4
 800193e:	001c      	movs	r4, r3
 8001940:	4643      	mov	r3, r8
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	d400      	bmi.n	8001948 <__aeabi_dsub+0x128>
 8001946:	e0df      	b.n	8001b08 <__aeabi_dsub+0x2e8>
 8001948:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <__aeabi_dsub+0x334>)
 800194a:	3601      	adds	r6, #1
 800194c:	429e      	cmp	r6, r3
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x132>
 8001950:	e0fb      	b.n	8001b4a <__aeabi_dsub+0x32a>
 8001952:	4642      	mov	r2, r8
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <__aeabi_dsub+0x338>)
 8001956:	08e4      	lsrs	r4, r4, #3
 8001958:	401a      	ands	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	0571      	lsls	r1, r6, #21
 800195e:	0752      	lsls	r2, r2, #29
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4322      	orrs	r2, r4
 8001964:	0b1b      	lsrs	r3, r3, #12
 8001966:	0d49      	lsrs	r1, r1, #21
 8001968:	0509      	lsls	r1, r1, #20
 800196a:	07ed      	lsls	r5, r5, #31
 800196c:	4319      	orrs	r1, r3
 800196e:	4329      	orrs	r1, r5
 8001970:	0010      	movs	r0, r2
 8001972:	bcf0      	pop	{r4, r5, r6, r7}
 8001974:	46bb      	mov	fp, r7
 8001976:	46b2      	mov	sl, r6
 8001978:	46a9      	mov	r9, r5
 800197a:	46a0      	mov	r8, r4
 800197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800197e:	1ab4      	subs	r4, r6, r2
 8001980:	46a4      	mov	ip, r4
 8001982:	2c00      	cmp	r4, #0
 8001984:	dd58      	ble.n	8001a38 <__aeabi_dsub+0x218>
 8001986:	2a00      	cmp	r2, #0
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x16c>
 800198a:	e09e      	b.n	8001aca <__aeabi_dsub+0x2aa>
 800198c:	4a71      	ldr	r2, [pc, #452]	; (8001b54 <__aeabi_dsub+0x334>)
 800198e:	4296      	cmp	r6, r2
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x174>
 8001992:	e13b      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0412      	lsls	r2, r2, #16
 8001998:	4311      	orrs	r1, r2
 800199a:	4662      	mov	r2, ip
 800199c:	2a38      	cmp	r2, #56	; 0x38
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dsub+0x182>
 80019a0:	e0c1      	b.n	8001b26 <__aeabi_dsub+0x306>
 80019a2:	2a1f      	cmp	r2, #31
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dsub+0x188>
 80019a6:	e1bb      	b.n	8001d20 <__aeabi_dsub+0x500>
 80019a8:	000c      	movs	r4, r1
 80019aa:	3a20      	subs	r2, #32
 80019ac:	40d4      	lsrs	r4, r2
 80019ae:	0022      	movs	r2, r4
 80019b0:	4664      	mov	r4, ip
 80019b2:	2c20      	cmp	r4, #32
 80019b4:	d004      	beq.n	80019c0 <__aeabi_dsub+0x1a0>
 80019b6:	2740      	movs	r7, #64	; 0x40
 80019b8:	1b3f      	subs	r7, r7, r4
 80019ba:	40b9      	lsls	r1, r7
 80019bc:	4308      	orrs	r0, r1
 80019be:	4680      	mov	r8, r0
 80019c0:	4644      	mov	r4, r8
 80019c2:	1e61      	subs	r1, r4, #1
 80019c4:	418c      	sbcs	r4, r1
 80019c6:	4314      	orrs	r4, r2
 80019c8:	e0b1      	b.n	8001b2e <__aeabi_dsub+0x30e>
 80019ca:	000c      	movs	r4, r1
 80019cc:	4304      	orrs	r4, r0
 80019ce:	d02a      	beq.n	8001a26 <__aeabi_dsub+0x206>
 80019d0:	46bb      	mov	fp, r7
 80019d2:	42bd      	cmp	r5, r7
 80019d4:	d02d      	beq.n	8001a32 <__aeabi_dsub+0x212>
 80019d6:	4c61      	ldr	r4, [pc, #388]	; (8001b5c <__aeabi_dsub+0x33c>)
 80019d8:	46a4      	mov	ip, r4
 80019da:	44b4      	add	ip, r6
 80019dc:	4664      	mov	r4, ip
 80019de:	2c00      	cmp	r4, #0
 80019e0:	d05c      	beq.n	8001a9c <__aeabi_dsub+0x27c>
 80019e2:	1b94      	subs	r4, r2, r6
 80019e4:	46a4      	mov	ip, r4
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d000      	beq.n	80019ec <__aeabi_dsub+0x1cc>
 80019ea:	e115      	b.n	8001c18 <__aeabi_dsub+0x3f8>
 80019ec:	464d      	mov	r5, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1d4>
 80019f2:	e1c3      	b.n	8001d7c <__aeabi_dsub+0x55c>
 80019f4:	1e65      	subs	r5, r4, #1
 80019f6:	2c01      	cmp	r4, #1
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x1dc>
 80019fa:	e20c      	b.n	8001e16 <__aeabi_dsub+0x5f6>
 80019fc:	4e55      	ldr	r6, [pc, #340]	; (8001b54 <__aeabi_dsub+0x334>)
 80019fe:	42b4      	cmp	r4, r6
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x1e4>
 8001a02:	e1f8      	b.n	8001df6 <__aeabi_dsub+0x5d6>
 8001a04:	46ac      	mov	ip, r5
 8001a06:	e10e      	b.n	8001c26 <__aeabi_dsub+0x406>
 8001a08:	000a      	movs	r2, r1
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x1f0>
 8001a0e:	e136      	b.n	8001c7e <__aeabi_dsub+0x45e>
 8001a10:	0022      	movs	r2, r4
 8001a12:	3a01      	subs	r2, #1
 8001a14:	2c01      	cmp	r4, #1
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x1fa>
 8001a18:	e1c6      	b.n	8001da8 <__aeabi_dsub+0x588>
 8001a1a:	4c4e      	ldr	r4, [pc, #312]	; (8001b54 <__aeabi_dsub+0x334>)
 8001a1c:	45a4      	cmp	ip, r4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x202>
 8001a20:	e0f4      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001a22:	4694      	mov	ip, r2
 8001a24:	e731      	b.n	800188a <__aeabi_dsub+0x6a>
 8001a26:	2401      	movs	r4, #1
 8001a28:	4067      	eors	r7, r4
 8001a2a:	46bb      	mov	fp, r7
 8001a2c:	42bd      	cmp	r5, r7
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x212>
 8001a30:	e71c      	b.n	800186c <__aeabi_dsub+0x4c>
 8001a32:	4c4a      	ldr	r4, [pc, #296]	; (8001b5c <__aeabi_dsub+0x33c>)
 8001a34:	46a4      	mov	ip, r4
 8001a36:	44b4      	add	ip, r6
 8001a38:	4664      	mov	r4, ip
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x220>
 8001a3e:	e0cf      	b.n	8001be0 <__aeabi_dsub+0x3c0>
 8001a40:	1b94      	subs	r4, r2, r6
 8001a42:	46a4      	mov	ip, r4
 8001a44:	2e00      	cmp	r6, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dsub+0x22a>
 8001a48:	e15c      	b.n	8001d04 <__aeabi_dsub+0x4e4>
 8001a4a:	4e42      	ldr	r6, [pc, #264]	; (8001b54 <__aeabi_dsub+0x334>)
 8001a4c:	42b2      	cmp	r2, r6
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x232>
 8001a50:	e1ec      	b.n	8001e2c <__aeabi_dsub+0x60c>
 8001a52:	2680      	movs	r6, #128	; 0x80
 8001a54:	0436      	lsls	r6, r6, #16
 8001a56:	4333      	orrs	r3, r6
 8001a58:	4664      	mov	r4, ip
 8001a5a:	2c38      	cmp	r4, #56	; 0x38
 8001a5c:	dd00      	ble.n	8001a60 <__aeabi_dsub+0x240>
 8001a5e:	e1b3      	b.n	8001dc8 <__aeabi_dsub+0x5a8>
 8001a60:	2c1f      	cmp	r4, #31
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x246>
 8001a64:	e238      	b.n	8001ed8 <__aeabi_dsub+0x6b8>
 8001a66:	2620      	movs	r6, #32
 8001a68:	1b36      	subs	r6, r6, r4
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	40b4      	lsls	r4, r6
 8001a6e:	464f      	mov	r7, r9
 8001a70:	46a0      	mov	r8, r4
 8001a72:	4664      	mov	r4, ip
 8001a74:	40e7      	lsrs	r7, r4
 8001a76:	4644      	mov	r4, r8
 8001a78:	433c      	orrs	r4, r7
 8001a7a:	464f      	mov	r7, r9
 8001a7c:	40b7      	lsls	r7, r6
 8001a7e:	003e      	movs	r6, r7
 8001a80:	1e77      	subs	r7, r6, #1
 8001a82:	41be      	sbcs	r6, r7
 8001a84:	4334      	orrs	r4, r6
 8001a86:	4666      	mov	r6, ip
 8001a88:	40f3      	lsrs	r3, r6
 8001a8a:	18c9      	adds	r1, r1, r3
 8001a8c:	1824      	adds	r4, r4, r0
 8001a8e:	4284      	cmp	r4, r0
 8001a90:	419b      	sbcs	r3, r3
 8001a92:	425b      	negs	r3, r3
 8001a94:	4698      	mov	r8, r3
 8001a96:	0016      	movs	r6, r2
 8001a98:	4488      	add	r8, r1
 8001a9a:	e04e      	b.n	8001b3a <__aeabi_dsub+0x31a>
 8001a9c:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <__aeabi_dsub+0x340>)
 8001a9e:	1c74      	adds	r4, r6, #1
 8001aa0:	4214      	tst	r4, r2
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dsub+0x286>
 8001aa4:	e0d6      	b.n	8001c54 <__aeabi_dsub+0x434>
 8001aa6:	464a      	mov	r2, r9
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dsub+0x290>
 8001aae:	e15b      	b.n	8001d68 <__aeabi_dsub+0x548>
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x296>
 8001ab4:	e1a5      	b.n	8001e02 <__aeabi_dsub+0x5e2>
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	d000      	beq.n	8001abe <__aeabi_dsub+0x29e>
 8001abc:	e1bb      	b.n	8001e36 <__aeabi_dsub+0x616>
 8001abe:	464a      	mov	r2, r9
 8001ac0:	0759      	lsls	r1, r3, #29
 8001ac2:	08d2      	lsrs	r2, r2, #3
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	e027      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001aca:	000a      	movs	r2, r1
 8001acc:	4302      	orrs	r2, r0
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x2b2>
 8001ad0:	e174      	b.n	8001dbc <__aeabi_dsub+0x59c>
 8001ad2:	0022      	movs	r2, r4
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	2c01      	cmp	r4, #1
 8001ad8:	d005      	beq.n	8001ae6 <__aeabi_dsub+0x2c6>
 8001ada:	4c1e      	ldr	r4, [pc, #120]	; (8001b54 <__aeabi_dsub+0x334>)
 8001adc:	45a4      	cmp	ip, r4
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x2c2>
 8001ae0:	e094      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001ae2:	4694      	mov	ip, r2
 8001ae4:	e759      	b.n	800199a <__aeabi_dsub+0x17a>
 8001ae6:	4448      	add	r0, r9
 8001ae8:	4548      	cmp	r0, r9
 8001aea:	4192      	sbcs	r2, r2
 8001aec:	185b      	adds	r3, r3, r1
 8001aee:	4698      	mov	r8, r3
 8001af0:	0004      	movs	r4, r0
 8001af2:	4252      	negs	r2, r2
 8001af4:	4490      	add	r8, r2
 8001af6:	4643      	mov	r3, r8
 8001af8:	2602      	movs	r6, #2
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	d500      	bpl.n	8001b00 <__aeabi_dsub+0x2e0>
 8001afe:	e0c4      	b.n	8001c8a <__aeabi_dsub+0x46a>
 8001b00:	3e01      	subs	r6, #1
 8001b02:	0763      	lsls	r3, r4, #29
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x2e8>
 8001b06:	e711      	b.n	800192c <__aeabi_dsub+0x10c>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	46b4      	mov	ip, r6
 8001b0c:	0759      	lsls	r1, r3, #29
 8001b0e:	08e2      	lsrs	r2, r4, #3
 8001b10:	430a      	orrs	r2, r1
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	490f      	ldr	r1, [pc, #60]	; (8001b54 <__aeabi_dsub+0x334>)
 8001b16:	458c      	cmp	ip, r1
 8001b18:	d040      	beq.n	8001b9c <__aeabi_dsub+0x37c>
 8001b1a:	4661      	mov	r1, ip
 8001b1c:	031b      	lsls	r3, r3, #12
 8001b1e:	0549      	lsls	r1, r1, #21
 8001b20:	0b1b      	lsrs	r3, r3, #12
 8001b22:	0d49      	lsrs	r1, r1, #21
 8001b24:	e720      	b.n	8001968 <__aeabi_dsub+0x148>
 8001b26:	4301      	orrs	r1, r0
 8001b28:	000c      	movs	r4, r1
 8001b2a:	1e61      	subs	r1, r4, #1
 8001b2c:	418c      	sbcs	r4, r1
 8001b2e:	444c      	add	r4, r9
 8001b30:	454c      	cmp	r4, r9
 8001b32:	4192      	sbcs	r2, r2
 8001b34:	4252      	negs	r2, r2
 8001b36:	4690      	mov	r8, r2
 8001b38:	4498      	add	r8, r3
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	d5e0      	bpl.n	8001b02 <__aeabi_dsub+0x2e2>
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__aeabi_dsub+0x334>)
 8001b42:	3601      	adds	r6, #1
 8001b44:	429e      	cmp	r6, r3
 8001b46:	d000      	beq.n	8001b4a <__aeabi_dsub+0x32a>
 8001b48:	e09f      	b.n	8001c8a <__aeabi_dsub+0x46a>
 8001b4a:	0031      	movs	r1, r6
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	e70a      	b.n	8001968 <__aeabi_dsub+0x148>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	2a00      	cmp	r2, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x34a>
 8001b68:	e160      	b.n	8001e2c <__aeabi_dsub+0x60c>
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	4302      	orrs	r2, r0
 8001b6e:	d04d      	beq.n	8001c0c <__aeabi_dsub+0x3ec>
 8001b70:	464a      	mov	r2, r9
 8001b72:	075c      	lsls	r4, r3, #29
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	4322      	orrs	r2, r4
 8001b78:	2480      	movs	r4, #128	; 0x80
 8001b7a:	08db      	lsrs	r3, r3, #3
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	4223      	tst	r3, r4
 8001b80:	d007      	beq.n	8001b92 <__aeabi_dsub+0x372>
 8001b82:	08ce      	lsrs	r6, r1, #3
 8001b84:	4226      	tst	r6, r4
 8001b86:	d104      	bne.n	8001b92 <__aeabi_dsub+0x372>
 8001b88:	465d      	mov	r5, fp
 8001b8a:	0033      	movs	r3, r6
 8001b8c:	08c2      	lsrs	r2, r0, #3
 8001b8e:	0749      	lsls	r1, r1, #29
 8001b90:	430a      	orrs	r2, r1
 8001b92:	0f51      	lsrs	r1, r2, #29
 8001b94:	00d2      	lsls	r2, r2, #3
 8001b96:	08d2      	lsrs	r2, r2, #3
 8001b98:	0749      	lsls	r1, r1, #29
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	4319      	orrs	r1, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x384>
 8001ba2:	e1c8      	b.n	8001f36 <__aeabi_dsub+0x716>
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0309      	lsls	r1, r1, #12
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	031b      	lsls	r3, r3, #12
 8001bac:	49d5      	ldr	r1, [pc, #852]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001bae:	0b1b      	lsrs	r3, r3, #12
 8001bb0:	e6da      	b.n	8001968 <__aeabi_dsub+0x148>
 8001bb2:	49d5      	ldr	r1, [pc, #852]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001bb4:	1ab6      	subs	r6, r6, r2
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	4698      	mov	r8, r3
 8001bba:	e6b5      	b.n	8001928 <__aeabi_dsub+0x108>
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	f000 fa4d 	bl	800205c <__clzsi2>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	3218      	adds	r2, #24
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x3ac>
 8001bca:	e68f      	b.n	80018ec <__aeabi_dsub+0xcc>
 8001bcc:	0023      	movs	r3, r4
 8001bce:	3808      	subs	r0, #8
 8001bd0:	4083      	lsls	r3, r0
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	e692      	b.n	80018fc <__aeabi_dsub+0xdc>
 8001bd6:	4308      	orrs	r0, r1
 8001bd8:	0002      	movs	r2, r0
 8001bda:	1e50      	subs	r0, r2, #1
 8001bdc:	4182      	sbcs	r2, r0
 8001bde:	e66d      	b.n	80018bc <__aeabi_dsub+0x9c>
 8001be0:	4cca      	ldr	r4, [pc, #808]	; (8001f0c <__aeabi_dsub+0x6ec>)
 8001be2:	1c72      	adds	r2, r6, #1
 8001be4:	4222      	tst	r2, r4
 8001be6:	d000      	beq.n	8001bea <__aeabi_dsub+0x3ca>
 8001be8:	e0ad      	b.n	8001d46 <__aeabi_dsub+0x526>
 8001bea:	464a      	mov	r2, r9
 8001bec:	431a      	orrs	r2, r3
 8001bee:	2e00      	cmp	r6, #0
 8001bf0:	d1b8      	bne.n	8001b64 <__aeabi_dsub+0x344>
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x3d8>
 8001bf6:	e158      	b.n	8001eaa <__aeabi_dsub+0x68a>
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	4302      	orrs	r2, r0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x3e0>
 8001bfe:	e159      	b.n	8001eb4 <__aeabi_dsub+0x694>
 8001c00:	464a      	mov	r2, r9
 8001c02:	0759      	lsls	r1, r3, #29
 8001c04:	08d2      	lsrs	r2, r2, #3
 8001c06:	430a      	orrs	r2, r1
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	e786      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	0759      	lsls	r1, r3, #29
 8001c10:	08d2      	lsrs	r2, r2, #3
 8001c12:	430a      	orrs	r2, r1
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	e7c1      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001c18:	4dba      	ldr	r5, [pc, #744]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001c1a:	42aa      	cmp	r2, r5
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x400>
 8001c1e:	e11e      	b.n	8001e5e <__aeabi_dsub+0x63e>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	432b      	orrs	r3, r5
 8001c26:	4664      	mov	r4, ip
 8001c28:	2c38      	cmp	r4, #56	; 0x38
 8001c2a:	dc5d      	bgt.n	8001ce8 <__aeabi_dsub+0x4c8>
 8001c2c:	2c1f      	cmp	r4, #31
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0x412>
 8001c30:	e0d0      	b.n	8001dd4 <__aeabi_dsub+0x5b4>
 8001c32:	2520      	movs	r5, #32
 8001c34:	4667      	mov	r7, ip
 8001c36:	1b2d      	subs	r5, r5, r4
 8001c38:	464e      	mov	r6, r9
 8001c3a:	001c      	movs	r4, r3
 8001c3c:	40fe      	lsrs	r6, r7
 8001c3e:	40ac      	lsls	r4, r5
 8001c40:	4334      	orrs	r4, r6
 8001c42:	464e      	mov	r6, r9
 8001c44:	40ae      	lsls	r6, r5
 8001c46:	0035      	movs	r5, r6
 8001c48:	40fb      	lsrs	r3, r7
 8001c4a:	1e6e      	subs	r6, r5, #1
 8001c4c:	41b5      	sbcs	r5, r6
 8001c4e:	1ac9      	subs	r1, r1, r3
 8001c50:	432c      	orrs	r4, r5
 8001c52:	e04e      	b.n	8001cf2 <__aeabi_dsub+0x4d2>
 8001c54:	464a      	mov	r2, r9
 8001c56:	1a14      	subs	r4, r2, r0
 8001c58:	45a1      	cmp	r9, r4
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	4690      	mov	r8, r2
 8001c60:	1a5f      	subs	r7, r3, r1
 8001c62:	003a      	movs	r2, r7
 8001c64:	4647      	mov	r7, r8
 8001c66:	1bd2      	subs	r2, r2, r7
 8001c68:	4690      	mov	r8, r2
 8001c6a:	0212      	lsls	r2, r2, #8
 8001c6c:	d500      	bpl.n	8001c70 <__aeabi_dsub+0x450>
 8001c6e:	e08b      	b.n	8001d88 <__aeabi_dsub+0x568>
 8001c70:	4642      	mov	r2, r8
 8001c72:	4322      	orrs	r2, r4
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dsub+0x458>
 8001c76:	e630      	b.n	80018da <__aeabi_dsub+0xba>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	e74d      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001c7e:	464a      	mov	r2, r9
 8001c80:	0759      	lsls	r1, r3, #29
 8001c82:	08d2      	lsrs	r2, r2, #3
 8001c84:	430a      	orrs	r2, r1
 8001c86:	08db      	lsrs	r3, r3, #3
 8001c88:	e744      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001c8a:	4642      	mov	r2, r8
 8001c8c:	4b9e      	ldr	r3, [pc, #632]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001c8e:	0861      	lsrs	r1, r4, #1
 8001c90:	401a      	ands	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	2201      	movs	r2, #1
 8001c96:	4014      	ands	r4, r2
 8001c98:	430c      	orrs	r4, r1
 8001c9a:	07da      	lsls	r2, r3, #31
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4314      	orrs	r4, r2
 8001ca2:	e641      	b.n	8001928 <__aeabi_dsub+0x108>
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	3e1f      	subs	r6, #31
 8001ca8:	40f2      	lsrs	r2, r6
 8001caa:	0016      	movs	r6, r2
 8001cac:	2920      	cmp	r1, #32
 8001cae:	d003      	beq.n	8001cb8 <__aeabi_dsub+0x498>
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	1a51      	subs	r1, r2, r1
 8001cb4:	408b      	lsls	r3, r1
 8001cb6:	431c      	orrs	r4, r3
 8001cb8:	1e62      	subs	r2, r4, #1
 8001cba:	4194      	sbcs	r4, r2
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4334      	orrs	r4, r6
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	e71d      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001cc6:	000c      	movs	r4, r1
 8001cc8:	3a20      	subs	r2, #32
 8001cca:	40d4      	lsrs	r4, r2
 8001ccc:	0022      	movs	r2, r4
 8001cce:	4664      	mov	r4, ip
 8001cd0:	2c20      	cmp	r4, #32
 8001cd2:	d004      	beq.n	8001cde <__aeabi_dsub+0x4be>
 8001cd4:	2740      	movs	r7, #64	; 0x40
 8001cd6:	1b3f      	subs	r7, r7, r4
 8001cd8:	40b9      	lsls	r1, r7
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	4680      	mov	r8, r0
 8001cde:	4644      	mov	r4, r8
 8001ce0:	1e61      	subs	r1, r4, #1
 8001ce2:	418c      	sbcs	r4, r1
 8001ce4:	4322      	orrs	r2, r4
 8001ce6:	e5e9      	b.n	80018bc <__aeabi_dsub+0x9c>
 8001ce8:	464c      	mov	r4, r9
 8001cea:	4323      	orrs	r3, r4
 8001cec:	001c      	movs	r4, r3
 8001cee:	1e63      	subs	r3, r4, #1
 8001cf0:	419c      	sbcs	r4, r3
 8001cf2:	1b04      	subs	r4, r0, r4
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	419b      	sbcs	r3, r3
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	0016      	movs	r6, r2
 8001d02:	e5e2      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001d04:	464e      	mov	r6, r9
 8001d06:	431e      	orrs	r6, r3
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x4ec>
 8001d0a:	e0ae      	b.n	8001e6a <__aeabi_dsub+0x64a>
 8001d0c:	1e66      	subs	r6, r4, #1
 8001d0e:	2c01      	cmp	r4, #1
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x4f4>
 8001d12:	e0fd      	b.n	8001f10 <__aeabi_dsub+0x6f0>
 8001d14:	4f7b      	ldr	r7, [pc, #492]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x4fc>
 8001d1a:	e107      	b.n	8001f2c <__aeabi_dsub+0x70c>
 8001d1c:	46b4      	mov	ip, r6
 8001d1e:	e69b      	b.n	8001a58 <__aeabi_dsub+0x238>
 8001d20:	4664      	mov	r4, ip
 8001d22:	2220      	movs	r2, #32
 8001d24:	1b12      	subs	r2, r2, r4
 8001d26:	000c      	movs	r4, r1
 8001d28:	4094      	lsls	r4, r2
 8001d2a:	0007      	movs	r7, r0
 8001d2c:	4090      	lsls	r0, r2
 8001d2e:	46a0      	mov	r8, r4
 8001d30:	4664      	mov	r4, ip
 8001d32:	1e42      	subs	r2, r0, #1
 8001d34:	4190      	sbcs	r0, r2
 8001d36:	4662      	mov	r2, ip
 8001d38:	40e7      	lsrs	r7, r4
 8001d3a:	4644      	mov	r4, r8
 8001d3c:	40d1      	lsrs	r1, r2
 8001d3e:	433c      	orrs	r4, r7
 8001d40:	4304      	orrs	r4, r0
 8001d42:	185b      	adds	r3, r3, r1
 8001d44:	e6f3      	b.n	8001b2e <__aeabi_dsub+0x30e>
 8001d46:	4c6f      	ldr	r4, [pc, #444]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001d48:	42a2      	cmp	r2, r4
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x52e>
 8001d4c:	e0d5      	b.n	8001efa <__aeabi_dsub+0x6da>
 8001d4e:	4448      	add	r0, r9
 8001d50:	185b      	adds	r3, r3, r1
 8001d52:	4548      	cmp	r0, r9
 8001d54:	4189      	sbcs	r1, r1
 8001d56:	4249      	negs	r1, r1
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	07dc      	lsls	r4, r3, #31
 8001d5c:	0840      	lsrs	r0, r0, #1
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	4698      	mov	r8, r3
 8001d62:	0016      	movs	r6, r2
 8001d64:	4304      	orrs	r4, r0
 8001d66:	e6cc      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x54e>
 8001d6c:	e082      	b.n	8001e74 <__aeabi_dsub+0x654>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	4302      	orrs	r2, r0
 8001d72:	d140      	bne.n	8001df6 <__aeabi_dsub+0x5d6>
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	2500      	movs	r5, #0
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	e713      	b.n	8001ba4 <__aeabi_dsub+0x384>
 8001d7c:	074b      	lsls	r3, r1, #29
 8001d7e:	08c2      	lsrs	r2, r0, #3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	465d      	mov	r5, fp
 8001d84:	08cb      	lsrs	r3, r1, #3
 8001d86:	e6c5      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a84      	subs	r4, r0, r2
 8001d8c:	42a0      	cmp	r0, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	4252      	negs	r2, r2
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	4698      	mov	r8, r3
 8001d98:	465d      	mov	r5, fp
 8001d9a:	e59e      	b.n	80018da <__aeabi_dsub+0xba>
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	0759      	lsls	r1, r3, #29
 8001da0:	08d2      	lsrs	r2, r2, #3
 8001da2:	430a      	orrs	r2, r1
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	e6f9      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001da8:	464a      	mov	r2, r9
 8001daa:	1a14      	subs	r4, r2, r0
 8001dac:	45a1      	cmp	r9, r4
 8001dae:	4192      	sbcs	r2, r2
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	4252      	negs	r2, r2
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	4698      	mov	r8, r3
 8001db8:	2601      	movs	r6, #1
 8001dba:	e586      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001dbc:	464a      	mov	r2, r9
 8001dbe:	0759      	lsls	r1, r3, #29
 8001dc0:	08d2      	lsrs	r2, r2, #3
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	e6a5      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001dc8:	464c      	mov	r4, r9
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	001c      	movs	r4, r3
 8001dce:	1e63      	subs	r3, r4, #1
 8001dd0:	419c      	sbcs	r4, r3
 8001dd2:	e65b      	b.n	8001a8c <__aeabi_dsub+0x26c>
 8001dd4:	4665      	mov	r5, ip
 8001dd6:	001e      	movs	r6, r3
 8001dd8:	3d20      	subs	r5, #32
 8001dda:	40ee      	lsrs	r6, r5
 8001ddc:	2c20      	cmp	r4, #32
 8001dde:	d005      	beq.n	8001dec <__aeabi_dsub+0x5cc>
 8001de0:	2540      	movs	r5, #64	; 0x40
 8001de2:	1b2d      	subs	r5, r5, r4
 8001de4:	40ab      	lsls	r3, r5
 8001de6:	464c      	mov	r4, r9
 8001de8:	431c      	orrs	r4, r3
 8001dea:	46a2      	mov	sl, r4
 8001dec:	4654      	mov	r4, sl
 8001dee:	1e63      	subs	r3, r4, #1
 8001df0:	419c      	sbcs	r4, r3
 8001df2:	4334      	orrs	r4, r6
 8001df4:	e77d      	b.n	8001cf2 <__aeabi_dsub+0x4d2>
 8001df6:	074b      	lsls	r3, r1, #29
 8001df8:	08c2      	lsrs	r2, r0, #3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	465d      	mov	r5, fp
 8001dfe:	08cb      	lsrs	r3, r1, #3
 8001e00:	e6cc      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e02:	000a      	movs	r2, r1
 8001e04:	4302      	orrs	r2, r0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x5ea>
 8001e08:	e736      	b.n	8001c78 <__aeabi_dsub+0x458>
 8001e0a:	074b      	lsls	r3, r1, #29
 8001e0c:	08c2      	lsrs	r2, r0, #3
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	465d      	mov	r5, fp
 8001e12:	08cb      	lsrs	r3, r1, #3
 8001e14:	e681      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001e16:	464a      	mov	r2, r9
 8001e18:	1a84      	subs	r4, r0, r2
 8001e1a:	42a0      	cmp	r0, r4
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	1acb      	subs	r3, r1, r3
 8001e20:	4252      	negs	r2, r2
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	4698      	mov	r8, r3
 8001e26:	465d      	mov	r5, fp
 8001e28:	2601      	movs	r6, #1
 8001e2a:	e54e      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001e2c:	074b      	lsls	r3, r1, #29
 8001e2e:	08c2      	lsrs	r2, r0, #3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	08cb      	lsrs	r3, r1, #3
 8001e34:	e6b2      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e36:	464a      	mov	r2, r9
 8001e38:	1a14      	subs	r4, r2, r0
 8001e3a:	45a1      	cmp	r9, r4
 8001e3c:	4192      	sbcs	r2, r2
 8001e3e:	1a5f      	subs	r7, r3, r1
 8001e40:	4252      	negs	r2, r2
 8001e42:	1aba      	subs	r2, r7, r2
 8001e44:	4690      	mov	r8, r2
 8001e46:	0212      	lsls	r2, r2, #8
 8001e48:	d56b      	bpl.n	8001f22 <__aeabi_dsub+0x702>
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	1a84      	subs	r4, r0, r2
 8001e4e:	42a0      	cmp	r0, r4
 8001e50:	4192      	sbcs	r2, r2
 8001e52:	1acb      	subs	r3, r1, r3
 8001e54:	4252      	negs	r2, r2
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	4698      	mov	r8, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	e564      	b.n	8001928 <__aeabi_dsub+0x108>
 8001e5e:	074b      	lsls	r3, r1, #29
 8001e60:	08c2      	lsrs	r2, r0, #3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	465d      	mov	r5, fp
 8001e66:	08cb      	lsrs	r3, r1, #3
 8001e68:	e698      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e6a:	074b      	lsls	r3, r1, #29
 8001e6c:	08c2      	lsrs	r2, r0, #3
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	08cb      	lsrs	r3, r1, #3
 8001e72:	e64f      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001e74:	000a      	movs	r2, r1
 8001e76:	4302      	orrs	r2, r0
 8001e78:	d090      	beq.n	8001d9c <__aeabi_dsub+0x57c>
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	075c      	lsls	r4, r3, #29
 8001e7e:	08d2      	lsrs	r2, r2, #3
 8001e80:	4314      	orrs	r4, r2
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	0312      	lsls	r2, r2, #12
 8001e88:	4213      	tst	r3, r2
 8001e8a:	d008      	beq.n	8001e9e <__aeabi_dsub+0x67e>
 8001e8c:	08ce      	lsrs	r6, r1, #3
 8001e8e:	4216      	tst	r6, r2
 8001e90:	d105      	bne.n	8001e9e <__aeabi_dsub+0x67e>
 8001e92:	08c0      	lsrs	r0, r0, #3
 8001e94:	0749      	lsls	r1, r1, #29
 8001e96:	4308      	orrs	r0, r1
 8001e98:	0004      	movs	r4, r0
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	0033      	movs	r3, r6
 8001e9e:	0f61      	lsrs	r1, r4, #29
 8001ea0:	00e2      	lsls	r2, r4, #3
 8001ea2:	0749      	lsls	r1, r1, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	e678      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e632      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001eb4:	4448      	add	r0, r9
 8001eb6:	185b      	adds	r3, r3, r1
 8001eb8:	4548      	cmp	r0, r9
 8001eba:	4192      	sbcs	r2, r2
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	4252      	negs	r2, r2
 8001ec0:	4490      	add	r8, r2
 8001ec2:	4643      	mov	r3, r8
 8001ec4:	0004      	movs	r4, r0
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	d400      	bmi.n	8001ecc <__aeabi_dsub+0x6ac>
 8001eca:	e61a      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001ecc:	4642      	mov	r2, r8
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001ed0:	2601      	movs	r6, #1
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	e614      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001ed8:	4666      	mov	r6, ip
 8001eda:	001f      	movs	r7, r3
 8001edc:	3e20      	subs	r6, #32
 8001ede:	40f7      	lsrs	r7, r6
 8001ee0:	2c20      	cmp	r4, #32
 8001ee2:	d005      	beq.n	8001ef0 <__aeabi_dsub+0x6d0>
 8001ee4:	2640      	movs	r6, #64	; 0x40
 8001ee6:	1b36      	subs	r6, r6, r4
 8001ee8:	40b3      	lsls	r3, r6
 8001eea:	464c      	mov	r4, r9
 8001eec:	431c      	orrs	r4, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	433c      	orrs	r4, r7
 8001ef8:	e5c8      	b.n	8001a8c <__aeabi_dsub+0x26c>
 8001efa:	0011      	movs	r1, r2
 8001efc:	2300      	movs	r3, #0
 8001efe:	2200      	movs	r2, #0
 8001f00:	e532      	b.n	8001968 <__aeabi_dsub+0x148>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	ff7fffff 	.word	0xff7fffff
 8001f0c:	000007fe 	.word	0x000007fe
 8001f10:	464a      	mov	r2, r9
 8001f12:	1814      	adds	r4, r2, r0
 8001f14:	4284      	cmp	r4, r0
 8001f16:	4192      	sbcs	r2, r2
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	4698      	mov	r8, r3
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	4490      	add	r8, r2
 8001f20:	e5e9      	b.n	8001af6 <__aeabi_dsub+0x2d6>
 8001f22:	4642      	mov	r2, r8
 8001f24:	4322      	orrs	r2, r4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x70a>
 8001f28:	e6a6      	b.n	8001c78 <__aeabi_dsub+0x458>
 8001f2a:	e5ea      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001f2c:	074b      	lsls	r3, r1, #29
 8001f2e:	08c2      	lsrs	r2, r0, #3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e632      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001f36:	2200      	movs	r2, #0
 8001f38:	4901      	ldr	r1, [pc, #4]	; (8001f40 <__aeabi_dsub+0x720>)
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	e514      	b.n	8001968 <__aeabi_dsub+0x148>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__aeabi_d2iz>:
 8001f44:	000a      	movs	r2, r1
 8001f46:	b530      	push	{r4, r5, lr}
 8001f48:	4c13      	ldr	r4, [pc, #76]	; (8001f98 <__aeabi_d2iz+0x54>)
 8001f4a:	0053      	lsls	r3, r2, #1
 8001f4c:	0309      	lsls	r1, r1, #12
 8001f4e:	0005      	movs	r5, r0
 8001f50:	0b09      	lsrs	r1, r1, #12
 8001f52:	2000      	movs	r0, #0
 8001f54:	0d5b      	lsrs	r3, r3, #21
 8001f56:	0fd2      	lsrs	r2, r2, #31
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	dd04      	ble.n	8001f66 <__aeabi_d2iz+0x22>
 8001f5c:	480f      	ldr	r0, [pc, #60]	; (8001f9c <__aeabi_d2iz+0x58>)
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	dd02      	ble.n	8001f68 <__aeabi_d2iz+0x24>
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <__aeabi_d2iz+0x5c>)
 8001f64:	18d0      	adds	r0, r2, r3
 8001f66:	bd30      	pop	{r4, r5, pc}
 8001f68:	2080      	movs	r0, #128	; 0x80
 8001f6a:	0340      	lsls	r0, r0, #13
 8001f6c:	4301      	orrs	r1, r0
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <__aeabi_d2iz+0x60>)
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	281f      	cmp	r0, #31
 8001f74:	dd08      	ble.n	8001f88 <__aeabi_d2iz+0x44>
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <__aeabi_d2iz+0x64>)
 8001f78:	1ac3      	subs	r3, r0, r3
 8001f7a:	40d9      	lsrs	r1, r3
 8001f7c:	000b      	movs	r3, r1
 8001f7e:	4258      	negs	r0, r3
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d1f0      	bne.n	8001f66 <__aeabi_d2iz+0x22>
 8001f84:	0018      	movs	r0, r3
 8001f86:	e7ee      	b.n	8001f66 <__aeabi_d2iz+0x22>
 8001f88:	4c08      	ldr	r4, [pc, #32]	; (8001fac <__aeabi_d2iz+0x68>)
 8001f8a:	40c5      	lsrs	r5, r0
 8001f8c:	46a4      	mov	ip, r4
 8001f8e:	4463      	add	r3, ip
 8001f90:	4099      	lsls	r1, r3
 8001f92:	000b      	movs	r3, r1
 8001f94:	432b      	orrs	r3, r5
 8001f96:	e7f2      	b.n	8001f7e <__aeabi_d2iz+0x3a>
 8001f98:	000003fe 	.word	0x000003fe
 8001f9c:	0000041d 	.word	0x0000041d
 8001fa0:	7fffffff 	.word	0x7fffffff
 8001fa4:	00000433 	.word	0x00000433
 8001fa8:	00000413 	.word	0x00000413
 8001fac:	fffffbed 	.word	0xfffffbed

08001fb0 <__aeabi_i2d>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d016      	beq.n	8001fe4 <__aeabi_i2d+0x34>
 8001fb6:	17c3      	asrs	r3, r0, #31
 8001fb8:	18c5      	adds	r5, r0, r3
 8001fba:	405d      	eors	r5, r3
 8001fbc:	0fc4      	lsrs	r4, r0, #31
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	f000 f84c 	bl	800205c <__clzsi2>
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <__aeabi_i2d+0x5c>)
 8001fc6:	1a12      	subs	r2, r2, r0
 8001fc8:	280a      	cmp	r0, #10
 8001fca:	dc16      	bgt.n	8001ffa <__aeabi_i2d+0x4a>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	002e      	movs	r6, r5
 8001fd0:	3315      	adds	r3, #21
 8001fd2:	409e      	lsls	r6, r3
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	1a18      	subs	r0, r3, r0
 8001fd8:	40c5      	lsrs	r5, r0
 8001fda:	0553      	lsls	r3, r2, #21
 8001fdc:	032d      	lsls	r5, r5, #12
 8001fde:	0b2d      	lsrs	r5, r5, #12
 8001fe0:	0d5b      	lsrs	r3, r3, #21
 8001fe2:	e003      	b.n	8001fec <__aeabi_i2d+0x3c>
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2500      	movs	r5, #0
 8001fea:	2600      	movs	r6, #0
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	432b      	orrs	r3, r5
 8001ff0:	07e4      	lsls	r4, r4, #31
 8001ff2:	4323      	orrs	r3, r4
 8001ff4:	0030      	movs	r0, r6
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
 8001ffa:	380b      	subs	r0, #11
 8001ffc:	4085      	lsls	r5, r0
 8001ffe:	0553      	lsls	r3, r2, #21
 8002000:	032d      	lsls	r5, r5, #12
 8002002:	2600      	movs	r6, #0
 8002004:	0b2d      	lsrs	r5, r5, #12
 8002006:	0d5b      	lsrs	r3, r3, #21
 8002008:	e7f0      	b.n	8001fec <__aeabi_i2d+0x3c>
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	0000041e 	.word	0x0000041e

08002010 <__aeabi_ui2d>:
 8002010:	b510      	push	{r4, lr}
 8002012:	1e04      	subs	r4, r0, #0
 8002014:	d010      	beq.n	8002038 <__aeabi_ui2d+0x28>
 8002016:	f000 f821 	bl	800205c <__clzsi2>
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <__aeabi_ui2d+0x48>)
 800201c:	1a1b      	subs	r3, r3, r0
 800201e:	280a      	cmp	r0, #10
 8002020:	dc11      	bgt.n	8002046 <__aeabi_ui2d+0x36>
 8002022:	220b      	movs	r2, #11
 8002024:	0021      	movs	r1, r4
 8002026:	1a12      	subs	r2, r2, r0
 8002028:	40d1      	lsrs	r1, r2
 800202a:	3015      	adds	r0, #21
 800202c:	030a      	lsls	r2, r1, #12
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4084      	lsls	r4, r0
 8002032:	0b12      	lsrs	r2, r2, #12
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	e001      	b.n	800203c <__aeabi_ui2d+0x2c>
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	4313      	orrs	r3, r2
 8002040:	0020      	movs	r0, r4
 8002042:	0019      	movs	r1, r3
 8002044:	bd10      	pop	{r4, pc}
 8002046:	0022      	movs	r2, r4
 8002048:	380b      	subs	r0, #11
 800204a:	4082      	lsls	r2, r0
 800204c:	055b      	lsls	r3, r3, #21
 800204e:	0312      	lsls	r2, r2, #12
 8002050:	2400      	movs	r4, #0
 8002052:	0b12      	lsrs	r2, r2, #12
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	e7f1      	b.n	800203c <__aeabi_ui2d+0x2c>
 8002058:	0000041e 	.word	0x0000041e

0800205c <__clzsi2>:
 800205c:	211c      	movs	r1, #28
 800205e:	2301      	movs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	4298      	cmp	r0, r3
 8002064:	d301      	bcc.n	800206a <__clzsi2+0xe>
 8002066:	0c00      	lsrs	r0, r0, #16
 8002068:	3910      	subs	r1, #16
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	4298      	cmp	r0, r3
 800206e:	d301      	bcc.n	8002074 <__clzsi2+0x18>
 8002070:	0a00      	lsrs	r0, r0, #8
 8002072:	3908      	subs	r1, #8
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	4298      	cmp	r0, r3
 8002078:	d301      	bcc.n	800207e <__clzsi2+0x22>
 800207a:	0900      	lsrs	r0, r0, #4
 800207c:	3904      	subs	r1, #4
 800207e:	a202      	add	r2, pc, #8	; (adr r2, 8002088 <__clzsi2+0x2c>)
 8002080:	5c10      	ldrb	r0, [r2, r0]
 8002082:	1840      	adds	r0, r0, r1
 8002084:	4770      	bx	lr
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	02020304 	.word	0x02020304
 800208c:	01010101 	.word	0x01010101
	...

08002098 <display_on>:
#include "display.h"

static ticks = 0;

void display_on(bool on)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	0002      	movs	r2, r0
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin, on);
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4812      	ldr	r0, [pc, #72]	; (80020f8 <display_on+0x60>)
 80020ae:	0019      	movs	r1, r3
 80020b0:	f004 fdc7 	bl	8006c42 <HAL_GPIO_WritePin>

	display_d1(on);
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f81f 	bl	80020fc <display_d1>
	display_d2(on);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f82d 	bl	8002122 <display_d2>
	display_d3(on);
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f83b 	bl	8002148 <display_d3>
	display_d4(on);
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f84a 	bl	8002170 <display_d4>
	display_d5(on);
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f859 	bl	8002198 <display_d5>

	display_number(-1, false);
 80020e6:	2100      	movs	r1, #0
 80020e8:	20ff      	movs	r0, #255	; 0xff
 80020ea:	f000 f907 	bl	80022fc <display_number>
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	50000800 	.word	0x50000800

080020fc <display_d1>:

void display_d1(bool on)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	0002      	movs	r2, r0
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D1_Pin, on);
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	0119      	lsls	r1, r3, #4
 8002110:	23a0      	movs	r3, #160	; 0xa0
 8002112:	05db      	lsls	r3, r3, #23
 8002114:	0018      	movs	r0, r3
 8002116:	f004 fd94 	bl	8006c42 <HAL_GPIO_WritePin>
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <display_d2>:

void display_d2(bool on)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	0002      	movs	r2, r0
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D2_Pin, on);
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	00d9      	lsls	r1, r3, #3
 8002136:	23a0      	movs	r3, #160	; 0xa0
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	0018      	movs	r0, r3
 800213c:	f004 fd81 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <display_d3>:

void display_d3(bool on)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	0002      	movs	r2, r0
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, DISPLAY_D3_Pin, on);
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <display_d3+0x24>)
 800215e:	0019      	movs	r1, r3
 8002160:	f004 fd6f 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	50000c00 	.word	0x50000c00

08002170 <display_d4>:

void display_d4(bool on)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, DISPLAY_D4_Pin, on);
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <display_d4+0x24>)
 8002186:	0019      	movs	r1, r3
 8002188:	f004 fd5b 	bl	8006c42 <HAL_GPIO_WritePin>
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}
 8002194:	50000c00 	.word	0x50000c00

08002198 <display_d5>:

void display_d5(bool on)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	0002      	movs	r2, r0
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_D5_Pin, on);
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <display_d5+0x24>)
 80021aa:	001a      	movs	r2, r3
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	f004 fd48 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	50000800 	.word	0x50000800

080021c0 <display_a>:

void display_a(bool on)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	0002      	movs	r2, r0
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_A_Pin, on);
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <display_a+0x24>)
 80021d2:	001a      	movs	r2, r3
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	f004 fd34 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	50000800 	.word	0x50000800

080021e8 <display_b>:

void display_b(bool on)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_B_Pin, on);
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	23a0      	movs	r3, #160	; 0xa0
 80021fe:	05db      	lsls	r3, r3, #23
 8002200:	0018      	movs	r0, r3
 8002202:	f004 fd1e 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}

0800220e <display_c>:

void display_c(bool on)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	0002      	movs	r2, r0
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_C_Pin, on);
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	0059      	lsls	r1, r3, #1
 8002222:	23a0      	movs	r3, #160	; 0xa0
 8002224:	05db      	lsls	r3, r3, #23
 8002226:	0018      	movs	r0, r3
 8002228:	f004 fd0b 	bl	8006c42 <HAL_GPIO_WritePin>
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <display_d>:

void display_d(bool on)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_D_Pin, on);
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <display_d+0x24>)
 800224a:	0019      	movs	r1, r3
 800224c:	f004 fcf9 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	50000400 	.word	0x50000400

0800225c <display_e>:

void display_e(bool on)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	0002      	movs	r2, r0
 8002264:	1dfb      	adds	r3, r7, #7
 8002266:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_E_Pin, on);
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <display_e+0x24>)
 8002272:	0019      	movs	r1, r3
 8002274:	f004 fce5 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	50000400 	.word	0x50000400

08002284 <display_f>:

void display_f(bool on)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_F_Pin, on);
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <display_f+0x24>)
 800229a:	0019      	movs	r1, r3
 800229c:	f004 fcd1 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	50000400 	.word	0x50000400

080022ac <display_g>:

void display_g(bool on)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	0002      	movs	r2, r0
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_G_Pin, on);
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <display_g+0x24>)
 80022c2:	0019      	movs	r1, r3
 80022c4:	f004 fcbd 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	50000400 	.word	0x50000400

080022d4 <display_dp>:

void display_dp(bool on)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_DP_Pin, on);
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	0219      	lsls	r1, r3, #8
 80022e8:	23a0      	movs	r3, #160	; 0xa0
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	0018      	movs	r0, r3
 80022ee:	f004 fca8 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <display_number>:

void display_number(uint8_t number, bool dot)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	0002      	movs	r2, r0
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	1c0a      	adds	r2, r1, #0
 800230c:	701a      	strb	r2, [r3, #0]
	switch (number)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b12      	cmp	r3, #18
 8002314:	d900      	bls.n	8002318 <display_number+0x1c>
 8002316:	e1a6      	b.n	8002666 <display_number+0x36a>
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	4be2      	ldr	r3, [pc, #904]	; (80026a4 <display_number+0x3a8>)
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	469f      	mov	pc, r3
	{
		case 0:
			display_a(true);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff ff4c 	bl	80021c0 <display_a>
			display_b(true);
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff ff5d 	bl	80021e8 <display_b>
			display_c(true);
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ff6d 	bl	800220e <display_c>
			display_d(true);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff ff7d 	bl	8002234 <display_d>
			display_e(true);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ff8e 	bl	800225c <display_e>
			display_f(true);
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff ff9f 	bl	8002284 <display_f>
			display_g(false);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ffb0 	bl	80022ac <display_g>
			break;
 800234c:	e1a1      	b.n	8002692 <display_number+0x396>
		case 1:
			display_a(false);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff ff36 	bl	80021c0 <display_a>
			display_b(true);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff ff47 	bl	80021e8 <display_b>
			display_c(true);
 800235a:	2001      	movs	r0, #1
 800235c:	f7ff ff57 	bl	800220e <display_c>
			display_d(false);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff ff67 	bl	8002234 <display_d>
			display_e(false);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff ff78 	bl	800225c <display_e>
			display_f(false);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ff89 	bl	8002284 <display_f>
			display_g(false);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff ff9a 	bl	80022ac <display_g>
			break;
 8002378:	e18b      	b.n	8002692 <display_number+0x396>
		case 2:
			display_a(true);
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff ff20 	bl	80021c0 <display_a>
			display_b(true);
 8002380:	2001      	movs	r0, #1
 8002382:	f7ff ff31 	bl	80021e8 <display_b>
			display_c(false);
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff ff41 	bl	800220e <display_c>
			display_d(true);
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff ff51 	bl	8002234 <display_d>
			display_e(true);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff ff62 	bl	800225c <display_e>
			display_f(false);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ff73 	bl	8002284 <display_f>
			display_g(true);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff ff84 	bl	80022ac <display_g>
			break;
 80023a4:	e175      	b.n	8002692 <display_number+0x396>
		case 3:
			display_a(true);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff ff0a 	bl	80021c0 <display_a>
			display_b(true);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff ff1b 	bl	80021e8 <display_b>
			display_c(true);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff ff2b 	bl	800220e <display_c>
			display_d(true);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff ff3b 	bl	8002234 <display_d>
			display_e(false);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ff4c 	bl	800225c <display_e>
			display_f(false);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff ff5d 	bl	8002284 <display_f>
			display_g(true);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7ff ff6e 	bl	80022ac <display_g>
			break;
 80023d0:	e15f      	b.n	8002692 <display_number+0x396>
		case 4:
			display_a(false);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fef4 	bl	80021c0 <display_a>
			display_b(true);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff ff05 	bl	80021e8 <display_b>
			display_c(true);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff ff15 	bl	800220e <display_c>
			display_d(false);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff ff25 	bl	8002234 <display_d>
			display_e(false);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff ff36 	bl	800225c <display_e>
			display_f(true);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff ff47 	bl	8002284 <display_f>
			display_g(true);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff ff58 	bl	80022ac <display_g>
			break;
 80023fc:	e149      	b.n	8002692 <display_number+0x396>
		case 5:
			display_a(true);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fede 	bl	80021c0 <display_a>
			display_b(false);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff feef 	bl	80021e8 <display_b>
			display_c(true);
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff feff 	bl	800220e <display_c>
			display_d(true);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff ff0f 	bl	8002234 <display_d>
			display_e(false);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff ff20 	bl	800225c <display_e>
			display_f(true);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff ff31 	bl	8002284 <display_f>
			display_g(true);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ff42 	bl	80022ac <display_g>
			break;
 8002428:	e133      	b.n	8002692 <display_number+0x396>
		case 6:
			display_a(true);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fec8 	bl	80021c0 <display_a>
			display_b(false);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fed9 	bl	80021e8 <display_b>
			display_c(true);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fee9 	bl	800220e <display_c>
			display_d(true);
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff fef9 	bl	8002234 <display_d>
			display_e(true);
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff ff0a 	bl	800225c <display_e>
			display_f(true);
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff ff1b 	bl	8002284 <display_f>
			display_g(true);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff ff2c 	bl	80022ac <display_g>
			break;
 8002454:	e11d      	b.n	8002692 <display_number+0x396>
		case 7:
			display_a(true);
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff feb2 	bl	80021c0 <display_a>
			display_b(true);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fec3 	bl	80021e8 <display_b>
			display_c(true);
 8002462:	2001      	movs	r0, #1
 8002464:	f7ff fed3 	bl	800220e <display_c>
			display_d(false);
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff fee3 	bl	8002234 <display_d>
			display_e(false);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fef4 	bl	800225c <display_e>
			display_f(false);
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ff05 	bl	8002284 <display_f>
			display_g(false);
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff ff16 	bl	80022ac <display_g>
			break;
 8002480:	e107      	b.n	8002692 <display_number+0x396>
		case 8:
			display_a(true);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fe9c 	bl	80021c0 <display_a>
			display_b(true);
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff fead 	bl	80021e8 <display_b>
			display_c(true);
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff febd 	bl	800220e <display_c>
			display_d(true);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff fecd 	bl	8002234 <display_d>
			display_e(true);
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff fede 	bl	800225c <display_e>
			display_f(true);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff feef 	bl	8002284 <display_f>
			display_g(true);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff ff00 	bl	80022ac <display_g>
			break;
 80024ac:	e0f1      	b.n	8002692 <display_number+0x396>
		case 9:
			display_a(true);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff fe86 	bl	80021c0 <display_a>
			display_b(true);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe97 	bl	80021e8 <display_b>
			display_c(true);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff fea7 	bl	800220e <display_c>
			display_d(true);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7ff feb7 	bl	8002234 <display_d>
			display_e(false);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fec8 	bl	800225c <display_e>
			display_f(true);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff fed9 	bl	8002284 <display_f>
			display_g(true);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff feea 	bl	80022ac <display_g>
			break;
 80024d8:	e0db      	b.n	8002692 <display_number+0x396>
		case 10: // A
			display_a(true);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff fe70 	bl	80021c0 <display_a>
			display_b(true);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f7ff fe81 	bl	80021e8 <display_b>
			display_c(true);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff fe91 	bl	800220e <display_c>
			display_d(true);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff fea1 	bl	8002234 <display_d>
			display_e(false);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff feb2 	bl	800225c <display_e>
			display_f(true);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7ff fec3 	bl	8002284 <display_f>
			display_g(true);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7ff fed4 	bl	80022ac <display_g>
			break;
 8002504:	e0c5      	b.n	8002692 <display_number+0x396>
		case 11: // B
			display_a(true);
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff fe5a 	bl	80021c0 <display_a>
			display_b(true);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fe6b 	bl	80021e8 <display_b>
			display_c(true);
 8002512:	2001      	movs	r0, #1
 8002514:	f7ff fe7b 	bl	800220e <display_c>
			display_d(true);
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fe8b 	bl	8002234 <display_d>
			display_e(true);
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff fe9c 	bl	800225c <display_e>
			display_f(true);
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fead 	bl	8002284 <display_f>
			display_g(true);
 800252a:	2001      	movs	r0, #1
 800252c:	f7ff febe 	bl	80022ac <display_g>
			break;
 8002530:	e0af      	b.n	8002692 <display_number+0x396>
		case 12: // C
			display_a(true);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff fe44 	bl	80021c0 <display_a>
			display_b(false);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fe55 	bl	80021e8 <display_b>
			display_c(false);
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fe65 	bl	800220e <display_c>
			display_d(true);
 8002544:	2001      	movs	r0, #1
 8002546:	f7ff fe75 	bl	8002234 <display_d>
			display_e(true);
 800254a:	2001      	movs	r0, #1
 800254c:	f7ff fe86 	bl	800225c <display_e>
			display_f(true);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff fe97 	bl	8002284 <display_f>
			display_g(true);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff fea8 	bl	80022ac <display_g>
			break;
 800255c:	e099      	b.n	8002692 <display_number+0x396>
		case 13: // D
			display_a(true);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff fe2e 	bl	80021c0 <display_a>
			display_b(true);
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff fe3f 	bl	80021e8 <display_b>
			display_c(true);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fe4f 	bl	800220e <display_c>
			display_d(true);
 8002570:	2001      	movs	r0, #1
 8002572:	f7ff fe5f 	bl	8002234 <display_d>
			display_e(true);
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff fe70 	bl	800225c <display_e>
			display_f(true);
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff fe81 	bl	8002284 <display_f>
			display_g(false);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fe92 	bl	80022ac <display_g>
			break;
 8002588:	e083      	b.n	8002692 <display_number+0x396>
		case 14: // E
			display_a(true);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fe18 	bl	80021c0 <display_a>
			display_b(false);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff fe29 	bl	80021e8 <display_b>
			display_c(false);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fe39 	bl	800220e <display_c>
			display_d(true);
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fe49 	bl	8002234 <display_d>
			display_e(true);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff fe5a 	bl	800225c <display_e>
			display_f(true);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fe6b 	bl	8002284 <display_f>
			display_g(true);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff fe7c 	bl	80022ac <display_g>
			break;
 80025b4:	e06d      	b.n	8002692 <display_number+0x396>
		case 15: // F
			display_a(true);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff fe02 	bl	80021c0 <display_a>
			display_b(false);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fe13 	bl	80021e8 <display_b>
			display_c(false);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff fe23 	bl	800220e <display_c>
			display_d(false);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fe33 	bl	8002234 <display_d>
			display_e(true);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff fe44 	bl	800225c <display_e>
			display_f(true);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff fe55 	bl	8002284 <display_f>
			display_g(true);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff fe66 	bl	80022ac <display_g>
			break;
 80025e0:	e057      	b.n	8002692 <display_number+0x396>
		case 16: // T
			display_a(true);
 80025e2:	2001      	movs	r0, #1
 80025e4:	f7ff fdec 	bl	80021c0 <display_a>
			display_b(false);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fdfd 	bl	80021e8 <display_b>
			display_c(false);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff fe0d 	bl	800220e <display_c>
			display_d(false);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff fe1d 	bl	8002234 <display_d>
			display_e(false);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fe2e 	bl	800225c <display_e>
			display_f(false);
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff fe3f 	bl	8002284 <display_f>
			display_g(false);
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fe50 	bl	80022ac <display_g>
			break;
 800260c:	e041      	b.n	8002692 <display_number+0x396>
		case 17: // L
			display_a(false);
 800260e:	2000      	movs	r0, #0
 8002610:	f7ff fdd6 	bl	80021c0 <display_a>
			display_b(false);
 8002614:	2000      	movs	r0, #0
 8002616:	f7ff fde7 	bl	80021e8 <display_b>
			display_c(false);
 800261a:	2000      	movs	r0, #0
 800261c:	f7ff fdf7 	bl	800220e <display_c>
			display_d(true);
 8002620:	2001      	movs	r0, #1
 8002622:	f7ff fe07 	bl	8002234 <display_d>
			display_e(true);
 8002626:	2001      	movs	r0, #1
 8002628:	f7ff fe18 	bl	800225c <display_e>
			display_f(true);
 800262c:	2001      	movs	r0, #1
 800262e:	f7ff fe29 	bl	8002284 <display_f>
			display_g(false);
 8002632:	2000      	movs	r0, #0
 8002634:	f7ff fe3a 	bl	80022ac <display_g>
			break;
 8002638:	e02b      	b.n	8002692 <display_number+0x396>
		case 18: // U
			display_a(false);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff fdc0 	bl	80021c0 <display_a>
			display_b(true);
 8002640:	2001      	movs	r0, #1
 8002642:	f7ff fdd1 	bl	80021e8 <display_b>
			display_c(true);
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff fde1 	bl	800220e <display_c>
			display_d(true);
 800264c:	2001      	movs	r0, #1
 800264e:	f7ff fdf1 	bl	8002234 <display_d>
			display_e(true);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fe02 	bl	800225c <display_e>
			display_f(true);
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff fe13 	bl	8002284 <display_f>
			display_g(false);
 800265e:	2000      	movs	r0, #0
 8002660:	f7ff fe24 	bl	80022ac <display_g>
			break;
 8002664:	e015      	b.n	8002692 <display_number+0x396>
		default:
			display_a(false);
 8002666:	2000      	movs	r0, #0
 8002668:	f7ff fdaa 	bl	80021c0 <display_a>
			display_b(false);
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff fdbb 	bl	80021e8 <display_b>
			display_c(false);
 8002672:	2000      	movs	r0, #0
 8002674:	f7ff fdcb 	bl	800220e <display_c>
			display_d(false);
 8002678:	2000      	movs	r0, #0
 800267a:	f7ff fddb 	bl	8002234 <display_d>
			display_e(false);
 800267e:	2000      	movs	r0, #0
 8002680:	f7ff fdec 	bl	800225c <display_e>
			display_f(false);
 8002684:	2000      	movs	r0, #0
 8002686:	f7ff fdfd 	bl	8002284 <display_f>
			display_g(false);
 800268a:	2000      	movs	r0, #0
 800268c:	f7ff fe0e 	bl	80022ac <display_g>
			break;
 8002690:	46c0      	nop			; (mov r8, r8)
	}

	display_dp(dot);
 8002692:	1dbb      	adds	r3, r7, #6
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	0018      	movs	r0, r3
 8002698:	f7ff fe1c 	bl	80022d4 <display_dp>
}
 800269c:	46c0      	nop			; (mov r8, r8)
 800269e:	46bd      	mov	sp, r7
 80026a0:	b002      	add	sp, #8
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	080098b0 	.word	0x080098b0

080026a8 <display>:

void display(int value, bool dot)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	000a      	movs	r2, r1
 80026b2:	1cfb      	adds	r3, r7, #3
 80026b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D6_OFF_Pin, false);
 80026b6:	23a0      	movs	r3, #160	; 0xa0
 80026b8:	05db      	lsls	r3, r3, #23
 80026ba:	2200      	movs	r2, #0
 80026bc:	2104      	movs	r1, #4
 80026be:	0018      	movs	r0, r3
 80026c0:	f004 fabf 	bl	8006c42 <HAL_GPIO_WritePin>
	uint8_t n = 0;
 80026c4:	240f      	movs	r4, #15
 80026c6:	193b      	adds	r3, r7, r4
 80026c8:	2200      	movs	r2, #0
 80026ca:	701a      	strb	r2, [r3, #0]
	if (ticks == 1)
 80026cc:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <display+0x1dc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d127      	bne.n	8002724 <display+0x7c>
	{
		n = (value % 100000 - value % value % 10000) / 10000;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	496c      	ldr	r1, [pc, #432]	; (8002888 <display+0x1e0>)
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fd fe81 	bl	80003e0 <__aeabi_idivmod>
 80026de:	000b      	movs	r3, r1
 80026e0:	496a      	ldr	r1, [pc, #424]	; (800288c <display+0x1e4>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7fd fd96 	bl	8000214 <__divsi3>
 80026e8:	0003      	movs	r3, r0
 80026ea:	001a      	movs	r2, r3
 80026ec:	193b      	adds	r3, r7, r4
 80026ee:	701a      	strb	r2, [r3, #0]
		display_d1(n != 0);
 80026f0:	193b      	adds	r3, r7, r4
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	1e5a      	subs	r2, r3, #1
 80026f6:	4193      	sbcs	r3, r2
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	0018      	movs	r0, r3
 80026fc:	f7ff fcfe 	bl	80020fc <display_d1>
		display_d2(false);
 8002700:	2000      	movs	r0, #0
 8002702:	f7ff fd0e 	bl	8002122 <display_d2>
		display_d3(false);
 8002706:	2000      	movs	r0, #0
 8002708:	f7ff fd1e 	bl	8002148 <display_d3>
		display_d4(false);
 800270c:	2000      	movs	r0, #0
 800270e:	f7ff fd2f 	bl	8002170 <display_d4>
		display_d5(false);
 8002712:	2000      	movs	r0, #0
 8002714:	f7ff fd40 	bl	8002198 <display_d5>
		display_number(n, false);
 8002718:	193b      	adds	r3, r7, r4
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	2100      	movs	r1, #0
 800271e:	0018      	movs	r0, r3
 8002720:	f7ff fdec 	bl	80022fc <display_number>
	}
	if (ticks == 2)
 8002724:	4b57      	ldr	r3, [pc, #348]	; (8002884 <display+0x1dc>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d125      	bne.n	8002778 <display+0xd0>
	{
		n = (value % 10000 - value % value % 1000) / 1000;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4957      	ldr	r1, [pc, #348]	; (800288c <display+0x1e4>)
 8002730:	0018      	movs	r0, r3
 8002732:	f7fd fe55 	bl	80003e0 <__aeabi_idivmod>
 8002736:	000b      	movs	r3, r1
 8002738:	001a      	movs	r2, r3
 800273a:	23fa      	movs	r3, #250	; 0xfa
 800273c:	0099      	lsls	r1, r3, #2
 800273e:	0010      	movs	r0, r2
 8002740:	f7fd fd68 	bl	8000214 <__divsi3>
 8002744:	0003      	movs	r3, r0
 8002746:	001a      	movs	r2, r3
 8002748:	240f      	movs	r4, #15
 800274a:	193b      	adds	r3, r7, r4
 800274c:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 800274e:	2000      	movs	r0, #0
 8002750:	f7ff fcd4 	bl	80020fc <display_d1>
		display_d2(true);
 8002754:	2001      	movs	r0, #1
 8002756:	f7ff fce4 	bl	8002122 <display_d2>
		display_d3(false);
 800275a:	2000      	movs	r0, #0
 800275c:	f7ff fcf4 	bl	8002148 <display_d3>
		display_d4(false);
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff fd05 	bl	8002170 <display_d4>
		display_d5(false);
 8002766:	2000      	movs	r0, #0
 8002768:	f7ff fd16 	bl	8002198 <display_d5>
		display_number(n, false);
 800276c:	193b      	adds	r3, r7, r4
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2100      	movs	r1, #0
 8002772:	0018      	movs	r0, r3
 8002774:	f7ff fdc2 	bl	80022fc <display_number>
	}
	if (ticks == 3)
 8002778:	4b42      	ldr	r3, [pc, #264]	; (8002884 <display+0x1dc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b03      	cmp	r3, #3
 800277e:	d126      	bne.n	80027ce <display+0x126>
	{
		n = (value % 1000 - value % value % 100) / 100;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	22fa      	movs	r2, #250	; 0xfa
 8002784:	0091      	lsls	r1, r2, #2
 8002786:	0018      	movs	r0, r3
 8002788:	f7fd fe2a 	bl	80003e0 <__aeabi_idivmod>
 800278c:	000b      	movs	r3, r1
 800278e:	2164      	movs	r1, #100	; 0x64
 8002790:	0018      	movs	r0, r3
 8002792:	f7fd fd3f 	bl	8000214 <__divsi3>
 8002796:	0003      	movs	r3, r0
 8002798:	001a      	movs	r2, r3
 800279a:	240f      	movs	r4, #15
 800279c:	193b      	adds	r3, r7, r4
 800279e:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7ff fcab 	bl	80020fc <display_d1>
		display_d2(false);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7ff fcbb 	bl	8002122 <display_d2>
		display_d3(true);
 80027ac:	2001      	movs	r0, #1
 80027ae:	f7ff fccb 	bl	8002148 <display_d3>
		display_d4(false);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7ff fcdc 	bl	8002170 <display_d4>
		display_d5(false);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7ff fced 	bl	8002198 <display_d5>
		display_number(n, dot);
 80027be:	1cfb      	adds	r3, r7, #3
 80027c0:	781a      	ldrb	r2, [r3, #0]
 80027c2:	193b      	adds	r3, r7, r4
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	0011      	movs	r1, r2
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff fd97 	bl	80022fc <display_number>
	}
	if (ticks == 4)
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <display+0x1dc>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b04      	cmp	r3, #4
 80027d4:	d123      	bne.n	800281e <display+0x176>
	{
		n = (value % 100 - value % value % 10) / 10;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2164      	movs	r1, #100	; 0x64
 80027da:	0018      	movs	r0, r3
 80027dc:	f7fd fe00 	bl	80003e0 <__aeabi_idivmod>
 80027e0:	000b      	movs	r3, r1
 80027e2:	210a      	movs	r1, #10
 80027e4:	0018      	movs	r0, r3
 80027e6:	f7fd fd15 	bl	8000214 <__divsi3>
 80027ea:	0003      	movs	r3, r0
 80027ec:	001a      	movs	r2, r3
 80027ee:	240f      	movs	r4, #15
 80027f0:	193b      	adds	r3, r7, r4
 80027f2:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7ff fc81 	bl	80020fc <display_d1>
		display_d2(false);
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff fc91 	bl	8002122 <display_d2>
		display_d3(false);
 8002800:	2000      	movs	r0, #0
 8002802:	f7ff fca1 	bl	8002148 <display_d3>
		display_d4(true);
 8002806:	2001      	movs	r0, #1
 8002808:	f7ff fcb2 	bl	8002170 <display_d4>
		display_d5(false);
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff fcc3 	bl	8002198 <display_d5>
		display_number(n, false);
 8002812:	193b      	adds	r3, r7, r4
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2100      	movs	r1, #0
 8002818:	0018      	movs	r0, r3
 800281a:	f7ff fd6f 	bl	80022fc <display_number>
	}
	if (ticks == 5)
 800281e:	4b19      	ldr	r3, [pc, #100]	; (8002884 <display+0x1dc>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2b05      	cmp	r3, #5
 8002824:	d11e      	bne.n	8002864 <display+0x1bc>
	{
		n = (value % 10 - value % value % 1) / 1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	210a      	movs	r1, #10
 800282a:	0018      	movs	r0, r3
 800282c:	f7fd fdd8 	bl	80003e0 <__aeabi_idivmod>
 8002830:	000b      	movs	r3, r1
 8002832:	001a      	movs	r2, r3
 8002834:	240f      	movs	r4, #15
 8002836:	193b      	adds	r3, r7, r4
 8002838:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 800283a:	2000      	movs	r0, #0
 800283c:	f7ff fc5e 	bl	80020fc <display_d1>
		display_d2(false);
 8002840:	2000      	movs	r0, #0
 8002842:	f7ff fc6e 	bl	8002122 <display_d2>
		display_d3(false);
 8002846:	2000      	movs	r0, #0
 8002848:	f7ff fc7e 	bl	8002148 <display_d3>
		display_d4(false);
 800284c:	2000      	movs	r0, #0
 800284e:	f7ff fc8f 	bl	8002170 <display_d4>
		display_d5(true);
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fca0 	bl	8002198 <display_d5>
		display_number(n, false);
 8002858:	193b      	adds	r3, r7, r4
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2100      	movs	r1, #0
 800285e:	0018      	movs	r0, r3
 8002860:	f7ff fd4c 	bl	80022fc <display_number>
	}

	if (ticks == 5)
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <display+0x1dc>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b05      	cmp	r3, #5
 800286a:	d102      	bne.n	8002872 <display+0x1ca>
	{
		ticks = 0;
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <display+0x1dc>)
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 8002872:	4b04      	ldr	r3, [pc, #16]	; (8002884 <display+0x1dc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <display+0x1dc>)
 800287a:	601a      	str	r2, [r3, #0]
}
 800287c:	46c0      	nop			; (mov r8, r8)
 800287e:	46bd      	mov	sp, r7
 8002880:	b005      	add	sp, #20
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	20000138 	.word	0x20000138
 8002888:	000186a0 	.word	0x000186a0
 800288c:	00002710 	.word	0x00002710

08002890 <display_show_off>:

void display_show_off()
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
	if (ticks == 1)
 8002894:	4b3c      	ldr	r3, [pc, #240]	; (8002988 <display_show_off+0xf8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10e      	bne.n	80028ba <display_show_off+0x2a>
	{
		display_d1(false);
 800289c:	2000      	movs	r0, #0
 800289e:	f7ff fc2d 	bl	80020fc <display_d1>
		display_d2(false);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7ff fc3d 	bl	8002122 <display_d2>
		display_d3(false);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7ff fc4d 	bl	8002148 <display_d3>
		display_d4(false);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7ff fc5e 	bl	8002170 <display_d4>
		display_d5(false);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff fc6f 	bl	8002198 <display_d5>
	}
	if (ticks == 2)
 80028ba:	4b33      	ldr	r3, [pc, #204]	; (8002988 <display_show_off+0xf8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d10e      	bne.n	80028e0 <display_show_off+0x50>
	{
		display_d1(false);
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7ff fc1a 	bl	80020fc <display_d1>
		display_d2(false);
 80028c8:	2000      	movs	r0, #0
 80028ca:	f7ff fc2a 	bl	8002122 <display_d2>
		display_d3(false);
 80028ce:	2000      	movs	r0, #0
 80028d0:	f7ff fc3a 	bl	8002148 <display_d3>
		display_d4(false);
 80028d4:	2000      	movs	r0, #0
 80028d6:	f7ff fc4b 	bl	8002170 <display_d4>
		display_d5(false);
 80028da:	2000      	movs	r0, #0
 80028dc:	f7ff fc5c 	bl	8002198 <display_d5>
	}
	if (ticks == 3)
 80028e0:	4b29      	ldr	r3, [pc, #164]	; (8002988 <display_show_off+0xf8>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d112      	bne.n	800290e <display_show_off+0x7e>
	{
		display_d1(false);
 80028e8:	2000      	movs	r0, #0
 80028ea:	f7ff fc07 	bl	80020fc <display_d1>
		display_d2(false);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7ff fc17 	bl	8002122 <display_d2>
		display_d3(true);
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7ff fc27 	bl	8002148 <display_d3>
		display_d4(false);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7ff fc38 	bl	8002170 <display_d4>
		display_d5(false);
 8002900:	2000      	movs	r0, #0
 8002902:	f7ff fc49 	bl	8002198 <display_d5>
		display_number(0, false);
 8002906:	2100      	movs	r1, #0
 8002908:	2000      	movs	r0, #0
 800290a:	f7ff fcf7 	bl	80022fc <display_number>
	}
	if (ticks == 4)
 800290e:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <display_show_off+0xf8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b04      	cmp	r3, #4
 8002914:	d112      	bne.n	800293c <display_show_off+0xac>
	{
		display_d1(false);
 8002916:	2000      	movs	r0, #0
 8002918:	f7ff fbf0 	bl	80020fc <display_d1>
		display_d2(false);
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff fc00 	bl	8002122 <display_d2>
		display_d3(false);
 8002922:	2000      	movs	r0, #0
 8002924:	f7ff fc10 	bl	8002148 <display_d3>
		display_d4(true);
 8002928:	2001      	movs	r0, #1
 800292a:	f7ff fc21 	bl	8002170 <display_d4>
		display_d5(false);
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff fc32 	bl	8002198 <display_d5>
		display_number(15, false);
 8002934:	2100      	movs	r1, #0
 8002936:	200f      	movs	r0, #15
 8002938:	f7ff fce0 	bl	80022fc <display_number>
	}
	if (ticks == 5)
 800293c:	4b12      	ldr	r3, [pc, #72]	; (8002988 <display_show_off+0xf8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b05      	cmp	r3, #5
 8002942:	d112      	bne.n	800296a <display_show_off+0xda>
	{
		display_d1(false);
 8002944:	2000      	movs	r0, #0
 8002946:	f7ff fbd9 	bl	80020fc <display_d1>
		display_d2(false);
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff fbe9 	bl	8002122 <display_d2>
		display_d3(false);
 8002950:	2000      	movs	r0, #0
 8002952:	f7ff fbf9 	bl	8002148 <display_d3>
		display_d4(false);
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fc0a 	bl	8002170 <display_d4>
		display_d5(true);
 800295c:	2001      	movs	r0, #1
 800295e:	f7ff fc1b 	bl	8002198 <display_d5>
		display_number(15, false);
 8002962:	2100      	movs	r1, #0
 8002964:	200f      	movs	r0, #15
 8002966:	f7ff fcc9 	bl	80022fc <display_number>
	}

	if (ticks == 5)
 800296a:	4b07      	ldr	r3, [pc, #28]	; (8002988 <display_show_off+0xf8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2b05      	cmp	r3, #5
 8002970:	d102      	bne.n	8002978 <display_show_off+0xe8>
	{
		ticks = 0;
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <display_show_off+0xf8>)
 8002974:	2200      	movs	r2, #0
 8002976:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 8002978:	4b03      	ldr	r3, [pc, #12]	; (8002988 <display_show_off+0xf8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	4b02      	ldr	r3, [pc, #8]	; (8002988 <display_show_off+0xf8>)
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000138 	.word	0x20000138

0800298c <display_show_bluetooth>:



void display_show_bluetooth()
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D6_OFF_Pin, true);
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	2201      	movs	r2, #1
 8002996:	2104      	movs	r1, #4
 8002998:	0018      	movs	r0, r3
 800299a:	f004 f952 	bl	8006c42 <HAL_GPIO_WritePin>
	if (ticks == 1)
 800299e:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <display_show_bluetooth+0x110>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d10e      	bne.n	80029c4 <display_show_bluetooth+0x38>
		{
			display_d1(false);
 80029a6:	2000      	movs	r0, #0
 80029a8:	f7ff fba8 	bl	80020fc <display_d1>
			display_d2(false);
 80029ac:	2000      	movs	r0, #0
 80029ae:	f7ff fbb8 	bl	8002122 <display_d2>
			display_d3(false);
 80029b2:	2000      	movs	r0, #0
 80029b4:	f7ff fbc8 	bl	8002148 <display_d3>
			display_d4(false);
 80029b8:	2000      	movs	r0, #0
 80029ba:	f7ff fbd9 	bl	8002170 <display_d4>
			display_d5(false);
 80029be:	2000      	movs	r0, #0
 80029c0:	f7ff fbea 	bl	8002198 <display_d5>
		}
		if (ticks == 2)
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <display_show_bluetooth+0x110>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d112      	bne.n	80029f2 <display_show_bluetooth+0x66>
		{
			display_d1(false);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fb95 	bl	80020fc <display_d1>
			display_d2(true);
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7ff fba5 	bl	8002122 <display_d2>
			display_d3(false);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7ff fbb5 	bl	8002148 <display_d3>
			display_d4(false);
 80029de:	2000      	movs	r0, #0
 80029e0:	f7ff fbc6 	bl	8002170 <display_d4>
			display_d5(false);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7ff fbd7 	bl	8002198 <display_d5>
			display_number(8, false);
 80029ea:	2100      	movs	r1, #0
 80029ec:	2008      	movs	r0, #8
 80029ee:	f7ff fc85 	bl	80022fc <display_number>
		}
		if (ticks == 3)
 80029f2:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <display_show_bluetooth+0x110>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d112      	bne.n	8002a20 <display_show_bluetooth+0x94>
		{
			display_d1(false);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fb7e 	bl	80020fc <display_d1>
			display_d2(false);
 8002a00:	2000      	movs	r0, #0
 8002a02:	f7ff fb8e 	bl	8002122 <display_d2>
			display_d3(true);
 8002a06:	2001      	movs	r0, #1
 8002a08:	f7ff fb9e 	bl	8002148 <display_d3>
			display_d4(false);
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	f7ff fbaf 	bl	8002170 <display_d4>
			display_d5(false);
 8002a12:	2000      	movs	r0, #0
 8002a14:	f7ff fbc0 	bl	8002198 <display_d5>
			display_number(17, false);
 8002a18:	2100      	movs	r1, #0
 8002a1a:	2011      	movs	r0, #17
 8002a1c:	f7ff fc6e 	bl	80022fc <display_number>
		}
		if (ticks == 4)
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d112      	bne.n	8002a4e <display_show_bluetooth+0xc2>
		{
			display_d1(false);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fb67 	bl	80020fc <display_d1>
			display_d2(false);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff fb77 	bl	8002122 <display_d2>
			display_d3(false);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff fb87 	bl	8002148 <display_d3>
			display_d4(true);
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fb98 	bl	8002170 <display_d4>
			display_d5(false);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7ff fba9 	bl	8002198 <display_d5>
			display_number(18, false);
 8002a46:	2100      	movs	r1, #0
 8002a48:	2012      	movs	r0, #18
 8002a4a:	f7ff fc57 	bl	80022fc <display_number>
		}
		if (ticks == 5)
 8002a4e:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d112      	bne.n	8002a7c <display_show_bluetooth+0xf0>
		{
			display_d1(false);
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7ff fb50 	bl	80020fc <display_d1>
			display_d2(false);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7ff fb60 	bl	8002122 <display_d2>
			display_d3(false);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f7ff fb70 	bl	8002148 <display_d3>
			display_d4(false);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7ff fb81 	bl	8002170 <display_d4>
			display_d5(true);
 8002a6e:	2001      	movs	r0, #1
 8002a70:	f7ff fb92 	bl	8002198 <display_d5>
			display_number(14, false);
 8002a74:	2100      	movs	r1, #0
 8002a76:	200e      	movs	r0, #14
 8002a78:	f7ff fc40 	bl	80022fc <display_number>
		}

		if (ticks == 5)
 8002a7c:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d102      	bne.n	8002a8a <display_show_bluetooth+0xfe>
		{
			ticks = 0;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]
		}
		ticks++;
 8002a8a:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	4b02      	ldr	r3, [pc, #8]	; (8002a9c <display_show_bluetooth+0x110>)
 8002a92:	601a      	str	r2, [r3, #0]
}
 8002a94:	46c0      	nop			; (mov r8, r8)
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			; (mov r8, r8)
 8002a9c:	20000138 	.word	0x20000138

08002aa0 <keydecoder_out>:
#include "keydecoder.h"

void keydecoder_out(uint8_t number)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, KD_OUT_1_Pin, number != 1);
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	1e5a      	subs	r2, r3, #1
 8002ab4:	4193      	sbcs	r3, r2
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	001a      	movs	r2, r3
 8002aba:	4b1e      	ldr	r3, [pc, #120]	; (8002b34 <keydecoder_out+0x94>)
 8002abc:	2110      	movs	r1, #16
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f004 f8bf 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KD_OUT_2_Pin, number != 2);
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	3b02      	subs	r3, #2
 8002aca:	1e5a      	subs	r2, r3, #1
 8002acc:	4193      	sbcs	r3, r2
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	001a      	movs	r2, r3
 8002ad2:	4b18      	ldr	r3, [pc, #96]	; (8002b34 <keydecoder_out+0x94>)
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f004 f8b3 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KD_OUT_3_Pin, number != 3);
 8002adc:	1dfb      	adds	r3, r7, #7
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	3b03      	subs	r3, #3
 8002ae2:	1e5a      	subs	r2, r3, #1
 8002ae4:	4193      	sbcs	r3, r2
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	001a      	movs	r2, r3
 8002aea:	4b12      	ldr	r3, [pc, #72]	; (8002b34 <keydecoder_out+0x94>)
 8002aec:	2140      	movs	r1, #64	; 0x40
 8002aee:	0018      	movs	r0, r3
 8002af0:	f004 f8a7 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KD_OUT_4_Pin, number != 4);
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	3b04      	subs	r3, #4
 8002afa:	1e5a      	subs	r2, r3, #1
 8002afc:	4193      	sbcs	r3, r2
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	001a      	movs	r2, r3
 8002b02:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <keydecoder_out+0x98>)
 8002b04:	2108      	movs	r1, #8
 8002b06:	0018      	movs	r0, r3
 8002b08:	f004 f89b 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KD_OUT_5_Pin, number != 5);
 8002b0c:	1dfb      	adds	r3, r7, #7
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	3b05      	subs	r3, #5
 8002b12:	1e5a      	subs	r2, r3, #1
 8002b14:	4193      	sbcs	r3, r2
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	001a      	movs	r2, r3
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <keydecoder_out+0x98>)
 8002b1c:	2110      	movs	r1, #16
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f004 f88f 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002b24:	2001      	movs	r0, #1
 8002b26:	f002 fe1d 	bl	8005764 <HAL_Delay>
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b002      	add	sp, #8
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	50000c00 	.word	0x50000c00
 8002b38:	50000400 	.word	0x50000400

08002b3c <keydecoder_in>:

bool keydecoder_in(uint8_t number)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	0002      	movs	r2, r0
 8002b44:	1dfb      	adds	r3, r7, #7
 8002b46:	701a      	strb	r2, [r3, #0]
	switch (number)
 8002b48:	1dfb      	adds	r3, r7, #7
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d028      	beq.n	8002ba2 <keydecoder_in+0x66>
 8002b50:	dc31      	bgt.n	8002bb6 <keydecoder_in+0x7a>
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d01b      	beq.n	8002b8e <keydecoder_in+0x52>
 8002b56:	dc2e      	bgt.n	8002bb6 <keydecoder_in+0x7a>
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d002      	beq.n	8002b62 <keydecoder_in+0x26>
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d00c      	beq.n	8002b7a <keydecoder_in+0x3e>
 8002b60:	e029      	b.n	8002bb6 <keydecoder_in+0x7a>
	{
		case 1:
			return HAL_GPIO_ReadPin(GPIOC, KD_IN_1_Pin);
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4a16      	ldr	r2, [pc, #88]	; (8002bc0 <keydecoder_in+0x84>)
 8002b68:	0019      	movs	r1, r3
 8002b6a:	0010      	movs	r0, r2
 8002b6c:	f004 f84c 	bl	8006c08 <HAL_GPIO_ReadPin>
 8002b70:	0003      	movs	r3, r0
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	4193      	sbcs	r3, r2
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	e01e      	b.n	8002bb8 <keydecoder_in+0x7c>
		case 2:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_2_Pin);
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <keydecoder_in+0x88>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f004 f842 	bl	8006c08 <HAL_GPIO_ReadPin>
 8002b84:	0003      	movs	r3, r0
 8002b86:	1e5a      	subs	r2, r3, #1
 8002b88:	4193      	sbcs	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	e014      	b.n	8002bb8 <keydecoder_in+0x7c>
		case 3:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_3_Pin);
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <keydecoder_in+0x88>)
 8002b90:	2102      	movs	r1, #2
 8002b92:	0018      	movs	r0, r3
 8002b94:	f004 f838 	bl	8006c08 <HAL_GPIO_ReadPin>
 8002b98:	0003      	movs	r3, r0
 8002b9a:	1e5a      	subs	r2, r3, #1
 8002b9c:	4193      	sbcs	r3, r2
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	e00a      	b.n	8002bb8 <keydecoder_in+0x7c>
		case 4:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_4_Pin);
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <keydecoder_in+0x88>)
 8002ba4:	2108      	movs	r1, #8
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f004 f82e 	bl	8006c08 <HAL_GPIO_ReadPin>
 8002bac:	0003      	movs	r3, r0
 8002bae:	1e5a      	subs	r2, r3, #1
 8002bb0:	4193      	sbcs	r3, r2
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e000      	b.n	8002bb8 <keydecoder_in+0x7c>
		default:
			return false;
 8002bb6:	2300      	movs	r3, #0
	}
}
 8002bb8:	0018      	movs	r0, r3
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	b002      	add	sp, #8
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	50000800 	.word	0x50000800
 8002bc4:	50000c00 	.word	0x50000c00

08002bc8 <calculateFMFrequencyControlCounterPeriod>:
int OFF_COUNTER = 0;
bool COLD_START = true;


int calculateFMFrequencyControlCounterPeriod(bool fastMode)
{
 8002bc8:	b5b0      	push	{r4, r5, r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	0002      	movs	r2, r0
 8002bd0:	1dfb      	adds	r3, r7, #7
 8002bd2:	701a      	strb	r2, [r3, #0]
	// PFUI!
	int fm_difference = abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER);
 8002bd4:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <calculateFMFrequencyControlCounterPeriod+0xcc>)
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <calculateFMFrequencyControlCounterPeriod+0xd0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	17da      	asrs	r2, r3, #31
 8002be0:	189b      	adds	r3, r3, r2
 8002be2:	4053      	eors	r3, r2
 8002be4:	60bb      	str	r3, [r7, #8]

	int arr = 0;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
	if (fastMode)
 8002bea:	1dfb      	adds	r3, r7, #7
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d012      	beq.n	8002c18 <calculateFMFrequencyControlCounterPeriod+0x50>
	{
		arr = 2500 - 500 * fm_difference;
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	05db      	lsls	r3, r3, #23
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	019b      	lsls	r3, r3, #6
 8002bfc:	189b      	adds	r3, r3, r2
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	189b      	adds	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <calculateFMFrequencyControlCounterPeriod+0xd4>)
 8002c06:	4694      	mov	ip, r2
 8002c08:	4463      	add	r3, ip
 8002c0a:	60fb      	str	r3, [r7, #12]
		arr = arr < 250 ? 250 : arr;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2bfa      	cmp	r3, #250	; 0xfa
 8002c10:	da00      	bge.n	8002c14 <calculateFMFrequencyControlCounterPeriod+0x4c>
 8002c12:	23fa      	movs	r3, #250	; 0xfa
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	e037      	b.n	8002c88 <calculateFMFrequencyControlCounterPeriod+0xc0>
	}
	else
	{
		arr = 3500 - abs(1.05 + 0.05 * fm_difference + 0.75 * exp(fm_difference));
 8002c18:	68b8      	ldr	r0, [r7, #8]
 8002c1a:	f7ff f9c9 	bl	8001fb0 <__aeabi_i2d>
 8002c1e:	4a20      	ldr	r2, [pc, #128]	; (8002ca0 <calculateFMFrequencyControlCounterPeriod+0xd8>)
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <calculateFMFrequencyControlCounterPeriod+0xdc>)
 8002c22:	f7fe fb91 	bl	8001348 <__aeabi_dmul>
 8002c26:	0002      	movs	r2, r0
 8002c28:	000b      	movs	r3, r1
 8002c2a:	0010      	movs	r0, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <calculateFMFrequencyControlCounterPeriod+0xe0>)
 8002c30:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <calculateFMFrequencyControlCounterPeriod+0xe4>)
 8002c32:	f7fd fc19 	bl	8000468 <__aeabi_dadd>
 8002c36:	0002      	movs	r2, r0
 8002c38:	000b      	movs	r3, r1
 8002c3a:	0014      	movs	r4, r2
 8002c3c:	001d      	movs	r5, r3
 8002c3e:	68b8      	ldr	r0, [r7, #8]
 8002c40:	f7ff f9b6 	bl	8001fb0 <__aeabi_i2d>
 8002c44:	0002      	movs	r2, r0
 8002c46:	000b      	movs	r3, r1
 8002c48:	0010      	movs	r0, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	f006 fc1e 	bl	800948c <exp>
 8002c50:	2200      	movs	r2, #0
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <calculateFMFrequencyControlCounterPeriod+0xe8>)
 8002c54:	f7fe fb78 	bl	8001348 <__aeabi_dmul>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	000b      	movs	r3, r1
 8002c5c:	0020      	movs	r0, r4
 8002c5e:	0029      	movs	r1, r5
 8002c60:	f7fd fc02 	bl	8000468 <__aeabi_dadd>
 8002c64:	0002      	movs	r2, r0
 8002c66:	000b      	movs	r3, r1
 8002c68:	0010      	movs	r0, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	f7ff f96a 	bl	8001f44 <__aeabi_d2iz>
 8002c70:	0003      	movs	r3, r0
 8002c72:	17da      	asrs	r2, r3, #31
 8002c74:	189b      	adds	r3, r3, r2
 8002c76:	4053      	eors	r3, r2
 8002c78:	4a0e      	ldr	r2, [pc, #56]	; (8002cb4 <calculateFMFrequencyControlCounterPeriod+0xec>)
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	60fb      	str	r3, [r7, #12]
		arr = arr < 250 ? 250 : arr;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2bfa      	cmp	r3, #250	; 0xfa
 8002c82:	da00      	bge.n	8002c86 <calculateFMFrequencyControlCounterPeriod+0xbe>
 8002c84:	23fa      	movs	r3, #250	; 0xfa
 8002c86:	60fb      	str	r3, [r7, #12]
	}

	return arr;
 8002c88:	68fb      	ldr	r3, [r7, #12]
}
 8002c8a:	0018      	movs	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b004      	add	sp, #16
 8002c90:	bdb0      	pop	{r4, r5, r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	20000008 	.word	0x20000008
 8002c98:	20000154 	.word	0x20000154
 8002c9c:	000009c4 	.word	0x000009c4
 8002ca0:	9999999a 	.word	0x9999999a
 8002ca4:	3fa99999 	.word	0x3fa99999
 8002ca8:	cccccccd 	.word	0xcccccccd
 8002cac:	3ff0cccc 	.word	0x3ff0cccc
 8002cb0:	3fe80000 	.word	0x3fe80000
 8002cb4:	00000dac 	.word	0x00000dac

08002cb8 <calculateFMFrequencyControlCounterPrescaler>:

int calculateFMFrequencyControlCounterPrescaler(bool fastMode)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	0002      	movs	r2, r0
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	701a      	strb	r2, [r3, #0]
	// PFUI!
	double psc = 5000 - ((4 * FM_FREQUENCY_COUNTER) / 9);//4200 - 0.3675 * FM_FREQUENCY_COUNTER;
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <calculateFMFrequencyControlCounterPrescaler+0x98>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	2209      	movs	r2, #9
 8002ccc:	4251      	negs	r1, r2
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f7fd faa0 	bl	8000214 <__divsi3>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	4a1f      	ldr	r2, [pc, #124]	; (8002d54 <calculateFMFrequencyControlCounterPrescaler+0x9c>)
 8002cd8:	4694      	mov	ip, r2
 8002cda:	4463      	add	r3, ip
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff f967 	bl	8001fb0 <__aeabi_i2d>
 8002ce2:	0002      	movs	r2, r0
 8002ce4:	000b      	movs	r3, r1
 8002ce6:	60ba      	str	r2, [r7, #8]
 8002ce8:	60fb      	str	r3, [r7, #12]
	if (fastMode)
 8002cea:	1dfb      	adds	r3, r7, #7
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01a      	beq.n	8002d28 <calculateFMFrequencyControlCounterPrescaler+0x70>
	{
		psc = psc / 2;
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2380      	movs	r3, #128	; 0x80
 8002cf6:	05db      	lsls	r3, r3, #23
 8002cf8:	68b8      	ldr	r0, [r7, #8]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	f7fd ff1e 	bl	8000b3c <__aeabi_ddiv>
 8002d00:	0002      	movs	r2, r0
 8002d02:	000b      	movs	r3, r1
 8002d04:	60ba      	str	r2, [r7, #8]
 8002d06:	60fb      	str	r3, [r7, #12]
		psc = psc < 110 ? 110 : psc;
 8002d08:	2200      	movs	r2, #0
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <calculateFMFrequencyControlCounterPrescaler+0xa0>)
 8002d0c:	68b8      	ldr	r0, [r7, #8]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	f7fd fb82 	bl	8000418 <__aeabi_dcmplt>
 8002d14:	1e03      	subs	r3, r0, #0
 8002d16:	d002      	beq.n	8002d1e <calculateFMFrequencyControlCounterPrescaler+0x66>
 8002d18:	2200      	movs	r2, #0
 8002d1a:	4b0f      	ldr	r3, [pc, #60]	; (8002d58 <calculateFMFrequencyControlCounterPrescaler+0xa0>)
 8002d1c:	e001      	b.n	8002d22 <calculateFMFrequencyControlCounterPrescaler+0x6a>
 8002d1e:	68ba      	ldr	r2, [r7, #8]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	60ba      	str	r2, [r7, #8]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	e009      	b.n	8002d3c <calculateFMFrequencyControlCounterPrescaler+0x84>
	}
	else
	{
		psc = psc * 2.75;
 8002d28:	2200      	movs	r2, #0
 8002d2a:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <calculateFMFrequencyControlCounterPrescaler+0xa4>)
 8002d2c:	68b8      	ldr	r0, [r7, #8]
 8002d2e:	68f9      	ldr	r1, [r7, #12]
 8002d30:	f7fe fb0a 	bl	8001348 <__aeabi_dmul>
 8002d34:	0002      	movs	r2, r0
 8002d36:	000b      	movs	r3, r1
 8002d38:	60ba      	str	r2, [r7, #8]
 8002d3a:	60fb      	str	r3, [r7, #12]
	}

	return psc;
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	68f9      	ldr	r1, [r7, #12]
 8002d40:	f7ff f900 	bl	8001f44 <__aeabi_d2iz>
 8002d44:	0003      	movs	r3, r0
}
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b004      	add	sp, #16
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	46c0      	nop			; (mov r8, r8)
 8002d50:	20000154 	.word	0x20000154
 8002d54:	00001388 	.word	0x00001388
 8002d58:	405b8000 	.word	0x405b8000
 8002d5c:	40060000 	.word	0x40060000

08002d60 <stopFrequencyControl>:

void stopFrequencyControl()
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim14);
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <stopFrequencyControl+0x14>)
 8002d66:	0018      	movs	r0, r3
 8002d68:	f005 f9b8 	bl	80080dc <HAL_TIM_Base_Stop_IT>
}
 8002d6c:	46c0      	nop			; (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	20000344 	.word	0x20000344

08002d78 <startFrequencyControl>:

void startFrequencyControl()
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim14);
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <startFrequencyControl+0x14>)
 8002d7e:	0018      	movs	r0, r3
 8002d80:	f005 f956 	bl	8008030 <HAL_TIM_Base_Start_IT>
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000344 	.word	0x20000344

08002d90 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b086      	sub	sp, #24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4ab6      	ldr	r2, [pc, #728]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d12f      	bne.n	8002e02 <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		// 64 = PRESCALER / 7 = DEPENDING ON CPU-FREQUENCY / 10.7 MHz = IF
		FM_FREQUENCY_COUNTER = (((TIM3->CNT * 64 * 7 * FREQUENCY_CALIBRATION) - 1070000) / 1000.0);
 8002da2:	4bb6      	ldr	r3, [pc, #728]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002da6:	0013      	movs	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	019b      	lsls	r3, r3, #6
 8002dae:	0018      	movs	r0, r3
 8002db0:	f7ff f92e 	bl	8002010 <__aeabi_ui2d>
 8002db4:	4bb2      	ldr	r3, [pc, #712]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f7fe fac5 	bl	8001348 <__aeabi_dmul>
 8002dbe:	0002      	movs	r2, r0
 8002dc0:	000b      	movs	r3, r1
 8002dc2:	0010      	movs	r0, r2
 8002dc4:	0019      	movs	r1, r3
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	4bae      	ldr	r3, [pc, #696]	; (8003084 <HAL_TIM_PeriodElapsedCallback+0x2f4>)
 8002dca:	f7fe fd29 	bl	8001820 <__aeabi_dsub>
 8002dce:	0002      	movs	r2, r0
 8002dd0:	000b      	movs	r3, r1
 8002dd2:	0010      	movs	r0, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	4bab      	ldr	r3, [pc, #684]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x2f8>)
 8002dda:	f7fd feaf 	bl	8000b3c <__aeabi_ddiv>
 8002dde:	0002      	movs	r2, r0
 8002de0:	000b      	movs	r3, r1
 8002de2:	0010      	movs	r0, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	f7ff f8ad 	bl	8001f44 <__aeabi_d2iz>
 8002dea:	0002      	movs	r2, r0
 8002dec:	4ba7      	ldr	r3, [pc, #668]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002dee:	601a      	str	r2, [r3, #0]
		FM_FREQUENCY_COUNTER_UPDATED = true;
 8002df0:	4ba7      	ldr	r3, [pc, #668]	; (8003090 <HAL_TIM_PeriodElapsedCallback+0x300>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	701a      	strb	r2, [r3, #0]

		TIM3->CNT = 0;
 8002df6:	4ba1      	ldr	r3, [pc, #644]	; (800307c <HAL_TIM_PeriodElapsedCallback+0x2ec>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	625a      	str	r2, [r3, #36]	; 0x24
		TIM6->CNT = 0;
 8002dfc:	4b9e      	ldr	r3, [pc, #632]	; (8003078 <HAL_TIM_PeriodElapsedCallback+0x2e8>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (htim->Instance == TIM16)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4aa3      	ldr	r2, [pc, #652]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d12c      	bne.n	8002e66 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		// 7 = DEPENDING ON CPU-FREQUENCY / 455 kHz = IF
		AM_FREQUENCY_COUNTER = ((TIM1->CNT * 7 * FREQUENCY_CALIBRATION) / 100.0) - 455;
 8002e0c:	4ba2      	ldr	r3, [pc, #648]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e10:	0013      	movs	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	1a9b      	subs	r3, r3, r2
 8002e16:	0018      	movs	r0, r3
 8002e18:	f7ff f8fa 	bl	8002010 <__aeabi_ui2d>
 8002e1c:	4b98      	ldr	r3, [pc, #608]	; (8003080 <HAL_TIM_PeriodElapsedCallback+0x2f0>)
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f7fe fa91 	bl	8001348 <__aeabi_dmul>
 8002e26:	0002      	movs	r2, r0
 8002e28:	000b      	movs	r3, r1
 8002e2a:	0010      	movs	r0, r2
 8002e2c:	0019      	movs	r1, r3
 8002e2e:	2200      	movs	r2, #0
 8002e30:	4b9a      	ldr	r3, [pc, #616]	; (800309c <HAL_TIM_PeriodElapsedCallback+0x30c>)
 8002e32:	f7fd fe83 	bl	8000b3c <__aeabi_ddiv>
 8002e36:	0002      	movs	r2, r0
 8002e38:	000b      	movs	r3, r1
 8002e3a:	0010      	movs	r0, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	2200      	movs	r2, #0
 8002e40:	4b97      	ldr	r3, [pc, #604]	; (80030a0 <HAL_TIM_PeriodElapsedCallback+0x310>)
 8002e42:	f7fe fced 	bl	8001820 <__aeabi_dsub>
 8002e46:	0002      	movs	r2, r0
 8002e48:	000b      	movs	r3, r1
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	0019      	movs	r1, r3
 8002e4e:	f7ff f879 	bl	8001f44 <__aeabi_d2iz>
 8002e52:	0002      	movs	r2, r0
 8002e54:	4b93      	ldr	r3, [pc, #588]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002e56:	601a      	str	r2, [r3, #0]

		TIM1->CNT = 0;
 8002e58:	4b8f      	ldr	r3, [pc, #572]	; (8003098 <HAL_TIM_PeriodElapsedCallback+0x308>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CNT = 0;
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	; (8003094 <HAL_TIM_PeriodElapsedCallback+0x304>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
			{
				TIM15->CCR2--;
			}
		}
	}
}
 8002e64:	e1a0      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
	else if (htim->Instance == TIM7)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a8f      	ldr	r2, [pc, #572]	; (80030a8 <HAL_TIM_PeriodElapsedCallback+0x318>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d000      	beq.n	8002e72 <HAL_TIM_PeriodElapsedCallback+0xe2>
 8002e70:	e08e      	b.n	8002f90 <HAL_TIM_PeriodElapsedCallback+0x200>
		int display_value = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
		if (CLOCK)
 8002e76:	4b8d      	ldr	r3, [pc, #564]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01c      	beq.n	8002eb8 <HAL_TIM_PeriodElapsedCallback+0x128>
			if (!SET_BUTTON)
 8002e7e:	4b8c      	ldr	r3, [pc, #560]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4053      	eors	r3, r2
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00b      	beq.n	8002ea4 <HAL_TIM_PeriodElapsedCallback+0x114>
				HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8002e8c:	4989      	ldr	r1, [pc, #548]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002e8e:	4b8a      	ldr	r3, [pc, #552]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	0018      	movs	r0, r3
 8002e94:	f004 fe88 	bl	8007ba8 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 8002e98:	4988      	ldr	r1, [pc, #544]	; (80030bc <HAL_TIM_PeriodElapsedCallback+0x32c>)
 8002e9a:	4b87      	ldr	r3, [pc, #540]	; (80030b8 <HAL_TIM_PeriodElapsedCallback+0x328>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f004 fede 	bl	8007c60 <HAL_RTC_GetDate>
			display_value = TIME.Hours*100 + TIME.Minutes;
 8002ea4:	4b83      	ldr	r3, [pc, #524]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	001a      	movs	r2, r3
 8002eaa:	2364      	movs	r3, #100	; 0x64
 8002eac:	4353      	muls	r3, r2
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002eb0:	7852      	ldrb	r2, [r2, #1]
 8002eb2:	189b      	adds	r3, r3, r2
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	e026      	b.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x176>
		else if (MODE == FM)
 8002eb8:	4b81      	ldr	r3, [pc, #516]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d111      	bne.n	8002ee4 <HAL_TIM_PeriodElapsedCallback+0x154>
			display_value = SET_BUTTON && !CLOCK ? FM_FREQUENCY_COUNTER : FM_FREQUENCY;
 8002ec0:	4b7b      	ldr	r3, [pc, #492]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x14c>
 8002ec8:	4b78      	ldr	r3, [pc, #480]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	4053      	eors	r3, r2
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d002      	beq.n	8002edc <HAL_TIM_PeriodElapsedCallback+0x14c>
 8002ed6:	4b6d      	ldr	r3, [pc, #436]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	e001      	b.n	8002ee0 <HAL_TIM_PeriodElapsedCallback+0x150>
 8002edc:	4b79      	ldr	r3, [pc, #484]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	617b      	str	r3, [r7, #20]
 8002ee2:	e010      	b.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x176>
			display_value = SET_BUTTON && !CLOCK ? AM_FREQUENCY_COUNTER : AM_FREQUENCY;
 8002ee4:	4b72      	ldr	r3, [pc, #456]	; (80030b0 <HAL_TIM_PeriodElapsedCallback+0x320>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4053      	eors	r3, r2
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d002      	beq.n	8002f00 <HAL_TIM_PeriodElapsedCallback+0x170>
 8002efa:	4b6a      	ldr	r3, [pc, #424]	; (80030a4 <HAL_TIM_PeriodElapsedCallback+0x314>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	e001      	b.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0x174>
 8002f00:	4b71      	ldr	r3, [pc, #452]	; (80030c8 <HAL_TIM_PeriodElapsedCallback+0x338>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	617b      	str	r3, [r7, #20]
		if (OFF_COUNTER > 0)
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	dd07      	ble.n	8002f1e <HAL_TIM_PeriodElapsedCallback+0x18e>
			display_show_off();
 8002f0e:	f7ff fcbf 	bl	8002890 <display_show_off>
			OFF_COUNTER -= 1;
 8002f12:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	1e5a      	subs	r2, r3, #1
 8002f18:	4b6c      	ldr	r3, [pc, #432]	; (80030cc <HAL_TIM_PeriodElapsedCallback+0x33c>)
 8002f1a:	601a      	str	r2, [r3, #0]
}
 8002f1c:	e144      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
		else if (!CLOCK && MODE == AM && BLUETOOTH && STATION == 0)
 8002f1e:	4b63      	ldr	r3, [pc, #396]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2201      	movs	r2, #1
 8002f24:	4053      	eors	r3, r2
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8002f2c:	4b64      	ldr	r3, [pc, #400]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d10a      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8002f34:	4b66      	ldr	r3, [pc, #408]	; (80030d0 <HAL_TIM_PeriodElapsedCallback+0x340>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8002f3c:	4b65      	ldr	r3, [pc, #404]	; (80030d4 <HAL_TIM_PeriodElapsedCallback+0x344>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d102      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x1ba>
			display_show_bluetooth();
 8002f44:	f7ff fd22 	bl	800298c <display_show_bluetooth>
 8002f48:	e12e      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
			display(display_value, (CLOCK && TIME.Seconds %2 == 1) || (!CLOCK && MODE == FM));
 8002f4a:	4b58      	ldr	r3, [pc, #352]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d006      	beq.n	8002f60 <HAL_TIM_PeriodElapsedCallback+0x1d0>
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <HAL_TIM_PeriodElapsedCallback+0x324>)
 8002f54:	789b      	ldrb	r3, [r3, #2]
 8002f56:	2201      	movs	r2, #1
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10a      	bne.n	8002f76 <HAL_TIM_PeriodElapsedCallback+0x1e6>
 8002f60:	4b52      	ldr	r3, [pc, #328]	; (80030ac <HAL_TIM_PeriodElapsedCallback+0x31c>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2201      	movs	r2, #1
 8002f66:	4053      	eors	r3, r2
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8002f6e:	4b54      	ldr	r3, [pc, #336]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_PeriodElapsedCallback+0x1ea>
 8002f76:	2301      	movs	r3, #1
 8002f78:	e000      	b.n	8002f7c <HAL_TIM_PeriodElapsedCallback+0x1ec>
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	1c1a      	adds	r2, r3, #0
 8002f7e:	2301      	movs	r3, #1
 8002f80:	4013      	ands	r3, r2
 8002f82:	b2da      	uxtb	r2, r3
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	0011      	movs	r1, r2
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f7ff fb8d 	bl	80026a8 <display>
}
 8002f8e:	e10b      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
	else if (htim->Instance == TIM14)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a50      	ldr	r2, [pc, #320]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d000      	beq.n	8002f9c <HAL_TIM_PeriodElapsedCallback+0x20c>
 8002f9a:	e105      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
		if (MODE == FM)
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <HAL_TIM_PeriodElapsedCallback+0x330>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d000      	beq.n	8002fa6 <HAL_TIM_PeriodElapsedCallback+0x216>
 8002fa4:	e0a2      	b.n	80030ec <HAL_TIM_PeriodElapsedCallback+0x35c>
			TIM14->PSC = calculateFMFrequencyControlCounterPrescaler(!LOCK_FREQUENCY);
 8002fa6:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8002fa8:	781b      	ldrb	r3, [r3, #0]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	4193      	sbcs	r3, r2
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4053      	eors	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	1c1a      	adds	r2, r3, #0
 8002fb8:	2301      	movs	r3, #1
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	f7ff fe7a 	bl	8002cb8 <calculateFMFrequencyControlCounterPrescaler>
 8002fc4:	0002      	movs	r2, r0
 8002fc6:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
			TIM14->ARR = calculateFMFrequencyControlCounterPeriod(true);
 8002fca:	2001      	movs	r0, #1
 8002fcc:	f7ff fdfc 	bl	8002bc8 <calculateFMFrequencyControlCounterPeriod>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	4b41      	ldr	r3, [pc, #260]	; (80030d8 <HAL_TIM_PeriodElapsedCallback+0x348>)
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
			SCAN_STOP = !SCAN_STOP ? HAL_GPIO_ReadPin(GPIOC, SCAN_STOP_Pin) : true;
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	4053      	eors	r3, r2
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_TIM_PeriodElapsedCallback+0x268>
 8002fe4:	4b3f      	ldr	r3, [pc, #252]	; (80030e4 <HAL_TIM_PeriodElapsedCallback+0x354>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f003 fe0d 	bl	8006c08 <HAL_GPIO_ReadPin>
 8002fee:	0003      	movs	r3, r0
 8002ff0:	1e5a      	subs	r2, r3, #1
 8002ff2:	4193      	sbcs	r3, r2
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	e000      	b.n	8002ffa <HAL_TIM_PeriodElapsedCallback+0x26a>
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	4b39      	ldr	r3, [pc, #228]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8002ffc:	701a      	strb	r2, [r3, #0]
			if (TIM15->CCR2 < TIM15->ARR && FM_FREQUENCY < FM_FREQUENCY_COUNTER)
 8002ffe:	4b3a      	ldr	r3, [pc, #232]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	4b39      	ldr	r3, [pc, #228]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	429a      	cmp	r2, r3
 8003008:	d20a      	bcs.n	8003020 <HAL_TIM_PeriodElapsedCallback+0x290>
 800300a:	4b2e      	ldr	r3, [pc, #184]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b1f      	ldr	r3, [pc, #124]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	429a      	cmp	r2, r3
 8003014:	da04      	bge.n	8003020 <HAL_TIM_PeriodElapsedCallback+0x290>
				TIM15->CCR2++;
 8003016:	4b34      	ldr	r3, [pc, #208]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003018:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800301a:	3201      	adds	r2, #1
 800301c:	639a      	str	r2, [r3, #56]	; 0x38
 800301e:	e00d      	b.n	800303c <HAL_TIM_PeriodElapsedCallback+0x2ac>
			else if (TIM15->CCR2 > 0 && FM_FREQUENCY > FM_FREQUENCY_COUNTER)
 8003020:	4b31      	ldr	r3, [pc, #196]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003022:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003024:	2b00      	cmp	r3, #0
 8003026:	d009      	beq.n	800303c <HAL_TIM_PeriodElapsedCallback+0x2ac>
 8003028:	4b26      	ldr	r3, [pc, #152]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	dd03      	ble.n	800303c <HAL_TIM_PeriodElapsedCallback+0x2ac>
				TIM15->CCR2--;
 8003034:	4b2c      	ldr	r3, [pc, #176]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003038:	3a01      	subs	r2, #1
 800303a:	639a      	str	r2, [r3, #56]	; 0x38
			if ((TIM15->CCR2 == 0) || (TIM15->CCR2 == TIM15->ARR))
 800303c:	4b2a      	ldr	r3, [pc, #168]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d006      	beq.n	8003052 <HAL_TIM_PeriodElapsedCallback+0x2c2>
 8003044:	4b28      	ldr	r3, [pc, #160]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003046:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003048:	4b27      	ldr	r3, [pc, #156]	; (80030e8 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	429a      	cmp	r2, r3
 800304e:	d000      	beq.n	8003052 <HAL_TIM_PeriodElapsedCallback+0x2c2>
 8003050:	e0aa      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
				FM_FREQUENCY = ((int)(FM_FREQUENCY_COUNTER / 10)) * 10;
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x2fc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	210a      	movs	r1, #10
 8003058:	0018      	movs	r0, r3
 800305a:	f7fd f8db 	bl	8000214 <__divsi3>
 800305e:	0003      	movs	r3, r0
 8003060:	001a      	movs	r2, r3
 8003062:	0013      	movs	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	189b      	adds	r3, r3, r2
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	001a      	movs	r2, r3
 800306c:	4b15      	ldr	r3, [pc, #84]	; (80030c4 <HAL_TIM_PeriodElapsedCallback+0x334>)
 800306e:	601a      	str	r2, [r3, #0]
				SCAN_STOP = true;
 8003070:	4b1b      	ldr	r3, [pc, #108]	; (80030e0 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003072:	2201      	movs	r2, #1
 8003074:	701a      	strb	r2, [r3, #0]
}
 8003076:	e097      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
 8003078:	40001000 	.word	0x40001000
 800307c:	40000400 	.word	0x40000400
 8003080:	20000000 	.word	0x20000000
 8003084:	413053b0 	.word	0x413053b0
 8003088:	408f4000 	.word	0x408f4000
 800308c:	20000154 	.word	0x20000154
 8003090:	20000158 	.word	0x20000158
 8003094:	40014400 	.word	0x40014400
 8003098:	40012c00 	.word	0x40012c00
 800309c:	40590000 	.word	0x40590000
 80030a0:	407c7000 	.word	0x407c7000
 80030a4:	20000160 	.word	0x20000160
 80030a8:	40001400 	.word	0x40001400
 80030ac:	20000159 	.word	0x20000159
 80030b0:	2000015c 	.word	0x2000015c
 80030b4:	2000013c 	.word	0x2000013c
 80030b8:	20000280 	.word	0x20000280
 80030bc:	20000150 	.word	0x20000150
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	20000008 	.word	0x20000008
 80030c8:	20000018 	.word	0x20000018
 80030cc:	20000164 	.word	0x20000164
 80030d0:	2000015a 	.word	0x2000015a
 80030d4:	20000010 	.word	0x20000010
 80030d8:	40002000 	.word	0x40002000
 80030dc:	20000016 	.word	0x20000016
 80030e0:	2000015e 	.word	0x2000015e
 80030e4:	50000800 	.word	0x50000800
 80030e8:	40014000 	.word	0x40014000
		else if (MODE == AM)
 80030ec:	4b30      	ldr	r3, [pc, #192]	; (80031b0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d159      	bne.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
			int am_difference = abs(AM_FREQUENCY - AM_FREQUENCY_COUNTER);
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x424>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	4b2f      	ldr	r3, [pc, #188]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	17da      	asrs	r2, r3, #31
 8003100:	189b      	adds	r3, r3, r2
 8003102:	4053      	eors	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
			int arr = 1500 - 175 * am_difference;
 8003106:	693a      	ldr	r2, [r7, #16]
 8003108:	0013      	movs	r3, r2
 800310a:	061b      	lsls	r3, r3, #24
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	189b      	adds	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	189b      	adds	r3, r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	189b      	adds	r3, r3, r2
 800311a:	4a28      	ldr	r2, [pc, #160]	; (80031bc <HAL_TIM_PeriodElapsedCallback+0x42c>)
 800311c:	4694      	mov	ip, r2
 800311e:	4463      	add	r3, ip
 8003120:	60fb      	str	r3, [r7, #12]
			int psc = 3500 - 0.5 * AM_FREQUENCY_COUNTER;
 8003122:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	0018      	movs	r0, r3
 8003128:	f7fe ff42 	bl	8001fb0 <__aeabi_i2d>
 800312c:	2200      	movs	r2, #0
 800312e:	4b24      	ldr	r3, [pc, #144]	; (80031c0 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8003130:	f7fe f90a 	bl	8001348 <__aeabi_dmul>
 8003134:	0002      	movs	r2, r0
 8003136:	000b      	movs	r3, r1
 8003138:	2000      	movs	r0, #0
 800313a:	4922      	ldr	r1, [pc, #136]	; (80031c4 <HAL_TIM_PeriodElapsedCallback+0x434>)
 800313c:	f7fe fb70 	bl	8001820 <__aeabi_dsub>
 8003140:	0002      	movs	r2, r0
 8003142:	000b      	movs	r3, r1
 8003144:	0010      	movs	r0, r2
 8003146:	0019      	movs	r1, r3
 8003148:	f7fe fefc 	bl	8001f44 <__aeabi_d2iz>
 800314c:	0003      	movs	r3, r0
 800314e:	60bb      	str	r3, [r7, #8]
			TIM14->PSC = psc < 150 ? 150 : psc;
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	2b96      	cmp	r3, #150	; 0x96
 8003154:	da00      	bge.n	8003158 <HAL_TIM_PeriodElapsedCallback+0x3c8>
 8003156:	2396      	movs	r3, #150	; 0x96
 8003158:	4a1b      	ldr	r2, [pc, #108]	; (80031c8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 800315a:	6293      	str	r3, [r2, #40]	; 0x28
			TIM14->ARR = arr < 50 ? 50 : arr;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2b32      	cmp	r3, #50	; 0x32
 8003160:	da00      	bge.n	8003164 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8003162:	2332      	movs	r3, #50	; 0x32
 8003164:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8003166:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (TIM15->CCR2 < TIM15->ARR && AM_FREQUENCY < AM_FREQUENCY_COUNTER)
 8003168:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800316a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800316c:	4b17      	ldr	r3, [pc, #92]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	429a      	cmp	r2, r3
 8003172:	d20a      	bcs.n	800318a <HAL_TIM_PeriodElapsedCallback+0x3fa>
 8003174:	4b0f      	ldr	r3, [pc, #60]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	4b0f      	ldr	r3, [pc, #60]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	da04      	bge.n	800318a <HAL_TIM_PeriodElapsedCallback+0x3fa>
				TIM15->CCR2++;
 8003180:	4b12      	ldr	r3, [pc, #72]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	3201      	adds	r2, #1
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
 8003188:	e00e      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
			else if (TIM15->CCR2 > 0 && AM_FREQUENCY > AM_FREQUENCY_COUNTER)
 800318a:	4b10      	ldr	r3, [pc, #64]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
 8003192:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	dd04      	ble.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
				TIM15->CCR2--;
 800319e:	4b0b      	ldr	r3, [pc, #44]	; (80031cc <HAL_TIM_PeriodElapsedCallback+0x43c>)
 80031a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031a2:	3a01      	subs	r2, #1
 80031a4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80031a6:	e7ff      	b.n	80031a8 <HAL_TIM_PeriodElapsedCallback+0x418>
 80031a8:	46c0      	nop			; (mov r8, r8)
 80031aa:	46bd      	mov	sp, r7
 80031ac:	b006      	add	sp, #24
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	2000000c 	.word	0x2000000c
 80031b4:	20000018 	.word	0x20000018
 80031b8:	20000160 	.word	0x20000160
 80031bc:	000005dc 	.word	0x000005dc
 80031c0:	3fe00000 	.word	0x3fe00000
 80031c4:	40ab5800 	.word	0x40ab5800
 80031c8:	40002000 	.word	0x40002000
 80031cc:	40014000 	.word	0x40014000

080031d0 <saveFMStation>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void saveFMStation()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
	uint32_t dc = TIM15->CCR2;
 80031d6:	4b0a      	ldr	r3, [pc, #40]	; (8003200 <saveFMStation+0x30>)
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 80031dc:	2064      	movs	r0, #100	; 0x64
 80031de:	f002 fac1 	bl	8005764 <HAL_Delay>
	station_fm_set(STATION, FM_FREQUENCY, dc);
 80031e2:	4b08      	ldr	r3, [pc, #32]	; (8003204 <saveFMStation+0x34>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	b2d8      	uxtb	r0, r3
 80031e8:	4b07      	ldr	r3, [pc, #28]	; (8003208 <saveFMStation+0x38>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0019      	movs	r1, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	001a      	movs	r2, r3
 80031f2:	f001 fcb9 	bl	8004b68 <station_fm_set>
}
 80031f6:	46c0      	nop			; (mov r8, r8)
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b002      	add	sp, #8
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40014000 	.word	0x40014000
 8003204:	20000010 	.word	0x20000010
 8003208:	20000008 	.word	0x20000008

0800320c <saveAMStation>:

void saveAMStation()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
	station_am_set(STATION, AM_FREQUENCY, TIM15->CCR2);
 8003210:	4b06      	ldr	r3, [pc, #24]	; (800322c <saveAMStation+0x20>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b2d8      	uxtb	r0, r3
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <saveAMStation+0x24>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	0019      	movs	r1, r3
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <saveAMStation+0x28>)
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	001a      	movs	r2, r3
 8003222:	f001 fe01 	bl	8004e28 <station_am_set>
}
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	20000010 	.word	0x20000010
 8003230:	20000018 	.word	0x20000018
 8003234:	40014000 	.word	0x40014000

08003238 <setStation>:

void setStation(int number, bool force)
{
 8003238:	b5b0      	push	{r4, r5, r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	000a      	movs	r2, r1
 8003242:	1cfb      	adds	r3, r7, #3
 8003244:	701a      	strb	r2, [r3, #0]
	station_led(number);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f001 fefd 	bl	8005048 <station_led>

	Mode mode = misc_get_mode(AM_FREQUENCY_COUNTER);
 800324e:	4b30      	ldr	r3, [pc, #192]	; (8003310 <setStation+0xd8>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	250f      	movs	r5, #15
 8003254:	197c      	adds	r4, r7, r5
 8003256:	0018      	movs	r0, r3
 8003258:	f001 fb9c 	bl	8004994 <misc_get_mode>
 800325c:	0003      	movs	r3, r0
 800325e:	7023      	strb	r3, [r4, #0]
	bool modeChangedToFM = mode == FM && MODE != FM;
 8003260:	197b      	adds	r3, r7, r5
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d105      	bne.n	8003274 <setStation+0x3c>
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <setStation+0xdc>)
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <setStation+0x3c>
 8003270:	2201      	movs	r2, #1
 8003272:	e000      	b.n	8003276 <setStation+0x3e>
 8003274:	2200      	movs	r2, #0
 8003276:	230e      	movs	r3, #14
 8003278:	18fb      	adds	r3, r7, r3
 800327a:	701a      	strb	r2, [r3, #0]
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	400a      	ands	r2, r1
 8003282:	701a      	strb	r2, [r3, #0]
	bool modeChangedToAM = mode == AM && MODE != AM;
 8003284:	230f      	movs	r3, #15
 8003286:	18fb      	adds	r3, r7, r3
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	d105      	bne.n	800329a <setStation+0x62>
 800328e:	4b21      	ldr	r3, [pc, #132]	; (8003314 <setStation+0xdc>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d001      	beq.n	800329a <setStation+0x62>
 8003296:	2201      	movs	r2, #1
 8003298:	e000      	b.n	800329c <setStation+0x64>
 800329a:	2200      	movs	r2, #0
 800329c:	230d      	movs	r3, #13
 800329e:	18fb      	adds	r3, r7, r3
 80032a0:	701a      	strb	r2, [r3, #0]
 80032a2:	781a      	ldrb	r2, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	400a      	ands	r2, r1
 80032a8:	701a      	strb	r2, [r3, #0]

	if (modeChangedToFM || MODE == FM && (STATION != number || force))
 80032aa:	230e      	movs	r3, #14
 80032ac:	18fb      	adds	r3, r7, r3
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10c      	bne.n	80032ce <setStation+0x96>
 80032b4:	4b17      	ldr	r3, [pc, #92]	; (8003314 <setStation+0xdc>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10e      	bne.n	80032da <setStation+0xa2>
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <setStation+0xe0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d103      	bne.n	80032ce <setStation+0x96>
 80032c6:	1cfb      	adds	r3, r7, #3
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <setStation+0xa2>
	{
		setFMStation(number);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f000 f823 	bl	800331c <setFMStation>
	{
 80032d6:	46c0      	nop			; (mov r8, r8)
	}
	else if (modeChangedToAM || MODE == AM && (STATION != number || force))
	{
		setAMStation(number);
	}
}
 80032d8:	e015      	b.n	8003306 <setStation+0xce>
	else if (modeChangedToAM || MODE == AM && (STATION != number || force))
 80032da:	230d      	movs	r3, #13
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10c      	bne.n	80032fe <setStation+0xc6>
 80032e4:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <setStation+0xdc>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d10c      	bne.n	8003306 <setStation+0xce>
 80032ec:	4b0a      	ldr	r3, [pc, #40]	; (8003318 <setStation+0xe0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d103      	bne.n	80032fe <setStation+0xc6>
 80032f6:	1cfb      	adds	r3, r7, #3
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <setStation+0xce>
		setAMStation(number);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	0018      	movs	r0, r3
 8003302:	f000 f87f 	bl	8003404 <setAMStation>
}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	46bd      	mov	sp, r7
 800330a:	b004      	add	sp, #16
 800330c:	bdb0      	pop	{r4, r5, r7, pc}
 800330e:	46c0      	nop			; (mov r8, r8)
 8003310:	20000160 	.word	0x20000160
 8003314:	2000000c 	.word	0x2000000c
 8003318:	20000010 	.word	0x20000010

0800331c <setFMStation>:

void setFMStation(int number)
{
 800331c:	b590      	push	{r4, r7, lr}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
	STATION = number;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <setFMStation+0xcc>)
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
	misc_mute(true);
 800332a:	2001      	movs	r0, #1
 800332c:	f001 fafa 	bl	8004924 <misc_mute>

	stopFrequencyControl();
 8003330:	f7ff fd16 	bl	8002d60 <stopFrequencyControl>
	struct Station station = station_fm_get(number);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	b2da      	uxtb	r2, r3
 8003338:	240c      	movs	r4, #12
 800333a:	193b      	adds	r3, r7, r4
 800333c:	0011      	movs	r1, r2
 800333e:	0018      	movs	r0, r3
 8003340:	f001 fbc2 	bl	8004ac8 <station_fm_get>
	FM_FREQUENCY = station.Frequency;
 8003344:	0021      	movs	r1, r4
 8003346:	187b      	adds	r3, r7, r1
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	001a      	movs	r2, r3
 800334c:	4b27      	ldr	r3, [pc, #156]	; (80033ec <setFMStation+0xd0>)
 800334e:	601a      	str	r2, [r3, #0]
	TIM15->CCR2 = station.DutyCycle;
 8003350:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <setFMStation+0xd4>)
 8003352:	187b      	adds	r3, r7, r1
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOB, CENTER_LED_Pin, GPIO_PIN_SET);
 8003358:	4b26      	ldr	r3, [pc, #152]	; (80033f4 <setFMStation+0xd8>)
 800335a:	2201      	movs	r2, #1
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0018      	movs	r0, r3
 8003360:	f003 fc6f 	bl	8006c42 <HAL_GPIO_WritePin>

	FM_FREQUENCY_COUNTER_UPDATED = false;
 8003364:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <setFMStation+0xdc>)
 8003366:	2200      	movs	r2, #0
 8003368:	701a      	strb	r2, [r3, #0]
	while (!FM_FREQUENCY_COUNTER_UPDATED);
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	4b22      	ldr	r3, [pc, #136]	; (80033f8 <setFMStation+0xdc>)
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	4053      	eors	r3, r2
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f8      	bne.n	800336c <setFMStation+0x50>
	FM_FREQUENCY_COUNTER_UPDATED = false;
 800337a:	4b1f      	ldr	r3, [pc, #124]	; (80033f8 <setFMStation+0xdc>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]

	startFrequencyControl();
 8003380:	f7ff fcfa 	bl	8002d78 <startFrequencyControl>

	int i = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]
	LOCK_FREQUENCY = false;
 8003388:	4b1c      	ldr	r3, [pc, #112]	; (80033fc <setFMStation+0xe0>)
 800338a:	2200      	movs	r2, #0
 800338c:	701a      	strb	r2, [r3, #0]
	for(; i < 500 && abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER) > 2; i++)
 800338e:	e005      	b.n	800339c <setFMStation+0x80>
	{
		HAL_Delay(1);
 8003390:	2001      	movs	r0, #1
 8003392:	f002 f9e7 	bl	8005764 <HAL_Delay>
	for(; i < 500 && abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER) > 2; i++)
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	3301      	adds	r3, #1
 800339a:	617b      	str	r3, [r7, #20]
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	23fa      	movs	r3, #250	; 0xfa
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	429a      	cmp	r2, r3
 80033a4:	da09      	bge.n	80033ba <setFMStation+0x9e>
 80033a6:	4b11      	ldr	r3, [pc, #68]	; (80033ec <setFMStation+0xd0>)
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	4b15      	ldr	r3, [pc, #84]	; (8003400 <setFMStation+0xe4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	17da      	asrs	r2, r3, #31
 80033b2:	189b      	adds	r3, r3, r2
 80033b4:	4053      	eors	r3, r2
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	dcea      	bgt.n	8003390 <setFMStation+0x74>
	}
	LOCK_FREQUENCY = true;
 80033ba:	4b10      	ldr	r3, [pc, #64]	; (80033fc <setFMStation+0xe0>)
 80033bc:	2201      	movs	r2, #1
 80033be:	701a      	strb	r2, [r3, #0]


	HAL_Delay(500 - i);
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	22fa      	movs	r2, #250	; 0xfa
 80033c4:	0052      	lsls	r2, r2, #1
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	0018      	movs	r0, r3
 80033ca:	f002 f9cb 	bl	8005764 <HAL_Delay>
	misc_mute(false);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f001 faa8 	bl	8004924 <misc_mute>
	HAL_GPIO_WritePin(GPIOB, CENTER_LED_Pin, GPIO_PIN_RESET);
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <setFMStation+0xd8>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	2180      	movs	r1, #128	; 0x80
 80033da:	0018      	movs	r0, r3
 80033dc:	f003 fc31 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80033e0:	46c0      	nop			; (mov r8, r8)
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b007      	add	sp, #28
 80033e6:	bd90      	pop	{r4, r7, pc}
 80033e8:	20000010 	.word	0x20000010
 80033ec:	20000008 	.word	0x20000008
 80033f0:	40014000 	.word	0x40014000
 80033f4:	50000400 	.word	0x50000400
 80033f8:	20000158 	.word	0x20000158
 80033fc:	20000016 	.word	0x20000016
 8003400:	20000154 	.word	0x20000154

08003404 <setAMStation>:

void setAMStation(int number)
{
 8003404:	b590      	push	{r4, r7, lr}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	STATION = number;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <setAMStation+0x50>)
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	601a      	str	r2, [r3, #0]
	misc_mute(true);
 8003412:	2001      	movs	r0, #1
 8003414:	f001 fa86 	bl	8004924 <misc_mute>

	struct Station station = station_am_get(number);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	b2da      	uxtb	r2, r3
 800341c:	2408      	movs	r4, #8
 800341e:	193b      	adds	r3, r7, r4
 8003420:	0011      	movs	r1, r2
 8003422:	0018      	movs	r0, r3
 8003424:	f001 fcb0 	bl	8004d88 <station_am_get>
	AM_FREQUENCY = station.Frequency;
 8003428:	0021      	movs	r1, r4
 800342a:	187b      	adds	r3, r7, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	001a      	movs	r2, r3
 8003430:	4b09      	ldr	r3, [pc, #36]	; (8003458 <setAMStation+0x54>)
 8003432:	601a      	str	r2, [r3, #0]
	TIM15->CCR2 = station.DutyCycle;
 8003434:	4a09      	ldr	r2, [pc, #36]	; (800345c <setAMStation+0x58>)
 8003436:	187b      	adds	r3, r7, r1
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_Delay(500);
 800343c:	23fa      	movs	r3, #250	; 0xfa
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	0018      	movs	r0, r3
 8003442:	f002 f98f 	bl	8005764 <HAL_Delay>
	misc_mute(false);
 8003446:	2000      	movs	r0, #0
 8003448:	f001 fa6c 	bl	8004924 <misc_mute>
}
 800344c:	46c0      	nop			; (mov r8, r8)
 800344e:	46bd      	mov	sp, r7
 8003450:	b005      	add	sp, #20
 8003452:	bd90      	pop	{r4, r7, pc}
 8003454:	20000010 	.word	0x20000010
 8003458:	20000018 	.word	0x20000018
 800345c:	40014000 	.word	0x40014000

08003460 <getCalibrationValue>:

double getCalibrationValue()
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
	uint32_t y = 0;
 8003466:	2300      	movs	r3, #0
 8003468:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 5; i++)
 800346a:	2300      	movs	r3, #0
 800346c:	613b      	str	r3, [r7, #16]
 800346e:	e01d      	b.n	80034ac <getCalibrationValue+0x4c>
	{
		HAL_ADC_Start(&hadc1);
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <getCalibrationValue+0x88>)
 8003472:	0018      	movs	r0, r3
 8003474:	f002 fca6 	bl	8005dc4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003478:	2301      	movs	r3, #1
 800347a:	425a      	negs	r2, r3
 800347c:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <getCalibrationValue+0x88>)
 800347e:	0011      	movs	r1, r2
 8003480:	0018      	movs	r0, r3
 8003482:	f002 fced 	bl	8005e60 <HAL_ADC_PollForConversion>
		int x = HAL_ADC_GetValue(&hadc1);
 8003486:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <getCalibrationValue+0x88>)
 8003488:	0018      	movs	r0, r3
 800348a:	f002 fd77 	bl	8005f7c <HAL_ADC_GetValue>
 800348e:	0003      	movs	r3, r0
 8003490:	607b      	str	r3, [r7, #4]

		y += x / 5;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2105      	movs	r1, #5
 8003496:	0018      	movs	r0, r3
 8003498:	f7fc febc 	bl	8000214 <__divsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	001a      	movs	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	189b      	adds	r3, r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	3301      	adds	r3, #1
 80034aa:	613b      	str	r3, [r7, #16]
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	ddde      	ble.n	8003470 <getCalibrationValue+0x10>
	}

	// +/- 0.5%
	double value = 0.995 + 0.000002442 * y;
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f7fe fdac 	bl	8002010 <__aeabi_ui2d>
 80034b8:	4a0c      	ldr	r2, [pc, #48]	; (80034ec <getCalibrationValue+0x8c>)
 80034ba:	4b0d      	ldr	r3, [pc, #52]	; (80034f0 <getCalibrationValue+0x90>)
 80034bc:	f7fd ff44 	bl	8001348 <__aeabi_dmul>
 80034c0:	0002      	movs	r2, r0
 80034c2:	000b      	movs	r3, r1
 80034c4:	0010      	movs	r0, r2
 80034c6:	0019      	movs	r1, r3
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <getCalibrationValue+0x94>)
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <getCalibrationValue+0x98>)
 80034cc:	f7fc ffcc 	bl	8000468 <__aeabi_dadd>
 80034d0:	0002      	movs	r2, r0
 80034d2:	000b      	movs	r3, r1
 80034d4:	60ba      	str	r2, [r7, #8]
 80034d6:	60fb      	str	r3, [r7, #12]

	return value;
 80034d8:	68ba      	ldr	r2, [r7, #8]
 80034da:	68fb      	ldr	r3, [r7, #12]
}
 80034dc:	0010      	movs	r0, r2
 80034de:	0019      	movs	r1, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b006      	add	sp, #24
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	2000021c 	.word	0x2000021c
 80034ec:	b2904f5d 	.word	0xb2904f5d
 80034f0:	3ec47c27 	.word	0x3ec47c27
 80034f4:	3d70a3d7 	.word	0x3d70a3d7
 80034f8:	3fefd70a 	.word	0x3fefd70a

080034fc <enable_5volt>:

void enable_5volt(bool on)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	0002      	movs	r2, r0
 8003504:	1dfb      	adds	r3, r7, #7
 8003506:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISABLE_5V_Pin, on);
 8003508:	1dfb      	adds	r3, r7, #7
 800350a:	781a      	ldrb	r2, [r3, #0]
 800350c:	2380      	movs	r3, #128	; 0x80
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4803      	ldr	r0, [pc, #12]	; (8003520 <enable_5volt+0x24>)
 8003512:	0019      	movs	r1, r3
 8003514:	f003 fb95 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}
 8003520:	50000800 	.word	0x50000800

08003524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003524:	b590      	push	{r4, r7, lr}
 8003526:	b085      	sub	sp, #20
 8003528:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800352a:	f002 f895 	bl	8005658 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800352e:	f000 fd05 	bl	8003f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003532:	f001 f859 	bl	80045e8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8003536:	f000 fd81 	bl	800403c <MX_ADC1_Init>
  MX_TIM1_Init();
 800353a:	f000 fe17 	bl	800416c <MX_TIM1_Init>
  MX_TIM3_Init();
 800353e:	f000 fe79 	bl	8004234 <MX_TIM3_Init>
  MX_TIM6_Init();
 8003542:	f000 fed5 	bl	80042f0 <MX_TIM6_Init>
  MX_TIM14_Init();
 8003546:	f000 ff49 	bl	80043dc <MX_TIM14_Init>
  MX_TIM7_Init();
 800354a:	f000 ff0d 	bl	8004368 <MX_TIM7_Init>
  MX_RTC_Init();
 800354e:	f000 fddf 	bl	8004110 <MX_RTC_Init>
  MX_TIM15_Init();
 8003552:	f000 ff69 	bl	8004428 <MX_TIM15_Init>
  MX_TIM16_Init();
 8003556:	f001 f81f 	bl	8004598 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  misc_mute(true);
 800355a:	2001      	movs	r0, #1
 800355c:	f001 f9e2 	bl	8004924 <misc_mute>

  HAL_TIM_Base_Start(&htim1); 					// AM FRECQUENCY ETR
 8003560:	4bce      	ldr	r3, [pc, #824]	; (800389c <main+0x378>)
 8003562:	0018      	movs	r0, r3
 8003564:	f004 fd16 	bl	8007f94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); 					// FM FRECQUENCY ETR
 8003568:	4bcd      	ldr	r3, [pc, #820]	; (80038a0 <main+0x37c>)
 800356a:	0018      	movs	r0, r3
 800356c:	f004 fd12 	bl	8007f94 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6); 				// FM FRECQUENCY COUNT PERIOD
 8003570:	4bcc      	ldr	r3, [pc, #816]	; (80038a4 <main+0x380>)
 8003572:	0018      	movs	r0, r3
 8003574:	f004 fd5c 	bl	8008030 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); 				// AM FRECQUENCY COUNT PERIOD
 8003578:	4bcb      	ldr	r3, [pc, #812]	; (80038a8 <main+0x384>)
 800357a:	0018      	movs	r0, r3
 800357c:	f004 fd58 	bl	8008030 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);				// DISPLAY MULTIPLEXING
 8003580:	4bca      	ldr	r3, [pc, #808]	; (80038ac <main+0x388>)
 8003582:	0018      	movs	r0, r3
 8003584:	f004 fd54 	bl	8008030 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); 	// TUNING VOLTAGE PWM
 8003588:	4bc9      	ldr	r3, [pc, #804]	; (80038b0 <main+0x38c>)
 800358a:	2104      	movs	r1, #4
 800358c:	0018      	movs	r0, r3
 800358e:	f004 fe33 	bl	80081f8 <HAL_TIM_PWM_Start>
  startFrequencyControl();
 8003592:	f7ff fbf1 	bl	8002d78 <startFrequencyControl>

  display_on(true);
 8003596:	2001      	movs	r0, #1
 8003598:	f7fe fd7e 	bl	8002098 <display_on>
  enable_5volt(true);
 800359c:	2001      	movs	r0, #1
 800359e:	f7ff ffad 	bl	80034fc <enable_5volt>
  MODE = misc_get_mode(AM_FREQUENCY_COUNTER);
 80035a2:	4bc4      	ldr	r3, [pc, #784]	; (80038b4 <main+0x390>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0018      	movs	r0, r3
 80035a8:	f001 f9f4 	bl	8004994 <misc_get_mode>
 80035ac:	0003      	movs	r3, r0
 80035ae:	001a      	movs	r2, r3
 80035b0:	4bc1      	ldr	r3, [pc, #772]	; (80038b8 <main+0x394>)
 80035b2:	701a      	strb	r2, [r3, #0]
  BLUETOOTH = misc_bt_is_present();
 80035b4:	f001 fa76 	bl	8004aa4 <misc_bt_is_present>
 80035b8:	0003      	movs	r3, r0
 80035ba:	001a      	movs	r2, r3
 80035bc:	4bbf      	ldr	r3, [pc, #764]	; (80038bc <main+0x398>)
 80035be:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FREQUENCY_CALIBRATION = getCalibrationValue();
 80035c0:	f7ff ff4e 	bl	8003460 <getCalibrationValue>
 80035c4:	0002      	movs	r2, r0
 80035c6:	000b      	movs	r3, r1
 80035c8:	49bd      	ldr	r1, [pc, #756]	; (80038c0 <main+0x39c>)
 80035ca:	600a      	str	r2, [r1, #0]
 80035cc:	604b      	str	r3, [r1, #4]

	  bool standby = misc_is_standby();
 80035ce:	1dfc      	adds	r4, r7, #7
 80035d0:	f001 f95e 	bl	8004890 <misc_is_standby>
 80035d4:	0003      	movs	r3, r0
 80035d6:	7023      	strb	r3, [r4, #0]
	  bool poweredOn = STANDBY && !standby;
 80035d8:	4bba      	ldr	r3, [pc, #744]	; (80038c4 <main+0x3a0>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d008      	beq.n	80035f2 <main+0xce>
 80035e0:	1dfb      	adds	r3, r7, #7
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	4053      	eors	r3, r2
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <main+0xce>
 80035ee:	2201      	movs	r2, #1
 80035f0:	e000      	b.n	80035f4 <main+0xd0>
 80035f2:	2200      	movs	r2, #0
 80035f4:	1dbb      	adds	r3, r7, #6
 80035f6:	701a      	strb	r2, [r3, #0]
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	2101      	movs	r1, #1
 80035fc:	400a      	ands	r2, r1
 80035fe:	701a      	strb	r2, [r3, #0]
	  bool poweredOff = !STANDBY && standby;
 8003600:	4bb0      	ldr	r3, [pc, #704]	; (80038c4 <main+0x3a0>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2201      	movs	r2, #1
 8003606:	4053      	eors	r3, r2
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d005      	beq.n	800361a <main+0xf6>
 800360e:	1dfb      	adds	r3, r7, #7
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <main+0xf6>
 8003616:	2201      	movs	r2, #1
 8003618:	e000      	b.n	800361c <main+0xf8>
 800361a:	2200      	movs	r2, #0
 800361c:	1d7b      	adds	r3, r7, #5
 800361e:	701a      	strb	r2, [r3, #0]
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	2101      	movs	r1, #1
 8003624:	400a      	ands	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
	  if (poweredOn)
 8003628:	1dbb      	adds	r3, r7, #6
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d014      	beq.n	800365a <main+0x136>
	  {
		  STANDBY = false;
 8003630:	4ba4      	ldr	r3, [pc, #656]	; (80038c4 <main+0x3a0>)
 8003632:	2200      	movs	r2, #0
 8003634:	701a      	strb	r2, [r3, #0]
		  OFF_COUNTER = 0;
 8003636:	4ba4      	ldr	r3, [pc, #656]	; (80038c8 <main+0x3a4>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]
		  enable_5volt(true);
 800363c:	2001      	movs	r0, #1
 800363e:	f7ff ff5d 	bl	80034fc <enable_5volt>
		  display_on(true);
 8003642:	2001      	movs	r0, #1
 8003644:	f7fe fd28 	bl	8002098 <display_on>
		  startFrequencyControl();
 8003648:	f7ff fb96 	bl	8002d78 <startFrequencyControl>

		  // Standby detection is delayed, set station again to prevent timer duty cycle drift.
		  setStation(STATION, true);
 800364c:	4b9f      	ldr	r3, [pc, #636]	; (80038cc <main+0x3a8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2101      	movs	r1, #1
 8003652:	0018      	movs	r0, r3
 8003654:	f7ff fdf0 	bl	8003238 <setStation>
 8003658:	e01b      	b.n	8003692 <main+0x16e>
	  }
	  else if (poweredOff)
 800365a:	1d7b      	adds	r3, r7, #5
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d017      	beq.n	8003692 <main+0x16e>
	  {
		  STANDBY = true;
 8003662:	4b98      	ldr	r3, [pc, #608]	; (80038c4 <main+0x3a0>)
 8003664:	2201      	movs	r2, #1
 8003666:	701a      	strb	r2, [r3, #0]

		  if (COLD_START)
 8003668:	4b99      	ldr	r3, [pc, #612]	; (80038d0 <main+0x3ac>)
 800366a:	781b      	ldrb	r3, [r3, #0]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d006      	beq.n	800367e <main+0x15a>
		  {
			  OFF_COUNTER = 1000;
 8003670:	4b95      	ldr	r3, [pc, #596]	; (80038c8 <main+0x3a4>)
 8003672:	22fa      	movs	r2, #250	; 0xfa
 8003674:	0092      	lsls	r2, r2, #2
 8003676:	601a      	str	r2, [r3, #0]
			  COLD_START = false;
 8003678:	4b95      	ldr	r3, [pc, #596]	; (80038d0 <main+0x3ac>)
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]
		  }

		  enable_5volt(false);
 800367e:	2000      	movs	r0, #0
 8003680:	f7ff ff3c 	bl	80034fc <enable_5volt>
		  display_on(STANDBY_DISPLAY_ON);
 8003684:	4b93      	ldr	r3, [pc, #588]	; (80038d4 <main+0x3b0>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	0018      	movs	r0, r3
 800368a:	f7fe fd05 	bl	8002098 <display_on>
		  stopFrequencyControl();
 800368e:	f7ff fb67 	bl	8002d60 <stopFrequencyControl>
	  }

	  Mode mode = misc_get_mode(AM_FREQUENCY_COUNTER);
 8003692:	4b88      	ldr	r3, [pc, #544]	; (80038b4 <main+0x390>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	1d3c      	adds	r4, r7, #4
 8003698:	0018      	movs	r0, r3
 800369a:	f001 f97b 	bl	8004994 <misc_get_mode>
 800369e:	0003      	movs	r3, r0
 80036a0:	7023      	strb	r3, [r4, #0]
	  bool modeChangedToOther = mode == OTHER && MODE != OTHER;
 80036a2:	1d3b      	adds	r3, r7, #4
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d105      	bne.n	80036b6 <main+0x192>
 80036aa:	4b83      	ldr	r3, [pc, #524]	; (80038b8 <main+0x394>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d001      	beq.n	80036b6 <main+0x192>
 80036b2:	2201      	movs	r2, #1
 80036b4:	e000      	b.n	80036b8 <main+0x194>
 80036b6:	2200      	movs	r2, #0
 80036b8:	1cfb      	adds	r3, r7, #3
 80036ba:	701a      	strb	r2, [r3, #0]
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	2101      	movs	r1, #1
 80036c0:	400a      	ands	r2, r1
 80036c2:	701a      	strb	r2, [r3, #0]
	  bool modeChangedToFMorAM = (mode == FM && MODE != FM) || (mode == AM && MODE != AM);
 80036c4:	1d3b      	adds	r3, r7, #4
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d103      	bne.n	80036d4 <main+0x1b0>
 80036cc:	4b7a      	ldr	r3, [pc, #488]	; (80038b8 <main+0x394>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <main+0x1c0>
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <main+0x1c4>
 80036dc:	4b76      	ldr	r3, [pc, #472]	; (80038b8 <main+0x394>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d001      	beq.n	80036e8 <main+0x1c4>
 80036e4:	2201      	movs	r2, #1
 80036e6:	e000      	b.n	80036ea <main+0x1c6>
 80036e8:	2200      	movs	r2, #0
 80036ea:	1cbb      	adds	r3, r7, #2
 80036ec:	701a      	strb	r2, [r3, #0]
 80036ee:	781a      	ldrb	r2, [r3, #0]
 80036f0:	2101      	movs	r1, #1
 80036f2:	400a      	ands	r2, r1
 80036f4:	701a      	strb	r2, [r3, #0]
	  MODE = mode;
 80036f6:	4b70      	ldr	r3, [pc, #448]	; (80038b8 <main+0x394>)
 80036f8:	1d3a      	adds	r2, r7, #4
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	701a      	strb	r2, [r3, #0]

	  if (modeChangedToOther)
 80036fe:	1cfb      	adds	r3, r7, #3
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <main+0x1e8>
	  {
		  stopFrequencyControl();
 8003706:	f7ff fb2b 	bl	8002d60 <stopFrequencyControl>
 800370a:	e00b      	b.n	8003724 <main+0x200>
	  }
	  else if (modeChangedToFMorAM)
 800370c:	1cbb      	adds	r3, r7, #2
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <main+0x200>
	  {
		  // Mode detection is delayed, set station again to prevent timer duty cycle drift.
		  setStation(STATION, true);
 8003714:	4b6d      	ldr	r3, [pc, #436]	; (80038cc <main+0x3a8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	0018      	movs	r0, r3
 800371c:	f7ff fd8c 	bl	8003238 <setStation>
		  startFrequencyControl();
 8003720:	f7ff fb2a 	bl	8002d78 <startFrequencyControl>
	  }

	  keydecoder_out(1);
 8003724:	2001      	movs	r0, #1
 8003726:	f7ff f9bb 	bl	8002aa0 <keydecoder_out>
	  CLOCK = keydecoder_in(1);
 800372a:	2001      	movs	r0, #1
 800372c:	f7ff fa06 	bl	8002b3c <keydecoder_in>
 8003730:	0003      	movs	r3, r0
 8003732:	001a      	movs	r2, r3
 8003734:	4b68      	ldr	r3, [pc, #416]	; (80038d8 <main+0x3b4>)
 8003736:	701a      	strb	r2, [r3, #0]
	  SET_BUTTON = keydecoder_in(2);
 8003738:	2002      	movs	r0, #2
 800373a:	f7ff f9ff 	bl	8002b3c <keydecoder_in>
 800373e:	0003      	movs	r3, r0
 8003740:	001a      	movs	r2, r3
 8003742:	4b66      	ldr	r3, [pc, #408]	; (80038dc <main+0x3b8>)
 8003744:	701a      	strb	r2, [r3, #0]

	  keydecoder_out(2);
 8003746:	2002      	movs	r0, #2
 8003748:	f7ff f9aa 	bl	8002aa0 <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2) && keydecoder_in(3))
 800374c:	4b5d      	ldr	r3, [pc, #372]	; (80038c4 <main+0x3a0>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	4053      	eors	r3, r2
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04a      	beq.n	80037f0 <main+0x2cc>
 800375a:	2002      	movs	r0, #2
 800375c:	f7ff f9ee 	bl	8002b3c <keydecoder_in>
 8003760:	1e03      	subs	r3, r0, #0
 8003762:	d045      	beq.n	80037f0 <main+0x2cc>
 8003764:	2003      	movs	r0, #3
 8003766:	f7ff f9e9 	bl	8002b3c <keydecoder_in>
 800376a:	1e03      	subs	r3, r0, #0
 800376c:	d040      	beq.n	80037f0 <main+0x2cc>
	  {
		  // TUNING UP QUICK
		  LOCK_FREQUENCY = false;
 800376e:	4b5c      	ldr	r3, [pc, #368]	; (80038e0 <main+0x3bc>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <main+0x394>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <main+0x274>
 800377c:	4b59      	ldr	r3, [pc, #356]	; (80038e4 <main+0x3c0>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a59      	ldr	r2, [pc, #356]	; (80038e8 <main+0x3c4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	dc08      	bgt.n	8003798 <main+0x274>
		  {
			  FM_FREQUENCY += 5;
 8003786:	4b57      	ldr	r3, [pc, #348]	; (80038e4 <main+0x3c0>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	1d5a      	adds	r2, r3, #5
 800378c:	4b55      	ldr	r3, [pc, #340]	; (80038e4 <main+0x3c0>)
 800378e:	601a      	str	r2, [r3, #0]
			  HAL_Delay(30);
 8003790:	201e      	movs	r0, #30
 8003792:	f001 ffe7 	bl	8005764 <HAL_Delay>
 8003796:	e027      	b.n	80037e8 <main+0x2c4>
		  }
		  else if (MODE == AM && AM_FREQUENCY < 1602 && !BLUETOOTH)
 8003798:	4b47      	ldr	r3, [pc, #284]	; (80038b8 <main+0x394>)
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d115      	bne.n	80037cc <main+0x2a8>
 80037a0:	4b52      	ldr	r3, [pc, #328]	; (80038ec <main+0x3c8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <main+0x3cc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	dc10      	bgt.n	80037cc <main+0x2a8>
 80037aa:	4b44      	ldr	r3, [pc, #272]	; (80038bc <main+0x398>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2201      	movs	r2, #1
 80037b0:	4053      	eors	r3, r2
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d009      	beq.n	80037cc <main+0x2a8>
		  {
			  AM_FREQUENCY += 9;
 80037b8:	4b4c      	ldr	r3, [pc, #304]	; (80038ec <main+0x3c8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	3309      	adds	r3, #9
 80037be:	001a      	movs	r2, r3
 80037c0:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <main+0x3c8>)
 80037c2:	601a      	str	r2, [r3, #0]
			  HAL_Delay(50);
 80037c4:	2032      	movs	r0, #50	; 0x32
 80037c6:	f001 ffcd 	bl	8005764 <HAL_Delay>
 80037ca:	e00d      	b.n	80037e8 <main+0x2c4>
		  }
		  else if (MODE == AM && BLUETOOTH && STATION == 0)
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <main+0x394>)
 80037ce:	781b      	ldrb	r3, [r3, #0]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d109      	bne.n	80037e8 <main+0x2c4>
 80037d4:	4b39      	ldr	r3, [pc, #228]	; (80038bc <main+0x398>)
 80037d6:	781b      	ldrb	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <main+0x2c4>
 80037dc:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <main+0x3a8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <main+0x2c4>
		  {
			  misc_bt_pause();
 80037e4:	f001 f91a 	bl	8004a1c <misc_bt_pause>
		  }
		  LOCK_FREQUENCY = true;
 80037e8:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <main+0x3bc>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e214      	b.n	8003c1a <main+0x6f6>
	  }
	  else if (!STANDBY && keydecoder_in(2) && keydecoder_in(4))
 80037f0:	4b34      	ldr	r3, [pc, #208]	; (80038c4 <main+0x3a0>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2201      	movs	r2, #1
 80037f6:	4053      	eors	r3, r2
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d100      	bne.n	8003800 <main+0x2dc>
 80037fe:	e07b      	b.n	80038f8 <main+0x3d4>
 8003800:	2002      	movs	r0, #2
 8003802:	f7ff f99b 	bl	8002b3c <keydecoder_in>
 8003806:	1e03      	subs	r3, r0, #0
 8003808:	d100      	bne.n	800380c <main+0x2e8>
 800380a:	e075      	b.n	80038f8 <main+0x3d4>
 800380c:	2004      	movs	r0, #4
 800380e:	f7ff f995 	bl	8002b3c <keydecoder_in>
 8003812:	1e03      	subs	r3, r0, #0
 8003814:	d100      	bne.n	8003818 <main+0x2f4>
 8003816:	e06f      	b.n	80038f8 <main+0x3d4>
	  {
		  // TUNING DOWN QUICK
		  LOCK_FREQUENCY = false;
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <main+0x3bc>)
 800381a:	2200      	movs	r2, #0
 800381c:	701a      	strb	r2, [r3, #0]
		  if (MODE == FM && FM_FREQUENCY > 8750)
 800381e:	4b26      	ldr	r3, [pc, #152]	; (80038b8 <main+0x394>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10d      	bne.n	8003842 <main+0x31e>
 8003826:	4b2f      	ldr	r3, [pc, #188]	; (80038e4 <main+0x3c0>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a32      	ldr	r2, [pc, #200]	; (80038f4 <main+0x3d0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	dd08      	ble.n	8003842 <main+0x31e>
		  {
			  FM_FREQUENCY -= 5;
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <main+0x3c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	1f5a      	subs	r2, r3, #5
 8003836:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <main+0x3c0>)
 8003838:	601a      	str	r2, [r3, #0]
			  HAL_Delay(30);
 800383a:	201e      	movs	r0, #30
 800383c:	f001 ff92 	bl	8005764 <HAL_Delay>
 8003840:	e028      	b.n	8003894 <main+0x370>
		  }
		  else if (MODE == AM && AM_FREQUENCY > 531 && !BLUETOOTH)
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <main+0x394>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d116      	bne.n	8003878 <main+0x354>
 800384a:	4b28      	ldr	r3, [pc, #160]	; (80038ec <main+0x3c8>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	2385      	movs	r3, #133	; 0x85
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	429a      	cmp	r2, r3
 8003854:	db10      	blt.n	8003878 <main+0x354>
 8003856:	4b19      	ldr	r3, [pc, #100]	; (80038bc <main+0x398>)
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	2201      	movs	r2, #1
 800385c:	4053      	eors	r3, r2
 800385e:	b2db      	uxtb	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <main+0x354>
		  {
			  AM_FREQUENCY -= 9;
 8003864:	4b21      	ldr	r3, [pc, #132]	; (80038ec <main+0x3c8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3b09      	subs	r3, #9
 800386a:	001a      	movs	r2, r3
 800386c:	4b1f      	ldr	r3, [pc, #124]	; (80038ec <main+0x3c8>)
 800386e:	601a      	str	r2, [r3, #0]
			  HAL_Delay(50);
 8003870:	2032      	movs	r0, #50	; 0x32
 8003872:	f001 ff77 	bl	8005764 <HAL_Delay>
 8003876:	e00d      	b.n	8003894 <main+0x370>
		  }
		  else if (MODE == AM && BLUETOOTH && STATION == 0)
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <main+0x394>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d109      	bne.n	8003894 <main+0x370>
 8003880:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <main+0x398>)
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d005      	beq.n	8003894 <main+0x370>
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <main+0x3a8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <main+0x370>
		  {
			  misc_bt_pause();
 8003890:	f001 f8c4 	bl	8004a1c <misc_bt_pause>
		  }
		  LOCK_FREQUENCY = true;
 8003894:	4b12      	ldr	r3, [pc, #72]	; (80038e0 <main+0x3bc>)
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
 800389a:	e1be      	b.n	8003c1a <main+0x6f6>
 800389c:	200002f8 	.word	0x200002f8
 80038a0:	200001d0 	.word	0x200001d0
 80038a4:	200002ac 	.word	0x200002ac
 80038a8:	20000390 	.word	0x20000390
 80038ac:	200003dc 	.word	0x200003dc
 80038b0:	20000184 	.word	0x20000184
 80038b4:	20000160 	.word	0x20000160
 80038b8:	2000000c 	.word	0x2000000c
 80038bc:	2000015a 	.word	0x2000015a
 80038c0:	20000000 	.word	0x20000000
 80038c4:	20000014 	.word	0x20000014
 80038c8:	20000164 	.word	0x20000164
 80038cc:	20000010 	.word	0x20000010
 80038d0:	2000001c 	.word	0x2000001c
 80038d4:	20000015 	.word	0x20000015
 80038d8:	20000159 	.word	0x20000159
 80038dc:	2000015c 	.word	0x2000015c
 80038e0:	20000016 	.word	0x20000016
 80038e4:	20000008 	.word	0x20000008
 80038e8:	00002a2f 	.word	0x00002a2f
 80038ec:	20000018 	.word	0x20000018
 80038f0:	00000641 	.word	0x00000641
 80038f4:	0000222e 	.word	0x0000222e
	  }
	  else if (!STANDBY && keydecoder_in(1))
 80038f8:	4bbb      	ldr	r3, [pc, #748]	; (8003be8 <main+0x6c4>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2201      	movs	r2, #1
 80038fe:	4053      	eors	r3, r2
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d06a      	beq.n	80039dc <main+0x4b8>
 8003906:	2001      	movs	r0, #1
 8003908:	f7ff f918 	bl	8002b3c <keydecoder_in>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d065      	beq.n	80039dc <main+0x4b8>
	  {
		  // SCAN DOWN
		  if (MODE == FM)
 8003910:	4bb6      	ldr	r3, [pc, #728]	; (8003bec <main+0x6c8>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d000      	beq.n	800391a <main+0x3f6>
 8003918:	e17f      	b.n	8003c1a <main+0x6f6>
		  {
			  misc_mute(true);
 800391a:	2001      	movs	r0, #1
 800391c:	f001 f802 	bl	8004924 <misc_mute>
			  LOCK_FREQUENCY = false;
 8003920:	4bb3      	ldr	r3, [pc, #716]	; (8003bf0 <main+0x6cc>)
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]

			  for (int i = 0; i < 2 && FM_FREQUENCY > 8750; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e015      	b.n	8003958 <main+0x434>
			  {
				  FM_FREQUENCY -= 5;
 800392c:	4bb1      	ldr	r3, [pc, #708]	; (8003bf4 <main+0x6d0>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	1f5a      	subs	r2, r3, #5
 8003932:	4bb0      	ldr	r3, [pc, #704]	; (8003bf4 <main+0x6d0>)
 8003934:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003936:	2014      	movs	r0, #20
 8003938:	f001 ff14 	bl	8005764 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 800393c:	46c0      	nop			; (mov r8, r8)
 800393e:	4bae      	ldr	r3, [pc, #696]	; (8003bf8 <main+0x6d4>)
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	4bac      	ldr	r3, [pc, #688]	; (8003bf4 <main+0x6d0>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	17da      	asrs	r2, r3, #31
 800394a:	189b      	adds	r3, r3, r2
 800394c:	4053      	eors	r3, r2
 800394e:	2b04      	cmp	r3, #4
 8003950:	dcf5      	bgt.n	800393e <main+0x41a>
			  for (int i = 0; i < 2 && FM_FREQUENCY > 8750; i++)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3301      	adds	r3, #1
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2b01      	cmp	r3, #1
 800395c:	dc04      	bgt.n	8003968 <main+0x444>
 800395e:	4ba5      	ldr	r3, [pc, #660]	; (8003bf4 <main+0x6d0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4aa6      	ldr	r2, [pc, #664]	; (8003bfc <main+0x6d8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	dce1      	bgt.n	800392c <main+0x408>
			  }

			  SCAN_STOP = false;
 8003968:	4ba5      	ldr	r3, [pc, #660]	; (8003c00 <main+0x6dc>)
 800396a:	2200      	movs	r2, #0
 800396c:	701a      	strb	r2, [r3, #0]

			  do
			  {
				  FM_FREQUENCY -= 5;
 800396e:	4ba1      	ldr	r3, [pc, #644]	; (8003bf4 <main+0x6d0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	1f5a      	subs	r2, r3, #5
 8003974:	4b9f      	ldr	r3, [pc, #636]	; (8003bf4 <main+0x6d0>)
 8003976:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003978:	2014      	movs	r0, #20
 800397a:	f001 fef3 	bl	8005764 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 800397e:	46c0      	nop			; (mov r8, r8)
 8003980:	4b9d      	ldr	r3, [pc, #628]	; (8003bf8 <main+0x6d4>)
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	4b9b      	ldr	r3, [pc, #620]	; (8003bf4 <main+0x6d0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	17da      	asrs	r2, r3, #31
 800398c:	189b      	adds	r3, r3, r2
 800398e:	4053      	eors	r3, r2
 8003990:	2b04      	cmp	r3, #4
 8003992:	dcf5      	bgt.n	8003980 <main+0x45c>
			  } while (!SCAN_STOP && FM_FREQUENCY > 8750);
 8003994:	4b9a      	ldr	r3, [pc, #616]	; (8003c00 <main+0x6dc>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2201      	movs	r2, #1
 800399a:	4053      	eors	r3, r2
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d004      	beq.n	80039ac <main+0x488>
 80039a2:	4b94      	ldr	r3, [pc, #592]	; (8003bf4 <main+0x6d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a95      	ldr	r2, [pc, #596]	; (8003bfc <main+0x6d8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	dce0      	bgt.n	800396e <main+0x44a>

			  if (FM_FREQUENCY % 10 == 5)
 80039ac:	4b91      	ldr	r3, [pc, #580]	; (8003bf4 <main+0x6d0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	210a      	movs	r1, #10
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7fc fd14 	bl	80003e0 <__aeabi_idivmod>
 80039b8:	000b      	movs	r3, r1
 80039ba:	2b05      	cmp	r3, #5
 80039bc:	d104      	bne.n	80039c8 <main+0x4a4>
			  {
				  FM_FREQUENCY += 5;
 80039be:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <main+0x6d0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	1d5a      	adds	r2, r3, #5
 80039c4:	4b8b      	ldr	r3, [pc, #556]	; (8003bf4 <main+0x6d0>)
 80039c6:	601a      	str	r2, [r3, #0]
			  }

			  HAL_Delay(250);
 80039c8:	20fa      	movs	r0, #250	; 0xfa
 80039ca:	f001 fecb 	bl	8005764 <HAL_Delay>
			  LOCK_FREQUENCY = true;
 80039ce:	4b88      	ldr	r3, [pc, #544]	; (8003bf0 <main+0x6cc>)
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
			  misc_mute(false);
 80039d4:	2000      	movs	r0, #0
 80039d6:	f000 ffa5 	bl	8004924 <misc_mute>
		  if (MODE == FM)
 80039da:	e11e      	b.n	8003c1a <main+0x6f6>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(2))
 80039dc:	4b82      	ldr	r3, [pc, #520]	; (8003be8 <main+0x6c4>)
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2201      	movs	r2, #1
 80039e2:	4053      	eors	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d06a      	beq.n	8003ac0 <main+0x59c>
 80039ea:	2002      	movs	r0, #2
 80039ec:	f7ff f8a6 	bl	8002b3c <keydecoder_in>
 80039f0:	1e03      	subs	r3, r0, #0
 80039f2:	d065      	beq.n	8003ac0 <main+0x59c>
	  {
		  // SCAN UP
		  if (MODE == FM)
 80039f4:	4b7d      	ldr	r3, [pc, #500]	; (8003bec <main+0x6c8>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d000      	beq.n	80039fe <main+0x4da>
 80039fc:	e10d      	b.n	8003c1a <main+0x6f6>
		  {
			  misc_mute(true);
 80039fe:	2001      	movs	r0, #1
 8003a00:	f000 ff90 	bl	8004924 <misc_mute>
			  LOCK_FREQUENCY = false;
 8003a04:	4b7a      	ldr	r3, [pc, #488]	; (8003bf0 <main+0x6cc>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	701a      	strb	r2, [r3, #0]

			  for (int i = 0; i < 2 && FM_FREQUENCY < 10800; i++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	e015      	b.n	8003a3c <main+0x518>
			  {
				  FM_FREQUENCY += 5;
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <main+0x6d0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	1d5a      	adds	r2, r3, #5
 8003a16:	4b77      	ldr	r3, [pc, #476]	; (8003bf4 <main+0x6d0>)
 8003a18:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003a1a:	2014      	movs	r0, #20
 8003a1c:	f001 fea2 	bl	8005764 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 8003a20:	46c0      	nop			; (mov r8, r8)
 8003a22:	4b75      	ldr	r3, [pc, #468]	; (8003bf8 <main+0x6d4>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4b73      	ldr	r3, [pc, #460]	; (8003bf4 <main+0x6d0>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	17da      	asrs	r2, r3, #31
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	4053      	eors	r3, r2
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	dcf5      	bgt.n	8003a22 <main+0x4fe>
			  for (int i = 0; i < 2 && FM_FREQUENCY < 10800; i++)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	60bb      	str	r3, [r7, #8]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	dc04      	bgt.n	8003a4c <main+0x528>
 8003a42:	4b6c      	ldr	r3, [pc, #432]	; (8003bf4 <main+0x6d0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a6f      	ldr	r2, [pc, #444]	; (8003c04 <main+0x6e0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	dde1      	ble.n	8003a10 <main+0x4ec>
			  }

			  SCAN_STOP = false;
 8003a4c:	4b6c      	ldr	r3, [pc, #432]	; (8003c00 <main+0x6dc>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]

			  do
			  {
				  FM_FREQUENCY += 5;
 8003a52:	4b68      	ldr	r3, [pc, #416]	; (8003bf4 <main+0x6d0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1d5a      	adds	r2, r3, #5
 8003a58:	4b66      	ldr	r3, [pc, #408]	; (8003bf4 <main+0x6d0>)
 8003a5a:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003a5c:	2014      	movs	r0, #20
 8003a5e:	f001 fe81 	bl	8005764 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 8003a62:	46c0      	nop			; (mov r8, r8)
 8003a64:	4b64      	ldr	r3, [pc, #400]	; (8003bf8 <main+0x6d4>)
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	4b62      	ldr	r3, [pc, #392]	; (8003bf4 <main+0x6d0>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	17da      	asrs	r2, r3, #31
 8003a70:	189b      	adds	r3, r3, r2
 8003a72:	4053      	eors	r3, r2
 8003a74:	2b04      	cmp	r3, #4
 8003a76:	dcf5      	bgt.n	8003a64 <main+0x540>
			  } while (!SCAN_STOP && FM_FREQUENCY < 10800);
 8003a78:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <main+0x6dc>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	4053      	eors	r3, r2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d004      	beq.n	8003a90 <main+0x56c>
 8003a86:	4b5b      	ldr	r3, [pc, #364]	; (8003bf4 <main+0x6d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5e      	ldr	r2, [pc, #376]	; (8003c04 <main+0x6e0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	dde0      	ble.n	8003a52 <main+0x52e>

			  if (FM_FREQUENCY % 10 == 5)
 8003a90:	4b58      	ldr	r3, [pc, #352]	; (8003bf4 <main+0x6d0>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	210a      	movs	r1, #10
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fc fca2 	bl	80003e0 <__aeabi_idivmod>
 8003a9c:	000b      	movs	r3, r1
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d104      	bne.n	8003aac <main+0x588>
			  {
				  FM_FREQUENCY -= 5;
 8003aa2:	4b54      	ldr	r3, [pc, #336]	; (8003bf4 <main+0x6d0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	1f5a      	subs	r2, r3, #5
 8003aa8:	4b52      	ldr	r3, [pc, #328]	; (8003bf4 <main+0x6d0>)
 8003aaa:	601a      	str	r2, [r3, #0]
			  }

			  HAL_Delay(250);
 8003aac:	20fa      	movs	r0, #250	; 0xfa
 8003aae:	f001 fe59 	bl	8005764 <HAL_Delay>
			  LOCK_FREQUENCY = true;
 8003ab2:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <main+0x6cc>)
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	701a      	strb	r2, [r3, #0]
			  misc_mute(false);
 8003ab8:	2000      	movs	r0, #0
 8003aba:	f000 ff33 	bl	8004924 <misc_mute>
		  if (MODE == FM)
 8003abe:	e0ac      	b.n	8003c1a <main+0x6f6>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003ac0:	4b49      	ldr	r3, [pc, #292]	; (8003be8 <main+0x6c4>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4053      	eors	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d043      	beq.n	8003b56 <main+0x632>
 8003ace:	2003      	movs	r0, #3
 8003ad0:	f7ff f834 	bl	8002b3c <keydecoder_in>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d03e      	beq.n	8003b56 <main+0x632>
	  {
		  // TUNING UP
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003ad8:	4b44      	ldr	r3, [pc, #272]	; (8003bec <main+0x6c8>)
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10d      	bne.n	8003afc <main+0x5d8>
 8003ae0:	4b44      	ldr	r3, [pc, #272]	; (8003bf4 <main+0x6d0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a47      	ldr	r2, [pc, #284]	; (8003c04 <main+0x6e0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	dc08      	bgt.n	8003afc <main+0x5d8>
		  {
			  FM_FREQUENCY += 5;
 8003aea:	4b42      	ldr	r3, [pc, #264]	; (8003bf4 <main+0x6d0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	1d5a      	adds	r2, r3, #5
 8003af0:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <main+0x6d0>)
 8003af2:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8003af4:	20c8      	movs	r0, #200	; 0xc8
 8003af6:	f001 fe35 	bl	8005764 <HAL_Delay>
 8003afa:	e02b      	b.n	8003b54 <main+0x630>
		  }
		  else if (MODE == AM && AM_FREQUENCY < 1602 && !BLUETOOTH)
 8003afc:	4b3b      	ldr	r3, [pc, #236]	; (8003bec <main+0x6c8>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d115      	bne.n	8003b30 <main+0x60c>
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <main+0x6e4>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a40      	ldr	r2, [pc, #256]	; (8003c0c <main+0x6e8>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	dc10      	bgt.n	8003b30 <main+0x60c>
 8003b0e:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <main+0x6ec>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2201      	movs	r2, #1
 8003b14:	4053      	eors	r3, r2
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d009      	beq.n	8003b30 <main+0x60c>
		  {
			  AM_FREQUENCY += 9;
 8003b1c:	4b3a      	ldr	r3, [pc, #232]	; (8003c08 <main+0x6e4>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3309      	adds	r3, #9
 8003b22:	001a      	movs	r2, r3
 8003b24:	4b38      	ldr	r3, [pc, #224]	; (8003c08 <main+0x6e4>)
 8003b26:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8003b28:	20c8      	movs	r0, #200	; 0xc8
 8003b2a:	f001 fe1b 	bl	8005764 <HAL_Delay>
 8003b2e:	e011      	b.n	8003b54 <main+0x630>
		  }
		  else if (MODE == AM && BLUETOOTH && STATION == 0)
 8003b30:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <main+0x6c8>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d000      	beq.n	8003b3a <main+0x616>
 8003b38:	e06e      	b.n	8003c18 <main+0x6f4>
 8003b3a:	4b35      	ldr	r3, [pc, #212]	; (8003c10 <main+0x6ec>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d100      	bne.n	8003b44 <main+0x620>
 8003b42:	e069      	b.n	8003c18 <main+0x6f4>
 8003b44:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <main+0x6f0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d000      	beq.n	8003b4e <main+0x62a>
 8003b4c:	e064      	b.n	8003c18 <main+0x6f4>
		  {
			  misc_bt_next();
 8003b4e:	f000 ff7d 	bl	8004a4c <misc_bt_next>
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003b52:	e061      	b.n	8003c18 <main+0x6f4>
 8003b54:	e060      	b.n	8003c18 <main+0x6f4>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(4))
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <main+0x6c4>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	4053      	eors	r3, r2
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d05a      	beq.n	8003c1a <main+0x6f6>
 8003b64:	2004      	movs	r0, #4
 8003b66:	f7fe ffe9 	bl	8002b3c <keydecoder_in>
 8003b6a:	1e03      	subs	r3, r0, #0
 8003b6c:	d055      	beq.n	8003c1a <main+0x6f6>
	  {
		  // TUNING DOWN
		  if (MODE == FM && FM_FREQUENCY > 8750)
 8003b6e:	4b1f      	ldr	r3, [pc, #124]	; (8003bec <main+0x6c8>)
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10d      	bne.n	8003b92 <main+0x66e>
 8003b76:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <main+0x6d0>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a20      	ldr	r2, [pc, #128]	; (8003bfc <main+0x6d8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	dd08      	ble.n	8003b92 <main+0x66e>
		  {
			  FM_FREQUENCY -= 5;
 8003b80:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <main+0x6d0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1f5a      	subs	r2, r3, #5
 8003b86:	4b1b      	ldr	r3, [pc, #108]	; (8003bf4 <main+0x6d0>)
 8003b88:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8003b8a:	20c8      	movs	r0, #200	; 0xc8
 8003b8c:	f001 fdea 	bl	8005764 <HAL_Delay>
 8003b90:	e043      	b.n	8003c1a <main+0x6f6>
		  }
		  else if (MODE == AM && AM_FREQUENCY > 531 && !BLUETOOTH)
 8003b92:	4b16      	ldr	r3, [pc, #88]	; (8003bec <main+0x6c8>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d116      	bne.n	8003bc8 <main+0x6a4>
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	; (8003c08 <main+0x6e4>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	2385      	movs	r3, #133	; 0x85
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	db10      	blt.n	8003bc8 <main+0x6a4>
 8003ba6:	4b1a      	ldr	r3, [pc, #104]	; (8003c10 <main+0x6ec>)
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2201      	movs	r2, #1
 8003bac:	4053      	eors	r3, r2
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <main+0x6a4>
		  {
			  AM_FREQUENCY -= 9;
 8003bb4:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <main+0x6e4>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	3b09      	subs	r3, #9
 8003bba:	001a      	movs	r2, r3
 8003bbc:	4b12      	ldr	r3, [pc, #72]	; (8003c08 <main+0x6e4>)
 8003bbe:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8003bc0:	20c8      	movs	r0, #200	; 0xc8
 8003bc2:	f001 fdcf 	bl	8005764 <HAL_Delay>
 8003bc6:	e028      	b.n	8003c1a <main+0x6f6>
		  }
		  else if (MODE == AM && BLUETOOTH && STATION == 0)
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <main+0x6c8>)
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d124      	bne.n	8003c1a <main+0x6f6>
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <main+0x6ec>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d020      	beq.n	8003c1a <main+0x6f6>
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	; (8003c14 <main+0x6f0>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d11c      	bne.n	8003c1a <main+0x6f6>
		  {
			  misc_bt_prev();
 8003be0:	f000 ff4a 	bl	8004a78 <misc_bt_prev>
 8003be4:	e019      	b.n	8003c1a <main+0x6f6>
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	20000014 	.word	0x20000014
 8003bec:	2000000c 	.word	0x2000000c
 8003bf0:	20000016 	.word	0x20000016
 8003bf4:	20000008 	.word	0x20000008
 8003bf8:	20000154 	.word	0x20000154
 8003bfc:	0000222e 	.word	0x0000222e
 8003c00:	2000015e 	.word	0x2000015e
 8003c04:	00002a2f 	.word	0x00002a2f
 8003c08:	20000018 	.word	0x20000018
 8003c0c:	00000641 	.word	0x00000641
 8003c10:	2000015a 	.word	0x2000015a
 8003c14:	20000010 	.word	0x20000010
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003c18:	46c0      	nop			; (mov r8, r8)
		  }
	  }

	  keydecoder_out(3);
 8003c1a:	2003      	movs	r0, #3
 8003c1c:	f7fe ff40 	bl	8002aa0 <keydecoder_out>
	  if (CLOCK && SET_BUTTON && keydecoder_in(1))
 8003c20:	4bba      	ldr	r3, [pc, #744]	; (8003f0c <main+0x9e8>)
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d02c      	beq.n	8003c82 <main+0x75e>
 8003c28:	4bb9      	ldr	r3, [pc, #740]	; (8003f10 <main+0x9ec>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d028      	beq.n	8003c82 <main+0x75e>
 8003c30:	2001      	movs	r0, #1
 8003c32:	f7fe ff83 	bl	8002b3c <keydecoder_in>
 8003c36:	1e03      	subs	r3, r0, #0
 8003c38:	d023      	beq.n	8003c82 <main+0x75e>
	  {
		  // MIN
		  HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8003c3a:	49b6      	ldr	r1, [pc, #728]	; (8003f14 <main+0x9f0>)
 8003c3c:	4bb6      	ldr	r3, [pc, #728]	; (8003f18 <main+0x9f4>)
 8003c3e:	2200      	movs	r2, #0
 8003c40:	0018      	movs	r0, r3
 8003c42:	f003 ffb1 	bl	8007ba8 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 8003c46:	49b5      	ldr	r1, [pc, #724]	; (8003f1c <main+0x9f8>)
 8003c48:	4bb3      	ldr	r3, [pc, #716]	; (8003f18 <main+0x9f4>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	0018      	movs	r0, r3
 8003c4e:	f004 f807 	bl	8007c60 <HAL_RTC_GetDate>

		  if (TIME.Minutes == 59)
 8003c52:	4bb0      	ldr	r3, [pc, #704]	; (8003f14 <main+0x9f0>)
 8003c54:	785b      	ldrb	r3, [r3, #1]
 8003c56:	2b3b      	cmp	r3, #59	; 0x3b
 8003c58:	d103      	bne.n	8003c62 <main+0x73e>
		  {
			  TIME.Minutes = 0;
 8003c5a:	4bae      	ldr	r3, [pc, #696]	; (8003f14 <main+0x9f0>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	705a      	strb	r2, [r3, #1]
 8003c60:	e005      	b.n	8003c6e <main+0x74a>
		  }
		  else
		  {
			  TIME.Minutes++;
 8003c62:	4bac      	ldr	r3, [pc, #688]	; (8003f14 <main+0x9f0>)
 8003c64:	785b      	ldrb	r3, [r3, #1]
 8003c66:	3301      	adds	r3, #1
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4baa      	ldr	r3, [pc, #680]	; (8003f14 <main+0x9f0>)
 8003c6c:	705a      	strb	r2, [r3, #1]
		  }

		  HAL_Delay(200);
 8003c6e:	20c8      	movs	r0, #200	; 0xc8
 8003c70:	f001 fd78 	bl	8005764 <HAL_Delay>
		  HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8003c74:	49a7      	ldr	r1, [pc, #668]	; (8003f14 <main+0x9f0>)
 8003c76:	4ba8      	ldr	r3, [pc, #672]	; (8003f18 <main+0x9f4>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f003 feec 	bl	8007a58 <HAL_RTC_SetTime>
 8003c80:	e08f      	b.n	8003da2 <main+0x87e>
	  }
	  else if (CLOCK && SET_BUTTON && keydecoder_in(2))
 8003c82:	4ba2      	ldr	r3, [pc, #648]	; (8003f0c <main+0x9e8>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d02c      	beq.n	8003ce4 <main+0x7c0>
 8003c8a:	4ba1      	ldr	r3, [pc, #644]	; (8003f10 <main+0x9ec>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d028      	beq.n	8003ce4 <main+0x7c0>
 8003c92:	2002      	movs	r0, #2
 8003c94:	f7fe ff52 	bl	8002b3c <keydecoder_in>
 8003c98:	1e03      	subs	r3, r0, #0
 8003c9a:	d023      	beq.n	8003ce4 <main+0x7c0>
	  {
		  // HOURS
		  HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8003c9c:	499d      	ldr	r1, [pc, #628]	; (8003f14 <main+0x9f0>)
 8003c9e:	4b9e      	ldr	r3, [pc, #632]	; (8003f18 <main+0x9f4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	0018      	movs	r0, r3
 8003ca4:	f003 ff80 	bl	8007ba8 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 8003ca8:	499c      	ldr	r1, [pc, #624]	; (8003f1c <main+0x9f8>)
 8003caa:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <main+0x9f4>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	0018      	movs	r0, r3
 8003cb0:	f003 ffd6 	bl	8007c60 <HAL_RTC_GetDate>

		  if (TIME.Hours == 23)
 8003cb4:	4b97      	ldr	r3, [pc, #604]	; (8003f14 <main+0x9f0>)
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b17      	cmp	r3, #23
 8003cba:	d103      	bne.n	8003cc4 <main+0x7a0>
		  {
			  TIME.Hours = 0;
 8003cbc:	4b95      	ldr	r3, [pc, #596]	; (8003f14 <main+0x9f0>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e005      	b.n	8003cd0 <main+0x7ac>
		  }
		  else
		  {
			  TIME.Hours++;
 8003cc4:	4b93      	ldr	r3, [pc, #588]	; (8003f14 <main+0x9f0>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	4b91      	ldr	r3, [pc, #580]	; (8003f14 <main+0x9f0>)
 8003cce:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_Delay(200);
 8003cd0:	20c8      	movs	r0, #200	; 0xc8
 8003cd2:	f001 fd47 	bl	8005764 <HAL_Delay>
		  HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8003cd6:	498f      	ldr	r1, [pc, #572]	; (8003f14 <main+0x9f0>)
 8003cd8:	4b8f      	ldr	r3, [pc, #572]	; (8003f18 <main+0x9f4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f003 febb 	bl	8007a58 <HAL_RTC_SetTime>
 8003ce2:	e05e      	b.n	8003da2 <main+0x87e>
	  }
	  else if (keydecoder_in(3))
 8003ce4:	2003      	movs	r0, #3
 8003ce6:	f7fe ff29 	bl	8002b3c <keydecoder_in>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d04c      	beq.n	8003d88 <main+0x864>
	  {
		  // MEMORY
		  if (!STANDBY && !MEMORY_BUTTON && MODE == FM)
 8003cee:	4b8c      	ldr	r3, [pc, #560]	; (8003f20 <main+0x9fc>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d010      	beq.n	8003d1e <main+0x7fa>
 8003cfc:	4b89      	ldr	r3, [pc, #548]	; (8003f24 <main+0xa00>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2201      	movs	r2, #1
 8003d02:	4053      	eors	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d009      	beq.n	8003d1e <main+0x7fa>
 8003d0a:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <main+0xa04>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <main+0x7fa>
		  {
			  saveFMStation();
 8003d12:	f7ff fa5d 	bl	80031d0 <saveFMStation>
			  MEMORY_BUTTON = true;
 8003d16:	4b83      	ldr	r3, [pc, #524]	; (8003f24 <main+0xa00>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
 8003d1c:	e041      	b.n	8003da2 <main+0x87e>
		  }
		  else if (!STANDBY && !MEMORY_BUTTON && MODE == AM)
 8003d1e:	4b80      	ldr	r3, [pc, #512]	; (8003f20 <main+0x9fc>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2201      	movs	r2, #1
 8003d24:	4053      	eors	r3, r2
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d010      	beq.n	8003d4e <main+0x82a>
 8003d2c:	4b7d      	ldr	r3, [pc, #500]	; (8003f24 <main+0xa00>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	2201      	movs	r2, #1
 8003d32:	4053      	eors	r3, r2
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <main+0x82a>
 8003d3a:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <main+0xa04>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d105      	bne.n	8003d4e <main+0x82a>
		  {
			  saveAMStation();
 8003d42:	f7ff fa63 	bl	800320c <saveAMStation>
			  MEMORY_BUTTON = true;
 8003d46:	4b77      	ldr	r3, [pc, #476]	; (8003f24 <main+0xa00>)
 8003d48:	2201      	movs	r2, #1
 8003d4a:	701a      	strb	r2, [r3, #0]
 8003d4c:	e029      	b.n	8003da2 <main+0x87e>
		  }
		  else if (STANDBY)
 8003d4e:	4b74      	ldr	r3, [pc, #464]	; (8003f20 <main+0x9fc>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d025      	beq.n	8003da2 <main+0x87e>
		  {
			  STANDBY_DISPLAY_ON = !STANDBY_DISPLAY_ON;
 8003d56:	4b75      	ldr	r3, [pc, #468]	; (8003f2c <main+0xa08>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	1e5a      	subs	r2, r3, #1
 8003d5c:	4193      	sbcs	r3, r2
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2201      	movs	r2, #1
 8003d62:	4053      	eors	r3, r2
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	1c1a      	adds	r2, r3, #0
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4b6f      	ldr	r3, [pc, #444]	; (8003f2c <main+0xa08>)
 8003d70:	701a      	strb	r2, [r3, #0]
			  display_on(STANDBY_DISPLAY_ON);
 8003d72:	4b6e      	ldr	r3, [pc, #440]	; (8003f2c <main+0xa08>)
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7fe f98e 	bl	8002098 <display_on>
			  HAL_Delay(500);
 8003d7c:	23fa      	movs	r3, #250	; 0xfa
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	0018      	movs	r0, r3
 8003d82:	f001 fcef 	bl	8005764 <HAL_Delay>
 8003d86:	e00c      	b.n	8003da2 <main+0x87e>
		  }
	  }
	  else if (!keydecoder_in(3))
 8003d88:	2003      	movs	r0, #3
 8003d8a:	f7fe fed7 	bl	8002b3c <keydecoder_in>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	001a      	movs	r2, r3
 8003d92:	2301      	movs	r3, #1
 8003d94:	4053      	eors	r3, r2
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d002      	beq.n	8003da2 <main+0x87e>
	  {
		  MEMORY_BUTTON = false;
 8003d9c:	4b61      	ldr	r3, [pc, #388]	; (8003f24 <main+0xa00>)
 8003d9e:	2200      	movs	r2, #0
 8003da0:	701a      	strb	r2, [r3, #0]
	  }

	  keydecoder_out(4);
 8003da2:	2004      	movs	r0, #4
 8003da4:	f7fe fe7c 	bl	8002aa0 <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2))
 8003da8:	4b5d      	ldr	r3, [pc, #372]	; (8003f20 <main+0x9fc>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2201      	movs	r2, #1
 8003dae:	4053      	eors	r3, r2
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d009      	beq.n	8003dca <main+0x8a6>
 8003db6:	2002      	movs	r0, #2
 8003db8:	f7fe fec0 	bl	8002b3c <keydecoder_in>
 8003dbc:	1e03      	subs	r3, r0, #0
 8003dbe:	d004      	beq.n	8003dca <main+0x8a6>
	  {
		  // S3
		  setStation(3, false);
 8003dc0:	2100      	movs	r1, #0
 8003dc2:	2003      	movs	r0, #3
 8003dc4:	f7ff fa38 	bl	8003238 <setStation>
 8003dc8:	e020      	b.n	8003e0c <main+0x8e8>
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003dca:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <main+0x9fc>)
 8003dcc:	781b      	ldrb	r3, [r3, #0]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	4053      	eors	r3, r2
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d009      	beq.n	8003dec <main+0x8c8>
 8003dd8:	2003      	movs	r0, #3
 8003dda:	f7fe feaf 	bl	8002b3c <keydecoder_in>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d004      	beq.n	8003dec <main+0x8c8>
	  {
		  // S2
		  setStation(2, false);
 8003de2:	2100      	movs	r1, #0
 8003de4:	2002      	movs	r0, #2
 8003de6:	f7ff fa27 	bl	8003238 <setStation>
 8003dea:	e00f      	b.n	8003e0c <main+0x8e8>
	  }
	  else if (!STANDBY && keydecoder_in(4))
 8003dec:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <main+0x9fc>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2201      	movs	r2, #1
 8003df2:	4053      	eors	r3, r2
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <main+0x8e8>
 8003dfa:	2004      	movs	r0, #4
 8003dfc:	f7fe fe9e 	bl	8002b3c <keydecoder_in>
 8003e00:	1e03      	subs	r3, r0, #0
 8003e02:	d003      	beq.n	8003e0c <main+0x8e8>
	  {
		  // S1
		  setStation(1, false);
 8003e04:	2100      	movs	r1, #0
 8003e06:	2001      	movs	r0, #1
 8003e08:	f7ff fa16 	bl	8003238 <setStation>
	  }

	  keydecoder_out(5);
 8003e0c:	2005      	movs	r0, #5
 8003e0e:	f7fe fe47 	bl	8002aa0 <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2))
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <main+0x9fc>)
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2201      	movs	r2, #1
 8003e18:	4053      	eors	r3, r2
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <main+0x910>
 8003e20:	2002      	movs	r0, #2
 8003e22:	f7fe fe8b 	bl	8002b3c <keydecoder_in>
 8003e26:	1e03      	subs	r3, r0, #0
 8003e28:	d004      	beq.n	8003e34 <main+0x910>
	  {
		  // S6
		  setStation(6, false);
 8003e2a:	2100      	movs	r1, #0
 8003e2c:	2006      	movs	r0, #6
 8003e2e:	f7ff fa03 	bl	8003238 <setStation>
 8003e32:	e020      	b.n	8003e76 <main+0x952>
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003e34:	4b3a      	ldr	r3, [pc, #232]	; (8003f20 <main+0x9fc>)
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	4053      	eors	r3, r2
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <main+0x932>
 8003e42:	2003      	movs	r0, #3
 8003e44:	f7fe fe7a 	bl	8002b3c <keydecoder_in>
 8003e48:	1e03      	subs	r3, r0, #0
 8003e4a:	d004      	beq.n	8003e56 <main+0x932>
	  {
		  // S5
		  setStation(5, false);
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	2005      	movs	r0, #5
 8003e50:	f7ff f9f2 	bl	8003238 <setStation>
 8003e54:	e00f      	b.n	8003e76 <main+0x952>
	  }
	  else if (!STANDBY && keydecoder_in(4))
 8003e56:	4b32      	ldr	r3, [pc, #200]	; (8003f20 <main+0x9fc>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	4053      	eors	r3, r2
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d008      	beq.n	8003e76 <main+0x952>
 8003e64:	2004      	movs	r0, #4
 8003e66:	f7fe fe69 	bl	8002b3c <keydecoder_in>
 8003e6a:	1e03      	subs	r3, r0, #0
 8003e6c:	d003      	beq.n	8003e76 <main+0x952>
	  {
		  // S4
		  setStation(4, false);
 8003e6e:	2100      	movs	r1, #0
 8003e70:	2004      	movs	r0, #4
 8003e72:	f7ff f9e1 	bl	8003238 <setStation>
	  }

	  // If station buttons are broken and do not lock properly set MAN as default.
	  if (misc_is_manual() || STATION == -1)
 8003e76:	f000 fd45 	bl	8004904 <misc_is_manual>
 8003e7a:	1e03      	subs	r3, r0, #0
 8003e7c:	d103      	bne.n	8003e86 <main+0x962>
 8003e7e:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <main+0xa0c>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3301      	adds	r3, #1
 8003e84:	d103      	bne.n	8003e8e <main+0x96a>
	  {
		  setStation(0, false);
 8003e86:	2100      	movs	r1, #0
 8003e88:	2000      	movs	r0, #0
 8003e8a:	f7ff f9d5 	bl	8003238 <setStation>
	  }

	  if (BLUETOOTH && MODE == AM && STATION == 0)
 8003e8e:	4b29      	ldr	r3, [pc, #164]	; (8003f34 <main+0xa10>)
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d017      	beq.n	8003ec6 <main+0x9a2>
 8003e96:	4b24      	ldr	r3, [pc, #144]	; (8003f28 <main+0xa04>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d113      	bne.n	8003ec6 <main+0x9a2>
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <main+0xa0c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10f      	bne.n	8003ec6 <main+0x9a2>
	  {
		  misc_mute(true);
 8003ea6:	2001      	movs	r0, #1
 8003ea8:	f000 fd3c 	bl	8004924 <misc_mute>

		  if (!BLUETOOTH_ON)
 8003eac:	4b22      	ldr	r3, [pc, #136]	; (8003f38 <main+0xa14>)
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	4053      	eors	r3, r2
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d026      	beq.n	8003f08 <main+0x9e4>
		  {
			  misc_bt_on();
 8003eba:	f000 fd8b 	bl	80049d4 <misc_bt_on>
			  BLUETOOTH_ON = true;
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <main+0xa14>)
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	701a      	strb	r2, [r3, #0]
		  if (!BLUETOOTH_ON)
 8003ec4:	e020      	b.n	8003f08 <main+0x9e4>
		  }
	  }
	  else if (BLUETOOTH && (MODE != AM || MODE == AM && STATION != 0))
 8003ec6:	4b1b      	ldr	r3, [pc, #108]	; (8003f34 <main+0xa10>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <main+0x9ae>
 8003ece:	f7ff fb77 	bl	80035c0 <main+0x9c>
 8003ed2:	4b15      	ldr	r3, [pc, #84]	; (8003f28 <main+0xa04>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10b      	bne.n	8003ef2 <main+0x9ce>
 8003eda:	4b13      	ldr	r3, [pc, #76]	; (8003f28 <main+0xa04>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <main+0x9c2>
 8003ee2:	f7ff fb6d 	bl	80035c0 <main+0x9c>
 8003ee6:	4b12      	ldr	r3, [pc, #72]	; (8003f30 <main+0xa0c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <main+0x9ce>
 8003eee:	f7ff fb67 	bl	80035c0 <main+0x9c>
	  {
		  if (BLUETOOTH_ON)
 8003ef2:	4b11      	ldr	r3, [pc, #68]	; (8003f38 <main+0xa14>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <main+0x9da>
 8003efa:	f7ff fb61 	bl	80035c0 <main+0x9c>
		  {
			  misc_bt_off();
 8003efe:	f000 fd7b 	bl	80049f8 <misc_bt_off>
			  BLUETOOTH_ON = false;
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <main+0xa14>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	701a      	strb	r2, [r3, #0]
  {
 8003f08:	f7ff fb5a 	bl	80035c0 <main+0x9c>
 8003f0c:	20000159 	.word	0x20000159
 8003f10:	2000015c 	.word	0x2000015c
 8003f14:	2000013c 	.word	0x2000013c
 8003f18:	20000280 	.word	0x20000280
 8003f1c:	20000150 	.word	0x20000150
 8003f20:	20000014 	.word	0x20000014
 8003f24:	2000015d 	.word	0x2000015d
 8003f28:	2000000c 	.word	0x2000000c
 8003f2c:	20000015 	.word	0x20000015
 8003f30:	20000010 	.word	0x20000010
 8003f34:	2000015a 	.word	0x2000015a
 8003f38:	2000015b 	.word	0x2000015b

08003f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f3c:	b590      	push	{r4, r7, lr}
 8003f3e:	b099      	sub	sp, #100	; 0x64
 8003f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f42:	242c      	movs	r4, #44	; 0x2c
 8003f44:	193b      	adds	r3, r7, r4
 8003f46:	0018      	movs	r0, r3
 8003f48:	2334      	movs	r3, #52	; 0x34
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	f005 fa95 	bl	800947c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f52:	231c      	movs	r3, #28
 8003f54:	18fb      	adds	r3, r7, r3
 8003f56:	0018      	movs	r0, r3
 8003f58:	2310      	movs	r3, #16
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	f005 fa8d 	bl	800947c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f62:	003b      	movs	r3, r7
 8003f64:	0018      	movs	r0, r3
 8003f66:	231c      	movs	r3, #28
 8003f68:	001a      	movs	r2, r3
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	f005 fa86 	bl	800947c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f70:	2380      	movs	r3, #128	; 0x80
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	0018      	movs	r0, r3
 8003f76:	f002 fe8f 	bl	8006c98 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f7a:	f002 fe7f 	bl	8006c7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003f7e:	4b2e      	ldr	r3, [pc, #184]	; (8004038 <SystemClock_Config+0xfc>)
 8003f80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003f82:	4b2d      	ldr	r3, [pc, #180]	; (8004038 <SystemClock_Config+0xfc>)
 8003f84:	2118      	movs	r1, #24
 8003f86:	438a      	bics	r2, r1
 8003f88:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2205      	movs	r2, #5
 8003f8e:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	0252      	lsls	r2, r2, #9
 8003f96:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f98:	0021      	movs	r1, r4
 8003f9a:	187b      	adds	r3, r7, r1
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fa0:	187b      	adds	r3, r7, r1
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2203      	movs	r2, #3
 8003faa:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003fac:	187b      	adds	r3, r7, r1
 8003fae:	2230      	movs	r2, #48	; 0x30
 8003fb0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 63;
 8003fb2:	187b      	adds	r3, r7, r1
 8003fb4:	223f      	movs	r2, #63	; 0x3f
 8003fb6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003fb8:	187b      	adds	r3, r7, r1
 8003fba:	2280      	movs	r2, #128	; 0x80
 8003fbc:	0292      	lsls	r2, r2, #10
 8003fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	22c0      	movs	r2, #192	; 0xc0
 8003fc4:	05d2      	lsls	r2, r2, #23
 8003fc6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc8:	187b      	adds	r3, r7, r1
 8003fca:	0018      	movs	r0, r3
 8003fcc:	f002 fea4 	bl	8006d18 <HAL_RCC_OscConfig>
 8003fd0:	1e03      	subs	r3, r0, #0
 8003fd2:	d001      	beq.n	8003fd8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003fd4:	f000 fc46 	bl	8004864 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd8:	211c      	movs	r1, #28
 8003fda:	187b      	adds	r3, r7, r1
 8003fdc:	2207      	movs	r2, #7
 8003fde:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fe0:	187b      	adds	r3, r7, r1
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fe6:	187b      	adds	r3, r7, r1
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003fec:	187b      	adds	r3, r7, r1
 8003fee:	2200      	movs	r2, #0
 8003ff0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003ff2:	187b      	adds	r3, r7, r1
 8003ff4:	2102      	movs	r1, #2
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f003 f9a4 	bl	8007344 <HAL_RCC_ClockConfig>
 8003ffc:	1e03      	subs	r3, r0, #0
 8003ffe:	d001      	beq.n	8004004 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004000:	f000 fc30 	bl	8004864 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8004004:	003b      	movs	r3, r7
 8004006:	2290      	movs	r2, #144	; 0x90
 8004008:	0292      	lsls	r2, r2, #10
 800400a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800400c:	003b      	movs	r3, r7
 800400e:	2200      	movs	r2, #0
 8004010:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004012:	003b      	movs	r3, r7
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	0052      	lsls	r2, r2, #1
 8004018:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800401a:	003b      	movs	r3, r7
 800401c:	0018      	movs	r0, r3
 800401e:	f003 fb51 	bl	80076c4 <HAL_RCCEx_PeriphCLKConfig>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8004026:	f000 fc1d 	bl	8004864 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800402a:	f003 fb13 	bl	8007654 <HAL_RCC_EnableCSS>
}
 800402e:	46c0      	nop			; (mov r8, r8)
 8004030:	46bd      	mov	sp, r7
 8004032:	b019      	add	sp, #100	; 0x64
 8004034:	bd90      	pop	{r4, r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	40021000 	.word	0x40021000

0800403c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	0018      	movs	r0, r3
 8004046:	230c      	movs	r3, #12
 8004048:	001a      	movs	r2, r3
 800404a:	2100      	movs	r1, #0
 800404c:	f005 fa16 	bl	800947c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004050:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004052:	4a2e      	ldr	r2, [pc, #184]	; (800410c <MX_ADC1_Init+0xd0>)
 8004054:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004056:	4b2c      	ldr	r3, [pc, #176]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	0612      	lsls	r2, r2, #24
 800405c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004064:	4b28      	ldr	r3, [pc, #160]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004066:	2200      	movs	r2, #0
 8004068:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800406a:	4b27      	ldr	r3, [pc, #156]	; (8004108 <MX_ADC1_Init+0xcc>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004070:	4b25      	ldr	r3, [pc, #148]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004072:	2204      	movs	r2, #4
 8004074:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004078:	2200      	movs	r2, #0
 800407a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800407c:	4b22      	ldr	r3, [pc, #136]	; (8004108 <MX_ADC1_Init+0xcc>)
 800407e:	2200      	movs	r2, #0
 8004080:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004082:	4b21      	ldr	r3, [pc, #132]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004084:	2200      	movs	r2, #0
 8004086:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8004088:	4b1f      	ldr	r3, [pc, #124]	; (8004108 <MX_ADC1_Init+0xcc>)
 800408a:	2201      	movs	r2, #1
 800408c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800408e:	4b1e      	ldr	r3, [pc, #120]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004090:	2220      	movs	r2, #32
 8004092:	2100      	movs	r1, #0
 8004094:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004096:	4b1c      	ldr	r3, [pc, #112]	; (8004108 <MX_ADC1_Init+0xcc>)
 8004098:	2200      	movs	r2, #0
 800409a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800409c:	4b1a      	ldr	r3, [pc, #104]	; (8004108 <MX_ADC1_Init+0xcc>)
 800409e:	2200      	movs	r2, #0
 80040a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80040a2:	4b19      	ldr	r3, [pc, #100]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040a4:	222c      	movs	r2, #44	; 0x2c
 80040a6:	2100      	movs	r1, #0
 80040a8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80040b0:	4b15      	ldr	r3, [pc, #84]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040b2:	2200      	movs	r2, #0
 80040b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040be:	223c      	movs	r2, #60	; 0x3c
 80040c0:	2100      	movs	r1, #0
 80040c2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040cc:	0018      	movs	r0, r3
 80040ce:	f001 fca1 	bl	8005a14 <HAL_ADC_Init>
 80040d2:	1e03      	subs	r3, r0, #0
 80040d4:	d001      	beq.n	80040da <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80040d6:	f000 fbc5 	bl	8004864 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80040da:	1d3b      	adds	r3, r7, #4
 80040dc:	2201      	movs	r2, #1
 80040de:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80040e0:	1d3b      	adds	r3, r7, #4
 80040e2:	2200      	movs	r2, #0
 80040e4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80040e6:	1d3b      	adds	r3, r7, #4
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80040ec:	1d3a      	adds	r2, r7, #4
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <MX_ADC1_Init+0xcc>)
 80040f0:	0011      	movs	r1, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f001 ff4e 	bl	8005f94 <HAL_ADC_ConfigChannel>
 80040f8:	1e03      	subs	r3, r0, #0
 80040fa:	d001      	beq.n	8004100 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80040fc:	f000 fbb2 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b004      	add	sp, #16
 8004106:	bd80      	pop	{r7, pc}
 8004108:	2000021c 	.word	0x2000021c
 800410c:	40012400 	.word	0x40012400

08004110 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004114:	4b13      	ldr	r3, [pc, #76]	; (8004164 <MX_RTC_Init+0x54>)
 8004116:	4a14      	ldr	r2, [pc, #80]	; (8004168 <MX_RTC_Init+0x58>)
 8004118:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800411a:	4b12      	ldr	r3, [pc, #72]	; (8004164 <MX_RTC_Init+0x54>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <MX_RTC_Init+0x54>)
 8004122:	227f      	movs	r2, #127	; 0x7f
 8004124:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <MX_RTC_Init+0x54>)
 8004128:	22ff      	movs	r2, #255	; 0xff
 800412a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800412c:	4b0d      	ldr	r3, [pc, #52]	; (8004164 <MX_RTC_Init+0x54>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <MX_RTC_Init+0x54>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004138:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <MX_RTC_Init+0x54>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <MX_RTC_Init+0x54>)
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	05d2      	lsls	r2, r2, #23
 8004144:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8004146:	4b07      	ldr	r3, [pc, #28]	; (8004164 <MX_RTC_Init+0x54>)
 8004148:	2200      	movs	r2, #0
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800414c:	4b05      	ldr	r3, [pc, #20]	; (8004164 <MX_RTC_Init+0x54>)
 800414e:	0018      	movs	r0, r3
 8004150:	f003 fbec 	bl	800792c <HAL_RTC_Init>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d001      	beq.n	800415c <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8004158:	f000 fb84 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	46c0      	nop			; (mov r8, r8)
 8004164:	20000280 	.word	0x20000280
 8004168:	40002800 	.word	0x40002800

0800416c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004172:	2310      	movs	r3, #16
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	0018      	movs	r0, r3
 8004178:	2310      	movs	r3, #16
 800417a:	001a      	movs	r2, r3
 800417c:	2100      	movs	r1, #0
 800417e:	f005 f97d 	bl	800947c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004182:	1d3b      	adds	r3, r7, #4
 8004184:	0018      	movs	r0, r3
 8004186:	230c      	movs	r3, #12
 8004188:	001a      	movs	r2, r3
 800418a:	2100      	movs	r1, #0
 800418c:	f005 f976 	bl	800947c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <MX_TIM1_Init+0xbc>)
 8004192:	4a26      	ldr	r2, [pc, #152]	; (800422c <MX_TIM1_Init+0xc0>)
 8004194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <MX_TIM1_Init+0xbc>)
 8004198:	2200      	movs	r2, #0
 800419a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800419c:	4b22      	ldr	r3, [pc, #136]	; (8004228 <MX_TIM1_Init+0xbc>)
 800419e:	2200      	movs	r2, #0
 80041a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80041a2:	4b21      	ldr	r3, [pc, #132]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041a4:	4a22      	ldr	r2, [pc, #136]	; (8004230 <MX_TIM1_Init+0xc4>)
 80041a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041a8:	4b1f      	ldr	r3, [pc, #124]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041aa:	2200      	movs	r2, #0
 80041ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80041ae:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041b0:	2200      	movs	r2, #0
 80041b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80041b4:	4b1c      	ldr	r3, [pc, #112]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041b6:	2280      	movs	r2, #128	; 0x80
 80041b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041bc:	0018      	movs	r0, r3
 80041be:	f003 fe90 	bl	8007ee2 <HAL_TIM_Base_Init>
 80041c2:	1e03      	subs	r3, r0, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80041c6:	f000 fb4d 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80041ca:	2110      	movs	r1, #16
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2280      	movs	r2, #128	; 0x80
 80041d0:	0192      	lsls	r2, r2, #6
 80041d2:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2200      	movs	r2, #0
 80041d8:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	2200      	movs	r2, #0
 80041e4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80041e6:	187a      	adds	r2, r7, r1
 80041e8:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <MX_TIM1_Init+0xbc>)
 80041ea:	0011      	movs	r1, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	f004 fb0f 	bl	8008810 <HAL_TIM_ConfigClockSource>
 80041f2:	1e03      	subs	r3, r0, #0
 80041f4:	d001      	beq.n	80041fa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 80041f6:	f000 fb35 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041fa:	1d3b      	adds	r3, r7, #4
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8004200:	1d3b      	adds	r3, r7, #4
 8004202:	2200      	movs	r2, #0
 8004204:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004206:	1d3b      	adds	r3, r7, #4
 8004208:	2200      	movs	r2, #0
 800420a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800420c:	1d3a      	adds	r2, r7, #4
 800420e:	4b06      	ldr	r3, [pc, #24]	; (8004228 <MX_TIM1_Init+0xbc>)
 8004210:	0011      	movs	r1, r2
 8004212:	0018      	movs	r0, r3
 8004214:	f004 ffe2 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 8004218:	1e03      	subs	r3, r0, #0
 800421a:	d001      	beq.n	8004220 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800421c:	f000 fb22 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b008      	add	sp, #32
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200002f8 	.word	0x200002f8
 800422c:	40012c00 	.word	0x40012c00
 8004230:	0000ffff 	.word	0x0000ffff

08004234 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800423a:	2310      	movs	r3, #16
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	0018      	movs	r0, r3
 8004240:	2310      	movs	r3, #16
 8004242:	001a      	movs	r2, r3
 8004244:	2100      	movs	r1, #0
 8004246:	f005 f919 	bl	800947c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800424a:	1d3b      	adds	r3, r7, #4
 800424c:	0018      	movs	r0, r3
 800424e:	230c      	movs	r3, #12
 8004250:	001a      	movs	r2, r3
 8004252:	2100      	movs	r1, #0
 8004254:	f005 f912 	bl	800947c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <MX_TIM3_Init+0xb0>)
 800425a:	4a23      	ldr	r2, [pc, #140]	; (80042e8 <MX_TIM3_Init+0xb4>)
 800425c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800425e:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <MX_TIM3_Init+0xb0>)
 8004260:	2200      	movs	r2, #0
 8004262:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004264:	4b1f      	ldr	r3, [pc, #124]	; (80042e4 <MX_TIM3_Init+0xb0>)
 8004266:	2200      	movs	r2, #0
 8004268:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <MX_TIM3_Init+0xb0>)
 800426c:	4a1f      	ldr	r2, [pc, #124]	; (80042ec <MX_TIM3_Init+0xb8>)
 800426e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004270:	4b1c      	ldr	r3, [pc, #112]	; (80042e4 <MX_TIM3_Init+0xb0>)
 8004272:	2200      	movs	r2, #0
 8004274:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <MX_TIM3_Init+0xb0>)
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800427c:	4b19      	ldr	r3, [pc, #100]	; (80042e4 <MX_TIM3_Init+0xb0>)
 800427e:	0018      	movs	r0, r3
 8004280:	f003 fe2f 	bl	8007ee2 <HAL_TIM_Base_Init>
 8004284:	1e03      	subs	r3, r0, #0
 8004286:	d001      	beq.n	800428c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8004288:	f000 faec 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800428c:	2110      	movs	r1, #16
 800428e:	187b      	adds	r3, r7, r1
 8004290:	2280      	movs	r2, #128	; 0x80
 8004292:	0192      	lsls	r2, r2, #6
 8004294:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8004296:	187b      	adds	r3, r7, r1
 8004298:	2200      	movs	r2, #0
 800429a:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800429c:	187b      	adds	r3, r7, r1
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 80042a2:	187b      	adds	r3, r7, r1
 80042a4:	2200      	movs	r2, #0
 80042a6:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80042a8:	187a      	adds	r2, r7, r1
 80042aa:	4b0e      	ldr	r3, [pc, #56]	; (80042e4 <MX_TIM3_Init+0xb0>)
 80042ac:	0011      	movs	r1, r2
 80042ae:	0018      	movs	r0, r3
 80042b0:	f004 faae 	bl	8008810 <HAL_TIM_ConfigClockSource>
 80042b4:	1e03      	subs	r3, r0, #0
 80042b6:	d001      	beq.n	80042bc <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80042b8:	f000 fad4 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80042bc:	1d3b      	adds	r3, r7, #4
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80042c2:	1d3b      	adds	r3, r7, #4
 80042c4:	2200      	movs	r2, #0
 80042c6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80042c8:	1d3a      	adds	r2, r7, #4
 80042ca:	4b06      	ldr	r3, [pc, #24]	; (80042e4 <MX_TIM3_Init+0xb0>)
 80042cc:	0011      	movs	r1, r2
 80042ce:	0018      	movs	r0, r3
 80042d0:	f004 ff84 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d001      	beq.n	80042dc <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 80042d8:	f000 fac4 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	b008      	add	sp, #32
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	200001d0 	.word	0x200001d0
 80042e8:	40000400 	.word	0x40000400
 80042ec:	0000ffff 	.word	0x0000ffff

080042f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042f6:	1d3b      	adds	r3, r7, #4
 80042f8:	0018      	movs	r0, r3
 80042fa:	230c      	movs	r3, #12
 80042fc:	001a      	movs	r2, r3
 80042fe:	2100      	movs	r1, #0
 8004300:	f005 f8bc 	bl	800947c <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004304:	4b16      	ldr	r3, [pc, #88]	; (8004360 <MX_TIM6_Init+0x70>)
 8004306:	4a17      	ldr	r2, [pc, #92]	; (8004364 <MX_TIM6_Init+0x74>)
 8004308:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 800430a:	4b15      	ldr	r3, [pc, #84]	; (8004360 <MX_TIM6_Init+0x70>)
 800430c:	22fa      	movs	r2, #250	; 0xfa
 800430e:	0092      	lsls	r2, r2, #2
 8004310:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004312:	4b13      	ldr	r3, [pc, #76]	; (8004360 <MX_TIM6_Init+0x70>)
 8004314:	2200      	movs	r2, #0
 8004316:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 900;
 8004318:	4b11      	ldr	r3, [pc, #68]	; (8004360 <MX_TIM6_Init+0x70>)
 800431a:	22e1      	movs	r2, #225	; 0xe1
 800431c:	0092      	lsls	r2, r2, #2
 800431e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004320:	4b0f      	ldr	r3, [pc, #60]	; (8004360 <MX_TIM6_Init+0x70>)
 8004322:	2200      	movs	r2, #0
 8004324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8004326:	4b0e      	ldr	r3, [pc, #56]	; (8004360 <MX_TIM6_Init+0x70>)
 8004328:	0018      	movs	r0, r3
 800432a:	f003 fdda 	bl	8007ee2 <HAL_TIM_Base_Init>
 800432e:	1e03      	subs	r3, r0, #0
 8004330:	d001      	beq.n	8004336 <MX_TIM6_Init+0x46>
  {
    Error_Handler();
 8004332:	f000 fa97 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004336:	1d3b      	adds	r3, r7, #4
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800433c:	1d3b      	adds	r3, r7, #4
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004342:	1d3a      	adds	r2, r7, #4
 8004344:	4b06      	ldr	r3, [pc, #24]	; (8004360 <MX_TIM6_Init+0x70>)
 8004346:	0011      	movs	r1, r2
 8004348:	0018      	movs	r0, r3
 800434a:	f004 ff47 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 800434e:	1e03      	subs	r3, r0, #0
 8004350:	d001      	beq.n	8004356 <MX_TIM6_Init+0x66>
  {
    Error_Handler();
 8004352:	f000 fa87 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8004356:	46c0      	nop			; (mov r8, r8)
 8004358:	46bd      	mov	sp, r7
 800435a:	b004      	add	sp, #16
 800435c:	bd80      	pop	{r7, pc}
 800435e:	46c0      	nop			; (mov r8, r8)
 8004360:	200002ac 	.word	0x200002ac
 8004364:	40001000 	.word	0x40001000

08004368 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800436e:	1d3b      	adds	r3, r7, #4
 8004370:	0018      	movs	r0, r3
 8004372:	230c      	movs	r3, #12
 8004374:	001a      	movs	r2, r3
 8004376:	2100      	movs	r1, #0
 8004378:	f005 f880 	bl	800947c <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800437c:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <MX_TIM7_Init+0x6c>)
 800437e:	4a16      	ldr	r2, [pc, #88]	; (80043d8 <MX_TIM7_Init+0x70>)
 8004380:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 500;
 8004382:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <MX_TIM7_Init+0x6c>)
 8004384:	22fa      	movs	r2, #250	; 0xfa
 8004386:	0052      	lsls	r2, r2, #1
 8004388:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <MX_TIM7_Init+0x6c>)
 800438c:	2200      	movs	r2, #0
 800438e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 250;
 8004390:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <MX_TIM7_Init+0x6c>)
 8004392:	22fa      	movs	r2, #250	; 0xfa
 8004394:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004396:	4b0f      	ldr	r3, [pc, #60]	; (80043d4 <MX_TIM7_Init+0x6c>)
 8004398:	2200      	movs	r2, #0
 800439a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800439c:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <MX_TIM7_Init+0x6c>)
 800439e:	0018      	movs	r0, r3
 80043a0:	f003 fd9f 	bl	8007ee2 <HAL_TIM_Base_Init>
 80043a4:	1e03      	subs	r3, r0, #0
 80043a6:	d001      	beq.n	80043ac <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80043a8:	f000 fa5c 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043ac:	1d3b      	adds	r3, r7, #4
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043b2:	1d3b      	adds	r3, r7, #4
 80043b4:	2200      	movs	r2, #0
 80043b6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80043b8:	1d3a      	adds	r2, r7, #4
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_TIM7_Init+0x6c>)
 80043bc:	0011      	movs	r1, r2
 80043be:	0018      	movs	r0, r3
 80043c0:	f004 ff0c 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 80043c4:	1e03      	subs	r3, r0, #0
 80043c6:	d001      	beq.n	80043cc <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80043c8:	f000 fa4c 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80043cc:	46c0      	nop			; (mov r8, r8)
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b004      	add	sp, #16
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	200003dc 	.word	0x200003dc
 80043d8:	40001400 	.word	0x40001400

080043dc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80043e0:	4b0f      	ldr	r3, [pc, #60]	; (8004420 <MX_TIM14_Init+0x44>)
 80043e2:	4a10      	ldr	r2, [pc, #64]	; (8004424 <MX_TIM14_Init+0x48>)
 80043e4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500;
 80043e6:	4b0e      	ldr	r3, [pc, #56]	; (8004420 <MX_TIM14_Init+0x44>)
 80043e8:	22fa      	movs	r2, #250	; 0xfa
 80043ea:	0052      	lsls	r2, r2, #1
 80043ec:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80043ee:	4b0c      	ldr	r3, [pc, #48]	; (8004420 <MX_TIM14_Init+0x44>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80043f4:	4b0a      	ldr	r3, [pc, #40]	; (8004420 <MX_TIM14_Init+0x44>)
 80043f6:	22fa      	movs	r2, #250	; 0xfa
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <MX_TIM14_Init+0x44>)
 80043fe:	2200      	movs	r2, #0
 8004400:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <MX_TIM14_Init+0x44>)
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <MX_TIM14_Init+0x44>)
 800440a:	0018      	movs	r0, r3
 800440c:	f003 fd69 	bl	8007ee2 <HAL_TIM_Base_Init>
 8004410:	1e03      	subs	r3, r0, #0
 8004412:	d001      	beq.n	8004418 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8004414:	f000 fa26 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	20000344 	.word	0x20000344
 8004424:	40002000 	.word	0x40002000

08004428 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b09c      	sub	sp, #112	; 0x70
 800442c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800442e:	2360      	movs	r3, #96	; 0x60
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	0018      	movs	r0, r3
 8004434:	2310      	movs	r3, #16
 8004436:	001a      	movs	r2, r3
 8004438:	2100      	movs	r1, #0
 800443a:	f005 f81f 	bl	800947c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800443e:	2354      	movs	r3, #84	; 0x54
 8004440:	18fb      	adds	r3, r7, r3
 8004442:	0018      	movs	r0, r3
 8004444:	230c      	movs	r3, #12
 8004446:	001a      	movs	r2, r3
 8004448:	2100      	movs	r1, #0
 800444a:	f005 f817 	bl	800947c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800444e:	2338      	movs	r3, #56	; 0x38
 8004450:	18fb      	adds	r3, r7, r3
 8004452:	0018      	movs	r0, r3
 8004454:	231c      	movs	r3, #28
 8004456:	001a      	movs	r2, r3
 8004458:	2100      	movs	r1, #0
 800445a:	f005 f80f 	bl	800947c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	0018      	movs	r0, r3
 8004462:	2334      	movs	r3, #52	; 0x34
 8004464:	001a      	movs	r2, r3
 8004466:	2100      	movs	r1, #0
 8004468:	f005 f808 	bl	800947c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800446c:	4b47      	ldr	r3, [pc, #284]	; (800458c <MX_TIM15_Init+0x164>)
 800446e:	4a48      	ldr	r2, [pc, #288]	; (8004590 <MX_TIM15_Init+0x168>)
 8004470:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004472:	4b46      	ldr	r3, [pc, #280]	; (800458c <MX_TIM15_Init+0x164>)
 8004474:	2200      	movs	r2, #0
 8004476:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004478:	4b44      	ldr	r3, [pc, #272]	; (800458c <MX_TIM15_Init+0x164>)
 800447a:	2200      	movs	r2, #0
 800447c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 17500;
 800447e:	4b43      	ldr	r3, [pc, #268]	; (800458c <MX_TIM15_Init+0x164>)
 8004480:	4a44      	ldr	r2, [pc, #272]	; (8004594 <MX_TIM15_Init+0x16c>)
 8004482:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004484:	4b41      	ldr	r3, [pc, #260]	; (800458c <MX_TIM15_Init+0x164>)
 8004486:	2200      	movs	r2, #0
 8004488:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800448a:	4b40      	ldr	r3, [pc, #256]	; (800458c <MX_TIM15_Init+0x164>)
 800448c:	2200      	movs	r2, #0
 800448e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004490:	4b3e      	ldr	r3, [pc, #248]	; (800458c <MX_TIM15_Init+0x164>)
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8004496:	4b3d      	ldr	r3, [pc, #244]	; (800458c <MX_TIM15_Init+0x164>)
 8004498:	0018      	movs	r0, r3
 800449a:	f003 fd22 	bl	8007ee2 <HAL_TIM_Base_Init>
 800449e:	1e03      	subs	r3, r0, #0
 80044a0:	d001      	beq.n	80044a6 <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 80044a2:	f000 f9df 	bl	8004864 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044a6:	2160      	movs	r1, #96	; 0x60
 80044a8:	187b      	adds	r3, r7, r1
 80044aa:	2280      	movs	r2, #128	; 0x80
 80044ac:	0152      	lsls	r2, r2, #5
 80044ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80044b0:	187a      	adds	r2, r7, r1
 80044b2:	4b36      	ldr	r3, [pc, #216]	; (800458c <MX_TIM15_Init+0x164>)
 80044b4:	0011      	movs	r1, r2
 80044b6:	0018      	movs	r0, r3
 80044b8:	f004 f9aa 	bl	8008810 <HAL_TIM_ConfigClockSource>
 80044bc:	1e03      	subs	r3, r0, #0
 80044be:	d001      	beq.n	80044c4 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80044c0:	f000 f9d0 	bl	8004864 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80044c4:	4b31      	ldr	r3, [pc, #196]	; (800458c <MX_TIM15_Init+0x164>)
 80044c6:	0018      	movs	r0, r3
 80044c8:	f003 fe36 	bl	8008138 <HAL_TIM_PWM_Init>
 80044cc:	1e03      	subs	r3, r0, #0
 80044ce:	d001      	beq.n	80044d4 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80044d0:	f000 f9c8 	bl	8004864 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80044d4:	2154      	movs	r1, #84	; 0x54
 80044d6:	187b      	adds	r3, r7, r1
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	2200      	movs	r2, #0
 80044e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80044e2:	187a      	adds	r2, r7, r1
 80044e4:	4b29      	ldr	r3, [pc, #164]	; (800458c <MX_TIM15_Init+0x164>)
 80044e6:	0011      	movs	r1, r2
 80044e8:	0018      	movs	r0, r3
 80044ea:	f004 fe77 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 80044ee:	1e03      	subs	r3, r0, #0
 80044f0:	d001      	beq.n	80044f6 <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80044f2:	f000 f9b7 	bl	8004864 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80044f6:	2138      	movs	r1, #56	; 0x38
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	2260      	movs	r2, #96	; 0x60
 80044fc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 80044fe:	187b      	adds	r3, r7, r1
 8004500:	22c8      	movs	r2, #200	; 0xc8
 8004502:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004504:	187b      	adds	r3, r7, r1
 8004506:	2200      	movs	r2, #0
 8004508:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800450a:	187b      	adds	r3, r7, r1
 800450c:	2200      	movs	r2, #0
 800450e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004510:	187b      	adds	r3, r7, r1
 8004512:	2200      	movs	r2, #0
 8004514:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004516:	187b      	adds	r3, r7, r1
 8004518:	2200      	movs	r2, #0
 800451a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800451c:	187b      	adds	r3, r7, r1
 800451e:	2200      	movs	r2, #0
 8004520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004522:	1879      	adds	r1, r7, r1
 8004524:	4b19      	ldr	r3, [pc, #100]	; (800458c <MX_TIM15_Init+0x164>)
 8004526:	2204      	movs	r2, #4
 8004528:	0018      	movs	r0, r3
 800452a:	f004 f87b 	bl	8008624 <HAL_TIM_PWM_ConfigChannel>
 800452e:	1e03      	subs	r3, r0, #0
 8004530:	d001      	beq.n	8004536 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004532:	f000 f997 	bl	8004864 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004536:	1d3b      	adds	r3, r7, #4
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800453c:	1d3b      	adds	r3, r7, #4
 800453e:	2200      	movs	r2, #0
 8004540:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004542:	1d3b      	adds	r3, r7, #4
 8004544:	2200      	movs	r2, #0
 8004546:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004548:	1d3b      	adds	r3, r7, #4
 800454a:	2200      	movs	r2, #0
 800454c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800454e:	1d3b      	adds	r3, r7, #4
 8004550:	2200      	movs	r2, #0
 8004552:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004554:	1d3b      	adds	r3, r7, #4
 8004556:	2280      	movs	r2, #128	; 0x80
 8004558:	0192      	lsls	r2, r2, #6
 800455a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800455c:	1d3b      	adds	r3, r7, #4
 800455e:	2200      	movs	r2, #0
 8004560:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004562:	1d3b      	adds	r3, r7, #4
 8004564:	2200      	movs	r2, #0
 8004566:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8004568:	1d3a      	adds	r2, r7, #4
 800456a:	4b08      	ldr	r3, [pc, #32]	; (800458c <MX_TIM15_Init+0x164>)
 800456c:	0011      	movs	r1, r2
 800456e:	0018      	movs	r0, r3
 8004570:	f004 fe9c 	bl	80092ac <HAL_TIMEx_ConfigBreakDeadTime>
 8004574:	1e03      	subs	r3, r0, #0
 8004576:	d001      	beq.n	800457c <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 8004578:	f000 f974 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800457c:	4b03      	ldr	r3, [pc, #12]	; (800458c <MX_TIM15_Init+0x164>)
 800457e:	0018      	movs	r0, r3
 8004580:	f000 ff7c 	bl	800547c <HAL_TIM_MspPostInit>

}
 8004584:	46c0      	nop			; (mov r8, r8)
 8004586:	46bd      	mov	sp, r7
 8004588:	b01c      	add	sp, #112	; 0x70
 800458a:	bd80      	pop	{r7, pc}
 800458c:	20000184 	.word	0x20000184
 8004590:	40014000 	.word	0x40014000
 8004594:	0000445c 	.word	0x0000445c

08004598 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800459c:	4b10      	ldr	r3, [pc, #64]	; (80045e0 <MX_TIM16_Init+0x48>)
 800459e:	4a11      	ldr	r2, [pc, #68]	; (80045e4 <MX_TIM16_Init+0x4c>)
 80045a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045a4:	22fa      	movs	r2, #250	; 0xfa
 80045a6:	0092      	lsls	r2, r2, #2
 80045a8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045aa:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 900;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045b2:	22e1      	movs	r2, #225	; 0xe1
 80045b4:	0092      	lsls	r2, r2, #2
 80045b6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045c4:	4b06      	ldr	r3, [pc, #24]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <MX_TIM16_Init+0x48>)
 80045cc:	0018      	movs	r0, r3
 80045ce:	f003 fc88 	bl	8007ee2 <HAL_TIM_Base_Init>
 80045d2:	1e03      	subs	r3, r0, #0
 80045d4:	d001      	beq.n	80045da <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80045d6:	f000 f945 	bl	8004864 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80045da:	46c0      	nop			; (mov r8, r8)
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	20000390 	.word	0x20000390
 80045e4:	40014400 	.word	0x40014400

080045e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80045e8:	b590      	push	{r4, r7, lr}
 80045ea:	b08b      	sub	sp, #44	; 0x2c
 80045ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ee:	2414      	movs	r4, #20
 80045f0:	193b      	adds	r3, r7, r4
 80045f2:	0018      	movs	r0, r3
 80045f4:	2314      	movs	r3, #20
 80045f6:	001a      	movs	r2, r3
 80045f8:	2100      	movs	r1, #0
 80045fa:	f004 ff3f 	bl	800947c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045fe:	4b93      	ldr	r3, [pc, #588]	; (800484c <MX_GPIO_Init+0x264>)
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	4b92      	ldr	r3, [pc, #584]	; (800484c <MX_GPIO_Init+0x264>)
 8004604:	2104      	movs	r1, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	635a      	str	r2, [r3, #52]	; 0x34
 800460a:	4b90      	ldr	r3, [pc, #576]	; (800484c <MX_GPIO_Init+0x264>)
 800460c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460e:	2204      	movs	r2, #4
 8004610:	4013      	ands	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
 8004614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004616:	4b8d      	ldr	r3, [pc, #564]	; (800484c <MX_GPIO_Init+0x264>)
 8004618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800461a:	4b8c      	ldr	r3, [pc, #560]	; (800484c <MX_GPIO_Init+0x264>)
 800461c:	2120      	movs	r1, #32
 800461e:	430a      	orrs	r2, r1
 8004620:	635a      	str	r2, [r3, #52]	; 0x34
 8004622:	4b8a      	ldr	r3, [pc, #552]	; (800484c <MX_GPIO_Init+0x264>)
 8004624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004626:	2220      	movs	r2, #32
 8004628:	4013      	ands	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800462e:	4b87      	ldr	r3, [pc, #540]	; (800484c <MX_GPIO_Init+0x264>)
 8004630:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004632:	4b86      	ldr	r3, [pc, #536]	; (800484c <MX_GPIO_Init+0x264>)
 8004634:	2101      	movs	r1, #1
 8004636:	430a      	orrs	r2, r1
 8004638:	635a      	str	r2, [r3, #52]	; 0x34
 800463a:	4b84      	ldr	r3, [pc, #528]	; (800484c <MX_GPIO_Init+0x264>)
 800463c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463e:	2201      	movs	r2, #1
 8004640:	4013      	ands	r3, r2
 8004642:	60bb      	str	r3, [r7, #8]
 8004644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004646:	4b81      	ldr	r3, [pc, #516]	; (800484c <MX_GPIO_Init+0x264>)
 8004648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800464a:	4b80      	ldr	r3, [pc, #512]	; (800484c <MX_GPIO_Init+0x264>)
 800464c:	2102      	movs	r1, #2
 800464e:	430a      	orrs	r2, r1
 8004650:	635a      	str	r2, [r3, #52]	; 0x34
 8004652:	4b7e      	ldr	r3, [pc, #504]	; (800484c <MX_GPIO_Init+0x264>)
 8004654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004656:	2202      	movs	r2, #2
 8004658:	4013      	ands	r3, r2
 800465a:	607b      	str	r3, [r7, #4]
 800465c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800465e:	4b7b      	ldr	r3, [pc, #492]	; (800484c <MX_GPIO_Init+0x264>)
 8004660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004662:	4b7a      	ldr	r3, [pc, #488]	; (800484c <MX_GPIO_Init+0x264>)
 8004664:	2108      	movs	r1, #8
 8004666:	430a      	orrs	r2, r1
 8004668:	635a      	str	r2, [r3, #52]	; 0x34
 800466a:	4b78      	ldr	r3, [pc, #480]	; (800484c <MX_GPIO_Init+0x264>)
 800466c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466e:	2208      	movs	r2, #8
 8004670:	4013      	ands	r3, r2
 8004672:	603b      	str	r3, [r7, #0]
 8004674:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin|MUTING_B_Pin, GPIO_PIN_SET);
 8004676:	4b76      	ldr	r3, [pc, #472]	; (8004850 <MX_GPIO_Init+0x268>)
 8004678:	2201      	movs	r2, #1
 800467a:	210a      	movs	r1, #10
 800467c:	0018      	movs	r0, r3
 800467e:	f002 fae0 	bl	8006c42 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DISPLAY_D6_OFF_Pin|BT_PREV_Pin|BT_NEXT_Pin|BT_PAUSE_Pin
 8004682:	4974      	ldr	r1, [pc, #464]	; (8004854 <MX_GPIO_Init+0x26c>)
 8004684:	23a0      	movs	r3, #160	; 0xa0
 8004686:	05db      	lsls	r3, r3, #23
 8004688:	2200      	movs	r2, #0
 800468a:	0018      	movs	r0, r3
 800468c:	f002 fad9 	bl	8006c42 <HAL_GPIO_WritePin>
                          |LED_S1_Pin|LED_S2_Pin|DISPLAY_C_Pin|DISPLAY_B_Pin
                          |DISPLAY_D2_Pin|DISPLAY_D1_Pin|DISPLAY_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_S3_Pin|LED_S4_Pin|DISPLAY_A_Pin|DISPLAY_D5_Pin
 8004690:	23be      	movs	r3, #190	; 0xbe
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	486e      	ldr	r0, [pc, #440]	; (8004850 <MX_GPIO_Init+0x268>)
 8004696:	2200      	movs	r2, #0
 8004698:	0019      	movs	r1, r3
 800469a:	f002 fad2 	bl	8006c42 <HAL_GPIO_WritePin>
                          |DISPLAY_ON_Pin|DISABLE_5V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_S5_Pin|LED_S6_Pin|LED_MAN_Pin|BT_ON_OFF_Pin
 800469e:	496e      	ldr	r1, [pc, #440]	; (8004858 <MX_GPIO_Init+0x270>)
 80046a0:	4b6e      	ldr	r3, [pc, #440]	; (800485c <MX_GPIO_Init+0x274>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	0018      	movs	r0, r3
 80046a6:	f002 facc 	bl	8006c42 <HAL_GPIO_WritePin>
                          |DISPLAY_G_Pin|DISPLAY_F_Pin|DISPLAY_E_Pin|DISPLAY_D_Pin
                          |KD_OUT_4_Pin|KD_OUT_5_Pin|CENTER_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_D4_Pin|DISPLAY_D3_Pin|KD_OUT_1_Pin|KD_OUT_2_Pin
 80046aa:	23dc      	movs	r3, #220	; 0xdc
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	486c      	ldr	r0, [pc, #432]	; (8004860 <MX_GPIO_Init+0x278>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	0019      	movs	r1, r3
 80046b4:	f002 fac5 	bl	8006c42 <HAL_GPIO_WritePin>
                          |KD_OUT_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SCAN_STOP_Pin */
  GPIO_InitStruct.Pin = SCAN_STOP_Pin;
 80046b8:	193b      	adds	r3, r7, r4
 80046ba:	2201      	movs	r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80046be:	193b      	adds	r3, r7, r4
 80046c0:	2200      	movs	r2, #0
 80046c2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046c4:	193b      	adds	r3, r7, r4
 80046c6:	2201      	movs	r2, #1
 80046c8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SCAN_STOP_GPIO_Port, &GPIO_InitStruct);
 80046ca:	193b      	adds	r3, r7, r4
 80046cc:	4a60      	ldr	r2, [pc, #384]	; (8004850 <MX_GPIO_Init+0x268>)
 80046ce:	0019      	movs	r1, r3
 80046d0:	0010      	movs	r0, r2
 80046d2:	f002 f935 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTING_A_Pin */
  GPIO_InitStruct.Pin = MUTING_A_Pin;
 80046d6:	193b      	adds	r3, r7, r4
 80046d8:	2202      	movs	r2, #2
 80046da:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046dc:	193b      	adds	r3, r7, r4
 80046de:	2201      	movs	r2, #1
 80046e0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046e2:	193b      	adds	r3, r7, r4
 80046e4:	2201      	movs	r2, #1
 80046e6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	2200      	movs	r2, #0
 80046ec:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MUTING_A_GPIO_Port, &GPIO_InitStruct);
 80046ee:	193b      	adds	r3, r7, r4
 80046f0:	4a57      	ldr	r2, [pc, #348]	; (8004850 <MX_GPIO_Init+0x268>)
 80046f2:	0019      	movs	r1, r3
 80046f4:	0010      	movs	r0, r2
 80046f6:	f002 f923 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTING_B_Pin LED_S3_Pin LED_S4_Pin DISPLAY_A_Pin
                           DISPLAY_D5_Pin DISPLAY_ON_Pin DISABLE_5V_Pin */
  GPIO_InitStruct.Pin = MUTING_B_Pin|LED_S3_Pin|LED_S4_Pin|DISPLAY_A_Pin
 80046fa:	0021      	movs	r1, r4
 80046fc:	187b      	adds	r3, r7, r1
 80046fe:	22bf      	movs	r2, #191	; 0xbf
 8004700:	00d2      	lsls	r2, r2, #3
 8004702:	601a      	str	r2, [r3, #0]
                          |DISPLAY_D5_Pin|DISPLAY_ON_Pin|DISABLE_5V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004704:	000c      	movs	r4, r1
 8004706:	193b      	adds	r3, r7, r4
 8004708:	2201      	movs	r2, #1
 800470a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470c:	193b      	adds	r3, r7, r4
 800470e:	2200      	movs	r2, #0
 8004710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004712:	193b      	adds	r3, r7, r4
 8004714:	2200      	movs	r2, #0
 8004716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004718:	193b      	adds	r3, r7, r4
 800471a:	4a4d      	ldr	r2, [pc, #308]	; (8004850 <MX_GPIO_Init+0x268>)
 800471c:	0019      	movs	r1, r3
 800471e:	0010      	movs	r0, r2
 8004720:	f002 f90e 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_D6_OFF_Pin BT_PREV_Pin BT_NEXT_Pin BT_PAUSE_Pin
                           LED_S1_Pin LED_S2_Pin DISPLAY_C_Pin DISPLAY_B_Pin
                           DISPLAY_D2_Pin DISPLAY_D1_Pin DISPLAY_DP_Pin */
  GPIO_InitStruct.Pin = DISPLAY_D6_OFF_Pin|BT_PREV_Pin|BT_NEXT_Pin|BT_PAUSE_Pin
 8004724:	193b      	adds	r3, r7, r4
 8004726:	4a4b      	ldr	r2, [pc, #300]	; (8004854 <MX_GPIO_Init+0x26c>)
 8004728:	601a      	str	r2, [r3, #0]
                          |LED_S1_Pin|LED_S2_Pin|DISPLAY_C_Pin|DISPLAY_B_Pin
                          |DISPLAY_D2_Pin|DISPLAY_D1_Pin|DISPLAY_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800472a:	193b      	adds	r3, r7, r4
 800472c:	2201      	movs	r2, #1
 800472e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004730:	193b      	adds	r3, r7, r4
 8004732:	2200      	movs	r2, #0
 8004734:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004736:	193b      	adds	r3, r7, r4
 8004738:	2200      	movs	r2, #0
 800473a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800473c:	193a      	adds	r2, r7, r4
 800473e:	23a0      	movs	r3, #160	; 0xa0
 8004740:	05db      	lsls	r3, r3, #23
 8004742:	0011      	movs	r1, r2
 8004744:	0018      	movs	r0, r3
 8004746:	f002 f8fb 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_S5_Pin LED_S6_Pin LED_MAN_Pin BT_ON_OFF_Pin
                           DISPLAY_G_Pin DISPLAY_F_Pin DISPLAY_E_Pin DISPLAY_D_Pin
                           KD_OUT_4_Pin KD_OUT_5_Pin CENTER_LED_Pin */
  GPIO_InitStruct.Pin = LED_S5_Pin|LED_S6_Pin|LED_MAN_Pin|BT_ON_OFF_Pin
 800474a:	193b      	adds	r3, r7, r4
 800474c:	4a42      	ldr	r2, [pc, #264]	; (8004858 <MX_GPIO_Init+0x270>)
 800474e:	601a      	str	r2, [r3, #0]
                          |DISPLAY_G_Pin|DISPLAY_F_Pin|DISPLAY_E_Pin|DISPLAY_D_Pin
                          |KD_OUT_4_Pin|KD_OUT_5_Pin|CENTER_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004750:	193b      	adds	r3, r7, r4
 8004752:	2201      	movs	r2, #1
 8004754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004756:	193b      	adds	r3, r7, r4
 8004758:	2200      	movs	r2, #0
 800475a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800475c:	193b      	adds	r3, r7, r4
 800475e:	2200      	movs	r2, #0
 8004760:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004762:	193b      	adds	r3, r7, r4
 8004764:	4a3d      	ldr	r2, [pc, #244]	; (800485c <MX_GPIO_Init+0x274>)
 8004766:	0019      	movs	r1, r3
 8004768:	0010      	movs	r0, r2
 800476a:	f002 f8e9 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : BT_DETECTION_Pin MANUAL_Pin FM_AM_Pin */
  GPIO_InitStruct.Pin = BT_DETECTION_Pin|MANUAL_Pin|FM_AM_Pin;
 800476e:	0021      	movs	r1, r4
 8004770:	187b      	adds	r3, r7, r1
 8004772:	2286      	movs	r2, #134	; 0x86
 8004774:	0112      	lsls	r2, r2, #4
 8004776:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004778:	000c      	movs	r4, r1
 800477a:	193b      	adds	r3, r7, r4
 800477c:	2200      	movs	r2, #0
 800477e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004780:	193b      	adds	r3, r7, r4
 8004782:	2201      	movs	r2, #1
 8004784:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004786:	193b      	adds	r3, r7, r4
 8004788:	4a34      	ldr	r2, [pc, #208]	; (800485c <MX_GPIO_Init+0x274>)
 800478a:	0019      	movs	r1, r3
 800478c:	0010      	movs	r0, r2
 800478e:	f002 f8d7 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_D4_Pin DISPLAY_D3_Pin KD_OUT_1_Pin KD_OUT_2_Pin
                           KD_OUT_3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_D4_Pin|DISPLAY_D3_Pin|KD_OUT_1_Pin|KD_OUT_2_Pin
 8004792:	0021      	movs	r1, r4
 8004794:	187b      	adds	r3, r7, r1
 8004796:	22dc      	movs	r2, #220	; 0xdc
 8004798:	0092      	lsls	r2, r2, #2
 800479a:	601a      	str	r2, [r3, #0]
                          |KD_OUT_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479c:	000c      	movs	r4, r1
 800479e:	193b      	adds	r3, r7, r4
 80047a0:	2201      	movs	r2, #1
 80047a2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047a4:	193b      	adds	r3, r7, r4
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047aa:	193b      	adds	r3, r7, r4
 80047ac:	2200      	movs	r2, #0
 80047ae:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047b0:	193b      	adds	r3, r7, r4
 80047b2:	4a2b      	ldr	r2, [pc, #172]	; (8004860 <MX_GPIO_Init+0x278>)
 80047b4:	0019      	movs	r1, r3
 80047b6:	0010      	movs	r0, r2
 80047b8:	f002 f8c2 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : KD_IN_1_Pin */
  GPIO_InitStruct.Pin = KD_IN_1_Pin;
 80047bc:	0021      	movs	r1, r4
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	2280      	movs	r2, #128	; 0x80
 80047c2:	0092      	lsls	r2, r2, #2
 80047c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047c6:	000c      	movs	r4, r1
 80047c8:	193b      	adds	r3, r7, r4
 80047ca:	2200      	movs	r2, #0
 80047cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	193b      	adds	r3, r7, r4
 80047d0:	2200      	movs	r2, #0
 80047d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KD_IN_1_GPIO_Port, &GPIO_InitStruct);
 80047d4:	193b      	adds	r3, r7, r4
 80047d6:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <MX_GPIO_Init+0x268>)
 80047d8:	0019      	movs	r1, r3
 80047da:	0010      	movs	r0, r2
 80047dc:	f002 f8b0 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pins : KD_IN_2_Pin KD_IN_3_Pin KD_IN_4_Pin */
  GPIO_InitStruct.Pin = KD_IN_2_Pin|KD_IN_3_Pin|KD_IN_4_Pin;
 80047e0:	193b      	adds	r3, r7, r4
 80047e2:	220b      	movs	r2, #11
 80047e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80047e6:	193b      	adds	r3, r7, r4
 80047e8:	2200      	movs	r2, #0
 80047ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ec:	193b      	adds	r3, r7, r4
 80047ee:	2200      	movs	r2, #0
 80047f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047f2:	193b      	adds	r3, r7, r4
 80047f4:	4a1a      	ldr	r2, [pc, #104]	; (8004860 <MX_GPIO_Init+0x278>)
 80047f6:	0019      	movs	r1, r3
 80047f8:	0010      	movs	r0, r2
 80047fa:	f002 f8a1 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : STANDBY_Pin */
  GPIO_InitStruct.Pin = STANDBY_Pin;
 80047fe:	0021      	movs	r1, r4
 8004800:	187b      	adds	r3, r7, r1
 8004802:	2280      	movs	r2, #128	; 0x80
 8004804:	0052      	lsls	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004808:	000c      	movs	r4, r1
 800480a:	193b      	adds	r3, r7, r4
 800480c:	2200      	movs	r2, #0
 800480e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	193b      	adds	r3, r7, r4
 8004812:	2200      	movs	r2, #0
 8004814:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STANDBY_GPIO_Port, &GPIO_InitStruct);
 8004816:	193b      	adds	r3, r7, r4
 8004818:	4a10      	ldr	r2, [pc, #64]	; (800485c <MX_GPIO_Init+0x274>)
 800481a:	0019      	movs	r1, r3
 800481c:	0010      	movs	r0, r2
 800481e:	f002 f88f 	bl	8006940 <HAL_GPIO_Init>

  /*Configure GPIO pin : STANDBY_VERSION_Pin */
  GPIO_InitStruct.Pin = STANDBY_VERSION_Pin;
 8004822:	0021      	movs	r1, r4
 8004824:	187b      	adds	r3, r7, r1
 8004826:	2280      	movs	r2, #128	; 0x80
 8004828:	0092      	lsls	r2, r2, #2
 800482a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800482c:	187b      	adds	r3, r7, r1
 800482e:	2200      	movs	r2, #0
 8004830:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004832:	187b      	adds	r3, r7, r1
 8004834:	2202      	movs	r2, #2
 8004836:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STANDBY_VERSION_GPIO_Port, &GPIO_InitStruct);
 8004838:	187b      	adds	r3, r7, r1
 800483a:	4a08      	ldr	r2, [pc, #32]	; (800485c <MX_GPIO_Init+0x274>)
 800483c:	0019      	movs	r1, r3
 800483e:	0010      	movs	r0, r2
 8004840:	f002 f87e 	bl	8006940 <HAL_GPIO_Init>

}
 8004844:	46c0      	nop			; (mov r8, r8)
 8004846:	46bd      	mov	sp, r7
 8004848:	b00b      	add	sp, #44	; 0x2c
 800484a:	bd90      	pop	{r4, r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	50000800 	.word	0x50000800
 8004854:	00008ffc 	.word	0x00008ffc
 8004858:	0000f49f 	.word	0x0000f49f
 800485c:	50000400 	.word	0x50000400
 8004860:	50000c00 	.word	0x50000c00

08004864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004868:	b672      	cpsid	i
}
 800486a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800486c:	e7fe      	b.n	800486c <Error_Handler+0x8>
	...

08004870 <misc_get_revision>:
#include "misc.h"

int misc_get_revision()
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
	return (int)HAL_GPIO_ReadPin(GPIOB, STANDBY_VERSION_Pin);
 8004874:	2380      	movs	r3, #128	; 0x80
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a04      	ldr	r2, [pc, #16]	; (800488c <misc_get_revision+0x1c>)
 800487a:	0019      	movs	r1, r3
 800487c:	0010      	movs	r0, r2
 800487e:	f002 f9c3 	bl	8006c08 <HAL_GPIO_ReadPin>
 8004882:	0003      	movs	r3, r0
}
 8004884:	0018      	movs	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	46c0      	nop			; (mov r8, r8)
 800488c:	50000400 	.word	0x50000400

08004890 <misc_is_standby>:

bool misc_is_standby()
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
	bool revision_a = misc_get_revision();
 8004896:	f7ff ffeb 	bl	8004870 <misc_get_revision>
 800489a:	0002      	movs	r2, r0
 800489c:	1dfb      	adds	r3, r7, #7
 800489e:	1e51      	subs	r1, r2, #1
 80048a0:	418a      	sbcs	r2, r1
 80048a2:	701a      	strb	r2, [r3, #0]
	bool standby = HAL_GPIO_ReadPin(GPIOB, STANDBY_Pin);
 80048a4:	2380      	movs	r3, #128	; 0x80
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	4a15      	ldr	r2, [pc, #84]	; (8004900 <misc_is_standby+0x70>)
 80048aa:	0019      	movs	r1, r3
 80048ac:	0010      	movs	r0, r2
 80048ae:	f002 f9ab 	bl	8006c08 <HAL_GPIO_ReadPin>
 80048b2:	0003      	movs	r3, r0
 80048b4:	001a      	movs	r2, r3
 80048b6:	1dbb      	adds	r3, r7, #6
 80048b8:	1e51      	subs	r1, r2, #1
 80048ba:	418a      	sbcs	r2, r1
 80048bc:	701a      	strb	r2, [r3, #0]

	return (revision_a && standby) || (!revision_a && !standby);
 80048be:	1dfb      	adds	r3, r7, #7
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <misc_is_standby+0x3e>
 80048c6:	1dbb      	adds	r3, r7, #6
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10d      	bne.n	80048ea <misc_is_standby+0x5a>
 80048ce:	1dfb      	adds	r3, r7, #7
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	4053      	eors	r3, r2
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d008      	beq.n	80048ee <misc_is_standby+0x5e>
 80048dc:	1dbb      	adds	r3, r7, #6
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4053      	eors	r3, r2
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <misc_is_standby+0x5e>
 80048ea:	2301      	movs	r3, #1
 80048ec:	e000      	b.n	80048f0 <misc_is_standby+0x60>
 80048ee:	2300      	movs	r3, #0
 80048f0:	1c1a      	adds	r2, r3, #0
 80048f2:	2301      	movs	r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	b2db      	uxtb	r3, r3
}
 80048f8:	0018      	movs	r0, r3
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	50000400 	.word	0x50000400

08004904 <misc_is_manual>:

bool misc_is_manual()
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOB, MANUAL_Pin);
 8004908:	4b05      	ldr	r3, [pc, #20]	; (8004920 <misc_is_manual+0x1c>)
 800490a:	2120      	movs	r1, #32
 800490c:	0018      	movs	r0, r3
 800490e:	f002 f97b 	bl	8006c08 <HAL_GPIO_ReadPin>
 8004912:	0003      	movs	r3, r0
 8004914:	425a      	negs	r2, r3
 8004916:	4153      	adcs	r3, r2
 8004918:	b2db      	uxtb	r3, r3
}
 800491a:	0018      	movs	r0, r3
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	50000400 	.word	0x50000400

08004924 <misc_mute>:

void misc_mute(bool on)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	0002      	movs	r2, r0
 800492c:	1dfb      	adds	r3, r7, #7
 800492e:	701a      	strb	r2, [r3, #0]
	bool revision_a = !misc_get_revision();
 8004930:	f7ff ff9e 	bl	8004870 <misc_get_revision>
 8004934:	0002      	movs	r2, r0
 8004936:	200f      	movs	r0, #15
 8004938:	183b      	adds	r3, r7, r0
 800493a:	4251      	negs	r1, r2
 800493c:	414a      	adcs	r2, r1
 800493e:	701a      	strb	r2, [r3, #0]

	if (revision_a)
 8004940:	183b      	adds	r3, r7, r0
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d011      	beq.n	800496c <misc_mute+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin, !on);
 8004948:	1dfb      	adds	r3, r7, #7
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2201      	movs	r2, #1
 800494e:	4053      	eors	r3, r2
 8004950:	b2db      	uxtb	r3, r3
 8004952:	001a      	movs	r2, r3
 8004954:	4b0e      	ldr	r3, [pc, #56]	; (8004990 <misc_mute+0x6c>)
 8004956:	2102      	movs	r1, #2
 8004958:	0018      	movs	r0, r3
 800495a:	f002 f972 	bl	8006c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MUTING_B_Pin, GPIO_PIN_RESET);
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <misc_mute+0x6c>)
 8004960:	2200      	movs	r2, #0
 8004962:	2108      	movs	r1, #8
 8004964:	0018      	movs	r0, r3
 8004966:	f002 f96c 	bl	8006c42 <HAL_GPIO_WritePin>
	else
	{
		HAL_GPIO_WritePin(GPIOC, MUTING_B_Pin, on);
		HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin, GPIO_PIN_RESET);
	}
}
 800496a:	e00c      	b.n	8004986 <misc_mute+0x62>
		HAL_GPIO_WritePin(GPIOC, MUTING_B_Pin, on);
 800496c:	1dfb      	adds	r3, r7, #7
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4807      	ldr	r0, [pc, #28]	; (8004990 <misc_mute+0x6c>)
 8004972:	001a      	movs	r2, r3
 8004974:	2108      	movs	r1, #8
 8004976:	f002 f964 	bl	8006c42 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin, GPIO_PIN_RESET);
 800497a:	4b05      	ldr	r3, [pc, #20]	; (8004990 <misc_mute+0x6c>)
 800497c:	2200      	movs	r2, #0
 800497e:	2102      	movs	r1, #2
 8004980:	0018      	movs	r0, r3
 8004982:	f002 f95e 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8004986:	46c0      	nop			; (mov r8, r8)
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	50000800 	.word	0x50000800

08004994 <misc_get_mode>:

Mode misc_get_mode(int am_frequency)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	if (!HAL_GPIO_ReadPin(GPIOB, FM_AM_Pin))
 800499c:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <misc_get_mode+0x3c>)
 800499e:	2140      	movs	r1, #64	; 0x40
 80049a0:	0018      	movs	r0, r3
 80049a2:	f002 f931 	bl	8006c08 <HAL_GPIO_ReadPin>
 80049a6:	1e03      	subs	r3, r0, #0
 80049a8:	d101      	bne.n	80049ae <misc_get_mode+0x1a>
	{
		return FM;
 80049aa:	2300      	movs	r3, #0
 80049ac:	e00c      	b.n	80049c8 <misc_get_mode+0x34>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, FM_AM_Pin) && am_frequency > 0)
 80049ae:	4b08      	ldr	r3, [pc, #32]	; (80049d0 <misc_get_mode+0x3c>)
 80049b0:	2140      	movs	r1, #64	; 0x40
 80049b2:	0018      	movs	r0, r3
 80049b4:	f002 f928 	bl	8006c08 <HAL_GPIO_ReadPin>
 80049b8:	1e03      	subs	r3, r0, #0
 80049ba:	d004      	beq.n	80049c6 <misc_get_mode+0x32>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	dd01      	ble.n	80049c6 <misc_get_mode+0x32>
	{
		return AM;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <misc_get_mode+0x34>
	}

	return OTHER;
 80049c6:	2302      	movs	r3, #2
}
 80049c8:	0018      	movs	r0, r3
 80049ca:	46bd      	mov	sp, r7
 80049cc:	b002      	add	sp, #8
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	50000400 	.word	0x50000400

080049d4 <misc_bt_on>:

void misc_bt_on()
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BT_ON_OFF_Pin, GPIO_PIN_SET);
 80049d8:	2380      	movs	r3, #128	; 0x80
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	4805      	ldr	r0, [pc, #20]	; (80049f4 <misc_bt_on+0x20>)
 80049de:	2201      	movs	r2, #1
 80049e0:	0019      	movs	r1, r3
 80049e2:	f002 f92e 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 80049e6:	2096      	movs	r0, #150	; 0x96
 80049e8:	f000 febc 	bl	8005764 <HAL_Delay>
}
 80049ec:	46c0      	nop			; (mov r8, r8)
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	50000400 	.word	0x50000400

080049f8 <misc_bt_off>:

void misc_bt_off()
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, BT_ON_OFF_Pin, GPIO_PIN_RESET);
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4805      	ldr	r0, [pc, #20]	; (8004a18 <misc_bt_off+0x20>)
 8004a02:	2200      	movs	r2, #0
 8004a04:	0019      	movs	r1, r3
 8004a06:	f002 f91c 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8004a0a:	2096      	movs	r0, #150	; 0x96
 8004a0c:	f000 feaa 	bl	8005764 <HAL_Delay>
}
 8004a10:	46c0      	nop			; (mov r8, r8)
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	50000400 	.word	0x50000400

08004a1c <misc_bt_pause>:

void misc_bt_pause()
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BT_PAUSE_Pin, GPIO_PIN_SET);
 8004a20:	23a0      	movs	r3, #160	; 0xa0
 8004a22:	05db      	lsls	r3, r3, #23
 8004a24:	2201      	movs	r2, #1
 8004a26:	2120      	movs	r1, #32
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f002 f90a 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(350);
 8004a2e:	23af      	movs	r3, #175	; 0xaf
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	0018      	movs	r0, r3
 8004a34:	f000 fe96 	bl	8005764 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_PAUSE_Pin, GPIO_PIN_RESET);
 8004a38:	23a0      	movs	r3, #160	; 0xa0
 8004a3a:	05db      	lsls	r3, r3, #23
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2120      	movs	r1, #32
 8004a40:	0018      	movs	r0, r3
 8004a42:	f002 f8fe 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8004a46:	46c0      	nop			; (mov r8, r8)
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <misc_bt_next>:

void misc_bt_next()
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BT_NEXT_Pin, GPIO_PIN_SET);
 8004a50:	23a0      	movs	r3, #160	; 0xa0
 8004a52:	05db      	lsls	r3, r3, #23
 8004a54:	2201      	movs	r2, #1
 8004a56:	2110      	movs	r1, #16
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f002 f8f2 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8004a5e:	2096      	movs	r0, #150	; 0x96
 8004a60:	f000 fe80 	bl	8005764 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_NEXT_Pin, GPIO_PIN_RESET);
 8004a64:	23a0      	movs	r3, #160	; 0xa0
 8004a66:	05db      	lsls	r3, r3, #23
 8004a68:	2200      	movs	r2, #0
 8004a6a:	2110      	movs	r1, #16
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f002 f8e8 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8004a72:	46c0      	nop			; (mov r8, r8)
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <misc_bt_prev>:

void misc_bt_prev()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, BT_PREV_Pin, GPIO_PIN_SET);
 8004a7c:	23a0      	movs	r3, #160	; 0xa0
 8004a7e:	05db      	lsls	r3, r3, #23
 8004a80:	2201      	movs	r2, #1
 8004a82:	2108      	movs	r1, #8
 8004a84:	0018      	movs	r0, r3
 8004a86:	f002 f8dc 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_Delay(150);
 8004a8a:	2096      	movs	r0, #150	; 0x96
 8004a8c:	f000 fe6a 	bl	8005764 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, BT_PREV_Pin, GPIO_PIN_RESET);
 8004a90:	23a0      	movs	r3, #160	; 0xa0
 8004a92:	05db      	lsls	r3, r3, #23
 8004a94:	2200      	movs	r2, #0
 8004a96:	2108      	movs	r1, #8
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f002 f8d2 	bl	8006c42 <HAL_GPIO_WritePin>
}
 8004a9e:	46c0      	nop			; (mov r8, r8)
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <misc_bt_is_present>:

bool misc_bt_is_present()
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOB, BT_DETECTION_Pin);
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	011b      	lsls	r3, r3, #4
 8004aac:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <misc_bt_is_present+0x20>)
 8004aae:	0019      	movs	r1, r3
 8004ab0:	0010      	movs	r0, r2
 8004ab2:	f002 f8a9 	bl	8006c08 <HAL_GPIO_ReadPin>
 8004ab6:	0003      	movs	r3, r0
 8004ab8:	425a      	negs	r2, r3
 8004aba:	4153      	adcs	r3, r2
 8004abc:	b2db      	uxtb	r3, r3
}
 8004abe:	0018      	movs	r0, r3
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	50000400 	.word	0x50000400

08004ac8 <station_fm_get>:

// RM0444 - Reference manual / PAGE 70
// https://www.st.com/resource/en/reference_manual/rm0444-stm32g0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf

struct Station station_fm_get(uint8_t number)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b088      	sub	sp, #32
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	0008      	movs	r0, r1
 8004ad2:	1cf9      	adds	r1, r7, #3
 8004ad4:	7008      	strb	r0, [r1, #0]
	uint32_t address = 0x0801F800 + 8 * number;
 8004ad6:	1cf9      	adds	r1, r7, #3
 8004ad8:	7809      	ldrb	r1, [r1, #0]
 8004ada:	481d      	ldr	r0, [pc, #116]	; (8004b50 <station_fm_get+0x88>)
 8004adc:	4684      	mov	ip, r0
 8004ade:	4461      	add	r1, ip
 8004ae0:	00c9      	lsls	r1, r1, #3
 8004ae2:	61f9      	str	r1, [r7, #28]
	uint64_t value = *(uint32_t*)address;
 8004ae4:	69f9      	ldr	r1, [r7, #28]
 8004ae6:	6809      	ldr	r1, [r1, #0]
 8004ae8:	6139      	str	r1, [r7, #16]
 8004aea:	2100      	movs	r1, #0
 8004aec:	6179      	str	r1, [r7, #20]

	struct Station x;
	x.Frequency = (value & 0xFFFF0000) >> 16;
 8004aee:	6979      	ldr	r1, [r7, #20]
 8004af0:	0409      	lsls	r1, r1, #16
 8004af2:	6938      	ldr	r0, [r7, #16]
 8004af4:	0c02      	lsrs	r2, r0, #16
 8004af6:	430a      	orrs	r2, r1
 8004af8:	6979      	ldr	r1, [r7, #20]
 8004afa:	0c0b      	lsrs	r3, r1, #16
 8004afc:	0013      	movs	r3, r2
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	0c1a      	lsrs	r2, r3, #16
 8004b02:	2108      	movs	r1, #8
 8004b04:	187b      	adds	r3, r7, r1
 8004b06:	601a      	str	r2, [r3, #0]
	x.DutyCycle = value & 0xFFFF;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	041b      	lsls	r3, r3, #16
 8004b0c:	0c1a      	lsrs	r2, r3, #16
 8004b0e:	187b      	adds	r3, r7, r1
 8004b10:	605a      	str	r2, [r3, #4]

	if (x.Frequency < 8750 || x.Frequency > 10800 || x.DutyCycle < 0 || x.DutyCycle > 17500)
 8004b12:	187b      	adds	r3, r7, r1
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <station_fm_get+0x8c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d909      	bls.n	8004b30 <station_fm_get+0x68>
 8004b1c:	187b      	adds	r3, r7, r1
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <station_fm_get+0x90>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d804      	bhi.n	8004b30 <station_fm_get+0x68>
 8004b26:	187b      	adds	r3, r7, r1
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4a0c      	ldr	r2, [pc, #48]	; (8004b5c <station_fm_get+0x94>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d906      	bls.n	8004b3e <station_fm_get+0x76>
	{
		x.Frequency = 8750;
 8004b30:	2108      	movs	r1, #8
 8004b32:	187b      	adds	r3, r7, r1
 8004b34:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <station_fm_get+0x98>)
 8004b36:	601a      	str	r2, [r3, #0]
		x.DutyCycle = 13000;
 8004b38:	187b      	adds	r3, r7, r1
 8004b3a:	4a0a      	ldr	r2, [pc, #40]	; (8004b64 <station_fm_get+0x9c>)
 8004b3c:	605a      	str	r2, [r3, #4]
	}

	return x;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2208      	movs	r2, #8
 8004b42:	18ba      	adds	r2, r7, r2
 8004b44:	ca03      	ldmia	r2!, {r0, r1}
 8004b46:	c303      	stmia	r3!, {r0, r1}
}
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b008      	add	sp, #32
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	01003f00 	.word	0x01003f00
 8004b54:	0000222d 	.word	0x0000222d
 8004b58:	00002a30 	.word	0x00002a30
 8004b5c:	0000445c 	.word	0x0000445c
 8004b60:	0000222e 	.word	0x0000222e
 8004b64:	000032c8 	.word	0x000032c8

08004b68 <station_fm_set>:

void station_fm_set(uint8_t number, uint32_t frequency, uint32_t dutycycle)
{
 8004b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6a:	b0af      	sub	sp, #188	; 0xbc
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	61b9      	str	r1, [r7, #24]
 8004b70:	617a      	str	r2, [r7, #20]
 8004b72:	230f      	movs	r3, #15
 8004b74:	2210      	movs	r2, #16
 8004b76:	4694      	mov	ip, r2
 8004b78:	44bc      	add	ip, r7
 8004b7a:	4463      	add	r3, ip
 8004b7c:	1c02      	adds	r2, r0, #0
 8004b7e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8004b80:	239f      	movs	r3, #159	; 0x9f
 8004b82:	2210      	movs	r2, #16
 8004b84:	18b9      	adds	r1, r7, r2
 8004b86:	18ce      	adds	r6, r1, r3
 8004b88:	f001 fd88 	bl	800669c <HAL_FLASH_Unlock>
 8004b8c:	0003      	movs	r3, r0
 8004b8e:	7033      	strb	r3, [r6, #0]
	status = FLASH_WaitForLastOperation(1000);
 8004b90:	239f      	movs	r3, #159	; 0x9f
 8004b92:	2210      	movs	r2, #16
 8004b94:	18b9      	adds	r1, r7, r2
 8004b96:	18ce      	adds	r6, r1, r3
 8004b98:	23fa      	movs	r3, #250	; 0xfa
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f001 fdbd 	bl	800671c <FLASH_WaitForLastOperation>
 8004ba2:	0003      	movs	r3, r0
 8004ba4:	7033      	strb	r3, [r6, #0]

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);
 8004ba6:	4b75      	ldr	r3, [pc, #468]	; (8004d7c <station_fm_set+0x214>)
 8004ba8:	2220      	movs	r2, #32
 8004baa:	611a      	str	r2, [r3, #16]
	status = FLASH_WaitForLastOperation(1000);
 8004bac:	239f      	movs	r3, #159	; 0x9f
 8004bae:	2210      	movs	r2, #16
 8004bb0:	18b9      	adds	r1, r7, r2
 8004bb2:	18ce      	adds	r6, r1, r3
 8004bb4:	23fa      	movs	r3, #250	; 0xfa
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	0018      	movs	r0, r3
 8004bba:	f001 fdaf 	bl	800671c <FLASH_WaitForLastOperation>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	7033      	strb	r3, [r6, #0]
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <station_fm_set+0x214>)
 8004bc4:	695a      	ldr	r2, [r3, #20]
 8004bc6:	4b6d      	ldr	r3, [pc, #436]	; (8004d7c <station_fm_set+0x214>)
 8004bc8:	2102      	movs	r1, #2
 8004bca:	438a      	bics	r2, r1
 8004bcc:	615a      	str	r2, [r3, #20]
	status = FLASH_WaitForLastOperation(1000);
 8004bce:	239f      	movs	r3, #159	; 0x9f
 8004bd0:	2210      	movs	r2, #16
 8004bd2:	18ba      	adds	r2, r7, r2
 8004bd4:	18d6      	adds	r6, r2, r3
 8004bd6:	23fa      	movs	r3, #250	; 0xfa
 8004bd8:	009b      	lsls	r3, r3, #2
 8004bda:	0018      	movs	r0, r3
 8004bdc:	f001 fd9e 	bl	800671c <FLASH_WaitForLastOperation>
 8004be0:	0003      	movs	r3, r0
 8004be2:	7033      	strb	r3, [r6, #0]

	uint64_t stations[7][2]; // address / value
	for (int i = 0; i <= 6; i++)
 8004be4:	2300      	movs	r3, #0
 8004be6:	22a4      	movs	r2, #164	; 0xa4
 8004be8:	2110      	movs	r1, #16
 8004bea:	468c      	mov	ip, r1
 8004bec:	44bc      	add	ip, r7
 8004bee:	4462      	add	r2, ip
 8004bf0:	6013      	str	r3, [r2, #0]
 8004bf2:	e03e      	b.n	8004c72 <station_fm_set+0x10a>
	{
		uint32_t x = 0x0801F800 + 8 * i;
 8004bf4:	21a4      	movs	r1, #164	; 0xa4
 8004bf6:	2010      	movs	r0, #16
 8004bf8:	183b      	adds	r3, r7, r0
 8004bfa:	185b      	adds	r3, r3, r1
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a60      	ldr	r2, [pc, #384]	; (8004d80 <station_fm_set+0x218>)
 8004c00:	4694      	mov	ip, r2
 8004c02:	4463      	add	r3, ip
 8004c04:	00db      	lsls	r3, r3, #3
 8004c06:	2698      	movs	r6, #152	; 0x98
 8004c08:	183a      	adds	r2, r7, r0
 8004c0a:	1992      	adds	r2, r2, r6
 8004c0c:	6013      	str	r3, [r2, #0]
		stations[i][0] = x;
 8004c0e:	183b      	adds	r3, r7, r0
 8004c10:	199b      	adds	r3, r3, r6
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	2300      	movs	r3, #0
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	2328      	movs	r3, #40	; 0x28
 8004c1c:	183a      	adds	r2, r7, r0
 8004c1e:	18d2      	adds	r2, r2, r3
 8004c20:	0008      	movs	r0, r1
 8004c22:	2310      	movs	r3, #16
 8004c24:	469c      	mov	ip, r3
 8004c26:	44bc      	add	ip, r7
 8004c28:	4461      	add	r1, ip
 8004c2a:	680b      	ldr	r3, [r1, #0]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	18d3      	adds	r3, r2, r3
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	6019      	str	r1, [r3, #0]
 8004c36:	605a      	str	r2, [r3, #4]
		stations[i][1] = *(uint32_t*)x;
 8004c38:	2110      	movs	r1, #16
 8004c3a:	187b      	adds	r3, r7, r1
 8004c3c:	199a      	adds	r2, r3, r6
 8004c3e:	6813      	ldr	r3, [r2, #0]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	2300      	movs	r3, #0
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	2328      	movs	r3, #40	; 0x28
 8004c4a:	187a      	adds	r2, r7, r1
 8004c4c:	18d2      	adds	r2, r2, r3
 8004c4e:	000e      	movs	r6, r1
 8004c50:	187b      	adds	r3, r7, r1
 8004c52:	181b      	adds	r3, r3, r0
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	011b      	lsls	r3, r3, #4
 8004c58:	18d3      	adds	r3, r2, r3
 8004c5a:	3308      	adds	r3, #8
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	6019      	str	r1, [r3, #0]
 8004c62:	605a      	str	r2, [r3, #4]
	for (int i = 0; i <= 6; i++)
 8004c64:	19bb      	adds	r3, r7, r6
 8004c66:	181b      	adds	r3, r3, r0
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	19ba      	adds	r2, r7, r6
 8004c6e:	1812      	adds	r2, r2, r0
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	23a4      	movs	r3, #164	; 0xa4
 8004c74:	2210      	movs	r2, #16
 8004c76:	4694      	mov	ip, r2
 8004c78:	44bc      	add	ip, r7
 8004c7a:	4463      	add	r3, ip
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b06      	cmp	r3, #6
 8004c80:	ddb8      	ble.n	8004bf4 <station_fm_set+0x8c>
	}
	stations[number][1] = (frequency << 16) + dutycycle;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	041a      	lsls	r2, r3, #16
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	18d2      	adds	r2, r2, r3
 8004c8a:	230f      	movs	r3, #15
 8004c8c:	2110      	movs	r1, #16
 8004c8e:	468c      	mov	ip, r1
 8004c90:	44bc      	add	ip, r7
 8004c92:	4463      	add	r3, ip
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	0014      	movs	r4, r2
 8004c98:	2200      	movs	r2, #0
 8004c9a:	0015      	movs	r5, r2
 8004c9c:	2228      	movs	r2, #40	; 0x28
 8004c9e:	2110      	movs	r1, #16
 8004ca0:	468c      	mov	ip, r1
 8004ca2:	44bc      	add	ip, r7
 8004ca4:	4462      	add	r2, ip
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	18d3      	adds	r3, r2, r3
 8004caa:	3308      	adds	r3, #8
 8004cac:	601c      	str	r4, [r3, #0]
 8004cae:	605d      	str	r5, [r3, #4]

	FLASH_EraseInitTypeDef eraseInit =
 8004cb0:	2118      	movs	r1, #24
 8004cb2:	2610      	movs	r6, #16
 8004cb4:	19bb      	adds	r3, r7, r6
 8004cb6:	185b      	adds	r3, r3, r1
 8004cb8:	4a32      	ldr	r2, [pc, #200]	; (8004d84 <station_fm_set+0x21c>)
 8004cba:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004cbc:	c331      	stmia	r3!, {r0, r4, r5}
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	601a      	str	r2, [r3, #0]
		.Banks = FLASH_BANK_1,
		.Page = 63, // 63 = 0x0801F800 - 0x0801FFFF
		.NbPages = 1
	};

	uint32_t pageEraseError = 0;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	627b      	str	r3, [r7, #36]	; 0x24
	status = HAL_FLASHEx_Erase(&eraseInit, &pageEraseError);
 8004cc6:	239f      	movs	r3, #159	; 0x9f
 8004cc8:	19ba      	adds	r2, r7, r6
 8004cca:	18d4      	adds	r4, r2, r3
 8004ccc:	2314      	movs	r3, #20
 8004cce:	19ba      	adds	r2, r7, r6
 8004cd0:	18d2      	adds	r2, r2, r3
 8004cd2:	19bb      	adds	r3, r7, r6
 8004cd4:	185b      	adds	r3, r3, r1
 8004cd6:	0011      	movs	r1, r2
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f001 fd8d 	bl	80067f8 <HAL_FLASHEx_Erase>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	7023      	strb	r3, [r4, #0]

	for (int i = 0; i <= 6; i++)
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	22a0      	movs	r2, #160	; 0xa0
 8004ce6:	2110      	movs	r1, #16
 8004ce8:	468c      	mov	ip, r1
 8004cea:	44bc      	add	ip, r7
 8004cec:	4462      	add	r2, ip
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	e030      	b.n	8004d54 <station_fm_set+0x1ec>
	{
		status = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)stations[i][0], stations[i][1]);
 8004cf2:	2028      	movs	r0, #40	; 0x28
 8004cf4:	2410      	movs	r4, #16
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	181a      	adds	r2, r3, r0
 8004cfa:	25a0      	movs	r5, #160	; 0xa0
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	195b      	adds	r3, r3, r5
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	18d3      	adds	r3, r2, r3
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	0011      	movs	r1, r2
 8004d0c:	193b      	adds	r3, r7, r4
 8004d0e:	181a      	adds	r2, r3, r0
 8004d10:	193b      	adds	r3, r7, r4
 8004d12:	195b      	adds	r3, r3, r5
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	18d3      	adds	r3, r2, r3
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	269f      	movs	r6, #159	; 0x9f
 8004d22:	1938      	adds	r0, r7, r4
 8004d24:	1984      	adds	r4, r0, r6
 8004d26:	2001      	movs	r0, #1
 8004d28:	f001 fc6a 	bl	8006600 <HAL_FLASH_Program>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	7023      	strb	r3, [r4, #0]
		status = FLASH_WaitForLastOperation(1000);
 8004d30:	2410      	movs	r4, #16
 8004d32:	193b      	adds	r3, r7, r4
 8004d34:	199c      	adds	r4, r3, r6
 8004d36:	23fa      	movs	r3, #250	; 0xfa
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	0018      	movs	r0, r3
 8004d3c:	f001 fcee 	bl	800671c <FLASH_WaitForLastOperation>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i <= 6; i++)
 8004d44:	2410      	movs	r4, #16
 8004d46:	193b      	adds	r3, r7, r4
 8004d48:	195b      	adds	r3, r3, r5
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	193a      	adds	r2, r7, r4
 8004d50:	1952      	adds	r2, r2, r5
 8004d52:	6013      	str	r3, [r2, #0]
 8004d54:	23a0      	movs	r3, #160	; 0xa0
 8004d56:	2210      	movs	r2, #16
 8004d58:	4694      	mov	ip, r2
 8004d5a:	44bc      	add	ip, r7
 8004d5c:	4463      	add	r3, ip
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	ddc6      	ble.n	8004cf2 <station_fm_set+0x18a>
	}

	status = HAL_FLASH_Lock();
 8004d64:	239f      	movs	r3, #159	; 0x9f
 8004d66:	2210      	movs	r2, #16
 8004d68:	18ba      	adds	r2, r7, r2
 8004d6a:	18d4      	adds	r4, r2, r3
 8004d6c:	f001 fcba 	bl	80066e4 <HAL_FLASH_Lock>
 8004d70:	0003      	movs	r3, r0
 8004d72:	7023      	strb	r3, [r4, #0]
}
 8004d74:	46c0      	nop			; (mov r8, r8)
 8004d76:	46bd      	mov	sp, r7
 8004d78:	b02f      	add	sp, #188	; 0xbc
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7c:	40022000 	.word	0x40022000
 8004d80:	01003f00 	.word	0x01003f00
 8004d84:	08009810 	.word	0x08009810

08004d88 <station_am_get>:

struct Station station_am_get(uint8_t number)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	0008      	movs	r0, r1
 8004d92:	1cf9      	adds	r1, r7, #3
 8004d94:	7008      	strb	r0, [r1, #0]
	uint32_t address = 0x801F000 + 8 * number;
 8004d96:	1cf9      	adds	r1, r7, #3
 8004d98:	7809      	ldrb	r1, [r1, #0]
 8004d9a:	481d      	ldr	r0, [pc, #116]	; (8004e10 <station_am_get+0x88>)
 8004d9c:	4684      	mov	ip, r0
 8004d9e:	4461      	add	r1, ip
 8004da0:	00c9      	lsls	r1, r1, #3
 8004da2:	61f9      	str	r1, [r7, #28]
	uint64_t value = *(uint32_t*)address;
 8004da4:	69f9      	ldr	r1, [r7, #28]
 8004da6:	6809      	ldr	r1, [r1, #0]
 8004da8:	6139      	str	r1, [r7, #16]
 8004daa:	2100      	movs	r1, #0
 8004dac:	6179      	str	r1, [r7, #20]

	struct Station x;
	x.Frequency = (value & 0xFFFF0000) >> 16;
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	0409      	lsls	r1, r1, #16
 8004db2:	6938      	ldr	r0, [r7, #16]
 8004db4:	0c02      	lsrs	r2, r0, #16
 8004db6:	430a      	orrs	r2, r1
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	0c0b      	lsrs	r3, r1, #16
 8004dbc:	0013      	movs	r3, r2
 8004dbe:	041b      	lsls	r3, r3, #16
 8004dc0:	0c1a      	lsrs	r2, r3, #16
 8004dc2:	2108      	movs	r1, #8
 8004dc4:	187b      	adds	r3, r7, r1
 8004dc6:	601a      	str	r2, [r3, #0]
	x.DutyCycle = value & 0xFFFF;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	0c1a      	lsrs	r2, r3, #16
 8004dce:	187b      	adds	r3, r7, r1
 8004dd0:	605a      	str	r2, [r3, #4]

	if (x.Frequency < 531 || x.Frequency > 1602 || x.DutyCycle < 0 || x.DutyCycle > 17500)
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <station_am_get+0x8c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d909      	bls.n	8004df0 <station_am_get+0x68>
 8004ddc:	187b      	adds	r3, r7, r1
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0d      	ldr	r2, [pc, #52]	; (8004e18 <station_am_get+0x90>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d804      	bhi.n	8004df0 <station_am_get+0x68>
 8004de6:	187b      	adds	r3, r7, r1
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4a0c      	ldr	r2, [pc, #48]	; (8004e1c <station_am_get+0x94>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d906      	bls.n	8004dfe <station_am_get+0x76>
	{
		x.Frequency = 531;
 8004df0:	2108      	movs	r1, #8
 8004df2:	187b      	adds	r3, r7, r1
 8004df4:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <station_am_get+0x98>)
 8004df6:	601a      	str	r2, [r3, #0]
		x.DutyCycle = 13000;
 8004df8:	187b      	adds	r3, r7, r1
 8004dfa:	4a0a      	ldr	r2, [pc, #40]	; (8004e24 <station_am_get+0x9c>)
 8004dfc:	605a      	str	r2, [r3, #4]
	}

	return x;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2208      	movs	r2, #8
 8004e02:	18ba      	adds	r2, r7, r2
 8004e04:	ca03      	ldmia	r2!, {r0, r1}
 8004e06:	c303      	stmia	r3!, {r0, r1}
}
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	b008      	add	sp, #32
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	01003e00 	.word	0x01003e00
 8004e14:	00000212 	.word	0x00000212
 8004e18:	00000642 	.word	0x00000642
 8004e1c:	0000445c 	.word	0x0000445c
 8004e20:	00000213 	.word	0x00000213
 8004e24:	000032c8 	.word	0x000032c8

08004e28 <station_am_set>:

void station_am_set(uint8_t number, uint32_t frequency, uint32_t dutycycle)
{
 8004e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e2a:	b0af      	sub	sp, #188	; 0xbc
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	61b9      	str	r1, [r7, #24]
 8004e30:	617a      	str	r2, [r7, #20]
 8004e32:	230f      	movs	r3, #15
 8004e34:	2210      	movs	r2, #16
 8004e36:	4694      	mov	ip, r2
 8004e38:	44bc      	add	ip, r7
 8004e3a:	4463      	add	r3, ip
 8004e3c:	1c02      	adds	r2, r0, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8004e40:	239f      	movs	r3, #159	; 0x9f
 8004e42:	2210      	movs	r2, #16
 8004e44:	18b9      	adds	r1, r7, r2
 8004e46:	18ce      	adds	r6, r1, r3
 8004e48:	f001 fc28 	bl	800669c <HAL_FLASH_Unlock>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	7033      	strb	r3, [r6, #0]
	status = FLASH_WaitForLastOperation(1000);
 8004e50:	239f      	movs	r3, #159	; 0x9f
 8004e52:	2210      	movs	r2, #16
 8004e54:	18b9      	adds	r1, r7, r2
 8004e56:	18ce      	adds	r6, r1, r3
 8004e58:	23fa      	movs	r3, #250	; 0xfa
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f001 fc5d 	bl	800671c <FLASH_WaitForLastOperation>
 8004e62:	0003      	movs	r3, r0
 8004e64:	7033      	strb	r3, [r6, #0]

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);
 8004e66:	4b75      	ldr	r3, [pc, #468]	; (800503c <station_am_set+0x214>)
 8004e68:	2220      	movs	r2, #32
 8004e6a:	611a      	str	r2, [r3, #16]
	status = FLASH_WaitForLastOperation(1000);
 8004e6c:	239f      	movs	r3, #159	; 0x9f
 8004e6e:	2210      	movs	r2, #16
 8004e70:	18b9      	adds	r1, r7, r2
 8004e72:	18ce      	adds	r6, r1, r3
 8004e74:	23fa      	movs	r3, #250	; 0xfa
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f001 fc4f 	bl	800671c <FLASH_WaitForLastOperation>
 8004e7e:	0003      	movs	r3, r0
 8004e80:	7033      	strb	r3, [r6, #0]
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004e82:	4b6e      	ldr	r3, [pc, #440]	; (800503c <station_am_set+0x214>)
 8004e84:	695a      	ldr	r2, [r3, #20]
 8004e86:	4b6d      	ldr	r3, [pc, #436]	; (800503c <station_am_set+0x214>)
 8004e88:	2102      	movs	r1, #2
 8004e8a:	438a      	bics	r2, r1
 8004e8c:	615a      	str	r2, [r3, #20]
	status = FLASH_WaitForLastOperation(1000);
 8004e8e:	239f      	movs	r3, #159	; 0x9f
 8004e90:	2210      	movs	r2, #16
 8004e92:	18ba      	adds	r2, r7, r2
 8004e94:	18d6      	adds	r6, r2, r3
 8004e96:	23fa      	movs	r3, #250	; 0xfa
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	0018      	movs	r0, r3
 8004e9c:	f001 fc3e 	bl	800671c <FLASH_WaitForLastOperation>
 8004ea0:	0003      	movs	r3, r0
 8004ea2:	7033      	strb	r3, [r6, #0]

	uint64_t stations[7][2]; // address / value
	for (int i = 0; i <= 6; i++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	22a4      	movs	r2, #164	; 0xa4
 8004ea8:	2110      	movs	r1, #16
 8004eaa:	468c      	mov	ip, r1
 8004eac:	44bc      	add	ip, r7
 8004eae:	4462      	add	r2, ip
 8004eb0:	6013      	str	r3, [r2, #0]
 8004eb2:	e03e      	b.n	8004f32 <station_am_set+0x10a>
	{
		uint32_t x = 0x801F000 + 8 * i;
 8004eb4:	21a4      	movs	r1, #164	; 0xa4
 8004eb6:	2010      	movs	r0, #16
 8004eb8:	183b      	adds	r3, r7, r0
 8004eba:	185b      	adds	r3, r3, r1
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a60      	ldr	r2, [pc, #384]	; (8005040 <station_am_set+0x218>)
 8004ec0:	4694      	mov	ip, r2
 8004ec2:	4463      	add	r3, ip
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	2698      	movs	r6, #152	; 0x98
 8004ec8:	183a      	adds	r2, r7, r0
 8004eca:	1992      	adds	r2, r2, r6
 8004ecc:	6013      	str	r3, [r2, #0]
		stations[i][0] = x;
 8004ece:	183b      	adds	r3, r7, r0
 8004ed0:	199b      	adds	r3, r3, r6
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	60bb      	str	r3, [r7, #8]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	60fb      	str	r3, [r7, #12]
 8004eda:	2328      	movs	r3, #40	; 0x28
 8004edc:	183a      	adds	r2, r7, r0
 8004ede:	18d2      	adds	r2, r2, r3
 8004ee0:	0008      	movs	r0, r1
 8004ee2:	2310      	movs	r3, #16
 8004ee4:	469c      	mov	ip, r3
 8004ee6:	44bc      	add	ip, r7
 8004ee8:	4461      	add	r1, ip
 8004eea:	680b      	ldr	r3, [r1, #0]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	18d3      	adds	r3, r2, r3
 8004ef0:	68b9      	ldr	r1, [r7, #8]
 8004ef2:	68fa      	ldr	r2, [r7, #12]
 8004ef4:	6019      	str	r1, [r3, #0]
 8004ef6:	605a      	str	r2, [r3, #4]
		stations[i][1] = *(uint32_t*)x;
 8004ef8:	2110      	movs	r1, #16
 8004efa:	187b      	adds	r3, r7, r1
 8004efc:	199a      	adds	r2, r3, r6
 8004efe:	6813      	ldr	r3, [r2, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	603b      	str	r3, [r7, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	2328      	movs	r3, #40	; 0x28
 8004f0a:	187a      	adds	r2, r7, r1
 8004f0c:	18d2      	adds	r2, r2, r3
 8004f0e:	000e      	movs	r6, r1
 8004f10:	187b      	adds	r3, r7, r1
 8004f12:	181b      	adds	r3, r3, r0
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	3308      	adds	r3, #8
 8004f1c:	6839      	ldr	r1, [r7, #0]
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	6019      	str	r1, [r3, #0]
 8004f22:	605a      	str	r2, [r3, #4]
	for (int i = 0; i <= 6; i++)
 8004f24:	19bb      	adds	r3, r7, r6
 8004f26:	181b      	adds	r3, r3, r0
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	19ba      	adds	r2, r7, r6
 8004f2e:	1812      	adds	r2, r2, r0
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	23a4      	movs	r3, #164	; 0xa4
 8004f34:	2210      	movs	r2, #16
 8004f36:	4694      	mov	ip, r2
 8004f38:	44bc      	add	ip, r7
 8004f3a:	4463      	add	r3, ip
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	ddb8      	ble.n	8004eb4 <station_am_set+0x8c>
	}
	stations[number][1] = (frequency << 16) + dutycycle;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	041a      	lsls	r2, r3, #16
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	18d2      	adds	r2, r2, r3
 8004f4a:	230f      	movs	r3, #15
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	468c      	mov	ip, r1
 8004f50:	44bc      	add	ip, r7
 8004f52:	4463      	add	r3, ip
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	0014      	movs	r4, r2
 8004f58:	2200      	movs	r2, #0
 8004f5a:	0015      	movs	r5, r2
 8004f5c:	2228      	movs	r2, #40	; 0x28
 8004f5e:	2110      	movs	r1, #16
 8004f60:	468c      	mov	ip, r1
 8004f62:	44bc      	add	ip, r7
 8004f64:	4462      	add	r2, ip
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	18d3      	adds	r3, r2, r3
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	601c      	str	r4, [r3, #0]
 8004f6e:	605d      	str	r5, [r3, #4]

	FLASH_EraseInitTypeDef eraseInit =
 8004f70:	2118      	movs	r1, #24
 8004f72:	2610      	movs	r6, #16
 8004f74:	19bb      	adds	r3, r7, r6
 8004f76:	185b      	adds	r3, r3, r1
 8004f78:	4a32      	ldr	r2, [pc, #200]	; (8005044 <station_am_set+0x21c>)
 8004f7a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004f7c:	c331      	stmia	r3!, {r0, r4, r5}
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	601a      	str	r2, [r3, #0]
		.Banks = FLASH_BANK_1,
		.Page = 62,
		.NbPages = 1
	};

	uint32_t pageEraseError = 0;
 8004f82:	2300      	movs	r3, #0
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
	status = HAL_FLASHEx_Erase(&eraseInit, &pageEraseError);
 8004f86:	239f      	movs	r3, #159	; 0x9f
 8004f88:	19ba      	adds	r2, r7, r6
 8004f8a:	18d4      	adds	r4, r2, r3
 8004f8c:	2314      	movs	r3, #20
 8004f8e:	19ba      	adds	r2, r7, r6
 8004f90:	18d2      	adds	r2, r2, r3
 8004f92:	19bb      	adds	r3, r7, r6
 8004f94:	185b      	adds	r3, r3, r1
 8004f96:	0011      	movs	r1, r2
 8004f98:	0018      	movs	r0, r3
 8004f9a:	f001 fc2d 	bl	80067f8 <HAL_FLASHEx_Erase>
 8004f9e:	0003      	movs	r3, r0
 8004fa0:	7023      	strb	r3, [r4, #0]

	for (int i = 0; i <= 6; i++)
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	22a0      	movs	r2, #160	; 0xa0
 8004fa6:	2110      	movs	r1, #16
 8004fa8:	468c      	mov	ip, r1
 8004faa:	44bc      	add	ip, r7
 8004fac:	4462      	add	r2, ip
 8004fae:	6013      	str	r3, [r2, #0]
 8004fb0:	e030      	b.n	8005014 <station_am_set+0x1ec>
	{
		status = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)stations[i][0], stations[i][1]);
 8004fb2:	2028      	movs	r0, #40	; 0x28
 8004fb4:	2410      	movs	r4, #16
 8004fb6:	193b      	adds	r3, r7, r4
 8004fb8:	181a      	adds	r2, r3, r0
 8004fba:	25a0      	movs	r5, #160	; 0xa0
 8004fbc:	193b      	adds	r3, r7, r4
 8004fbe:	195b      	adds	r3, r3, r5
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	18d3      	adds	r3, r2, r3
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	0011      	movs	r1, r2
 8004fcc:	193b      	adds	r3, r7, r4
 8004fce:	181a      	adds	r2, r3, r0
 8004fd0:	193b      	adds	r3, r7, r4
 8004fd2:	195b      	adds	r3, r3, r5
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	3308      	adds	r3, #8
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	269f      	movs	r6, #159	; 0x9f
 8004fe2:	1938      	adds	r0, r7, r4
 8004fe4:	1984      	adds	r4, r0, r6
 8004fe6:	2001      	movs	r0, #1
 8004fe8:	f001 fb0a 	bl	8006600 <HAL_FLASH_Program>
 8004fec:	0003      	movs	r3, r0
 8004fee:	7023      	strb	r3, [r4, #0]
		status = FLASH_WaitForLastOperation(1000);
 8004ff0:	2410      	movs	r4, #16
 8004ff2:	193b      	adds	r3, r7, r4
 8004ff4:	199c      	adds	r4, r3, r6
 8004ff6:	23fa      	movs	r3, #250	; 0xfa
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	0018      	movs	r0, r3
 8004ffc:	f001 fb8e 	bl	800671c <FLASH_WaitForLastOperation>
 8005000:	0003      	movs	r3, r0
 8005002:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i <= 6; i++)
 8005004:	2410      	movs	r4, #16
 8005006:	193b      	adds	r3, r7, r4
 8005008:	195b      	adds	r3, r3, r5
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	193a      	adds	r2, r7, r4
 8005010:	1952      	adds	r2, r2, r5
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	23a0      	movs	r3, #160	; 0xa0
 8005016:	2210      	movs	r2, #16
 8005018:	4694      	mov	ip, r2
 800501a:	44bc      	add	ip, r7
 800501c:	4463      	add	r3, ip
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b06      	cmp	r3, #6
 8005022:	ddc6      	ble.n	8004fb2 <station_am_set+0x18a>
	}

	status = HAL_FLASH_Lock();
 8005024:	239f      	movs	r3, #159	; 0x9f
 8005026:	2210      	movs	r2, #16
 8005028:	18ba      	adds	r2, r7, r2
 800502a:	18d4      	adds	r4, r2, r3
 800502c:	f001 fb5a 	bl	80066e4 <HAL_FLASH_Lock>
 8005030:	0003      	movs	r3, r0
 8005032:	7023      	strb	r3, [r4, #0]
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46bd      	mov	sp, r7
 8005038:	b02f      	add	sp, #188	; 0xbc
 800503a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800503c:	40022000 	.word	0x40022000
 8005040:	01003e00 	.word	0x01003e00
 8005044:	08009820 	.word	0x08009820

08005048 <station_led>:

void station_led(int number)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b082      	sub	sp, #8
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_MAN_Pin, number == 0);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	425a      	negs	r2, r3
 8005054:	4153      	adcs	r3, r2
 8005056:	b2db      	uxtb	r3, r3
 8005058:	001a      	movs	r2, r3
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <station_led+0xac>)
 800505c:	2104      	movs	r1, #4
 800505e:	0018      	movs	r0, r3
 8005060:	f001 fdef 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_S1_Pin, number == 1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3b01      	subs	r3, #1
 8005068:	425a      	negs	r2, r3
 800506a:	4153      	adcs	r3, r2
 800506c:	b2db      	uxtb	r3, r3
 800506e:	001a      	movs	r2, r3
 8005070:	23a0      	movs	r3, #160	; 0xa0
 8005072:	05db      	lsls	r3, r3, #23
 8005074:	2140      	movs	r1, #64	; 0x40
 8005076:	0018      	movs	r0, r3
 8005078:	f001 fde3 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_S2_Pin, number == 2);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	3b02      	subs	r3, #2
 8005080:	425a      	negs	r2, r3
 8005082:	4153      	adcs	r3, r2
 8005084:	b2db      	uxtb	r3, r3
 8005086:	001a      	movs	r2, r3
 8005088:	23a0      	movs	r3, #160	; 0xa0
 800508a:	05db      	lsls	r3, r3, #23
 800508c:	2180      	movs	r1, #128	; 0x80
 800508e:	0018      	movs	r0, r3
 8005090:	f001 fdd7 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_S3_Pin, number == 3);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3b03      	subs	r3, #3
 8005098:	425a      	negs	r2, r3
 800509a:	4153      	adcs	r3, r2
 800509c:	b2db      	uxtb	r3, r3
 800509e:	001a      	movs	r2, r3
 80050a0:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <station_led+0xb0>)
 80050a2:	2110      	movs	r1, #16
 80050a4:	0018      	movs	r0, r3
 80050a6:	f001 fdcc 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_S4_Pin, number == 4);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	425a      	negs	r2, r3
 80050b0:	4153      	adcs	r3, r2
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	001a      	movs	r2, r3
 80050b6:	4b10      	ldr	r3, [pc, #64]	; (80050f8 <station_led+0xb0>)
 80050b8:	2120      	movs	r1, #32
 80050ba:	0018      	movs	r0, r3
 80050bc:	f001 fdc1 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_S5_Pin, number == 5);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3b05      	subs	r3, #5
 80050c4:	425a      	negs	r2, r3
 80050c6:	4153      	adcs	r3, r2
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	001a      	movs	r2, r3
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <station_led+0xac>)
 80050ce:	2101      	movs	r1, #1
 80050d0:	0018      	movs	r0, r3
 80050d2:	f001 fdb6 	bl	8006c42 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_S6_Pin, number == 6);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	3b06      	subs	r3, #6
 80050da:	425a      	negs	r2, r3
 80050dc:	4153      	adcs	r3, r2
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	001a      	movs	r2, r3
 80050e2:	4b04      	ldr	r3, [pc, #16]	; (80050f4 <station_led+0xac>)
 80050e4:	2102      	movs	r1, #2
 80050e6:	0018      	movs	r0, r3
 80050e8:	f001 fdab 	bl	8006c42 <HAL_GPIO_WritePin>
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	50000400 	.word	0x50000400
 80050f8:	50000800 	.word	0x50000800

080050fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005102:	4b11      	ldr	r3, [pc, #68]	; (8005148 <HAL_MspInit+0x4c>)
 8005104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005106:	4b10      	ldr	r3, [pc, #64]	; (8005148 <HAL_MspInit+0x4c>)
 8005108:	2101      	movs	r1, #1
 800510a:	430a      	orrs	r2, r1
 800510c:	641a      	str	r2, [r3, #64]	; 0x40
 800510e:	4b0e      	ldr	r3, [pc, #56]	; (8005148 <HAL_MspInit+0x4c>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	2201      	movs	r2, #1
 8005114:	4013      	ands	r3, r2
 8005116:	607b      	str	r3, [r7, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b0b      	ldr	r3, [pc, #44]	; (8005148 <HAL_MspInit+0x4c>)
 800511c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800511e:	4b0a      	ldr	r3, [pc, #40]	; (8005148 <HAL_MspInit+0x4c>)
 8005120:	2180      	movs	r1, #128	; 0x80
 8005122:	0549      	lsls	r1, r1, #21
 8005124:	430a      	orrs	r2, r1
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c
 8005128:	4b07      	ldr	r3, [pc, #28]	; (8005148 <HAL_MspInit+0x4c>)
 800512a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800512c:	2380      	movs	r3, #128	; 0x80
 800512e:	055b      	lsls	r3, r3, #21
 8005130:	4013      	ands	r3, r2
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005136:	23c0      	movs	r3, #192	; 0xc0
 8005138:	00db      	lsls	r3, r3, #3
 800513a:	0018      	movs	r0, r3
 800513c:	f000 fb36 	bl	80057ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005140:	46c0      	nop			; (mov r8, r8)
 8005142:	46bd      	mov	sp, r7
 8005144:	b002      	add	sp, #8
 8005146:	bd80      	pop	{r7, pc}
 8005148:	40021000 	.word	0x40021000

0800514c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b08b      	sub	sp, #44	; 0x2c
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005154:	2414      	movs	r4, #20
 8005156:	193b      	adds	r3, r7, r4
 8005158:	0018      	movs	r0, r3
 800515a:	2314      	movs	r3, #20
 800515c:	001a      	movs	r2, r3
 800515e:	2100      	movs	r1, #0
 8005160:	f004 f98c 	bl	800947c <memset>
  if(hadc->Instance==ADC1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_ADC_MspInit+0x80>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d129      	bne.n	80051c2 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 8005170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005172:	4b17      	ldr	r3, [pc, #92]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	0349      	lsls	r1, r1, #13
 8005178:	430a      	orrs	r2, r1
 800517a:	641a      	str	r2, [r3, #64]	; 0x40
 800517c:	4b14      	ldr	r3, [pc, #80]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	2380      	movs	r3, #128	; 0x80
 8005182:	035b      	lsls	r3, r3, #13
 8005184:	4013      	ands	r3, r2
 8005186:	613b      	str	r3, [r7, #16]
 8005188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800518a:	4b11      	ldr	r3, [pc, #68]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 800518c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518e:	4b10      	ldr	r3, [pc, #64]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 8005190:	2101      	movs	r1, #1
 8005192:	430a      	orrs	r2, r1
 8005194:	635a      	str	r2, [r3, #52]	; 0x34
 8005196:	4b0e      	ldr	r3, [pc, #56]	; (80051d0 <HAL_ADC_MspInit+0x84>)
 8005198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519a:	2201      	movs	r2, #1
 800519c:	4013      	ands	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
 80051a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = FREQUENCY_CALIBRATION_Pin;
 80051a2:	193b      	adds	r3, r7, r4
 80051a4:	2201      	movs	r2, #1
 80051a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051a8:	193b      	adds	r3, r7, r4
 80051aa:	2203      	movs	r2, #3
 80051ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ae:	193b      	adds	r3, r7, r4
 80051b0:	2200      	movs	r2, #0
 80051b2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FREQUENCY_CALIBRATION_GPIO_Port, &GPIO_InitStruct);
 80051b4:	193a      	adds	r2, r7, r4
 80051b6:	23a0      	movs	r3, #160	; 0xa0
 80051b8:	05db      	lsls	r3, r3, #23
 80051ba:	0011      	movs	r1, r2
 80051bc:	0018      	movs	r0, r3
 80051be:	f001 fbbf 	bl	8006940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	46bd      	mov	sp, r7
 80051c6:	b00b      	add	sp, #44	; 0x2c
 80051c8:	bd90      	pop	{r4, r7, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	40012400 	.word	0x40012400
 80051d0:	40021000 	.word	0x40021000

080051d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a0d      	ldr	r2, [pc, #52]	; (8005218 <HAL_RTC_MspInit+0x44>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d114      	bne.n	8005210 <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <HAL_RTC_MspInit+0x48>)
 80051e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80051ea:	4b0c      	ldr	r3, [pc, #48]	; (800521c <HAL_RTC_MspInit+0x48>)
 80051ec:	2180      	movs	r1, #128	; 0x80
 80051ee:	0209      	lsls	r1, r1, #8
 80051f0:	430a      	orrs	r2, r1
 80051f2:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80051f4:	4b09      	ldr	r3, [pc, #36]	; (800521c <HAL_RTC_MspInit+0x48>)
 80051f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051f8:	4b08      	ldr	r3, [pc, #32]	; (800521c <HAL_RTC_MspInit+0x48>)
 80051fa:	2180      	movs	r1, #128	; 0x80
 80051fc:	00c9      	lsls	r1, r1, #3
 80051fe:	430a      	orrs	r2, r1
 8005200:	63da      	str	r2, [r3, #60]	; 0x3c
 8005202:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RTC_MspInit+0x48>)
 8005204:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005206:	2380      	movs	r3, #128	; 0x80
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4013      	ands	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005210:	46c0      	nop			; (mov r8, r8)
 8005212:	46bd      	mov	sp, r7
 8005214:	b004      	add	sp, #16
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40002800 	.word	0x40002800
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005220:	b590      	push	{r4, r7, lr}
 8005222:	b091      	sub	sp, #68	; 0x44
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005228:	242c      	movs	r4, #44	; 0x2c
 800522a:	193b      	adds	r3, r7, r4
 800522c:	0018      	movs	r0, r3
 800522e:	2314      	movs	r3, #20
 8005230:	001a      	movs	r2, r3
 8005232:	2100      	movs	r1, #0
 8005234:	f004 f922 	bl	800947c <memset>
  if(htim_base->Instance==TIM1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a86      	ldr	r2, [pc, #536]	; (8005458 <HAL_TIM_Base_MspInit+0x238>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d142      	bne.n	80052c8 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005242:	4b86      	ldr	r3, [pc, #536]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005244:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005246:	4b85      	ldr	r3, [pc, #532]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	0109      	lsls	r1, r1, #4
 800524c:	430a      	orrs	r2, r1
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
 8005250:	4b82      	ldr	r3, [pc, #520]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005252:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005254:	2380      	movs	r3, #128	; 0x80
 8005256:	011b      	lsls	r3, r3, #4
 8005258:	4013      	ands	r3, r2
 800525a:	62bb      	str	r3, [r7, #40]	; 0x28
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800525e:	4b7f      	ldr	r3, [pc, #508]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	4b7e      	ldr	r3, [pc, #504]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005264:	2101      	movs	r1, #1
 8005266:	430a      	orrs	r2, r1
 8005268:	635a      	str	r2, [r3, #52]	; 0x34
 800526a:	4b7c      	ldr	r3, [pc, #496]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 800526c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526e:	2201      	movs	r2, #1
 8005270:	4013      	ands	r3, r2
 8005272:	627b      	str	r3, [r7, #36]	; 0x24
 8005274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA12 [PA10]     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = AM_FREQUENCY_Pin;
 8005276:	193b      	adds	r3, r7, r4
 8005278:	2280      	movs	r2, #128	; 0x80
 800527a:	0152      	lsls	r2, r2, #5
 800527c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800527e:	0021      	movs	r1, r4
 8005280:	187b      	adds	r3, r7, r1
 8005282:	2202      	movs	r2, #2
 8005284:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	187b      	adds	r3, r7, r1
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	187b      	adds	r3, r7, r1
 800528e:	2200      	movs	r2, #0
 8005290:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005292:	187b      	adds	r3, r7, r1
 8005294:	2202      	movs	r2, #2
 8005296:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(AM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 8005298:	187a      	adds	r2, r7, r1
 800529a:	23a0      	movs	r3, #160	; 0xa0
 800529c:	05db      	lsls	r3, r3, #23
 800529e:	0011      	movs	r1, r2
 80052a0:	0018      	movs	r0, r3
 80052a2:	f001 fb4d 	bl	8006940 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80052a6:	2200      	movs	r2, #0
 80052a8:	2100      	movs	r1, #0
 80052aa:	200d      	movs	r0, #13
 80052ac:	f001 f976 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80052b0:	200d      	movs	r0, #13
 80052b2:	f001 f988 	bl	80065c6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80052b6:	2200      	movs	r2, #0
 80052b8:	2100      	movs	r1, #0
 80052ba:	200e      	movs	r0, #14
 80052bc:	f001 f96e 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80052c0:	200e      	movs	r0, #14
 80052c2:	f001 f980 	bl	80065c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80052c6:	e0c2      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM3)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a64      	ldr	r2, [pc, #400]	; (8005460 <HAL_TIM_Base_MspInit+0x240>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d136      	bne.n	8005340 <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80052d2:	4b62      	ldr	r3, [pc, #392]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d6:	4b61      	ldr	r3, [pc, #388]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052d8:	2102      	movs	r1, #2
 80052da:	430a      	orrs	r2, r1
 80052dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80052de:	4b5f      	ldr	r3, [pc, #380]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	2202      	movs	r2, #2
 80052e4:	4013      	ands	r3, r2
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80052ea:	4b5c      	ldr	r3, [pc, #368]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ee:	4b5b      	ldr	r3, [pc, #364]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052f0:	2108      	movs	r1, #8
 80052f2:	430a      	orrs	r2, r1
 80052f4:	635a      	str	r2, [r3, #52]	; 0x34
 80052f6:	4b59      	ldr	r3, [pc, #356]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80052f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fa:	2208      	movs	r2, #8
 80052fc:	4013      	ands	r3, r2
 80052fe:	61fb      	str	r3, [r7, #28]
 8005300:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FM_FREQUENCY_Pin;
 8005302:	212c      	movs	r1, #44	; 0x2c
 8005304:	187b      	adds	r3, r7, r1
 8005306:	2204      	movs	r2, #4
 8005308:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	187b      	adds	r3, r7, r1
 800530c:	2202      	movs	r2, #2
 800530e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	187b      	adds	r3, r7, r1
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005316:	187b      	adds	r3, r7, r1
 8005318:	2200      	movs	r2, #0
 800531a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800531c:	187b      	adds	r3, r7, r1
 800531e:	2201      	movs	r2, #1
 8005320:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 8005322:	187b      	adds	r3, r7, r1
 8005324:	4a4f      	ldr	r2, [pc, #316]	; (8005464 <HAL_TIM_Base_MspInit+0x244>)
 8005326:	0019      	movs	r1, r3
 8005328:	0010      	movs	r0, r2
 800532a:	f001 fb09 	bl	8006940 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800532e:	2200      	movs	r2, #0
 8005330:	2100      	movs	r1, #0
 8005332:	2010      	movs	r0, #16
 8005334:	f001 f932 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005338:	2010      	movs	r0, #16
 800533a:	f001 f944 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 800533e:	e086      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM6)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a48      	ldr	r2, [pc, #288]	; (8005468 <HAL_TIM_Base_MspInit+0x248>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d114      	bne.n	8005374 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800534a:	4b44      	ldr	r3, [pc, #272]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 800534c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800534e:	4b43      	ldr	r3, [pc, #268]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005350:	2110      	movs	r1, #16
 8005352:	430a      	orrs	r2, r1
 8005354:	63da      	str	r2, [r3, #60]	; 0x3c
 8005356:	4b41      	ldr	r3, [pc, #260]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800535a:	2210      	movs	r2, #16
 800535c:	4013      	ands	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
 8005360:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8005362:	2200      	movs	r2, #0
 8005364:	2100      	movs	r1, #0
 8005366:	2011      	movs	r0, #17
 8005368:	f001 f918 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 800536c:	2011      	movs	r0, #17
 800536e:	f001 f92a 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 8005372:	e06c      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM7)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3c      	ldr	r2, [pc, #240]	; (800546c <HAL_TIM_Base_MspInit+0x24c>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d114      	bne.n	80053a8 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800537e:	4b37      	ldr	r3, [pc, #220]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005380:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005384:	2120      	movs	r1, #32
 8005386:	430a      	orrs	r2, r1
 8005388:	63da      	str	r2, [r3, #60]	; 0x3c
 800538a:	4b34      	ldr	r3, [pc, #208]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 800538c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538e:	2220      	movs	r2, #32
 8005390:	4013      	ands	r3, r2
 8005392:	617b      	str	r3, [r7, #20]
 8005394:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005396:	2200      	movs	r2, #0
 8005398:	2100      	movs	r1, #0
 800539a:	2012      	movs	r0, #18
 800539c:	f001 f8fe 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80053a0:	2012      	movs	r0, #18
 80053a2:	f001 f910 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 80053a6:	e052      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM14)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a30      	ldr	r2, [pc, #192]	; (8005470 <HAL_TIM_Base_MspInit+0x250>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d116      	bne.n	80053e0 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80053b2:	4b2a      	ldr	r3, [pc, #168]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053b6:	4b29      	ldr	r3, [pc, #164]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053b8:	2180      	movs	r1, #128	; 0x80
 80053ba:	0209      	lsls	r1, r1, #8
 80053bc:	430a      	orrs	r2, r1
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
 80053c0:	4b26      	ldr	r3, [pc, #152]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053c4:	2380      	movs	r3, #128	; 0x80
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	4013      	ands	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	2013      	movs	r0, #19
 80053d4:	f001 f8e2 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80053d8:	2013      	movs	r0, #19
 80053da:	f001 f8f4 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 80053de:	e036      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM15)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a23      	ldr	r2, [pc, #140]	; (8005474 <HAL_TIM_Base_MspInit+0x254>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d116      	bne.n	8005418 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80053ea:	4b1c      	ldr	r3, [pc, #112]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053ee:	4b1b      	ldr	r3, [pc, #108]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053f0:	2180      	movs	r1, #128	; 0x80
 80053f2:	0249      	lsls	r1, r1, #9
 80053f4:	430a      	orrs	r2, r1
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
 80053f8:	4b18      	ldr	r3, [pc, #96]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 80053fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	025b      	lsls	r3, r3, #9
 8005400:	4013      	ands	r3, r2
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8005406:	2200      	movs	r2, #0
 8005408:	2100      	movs	r1, #0
 800540a:	2014      	movs	r0, #20
 800540c:	f001 f8c6 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8005410:	2014      	movs	r0, #20
 8005412:	f001 f8d8 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 8005416:	e01a      	b.n	800544e <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM16)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a16      	ldr	r2, [pc, #88]	; (8005478 <HAL_TIM_Base_MspInit+0x258>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d115      	bne.n	800544e <HAL_TIM_Base_MspInit+0x22e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005422:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005424:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005426:	4b0d      	ldr	r3, [pc, #52]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005428:	2180      	movs	r1, #128	; 0x80
 800542a:	0289      	lsls	r1, r1, #10
 800542c:	430a      	orrs	r2, r1
 800542e:	641a      	str	r2, [r3, #64]	; 0x40
 8005430:	4b0a      	ldr	r3, [pc, #40]	; (800545c <HAL_TIM_Base_MspInit+0x23c>)
 8005432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	4013      	ands	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800543e:	2200      	movs	r2, #0
 8005440:	2100      	movs	r1, #0
 8005442:	2015      	movs	r0, #21
 8005444:	f001 f8aa 	bl	800659c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005448:	2015      	movs	r0, #21
 800544a:	f001 f8bc 	bl	80065c6 <HAL_NVIC_EnableIRQ>
}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	46bd      	mov	sp, r7
 8005452:	b011      	add	sp, #68	; 0x44
 8005454:	bd90      	pop	{r4, r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	40012c00 	.word	0x40012c00
 800545c:	40021000 	.word	0x40021000
 8005460:	40000400 	.word	0x40000400
 8005464:	50000c00 	.word	0x50000c00
 8005468:	40001000 	.word	0x40001000
 800546c:	40001400 	.word	0x40001400
 8005470:	40002000 	.word	0x40002000
 8005474:	40014000 	.word	0x40014000
 8005478:	40014400 	.word	0x40014400

0800547c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800547c:	b590      	push	{r4, r7, lr}
 800547e:	b089      	sub	sp, #36	; 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005484:	240c      	movs	r4, #12
 8005486:	193b      	adds	r3, r7, r4
 8005488:	0018      	movs	r0, r3
 800548a:	2314      	movs	r3, #20
 800548c:	001a      	movs	r2, r3
 800548e:	2100      	movs	r1, #0
 8005490:	f003 fff4 	bl	800947c <memset>
  if(htim->Instance==TIM15)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a14      	ldr	r2, [pc, #80]	; (80054ec <HAL_TIM_MspPostInit+0x70>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d121      	bne.n	80054e2 <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800549e:	4b14      	ldr	r3, [pc, #80]	; (80054f0 <HAL_TIM_MspPostInit+0x74>)
 80054a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80054a2:	4b13      	ldr	r3, [pc, #76]	; (80054f0 <HAL_TIM_MspPostInit+0x74>)
 80054a4:	2104      	movs	r1, #4
 80054a6:	430a      	orrs	r2, r1
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <HAL_TIM_MspPostInit+0x74>)
 80054ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ae:	2204      	movs	r2, #4
 80054b0:	4013      	ands	r3, r2
 80054b2:	60bb      	str	r3, [r7, #8]
 80054b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PC2     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054b6:	0021      	movs	r1, r4
 80054b8:	187b      	adds	r3, r7, r1
 80054ba:	2204      	movs	r2, #4
 80054bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	187b      	adds	r3, r7, r1
 80054c0:	2202      	movs	r2, #2
 80054c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054c4:	187b      	adds	r3, r7, r1
 80054c6:	2200      	movs	r2, #0
 80054c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ca:	187b      	adds	r3, r7, r1
 80054cc:	2200      	movs	r2, #0
 80054ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80054d0:	187b      	adds	r3, r7, r1
 80054d2:	2202      	movs	r2, #2
 80054d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054d6:	187b      	adds	r3, r7, r1
 80054d8:	4a06      	ldr	r2, [pc, #24]	; (80054f4 <HAL_TIM_MspPostInit+0x78>)
 80054da:	0019      	movs	r1, r3
 80054dc:	0010      	movs	r0, r2
 80054de:	f001 fa2f 	bl	8006940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	46bd      	mov	sp, r7
 80054e6:	b009      	add	sp, #36	; 0x24
 80054e8:	bd90      	pop	{r4, r7, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	40014000 	.word	0x40014000
 80054f0:	40021000 	.word	0x40021000
 80054f4:	50000800 	.word	0x50000800

080054f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80054fc:	f002 f8b8 	bl	8007670 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005500:	e7fe      	b.n	8005500 <NMI_Handler+0x8>

08005502 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005502:	b580      	push	{r7, lr}
 8005504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005506:	e7fe      	b.n	8005506 <HardFault_Handler+0x4>

08005508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}

08005512 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005512:	b580      	push	{r7, lr}
 8005514:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005516:	46c0      	nop			; (mov r8, r8)
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005520:	f000 f904 	bl	800572c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005524:	46c0      	nop			; (mov r8, r8)
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005530:	4b03      	ldr	r3, [pc, #12]	; (8005540 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8005532:	0018      	movs	r0, r3
 8005534:	f002 ff44 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005538:	46c0      	nop			; (mov r8, r8)
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	200002f8 	.word	0x200002f8

08005544 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005548:	4b03      	ldr	r3, [pc, #12]	; (8005558 <TIM1_CC_IRQHandler+0x14>)
 800554a:	0018      	movs	r0, r3
 800554c:	f002 ff38 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	200002f8 	.word	0x200002f8

0800555c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005560:	4b03      	ldr	r3, [pc, #12]	; (8005570 <TIM3_IRQHandler+0x14>)
 8005562:	0018      	movs	r0, r3
 8005564:	f002 ff2c 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	46c0      	nop			; (mov r8, r8)
 8005570:	200001d0 	.word	0x200001d0

08005574 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005578:	4b03      	ldr	r3, [pc, #12]	; (8005588 <TIM6_IRQHandler+0x14>)
 800557a:	0018      	movs	r0, r3
 800557c:	f002 ff20 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8005580:	46c0      	nop			; (mov r8, r8)
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	200002ac 	.word	0x200002ac

0800558c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <TIM7_IRQHandler+0x14>)
 8005592:	0018      	movs	r0, r3
 8005594:	f002 ff14 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005598:	46c0      	nop			; (mov r8, r8)
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	200003dc 	.word	0x200003dc

080055a4 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <TIM14_IRQHandler+0x14>)
 80055aa:	0018      	movs	r0, r3
 80055ac:	f002 ff08 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 80055b0:	46c0      	nop			; (mov r8, r8)
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	20000344 	.word	0x20000344

080055bc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80055c0:	4b03      	ldr	r3, [pc, #12]	; (80055d0 <TIM15_IRQHandler+0x14>)
 80055c2:	0018      	movs	r0, r3
 80055c4:	f002 fefc 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	20000184 	.word	0x20000184

080055d4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80055d8:	4b03      	ldr	r3, [pc, #12]	; (80055e8 <TIM16_IRQHandler+0x14>)
 80055da:	0018      	movs	r0, r3
 80055dc:	f002 fef0 	bl	80083c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80055e0:	46c0      	nop			; (mov r8, r8)
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	46c0      	nop			; (mov r8, r8)
 80055e8:	20000390 	.word	0x20000390

080055ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055f0:	4b03      	ldr	r3, [pc, #12]	; (8005600 <SystemInit+0x14>)
 80055f2:	2280      	movs	r2, #128	; 0x80
 80055f4:	0512      	lsls	r2, r2, #20
 80055f6:	609a      	str	r2, [r3, #8]
#endif
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	46c0      	nop			; (mov r8, r8)
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005604:	480d      	ldr	r0, [pc, #52]	; (800563c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005606:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005608:	f7ff fff0 	bl	80055ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800560c:	480c      	ldr	r0, [pc, #48]	; (8005640 <LoopForever+0x6>)
  ldr r1, =_edata
 800560e:	490d      	ldr	r1, [pc, #52]	; (8005644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005610:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <LoopForever+0xe>)
  movs r3, #0
 8005612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005614:	e002      	b.n	800561c <LoopCopyDataInit>

08005616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800561a:	3304      	adds	r3, #4

0800561c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800561c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800561e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005620:	d3f9      	bcc.n	8005616 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005622:	4a0a      	ldr	r2, [pc, #40]	; (800564c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005624:	4c0a      	ldr	r4, [pc, #40]	; (8005650 <LoopForever+0x16>)
  movs r3, #0
 8005626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005628:	e001      	b.n	800562e <LoopFillZerobss>

0800562a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800562a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800562c:	3204      	adds	r2, #4

0800562e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800562e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005630:	d3fb      	bcc.n	800562a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005632:	f003 feff 	bl	8009434 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005636:	f7fd ff75 	bl	8003524 <main>

0800563a <LoopForever>:

LoopForever:
  b LoopForever
 800563a:	e7fe      	b.n	800563a <LoopForever>
  ldr   r0, =_estack
 800563c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005644:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8005648:	080099c8 	.word	0x080099c8
  ldr r2, =_sbss
 800564c:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8005650:	2000042c 	.word	0x2000042c

08005654 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005654:	e7fe      	b.n	8005654 <ADC1_IRQHandler>
	...

08005658 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800565e:	1dfb      	adds	r3, r7, #7
 8005660:	2200      	movs	r2, #0
 8005662:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005664:	4b0b      	ldr	r3, [pc, #44]	; (8005694 <HAL_Init+0x3c>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <HAL_Init+0x3c>)
 800566a:	2180      	movs	r1, #128	; 0x80
 800566c:	0049      	lsls	r1, r1, #1
 800566e:	430a      	orrs	r2, r1
 8005670:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005672:	2000      	movs	r0, #0
 8005674:	f000 f810 	bl	8005698 <HAL_InitTick>
 8005678:	1e03      	subs	r3, r0, #0
 800567a:	d003      	beq.n	8005684 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800567c:	1dfb      	adds	r3, r7, #7
 800567e:	2201      	movs	r2, #1
 8005680:	701a      	strb	r2, [r3, #0]
 8005682:	e001      	b.n	8005688 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005684:	f7ff fd3a 	bl	80050fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005688:	1dfb      	adds	r3, r7, #7
 800568a:	781b      	ldrb	r3, [r3, #0]
}
 800568c:	0018      	movs	r0, r3
 800568e:	46bd      	mov	sp, r7
 8005690:	b002      	add	sp, #8
 8005692:	bd80      	pop	{r7, pc}
 8005694:	40022000 	.word	0x40022000

08005698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005698:	b590      	push	{r4, r7, lr}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80056a0:	230f      	movs	r3, #15
 80056a2:	18fb      	adds	r3, r7, r3
 80056a4:	2200      	movs	r2, #0
 80056a6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80056a8:	4b1d      	ldr	r3, [pc, #116]	; (8005720 <HAL_InitTick+0x88>)
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02b      	beq.n	8005708 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80056b0:	4b1c      	ldr	r3, [pc, #112]	; (8005724 <HAL_InitTick+0x8c>)
 80056b2:	681c      	ldr	r4, [r3, #0]
 80056b4:	4b1a      	ldr	r3, [pc, #104]	; (8005720 <HAL_InitTick+0x88>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	0019      	movs	r1, r3
 80056ba:	23fa      	movs	r3, #250	; 0xfa
 80056bc:	0098      	lsls	r0, r3, #2
 80056be:	f7fa fd1f 	bl	8000100 <__udivsi3>
 80056c2:	0003      	movs	r3, r0
 80056c4:	0019      	movs	r1, r3
 80056c6:	0020      	movs	r0, r4
 80056c8:	f7fa fd1a 	bl	8000100 <__udivsi3>
 80056cc:	0003      	movs	r3, r0
 80056ce:	0018      	movs	r0, r3
 80056d0:	f000 ff89 	bl	80065e6 <HAL_SYSTICK_Config>
 80056d4:	1e03      	subs	r3, r0, #0
 80056d6:	d112      	bne.n	80056fe <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b03      	cmp	r3, #3
 80056dc:	d80a      	bhi.n	80056f4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	2301      	movs	r3, #1
 80056e2:	425b      	negs	r3, r3
 80056e4:	2200      	movs	r2, #0
 80056e6:	0018      	movs	r0, r3
 80056e8:	f000 ff58 	bl	800659c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056ec:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <HAL_InitTick+0x90>)
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	e00d      	b.n	8005710 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80056f4:	230f      	movs	r3, #15
 80056f6:	18fb      	adds	r3, r7, r3
 80056f8:	2201      	movs	r2, #1
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e008      	b.n	8005710 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80056fe:	230f      	movs	r3, #15
 8005700:	18fb      	adds	r3, r7, r3
 8005702:	2201      	movs	r2, #1
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e003      	b.n	8005710 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005708:	230f      	movs	r3, #15
 800570a:	18fb      	adds	r3, r7, r3
 800570c:	2201      	movs	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8005710:	230f      	movs	r3, #15
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	781b      	ldrb	r3, [r3, #0]
}
 8005716:	0018      	movs	r0, r3
 8005718:	46bd      	mov	sp, r7
 800571a:	b005      	add	sp, #20
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	46c0      	nop			; (mov r8, r8)
 8005720:	20000028 	.word	0x20000028
 8005724:	20000020 	.word	0x20000020
 8005728:	20000024 	.word	0x20000024

0800572c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_IncTick+0x1c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	001a      	movs	r2, r3
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <HAL_IncTick+0x20>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	18d2      	adds	r2, r2, r3
 800573c:	4b03      	ldr	r3, [pc, #12]	; (800574c <HAL_IncTick+0x20>)
 800573e:	601a      	str	r2, [r3, #0]
}
 8005740:	46c0      	nop			; (mov r8, r8)
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	46c0      	nop			; (mov r8, r8)
 8005748:	20000028 	.word	0x20000028
 800574c:	20000428 	.word	0x20000428

08005750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	af00      	add	r7, sp, #0
  return uwTick;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <HAL_GetTick+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	0018      	movs	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	46c0      	nop			; (mov r8, r8)
 8005760:	20000428 	.word	0x20000428

08005764 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800576c:	f7ff fff0 	bl	8005750 <HAL_GetTick>
 8005770:	0003      	movs	r3, r0
 8005772:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3301      	adds	r3, #1
 800577c:	d005      	beq.n	800578a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800577e:	4b0a      	ldr	r3, [pc, #40]	; (80057a8 <HAL_Delay+0x44>)
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	001a      	movs	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	189b      	adds	r3, r3, r2
 8005788:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	f7ff ffe0 	bl	8005750 <HAL_GetTick>
 8005790:	0002      	movs	r2, r0
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	429a      	cmp	r2, r3
 800579a:	d8f7      	bhi.n	800578c <HAL_Delay+0x28>
  {
  }
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46c0      	nop			; (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	20000028 	.word	0x20000028

080057ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80057b4:	4b06      	ldr	r3, [pc, #24]	; (80057d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a06      	ldr	r2, [pc, #24]	; (80057d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	0019      	movs	r1, r3
 80057be:	4b04      	ldr	r3, [pc, #16]	; (80057d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	46c0      	nop			; (mov r8, r8)
 80057c8:	46bd      	mov	sp, r7
 80057ca:	b002      	add	sp, #8
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	46c0      	nop			; (mov r8, r8)
 80057d0:	40010000 	.word	0x40010000
 80057d4:	fffff9ff 	.word	0xfffff9ff

080057d8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b082      	sub	sp, #8
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
 80057e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a05      	ldr	r2, [pc, #20]	; (80057fc <LL_ADC_SetCommonPathInternalCh+0x24>)
 80057e8:	401a      	ands	r2, r3
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	601a      	str	r2, [r3, #0]
}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	46bd      	mov	sp, r7
 80057f6:	b002      	add	sp, #8
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	46c0      	nop			; (mov r8, r8)
 80057fc:	fe3fffff 	.word	0xfe3fffff

08005800 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	23e0      	movs	r3, #224	; 0xe0
 800580e:	045b      	lsls	r3, r3, #17
 8005810:	4013      	ands	r3, r2
}
 8005812:	0018      	movs	r0, r3
 8005814:	46bd      	mov	sp, r7
 8005816:	b002      	add	sp, #8
 8005818:	bd80      	pop	{r7, pc}

0800581a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b084      	sub	sp, #16
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	2104      	movs	r1, #4
 800582e:	400a      	ands	r2, r1
 8005830:	2107      	movs	r1, #7
 8005832:	4091      	lsls	r1, r2
 8005834:	000a      	movs	r2, r1
 8005836:	43d2      	mvns	r2, r2
 8005838:	401a      	ands	r2, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	2104      	movs	r1, #4
 800583e:	400b      	ands	r3, r1
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4099      	lsls	r1, r3
 8005844:	000b      	movs	r3, r1
 8005846:	431a      	orrs	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800584c:	46c0      	nop			; (mov r8, r8)
 800584e:	46bd      	mov	sp, r7
 8005850:	b004      	add	sp, #16
 8005852:	bd80      	pop	{r7, pc}

08005854 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	23c0      	movs	r3, #192	; 0xc0
 8005862:	011b      	lsls	r3, r3, #4
 8005864:	4013      	ands	r3, r2
 8005866:	d101      	bne.n	800586c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005868:	2301      	movs	r3, #1
 800586a:	e000      	b.n	800586e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800586c:	2300      	movs	r3, #0
}
 800586e:	0018      	movs	r0, r3
 8005870:	46bd      	mov	sp, r7
 8005872:	b002      	add	sp, #8
 8005874:	bd80      	pop	{r7, pc}

08005876 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005876:	b580      	push	{r7, lr}
 8005878:	b084      	sub	sp, #16
 800587a:	af00      	add	r7, sp, #0
 800587c:	60f8      	str	r0, [r7, #12]
 800587e:	60b9      	str	r1, [r7, #8]
 8005880:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005886:	68ba      	ldr	r2, [r7, #8]
 8005888:	211f      	movs	r1, #31
 800588a:	400a      	ands	r2, r1
 800588c:	210f      	movs	r1, #15
 800588e:	4091      	lsls	r1, r2
 8005890:	000a      	movs	r2, r1
 8005892:	43d2      	mvns	r2, r2
 8005894:	401a      	ands	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	0e9b      	lsrs	r3, r3, #26
 800589a:	210f      	movs	r1, #15
 800589c:	4019      	ands	r1, r3
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	201f      	movs	r0, #31
 80058a2:	4003      	ands	r3, r0
 80058a4:	4099      	lsls	r1, r3
 80058a6:	000b      	movs	r3, r1
 80058a8:	431a      	orrs	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b004      	add	sp, #16
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b082      	sub	sp, #8
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	035b      	lsls	r3, r3, #13
 80058c8:	0b5b      	lsrs	r3, r3, #13
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058d0:	46c0      	nop			; (mov r8, r8)
 80058d2:	46bd      	mov	sp, r7
 80058d4:	b002      	add	sp, #8
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	0352      	lsls	r2, r2, #13
 80058ea:	0b52      	lsrs	r2, r2, #13
 80058ec:	43d2      	mvns	r2, r2
 80058ee:	401a      	ands	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80058f4:	46c0      	nop			; (mov r8, r8)
 80058f6:	46bd      	mov	sp, r7
 80058f8:	b002      	add	sp, #8
 80058fa:	bd80      	pop	{r7, pc}

080058fc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	0212      	lsls	r2, r2, #8
 8005910:	43d2      	mvns	r2, r2
 8005912:	401a      	ands	r2, r3
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	021b      	lsls	r3, r3, #8
 8005918:	6879      	ldr	r1, [r7, #4]
 800591a:	400b      	ands	r3, r1
 800591c:	4904      	ldr	r1, [pc, #16]	; (8005930 <LL_ADC_SetChannelSamplingTime+0x34>)
 800591e:	400b      	ands	r3, r1
 8005920:	431a      	orrs	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005926:	46c0      	nop			; (mov r8, r8)
 8005928:	46bd      	mov	sp, r7
 800592a:	b004      	add	sp, #16
 800592c:	bd80      	pop	{r7, pc}
 800592e:	46c0      	nop			; (mov r8, r8)
 8005930:	07ffff00 	.word	0x07ffff00

08005934 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	4a05      	ldr	r2, [pc, #20]	; (8005958 <LL_ADC_EnableInternalRegulator+0x24>)
 8005942:	4013      	ands	r3, r2
 8005944:	2280      	movs	r2, #128	; 0x80
 8005946:	0552      	lsls	r2, r2, #21
 8005948:	431a      	orrs	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	46bd      	mov	sp, r7
 8005952:	b002      	add	sp, #8
 8005954:	bd80      	pop	{r7, pc}
 8005956:	46c0      	nop			; (mov r8, r8)
 8005958:	6fffffe8 	.word	0x6fffffe8

0800595c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689a      	ldr	r2, [r3, #8]
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	055b      	lsls	r3, r3, #21
 800596c:	401a      	ands	r2, r3
 800596e:	2380      	movs	r3, #128	; 0x80
 8005970:	055b      	lsls	r3, r3, #21
 8005972:	429a      	cmp	r2, r3
 8005974:	d101      	bne.n	800597a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800597a:	2300      	movs	r3, #0
}
 800597c:	0018      	movs	r0, r3
 800597e:	46bd      	mov	sp, r7
 8005980:	b002      	add	sp, #8
 8005982:	bd80      	pop	{r7, pc}

08005984 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	4a04      	ldr	r2, [pc, #16]	; (80059a4 <LL_ADC_Enable+0x20>)
 8005992:	4013      	ands	r3, r2
 8005994:	2201      	movs	r2, #1
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800599c:	46c0      	nop			; (mov r8, r8)
 800599e:	46bd      	mov	sp, r7
 80059a0:	b002      	add	sp, #8
 80059a2:	bd80      	pop	{r7, pc}
 80059a4:	7fffffe8 	.word	0x7fffffe8

080059a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2201      	movs	r2, #1
 80059b6:	4013      	ands	r3, r2
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <LL_ADC_IsEnabled+0x18>
 80059bc:	2301      	movs	r3, #1
 80059be:	e000      	b.n	80059c2 <LL_ADC_IsEnabled+0x1a>
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	0018      	movs	r0, r3
 80059c4:	46bd      	mov	sp, r7
 80059c6:	b002      	add	sp, #8
 80059c8:	bd80      	pop	{r7, pc}
	...

080059cc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4a04      	ldr	r2, [pc, #16]	; (80059ec <LL_ADC_REG_StartConversion+0x20>)
 80059da:	4013      	ands	r3, r2
 80059dc:	2204      	movs	r2, #4
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80059e4:	46c0      	nop			; (mov r8, r8)
 80059e6:	46bd      	mov	sp, r7
 80059e8:	b002      	add	sp, #8
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	7fffffe8 	.word	0x7fffffe8

080059f0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b082      	sub	sp, #8
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2204      	movs	r2, #4
 80059fe:	4013      	ands	r3, r2
 8005a00:	2b04      	cmp	r3, #4
 8005a02:	d101      	bne.n	8005a08 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	0018      	movs	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	b002      	add	sp, #8
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a1c:	231f      	movs	r3, #31
 8005a1e:	18fb      	adds	r3, r7, r3
 8005a20:	2200      	movs	r2, #0
 8005a22:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005a24:	2300      	movs	r3, #0
 8005a26:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e1ab      	b.n	8005d92 <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10a      	bne.n	8005a58 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	0018      	movs	r0, r3
 8005a46:	f7ff fb81 	bl	800514c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2254      	movs	r2, #84	; 0x54
 8005a54:	2100      	movs	r1, #0
 8005a56:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	0018      	movs	r0, r3
 8005a5e:	f7ff ff7d 	bl	800595c <LL_ADC_IsInternalRegulatorEnabled>
 8005a62:	1e03      	subs	r3, r0, #0
 8005a64:	d114      	bne.n	8005a90 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	0018      	movs	r0, r3
 8005a6c:	f7ff ff62 	bl	8005934 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005a70:	4bca      	ldr	r3, [pc, #808]	; (8005d9c <HAL_ADC_Init+0x388>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	49ca      	ldr	r1, [pc, #808]	; (8005da0 <HAL_ADC_Init+0x38c>)
 8005a76:	0018      	movs	r0, r3
 8005a78:	f7fa fb42 	bl	8000100 <__udivsi3>
 8005a7c:	0003      	movs	r3, r0
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a82:	e002      	b.n	8005a8a <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1f9      	bne.n	8005a84 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	0018      	movs	r0, r3
 8005a96:	f7ff ff61 	bl	800595c <LL_ADC_IsInternalRegulatorEnabled>
 8005a9a:	1e03      	subs	r3, r0, #0
 8005a9c:	d10f      	bne.n	8005abe <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	431a      	orrs	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	2201      	movs	r2, #1
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ab6:	231f      	movs	r3, #31
 8005ab8:	18fb      	adds	r3, r7, r3
 8005aba:	2201      	movs	r2, #1
 8005abc:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f7ff ff94 	bl	80059f0 <LL_ADC_REG_IsConversionOngoing>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ad0:	2210      	movs	r2, #16
 8005ad2:	4013      	ands	r3, r2
 8005ad4:	d000      	beq.n	8005ad8 <HAL_ADC_Init+0xc4>
 8005ad6:	e14f      	b.n	8005d78 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d000      	beq.n	8005ae0 <HAL_ADC_Init+0xcc>
 8005ade:	e14b      	b.n	8005d78 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ae4:	4aaf      	ldr	r2, [pc, #700]	; (8005da4 <HAL_ADC_Init+0x390>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2202      	movs	r2, #2
 8005aea:	431a      	orrs	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7ff ff57 	bl	80059a8 <LL_ADC_IsEnabled>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d151      	bne.n	8005ba2 <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	2218      	movs	r2, #24
 8005b06:	4393      	bics	r3, r2
 8005b08:	0019      	movs	r1, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689a      	ldr	r2, [r3, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	0f9b      	lsrs	r3, r3, #30
 8005b1c:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b22:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8005b28:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 8005b2e:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8005b34:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005b36:	697a      	ldr	r2, [r7, #20]
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	223c      	movs	r2, #60	; 0x3c
 8005b40:	5c9b      	ldrb	r3, [r3, r2]
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d103      	bne.n	8005b4e <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	4a94      	ldr	r2, [pc, #592]	; (8005da8 <HAL_ADC_Init+0x394>)
 8005b56:	4013      	ands	r3, r2
 8005b58:	0019      	movs	r1, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	23c0      	movs	r3, #192	; 0xc0
 8005b6a:	061b      	lsls	r3, r3, #24
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d018      	beq.n	8005ba2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	05db      	lsls	r3, r3, #23
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d012      	beq.n	8005ba2 <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8005b80:	2380      	movs	r3, #128	; 0x80
 8005b82:	061b      	lsls	r3, r3, #24
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d00c      	beq.n	8005ba2 <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005b88:	4b88      	ldr	r3, [pc, #544]	; (8005dac <HAL_ADC_Init+0x398>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a88      	ldr	r2, [pc, #544]	; (8005db0 <HAL_ADC_Init+0x39c>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	0019      	movs	r1, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	685a      	ldr	r2, [r3, #4]
 8005b96:	23f0      	movs	r3, #240	; 0xf0
 8005b98:	039b      	lsls	r3, r3, #14
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	4b83      	ldr	r3, [pc, #524]	; (8005dac <HAL_ADC_Init+0x398>)
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	7e1b      	ldrb	r3, [r3, #24]
 8005ba6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	7e5b      	ldrb	r3, [r3, #25]
 8005bac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005bae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	7e9b      	ldrb	r3, [r3, #26]
 8005bb4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005bb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_ADC_Init+0x1b2>
 8005bc0:	2380      	movs	r3, #128	; 0x80
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	e000      	b.n	8005bc8 <HAL_ADC_Init+0x1b4>
 8005bc6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8005bc8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005bce:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	da04      	bge.n	8005be2 <HAL_ADC_Init+0x1ce>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	085b      	lsrs	r3, r3, #1
 8005be0:	e001      	b.n	8005be6 <HAL_ADC_Init+0x1d2>
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 8005be6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	212c      	movs	r1, #44	; 0x2c
 8005bec:	5c5b      	ldrb	r3, [r3, r1]
 8005bee:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8005bf0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8005bf2:	69ba      	ldr	r2, [r7, #24]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	5c9b      	ldrb	r3, [r3, r2]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d115      	bne.n	8005c2e <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	7e9b      	ldrb	r3, [r3, #26]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d105      	bne.n	8005c16 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	2280      	movs	r2, #128	; 0x80
 8005c0e:	0252      	lsls	r2, r2, #9
 8005c10:	4313      	orrs	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
 8005c14:	e00b      	b.n	8005c2e <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	431a      	orrs	r2, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	2201      	movs	r2, #1
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d00a      	beq.n	8005c4c <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c3a:	23e0      	movs	r3, #224	; 0xe0
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005c44:	4313      	orrs	r3, r2
 8005c46:	69ba      	ldr	r2, [r7, #24]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	4a58      	ldr	r2, [pc, #352]	; (8005db4 <HAL_ADC_Init+0x3a0>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	0019      	movs	r1, r3
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	69ba      	ldr	r2, [r7, #24]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	4a53      	ldr	r2, [pc, #332]	; (8005db8 <HAL_ADC_Init+0x3a4>)
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6818      	ldr	r0, [r3, #0]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c80:	001a      	movs	r2, r3
 8005c82:	2100      	movs	r1, #0
 8005c84:	f7ff fdc9 	bl	800581a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	494a      	ldr	r1, [pc, #296]	; (8005dbc <HAL_ADC_Init+0x3a8>)
 8005c92:	001a      	movs	r2, r3
 8005c94:	f7ff fdc1 	bl	800581a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d109      	bne.n	8005cb4 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2110      	movs	r1, #16
 8005cac:	4249      	negs	r1, r1
 8005cae:	430a      	orrs	r2, r1
 8005cb0:	629a      	str	r2, [r3, #40]	; 0x28
 8005cb2:	e03a      	b.n	8005d2a <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	691a      	ldr	r2, [r3, #16]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	039b      	lsls	r3, r3, #14
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d134      	bne.n	8005d2a <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
 8005cc4:	e00c      	b.n	8005ce0 <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	40da      	lsrs	r2, r3
 8005cd0:	0013      	movs	r3, r2
 8005cd2:	220f      	movs	r2, #15
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	2b0f      	cmp	r3, #15
 8005cd8:	d006      	beq.n	8005ce8 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	613b      	str	r3, [r7, #16]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	2b07      	cmp	r3, #7
 8005ce4:	d9ef      	bls.n	8005cc6 <HAL_ADC_Init+0x2b2>
 8005ce6:	e000      	b.n	8005cea <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 8005ce8:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	d109      	bne.n	8005d04 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2110      	movs	r1, #16
 8005cfc:	4249      	negs	r1, r1
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28
 8005d02:	e012      	b.n	8005d2a <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	69db      	ldr	r3, [r3, #28]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	221c      	movs	r2, #28
 8005d14:	4013      	ands	r3, r2
 8005d16:	2210      	movs	r2, #16
 8005d18:	4252      	negs	r2, r2
 8005d1a:	409a      	lsls	r2, r3
 8005d1c:	0011      	movs	r1, r2
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	4a23      	ldr	r2, [pc, #140]	; (8005dc0 <HAL_ADC_Init+0x3ac>)
 8005d32:	4013      	ands	r3, r2
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d10b      	bne.n	8005d52 <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d44:	2203      	movs	r2, #3
 8005d46:	4393      	bics	r3, r2
 8005d48:	2201      	movs	r2, #1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005d50:	e01c      	b.n	8005d8c <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d56:	2212      	movs	r2, #18
 8005d58:	4393      	bics	r3, r2
 8005d5a:	2210      	movs	r2, #16
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	2201      	movs	r2, #1
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8005d6e:	231f      	movs	r3, #31
 8005d70:	18fb      	adds	r3, r7, r3
 8005d72:	2201      	movs	r2, #1
 8005d74:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005d76:	e009      	b.n	8005d8c <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7c:	2210      	movs	r2, #16
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005d84:	231f      	movs	r3, #31
 8005d86:	18fb      	adds	r3, r7, r3
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d8c:	231f      	movs	r3, #31
 8005d8e:	18fb      	adds	r3, r7, r3
 8005d90:	781b      	ldrb	r3, [r3, #0]
}
 8005d92:	0018      	movs	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	b008      	add	sp, #32
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	46c0      	nop			; (mov r8, r8)
 8005d9c:	20000020 	.word	0x20000020
 8005da0:	00030d40 	.word	0x00030d40
 8005da4:	fffffefd 	.word	0xfffffefd
 8005da8:	1ffffc02 	.word	0x1ffffc02
 8005dac:	40012708 	.word	0x40012708
 8005db0:	ffc3ffff 	.word	0xffc3ffff
 8005db4:	fffe0219 	.word	0xfffe0219
 8005db8:	dffffc02 	.word	0xdffffc02
 8005dbc:	07ffff04 	.word	0x07ffff04
 8005dc0:	833fffe7 	.word	0x833fffe7

08005dc4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	f7ff fe0d 	bl	80059f0 <LL_ADC_REG_IsConversionOngoing>
 8005dd6:	1e03      	subs	r3, r0, #0
 8005dd8:	d135      	bne.n	8005e46 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2254      	movs	r2, #84	; 0x54
 8005dde:	5c9b      	ldrb	r3, [r3, r2]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d101      	bne.n	8005de8 <HAL_ADC_Start+0x24>
 8005de4:	2302      	movs	r3, #2
 8005de6:	e035      	b.n	8005e54 <HAL_ADC_Start+0x90>
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2254      	movs	r2, #84	; 0x54
 8005dec:	2101      	movs	r1, #1
 8005dee:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8005df0:	250f      	movs	r5, #15
 8005df2:	197c      	adds	r4, r7, r5
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	0018      	movs	r0, r3
 8005df8:	f000 faa6 	bl	8006348 <ADC_Enable>
 8005dfc:	0003      	movs	r3, r0
 8005dfe:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005e00:	197b      	adds	r3, r7, r5
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d119      	bne.n	8005e3c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0c:	4a13      	ldr	r2, [pc, #76]	; (8005e5c <HAL_ADC_Start+0x98>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2280      	movs	r2, #128	; 0x80
 8005e12:	0052      	lsls	r2, r2, #1
 8005e14:	431a      	orrs	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	221c      	movs	r2, #28
 8005e26:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2254      	movs	r2, #84	; 0x54
 8005e2c:	2100      	movs	r1, #0
 8005e2e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f7ff fdc9 	bl	80059cc <LL_ADC_REG_StartConversion>
 8005e3a:	e008      	b.n	8005e4e <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2254      	movs	r2, #84	; 0x54
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]
 8005e44:	e003      	b.n	8005e4e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e46:	230f      	movs	r3, #15
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e4e:	230f      	movs	r3, #15
 8005e50:	18fb      	adds	r3, r7, r3
 8005e52:	781b      	ldrb	r3, [r3, #0]
}
 8005e54:	0018      	movs	r0, r3
 8005e56:	46bd      	mov	sp, r7
 8005e58:	b004      	add	sp, #16
 8005e5a:	bdb0      	pop	{r4, r5, r7, pc}
 8005e5c:	fffff0fe 	.word	0xfffff0fe

08005e60 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d102      	bne.n	8005e78 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005e72:	2308      	movs	r3, #8
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	e00f      	b.n	8005e98 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	4013      	ands	r3, r2
 8005e82:	d007      	beq.n	8005e94 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e88:	2220      	movs	r2, #32
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005e90:	2301      	movs	r3, #1
 8005e92:	e06c      	b.n	8005f6e <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8005e94:	2304      	movs	r3, #4
 8005e96:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005e98:	f7ff fc5a 	bl	8005750 <HAL_GetTick>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005ea0:	e019      	b.n	8005ed6 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	d016      	beq.n	8005ed6 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005ea8:	f7ff fc52 	bl	8005750 <HAL_GetTick>
 8005eac:	0002      	movs	r2, r0
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	683a      	ldr	r2, [r7, #0]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d302      	bcc.n	8005ebe <HAL_ADC_PollForConversion+0x5e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10b      	bne.n	8005ed6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec2:	2204      	movs	r2, #4
 8005ec4:	431a      	orrs	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2254      	movs	r2, #84	; 0x54
 8005ece:	2100      	movs	r1, #0
 8005ed0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e04b      	b.n	8005f6e <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d0df      	beq.n	8005ea2 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee6:	2280      	movs	r2, #128	; 0x80
 8005ee8:	0092      	lsls	r2, r2, #2
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	0018      	movs	r0, r3
 8005ef6:	f7ff fcad 	bl	8005854 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005efa:	1e03      	subs	r3, r0, #0
 8005efc:	d02e      	beq.n	8005f5c <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	7e9b      	ldrb	r3, [r3, #26]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d12a      	bne.n	8005f5c <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2208      	movs	r2, #8
 8005f0e:	4013      	ands	r3, r2
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d123      	bne.n	8005f5c <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	0018      	movs	r0, r3
 8005f1a:	f7ff fd69 	bl	80059f0 <LL_ADC_REG_IsConversionOngoing>
 8005f1e:	1e03      	subs	r3, r0, #0
 8005f20:	d110      	bne.n	8005f44 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	685a      	ldr	r2, [r3, #4]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	210c      	movs	r1, #12
 8005f2e:	438a      	bics	r2, r1
 8005f30:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f36:	4a10      	ldr	r2, [pc, #64]	; (8005f78 <HAL_ADC_PollForConversion+0x118>)
 8005f38:	4013      	ands	r3, r2
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	659a      	str	r2, [r3, #88]	; 0x58
 8005f42:	e00b      	b.n	8005f5c <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f48:	2220      	movs	r2, #32
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f54:	2201      	movs	r2, #1
 8005f56:	431a      	orrs	r2, r3
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	7e1b      	ldrb	r3, [r3, #24]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d103      	bne.n	8005f6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	220c      	movs	r2, #12
 8005f6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	0018      	movs	r0, r3
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b004      	add	sp, #16
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	46c0      	nop			; (mov r8, r8)
 8005f78:	fffffefe 	.word	0xfffffefe

08005f7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	b002      	add	sp, #8
 8005f90:	bd80      	pop	{r7, pc}
	...

08005f94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f9e:	2317      	movs	r3, #23
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2254      	movs	r2, #84	; 0x54
 8005fae:	5c9b      	ldrb	r3, [r3, r2]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d101      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x24>
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e1c2      	b.n	800633e <HAL_ADC_ConfigChannel+0x3aa>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2254      	movs	r2, #84	; 0x54
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	0018      	movs	r0, r3
 8005fc6:	f7ff fd13 	bl	80059f0 <LL_ADC_REG_IsConversionOngoing>
 8005fca:	1e03      	subs	r3, r0, #0
 8005fcc:	d000      	beq.n	8005fd0 <HAL_ADC_ConfigChannel+0x3c>
 8005fce:	e1a5      	b.n	800631c <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d100      	bne.n	8005fda <HAL_ADC_ConfigChannel+0x46>
 8005fd8:	e144      	b.n	8006264 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	2380      	movs	r3, #128	; 0x80
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d004      	beq.n	8005ff0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005fea:	4ac2      	ldr	r2, [pc, #776]	; (80062f4 <HAL_ADC_ConfigChannel+0x360>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d108      	bne.n	8006002 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	0019      	movs	r1, r3
 8005ffa:	0010      	movs	r0, r2
 8005ffc:	f7ff fc5b 	bl	80058b6 <LL_ADC_REG_SetSequencerChAdd>
 8006000:	e0c9      	b.n	8006196 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	211f      	movs	r1, #31
 800600c:	400b      	ands	r3, r1
 800600e:	210f      	movs	r1, #15
 8006010:	4099      	lsls	r1, r3
 8006012:	000b      	movs	r3, r1
 8006014:	43db      	mvns	r3, r3
 8006016:	4013      	ands	r3, r2
 8006018:	0019      	movs	r1, r3
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	035b      	lsls	r3, r3, #13
 8006020:	0b5b      	lsrs	r3, r3, #13
 8006022:	d105      	bne.n	8006030 <HAL_ADC_ConfigChannel+0x9c>
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	0e9b      	lsrs	r3, r3, #26
 800602a:	221f      	movs	r2, #31
 800602c:	4013      	ands	r3, r2
 800602e:	e098      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2201      	movs	r2, #1
 8006036:	4013      	ands	r3, r2
 8006038:	d000      	beq.n	800603c <HAL_ADC_ConfigChannel+0xa8>
 800603a:	e091      	b.n	8006160 <HAL_ADC_ConfigChannel+0x1cc>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2202      	movs	r2, #2
 8006042:	4013      	ands	r3, r2
 8006044:	d000      	beq.n	8006048 <HAL_ADC_ConfigChannel+0xb4>
 8006046:	e089      	b.n	800615c <HAL_ADC_ConfigChannel+0x1c8>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	2204      	movs	r2, #4
 800604e:	4013      	ands	r3, r2
 8006050:	d000      	beq.n	8006054 <HAL_ADC_ConfigChannel+0xc0>
 8006052:	e081      	b.n	8006158 <HAL_ADC_ConfigChannel+0x1c4>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2208      	movs	r2, #8
 800605a:	4013      	ands	r3, r2
 800605c:	d000      	beq.n	8006060 <HAL_ADC_ConfigChannel+0xcc>
 800605e:	e079      	b.n	8006154 <HAL_ADC_ConfigChannel+0x1c0>
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2210      	movs	r2, #16
 8006066:	4013      	ands	r3, r2
 8006068:	d000      	beq.n	800606c <HAL_ADC_ConfigChannel+0xd8>
 800606a:	e071      	b.n	8006150 <HAL_ADC_ConfigChannel+0x1bc>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2220      	movs	r2, #32
 8006072:	4013      	ands	r3, r2
 8006074:	d000      	beq.n	8006078 <HAL_ADC_ConfigChannel+0xe4>
 8006076:	e069      	b.n	800614c <HAL_ADC_ConfigChannel+0x1b8>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2240      	movs	r2, #64	; 0x40
 800607e:	4013      	ands	r3, r2
 8006080:	d000      	beq.n	8006084 <HAL_ADC_ConfigChannel+0xf0>
 8006082:	e061      	b.n	8006148 <HAL_ADC_ConfigChannel+0x1b4>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	4013      	ands	r3, r2
 800608c:	d000      	beq.n	8006090 <HAL_ADC_ConfigChannel+0xfc>
 800608e:	e059      	b.n	8006144 <HAL_ADC_ConfigChannel+0x1b0>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	2380      	movs	r3, #128	; 0x80
 8006096:	005b      	lsls	r3, r3, #1
 8006098:	4013      	ands	r3, r2
 800609a:	d151      	bne.n	8006140 <HAL_ADC_ConfigChannel+0x1ac>
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	2380      	movs	r3, #128	; 0x80
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	4013      	ands	r3, r2
 80060a6:	d149      	bne.n	800613c <HAL_ADC_ConfigChannel+0x1a8>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	2380      	movs	r3, #128	; 0x80
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	4013      	ands	r3, r2
 80060b2:	d141      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x1a4>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	2380      	movs	r3, #128	; 0x80
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4013      	ands	r3, r2
 80060be:	d139      	bne.n	8006134 <HAL_ADC_ConfigChannel+0x1a0>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	2380      	movs	r3, #128	; 0x80
 80060c6:	015b      	lsls	r3, r3, #5
 80060c8:	4013      	ands	r3, r2
 80060ca:	d131      	bne.n	8006130 <HAL_ADC_ConfigChannel+0x19c>
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	2380      	movs	r3, #128	; 0x80
 80060d2:	019b      	lsls	r3, r3, #6
 80060d4:	4013      	ands	r3, r2
 80060d6:	d129      	bne.n	800612c <HAL_ADC_ConfigChannel+0x198>
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	2380      	movs	r3, #128	; 0x80
 80060de:	01db      	lsls	r3, r3, #7
 80060e0:	4013      	ands	r3, r2
 80060e2:	d121      	bne.n	8006128 <HAL_ADC_ConfigChannel+0x194>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	2380      	movs	r3, #128	; 0x80
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	4013      	ands	r3, r2
 80060ee:	d119      	bne.n	8006124 <HAL_ADC_ConfigChannel+0x190>
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	025b      	lsls	r3, r3, #9
 80060f8:	4013      	ands	r3, r2
 80060fa:	d111      	bne.n	8006120 <HAL_ADC_ConfigChannel+0x18c>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	2380      	movs	r3, #128	; 0x80
 8006102:	029b      	lsls	r3, r3, #10
 8006104:	4013      	ands	r3, r2
 8006106:	d109      	bne.n	800611c <HAL_ADC_ConfigChannel+0x188>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	2380      	movs	r3, #128	; 0x80
 800610e:	02db      	lsls	r3, r3, #11
 8006110:	4013      	ands	r3, r2
 8006112:	d001      	beq.n	8006118 <HAL_ADC_ConfigChannel+0x184>
 8006114:	2312      	movs	r3, #18
 8006116:	e024      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006118:	2300      	movs	r3, #0
 800611a:	e022      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 800611c:	2311      	movs	r3, #17
 800611e:	e020      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006120:	2310      	movs	r3, #16
 8006122:	e01e      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006124:	230f      	movs	r3, #15
 8006126:	e01c      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006128:	230e      	movs	r3, #14
 800612a:	e01a      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 800612c:	230d      	movs	r3, #13
 800612e:	e018      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006130:	230c      	movs	r3, #12
 8006132:	e016      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006134:	230b      	movs	r3, #11
 8006136:	e014      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006138:	230a      	movs	r3, #10
 800613a:	e012      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 800613c:	2309      	movs	r3, #9
 800613e:	e010      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006140:	2308      	movs	r3, #8
 8006142:	e00e      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006144:	2307      	movs	r3, #7
 8006146:	e00c      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006148:	2306      	movs	r3, #6
 800614a:	e00a      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 800614c:	2305      	movs	r3, #5
 800614e:	e008      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006150:	2304      	movs	r3, #4
 8006152:	e006      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006154:	2303      	movs	r3, #3
 8006156:	e004      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006158:	2302      	movs	r3, #2
 800615a:	e002      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 800615c:	2301      	movs	r3, #1
 800615e:	e000      	b.n	8006162 <HAL_ADC_ConfigChannel+0x1ce>
 8006160:	2300      	movs	r3, #0
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	6852      	ldr	r2, [r2, #4]
 8006166:	201f      	movs	r0, #31
 8006168:	4002      	ands	r2, r0
 800616a:	4093      	lsls	r3, r2
 800616c:	000a      	movs	r2, r1
 800616e:	431a      	orrs	r2, r3
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	089b      	lsrs	r3, r3, #2
 800617a:	1c5a      	adds	r2, r3, #1
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	429a      	cmp	r2, r3
 8006182:	d808      	bhi.n	8006196 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6818      	ldr	r0, [r3, #0]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	6859      	ldr	r1, [r3, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	001a      	movs	r2, r3
 8006192:	f7ff fb70 	bl	8005876 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	6819      	ldr	r1, [r3, #0]
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	001a      	movs	r2, r3
 80061a4:	f7ff fbaa 	bl	80058fc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	db00      	blt.n	80061b2 <HAL_ADC_ConfigChannel+0x21e>
 80061b0:	e0be      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061b2:	4b51      	ldr	r3, [pc, #324]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff fb23 	bl	8005800 <LL_ADC_GetCommonPathInternalCh>
 80061ba:	0003      	movs	r3, r0
 80061bc:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a4e      	ldr	r2, [pc, #312]	; (80062fc <HAL_ADC_ConfigChannel+0x368>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d123      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	041b      	lsls	r3, r3, #16
 80061ce:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80061d0:	d11e      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2280      	movs	r2, #128	; 0x80
 80061d6:	0412      	lsls	r2, r2, #16
 80061d8:	4313      	orrs	r3, r2
 80061da:	4a47      	ldr	r2, [pc, #284]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 80061dc:	0019      	movs	r1, r3
 80061de:	0010      	movs	r0, r2
 80061e0:	f7ff fafa 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80061e4:	4b46      	ldr	r3, [pc, #280]	; (8006300 <HAL_ADC_ConfigChannel+0x36c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4946      	ldr	r1, [pc, #280]	; (8006304 <HAL_ADC_ConfigChannel+0x370>)
 80061ea:	0018      	movs	r0, r3
 80061ec:	f7f9 ff88 	bl	8000100 <__udivsi3>
 80061f0:	0003      	movs	r3, r0
 80061f2:	001a      	movs	r2, r3
 80061f4:	0013      	movs	r3, r2
 80061f6:	005b      	lsls	r3, r3, #1
 80061f8:	189b      	adds	r3, r3, r2
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	3301      	adds	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006200:	e002      	b.n	8006208 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3b01      	subs	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1f9      	bne.n	8006202 <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800620e:	e08f      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a3c      	ldr	r2, [pc, #240]	; (8006308 <HAL_ADC_ConfigChannel+0x374>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d10e      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x2a4>
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	045b      	lsls	r3, r3, #17
 8006220:	4013      	ands	r3, r2
 8006222:	d109      	bne.n	8006238 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	2280      	movs	r2, #128	; 0x80
 8006228:	0452      	lsls	r2, r2, #17
 800622a:	4313      	orrs	r3, r2
 800622c:	4a32      	ldr	r2, [pc, #200]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 800622e:	0019      	movs	r1, r3
 8006230:	0010      	movs	r0, r2
 8006232:	f7ff fad1 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
 8006236:	e07b      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a33      	ldr	r2, [pc, #204]	; (800630c <HAL_ADC_ConfigChannel+0x378>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d000      	beq.n	8006244 <HAL_ADC_ConfigChannel+0x2b0>
 8006242:	e075      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	2380      	movs	r3, #128	; 0x80
 8006248:	03db      	lsls	r3, r3, #15
 800624a:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800624c:	d000      	beq.n	8006250 <HAL_ADC_ConfigChannel+0x2bc>
 800624e:	e06f      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	2280      	movs	r2, #128	; 0x80
 8006254:	03d2      	lsls	r2, r2, #15
 8006256:	4313      	orrs	r3, r2
 8006258:	4a27      	ldr	r2, [pc, #156]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 800625a:	0019      	movs	r1, r3
 800625c:	0010      	movs	r0, r2
 800625e:	f7ff fabb 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
 8006262:	e065      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	061b      	lsls	r3, r3, #24
 800626c:	429a      	cmp	r2, r3
 800626e:	d004      	beq.n	800627a <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8006274:	4a1f      	ldr	r2, [pc, #124]	; (80062f4 <HAL_ADC_ConfigChannel+0x360>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d107      	bne.n	800628a <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681a      	ldr	r2, [r3, #0]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	0019      	movs	r1, r3
 8006284:	0010      	movs	r0, r2
 8006286:	f7ff fb27 	bl	80058d8 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	da4e      	bge.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006292:	4b19      	ldr	r3, [pc, #100]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 8006294:	0018      	movs	r0, r3
 8006296:	f7ff fab3 	bl	8005800 <LL_ADC_GetCommonPathInternalCh>
 800629a:	0003      	movs	r3, r0
 800629c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a16      	ldr	r2, [pc, #88]	; (80062fc <HAL_ADC_ConfigChannel+0x368>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4a19      	ldr	r2, [pc, #100]	; (8006310 <HAL_ADC_ConfigChannel+0x37c>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	4a12      	ldr	r2, [pc, #72]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 80062b0:	0019      	movs	r1, r3
 80062b2:	0010      	movs	r0, r2
 80062b4:	f7ff fa90 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
 80062b8:	e03a      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a12      	ldr	r2, [pc, #72]	; (8006308 <HAL_ADC_ConfigChannel+0x374>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d108      	bne.n	80062d6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	4a13      	ldr	r2, [pc, #76]	; (8006314 <HAL_ADC_ConfigChannel+0x380>)
 80062c8:	4013      	ands	r3, r2
 80062ca:	4a0b      	ldr	r2, [pc, #44]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 80062cc:	0019      	movs	r1, r3
 80062ce:	0010      	movs	r0, r2
 80062d0:	f7ff fa82 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
 80062d4:	e02c      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <HAL_ADC_ConfigChannel+0x378>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d127      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4a0d      	ldr	r2, [pc, #52]	; (8006318 <HAL_ADC_ConfigChannel+0x384>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	4a04      	ldr	r2, [pc, #16]	; (80062f8 <HAL_ADC_ConfigChannel+0x364>)
 80062e8:	0019      	movs	r1, r3
 80062ea:	0010      	movs	r0, r2
 80062ec:	f7ff fa74 	bl	80057d8 <LL_ADC_SetCommonPathInternalCh>
 80062f0:	e01e      	b.n	8006330 <HAL_ADC_ConfigChannel+0x39c>
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	80000004 	.word	0x80000004
 80062f8:	40012708 	.word	0x40012708
 80062fc:	b0001000 	.word	0xb0001000
 8006300:	20000020 	.word	0x20000020
 8006304:	00030d40 	.word	0x00030d40
 8006308:	b8004000 	.word	0xb8004000
 800630c:	b4002000 	.word	0xb4002000
 8006310:	ff7fffff 	.word	0xff7fffff
 8006314:	feffffff 	.word	0xfeffffff
 8006318:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006320:	2220      	movs	r2, #32
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006328:	2317      	movs	r3, #23
 800632a:	18fb      	adds	r3, r7, r3
 800632c:	2201      	movs	r2, #1
 800632e:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2254      	movs	r2, #84	; 0x54
 8006334:	2100      	movs	r1, #0
 8006336:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8006338:	2317      	movs	r3, #23
 800633a:	18fb      	adds	r3, r7, r3
 800633c:	781b      	ldrb	r3, [r3, #0]
}
 800633e:	0018      	movs	r0, r3
 8006340:	46bd      	mov	sp, r7
 8006342:	b006      	add	sp, #24
 8006344:	bd80      	pop	{r7, pc}
 8006346:	46c0      	nop			; (mov r8, r8)

08006348 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006350:	2300      	movs	r3, #0
 8006352:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	0018      	movs	r0, r3
 800635a:	f7ff fb25 	bl	80059a8 <LL_ADC_IsEnabled>
 800635e:	1e03      	subs	r3, r0, #0
 8006360:	d162      	bne.n	8006428 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4a32      	ldr	r2, [pc, #200]	; (8006434 <ADC_Enable+0xec>)
 800636a:	4013      	ands	r3, r2
 800636c:	d00d      	beq.n	800638a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006372:	2210      	movs	r2, #16
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637e:	2201      	movs	r2, #1
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e04f      	b.n	800642a <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	0018      	movs	r0, r3
 8006390:	f7ff faf8 	bl	8005984 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006394:	4b28      	ldr	r3, [pc, #160]	; (8006438 <ADC_Enable+0xf0>)
 8006396:	0018      	movs	r0, r3
 8006398:	f7ff fa32 	bl	8005800 <LL_ADC_GetCommonPathInternalCh>
 800639c:	0002      	movs	r2, r0
 800639e:	2380      	movs	r3, #128	; 0x80
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	4013      	ands	r3, r2
 80063a4:	d00f      	beq.n	80063c6 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80063a6:	4b25      	ldr	r3, [pc, #148]	; (800643c <ADC_Enable+0xf4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4925      	ldr	r1, [pc, #148]	; (8006440 <ADC_Enable+0xf8>)
 80063ac:	0018      	movs	r0, r3
 80063ae:	f7f9 fea7 	bl	8000100 <__udivsi3>
 80063b2:	0003      	movs	r3, r0
 80063b4:	3301      	adds	r3, #1
 80063b6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063b8:	e002      	b.n	80063c0 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	3b01      	subs	r3, #1
 80063be:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f9      	bne.n	80063ba <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	7e5b      	ldrb	r3, [r3, #25]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d02c      	beq.n	8006428 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80063ce:	f7ff f9bf 	bl	8005750 <HAL_GetTick>
 80063d2:	0003      	movs	r3, r0
 80063d4:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80063d6:	e020      	b.n	800641a <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0018      	movs	r0, r3
 80063de:	f7ff fae3 	bl	80059a8 <LL_ADC_IsEnabled>
 80063e2:	1e03      	subs	r3, r0, #0
 80063e4:	d104      	bne.n	80063f0 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7ff faca 	bl	8005984 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063f0:	f7ff f9ae 	bl	8005750 <HAL_GetTick>
 80063f4:	0002      	movs	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d90d      	bls.n	800641a <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006402:	2210      	movs	r2, #16
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640e:	2201      	movs	r2, #1
 8006410:	431a      	orrs	r2, r3
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e007      	b.n	800642a <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2201      	movs	r2, #1
 8006422:	4013      	ands	r3, r2
 8006424:	2b01      	cmp	r3, #1
 8006426:	d1d7      	bne.n	80063d8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	0018      	movs	r0, r3
 800642c:	46bd      	mov	sp, r7
 800642e:	b004      	add	sp, #16
 8006430:	bd80      	pop	{r7, pc}
 8006432:	46c0      	nop			; (mov r8, r8)
 8006434:	80000017 	.word	0x80000017
 8006438:	40012708 	.word	0x40012708
 800643c:	20000020 	.word	0x20000020
 8006440:	00030d40 	.word	0x00030d40

08006444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b082      	sub	sp, #8
 8006448:	af00      	add	r7, sp, #0
 800644a:	0002      	movs	r2, r0
 800644c:	1dfb      	adds	r3, r7, #7
 800644e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006450:	1dfb      	adds	r3, r7, #7
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	2b7f      	cmp	r3, #127	; 0x7f
 8006456:	d809      	bhi.n	800646c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006458:	1dfb      	adds	r3, r7, #7
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	001a      	movs	r2, r3
 800645e:	231f      	movs	r3, #31
 8006460:	401a      	ands	r2, r3
 8006462:	4b04      	ldr	r3, [pc, #16]	; (8006474 <__NVIC_EnableIRQ+0x30>)
 8006464:	2101      	movs	r1, #1
 8006466:	4091      	lsls	r1, r2
 8006468:	000a      	movs	r2, r1
 800646a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}
 8006474:	e000e100 	.word	0xe000e100

08006478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006478:	b590      	push	{r4, r7, lr}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	0002      	movs	r2, r0
 8006480:	6039      	str	r1, [r7, #0]
 8006482:	1dfb      	adds	r3, r7, #7
 8006484:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006486:	1dfb      	adds	r3, r7, #7
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b7f      	cmp	r3, #127	; 0x7f
 800648c:	d828      	bhi.n	80064e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800648e:	4a2f      	ldr	r2, [pc, #188]	; (800654c <__NVIC_SetPriority+0xd4>)
 8006490:	1dfb      	adds	r3, r7, #7
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	b25b      	sxtb	r3, r3
 8006496:	089b      	lsrs	r3, r3, #2
 8006498:	33c0      	adds	r3, #192	; 0xc0
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	589b      	ldr	r3, [r3, r2]
 800649e:	1dfa      	adds	r2, r7, #7
 80064a0:	7812      	ldrb	r2, [r2, #0]
 80064a2:	0011      	movs	r1, r2
 80064a4:	2203      	movs	r2, #3
 80064a6:	400a      	ands	r2, r1
 80064a8:	00d2      	lsls	r2, r2, #3
 80064aa:	21ff      	movs	r1, #255	; 0xff
 80064ac:	4091      	lsls	r1, r2
 80064ae:	000a      	movs	r2, r1
 80064b0:	43d2      	mvns	r2, r2
 80064b2:	401a      	ands	r2, r3
 80064b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	019b      	lsls	r3, r3, #6
 80064ba:	22ff      	movs	r2, #255	; 0xff
 80064bc:	401a      	ands	r2, r3
 80064be:	1dfb      	adds	r3, r7, #7
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	0018      	movs	r0, r3
 80064c4:	2303      	movs	r3, #3
 80064c6:	4003      	ands	r3, r0
 80064c8:	00db      	lsls	r3, r3, #3
 80064ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064cc:	481f      	ldr	r0, [pc, #124]	; (800654c <__NVIC_SetPriority+0xd4>)
 80064ce:	1dfb      	adds	r3, r7, #7
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	089b      	lsrs	r3, r3, #2
 80064d6:	430a      	orrs	r2, r1
 80064d8:	33c0      	adds	r3, #192	; 0xc0
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80064de:	e031      	b.n	8006544 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <__NVIC_SetPriority+0xd8>)
 80064e2:	1dfb      	adds	r3, r7, #7
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	0019      	movs	r1, r3
 80064e8:	230f      	movs	r3, #15
 80064ea:	400b      	ands	r3, r1
 80064ec:	3b08      	subs	r3, #8
 80064ee:	089b      	lsrs	r3, r3, #2
 80064f0:	3306      	adds	r3, #6
 80064f2:	009b      	lsls	r3, r3, #2
 80064f4:	18d3      	adds	r3, r2, r3
 80064f6:	3304      	adds	r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	1dfa      	adds	r2, r7, #7
 80064fc:	7812      	ldrb	r2, [r2, #0]
 80064fe:	0011      	movs	r1, r2
 8006500:	2203      	movs	r2, #3
 8006502:	400a      	ands	r2, r1
 8006504:	00d2      	lsls	r2, r2, #3
 8006506:	21ff      	movs	r1, #255	; 0xff
 8006508:	4091      	lsls	r1, r2
 800650a:	000a      	movs	r2, r1
 800650c:	43d2      	mvns	r2, r2
 800650e:	401a      	ands	r2, r3
 8006510:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	019b      	lsls	r3, r3, #6
 8006516:	22ff      	movs	r2, #255	; 0xff
 8006518:	401a      	ands	r2, r3
 800651a:	1dfb      	adds	r3, r7, #7
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	0018      	movs	r0, r3
 8006520:	2303      	movs	r3, #3
 8006522:	4003      	ands	r3, r0
 8006524:	00db      	lsls	r3, r3, #3
 8006526:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006528:	4809      	ldr	r0, [pc, #36]	; (8006550 <__NVIC_SetPriority+0xd8>)
 800652a:	1dfb      	adds	r3, r7, #7
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	001c      	movs	r4, r3
 8006530:	230f      	movs	r3, #15
 8006532:	4023      	ands	r3, r4
 8006534:	3b08      	subs	r3, #8
 8006536:	089b      	lsrs	r3, r3, #2
 8006538:	430a      	orrs	r2, r1
 800653a:	3306      	adds	r3, #6
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	18c3      	adds	r3, r0, r3
 8006540:	3304      	adds	r3, #4
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b003      	add	sp, #12
 800654a:	bd90      	pop	{r4, r7, pc}
 800654c:	e000e100 	.word	0xe000e100
 8006550:	e000ed00 	.word	0xe000ed00

08006554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	1e5a      	subs	r2, r3, #1
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	045b      	lsls	r3, r3, #17
 8006564:	429a      	cmp	r2, r3
 8006566:	d301      	bcc.n	800656c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006568:	2301      	movs	r3, #1
 800656a:	e010      	b.n	800658e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800656c:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <SysTick_Config+0x44>)
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	3a01      	subs	r2, #1
 8006572:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006574:	2301      	movs	r3, #1
 8006576:	425b      	negs	r3, r3
 8006578:	2103      	movs	r1, #3
 800657a:	0018      	movs	r0, r3
 800657c:	f7ff ff7c 	bl	8006478 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006580:	4b05      	ldr	r3, [pc, #20]	; (8006598 <SysTick_Config+0x44>)
 8006582:	2200      	movs	r2, #0
 8006584:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006586:	4b04      	ldr	r3, [pc, #16]	; (8006598 <SysTick_Config+0x44>)
 8006588:	2207      	movs	r2, #7
 800658a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800658c:	2300      	movs	r3, #0
}
 800658e:	0018      	movs	r0, r3
 8006590:	46bd      	mov	sp, r7
 8006592:	b002      	add	sp, #8
 8006594:	bd80      	pop	{r7, pc}
 8006596:	46c0      	nop			; (mov r8, r8)
 8006598:	e000e010 	.word	0xe000e010

0800659c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	210f      	movs	r1, #15
 80065a8:	187b      	adds	r3, r7, r1
 80065aa:	1c02      	adds	r2, r0, #0
 80065ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80065ae:	68ba      	ldr	r2, [r7, #8]
 80065b0:	187b      	adds	r3, r7, r1
 80065b2:	781b      	ldrb	r3, [r3, #0]
 80065b4:	b25b      	sxtb	r3, r3
 80065b6:	0011      	movs	r1, r2
 80065b8:	0018      	movs	r0, r3
 80065ba:	f7ff ff5d 	bl	8006478 <__NVIC_SetPriority>
}
 80065be:	46c0      	nop			; (mov r8, r8)
 80065c0:	46bd      	mov	sp, r7
 80065c2:	b004      	add	sp, #16
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b082      	sub	sp, #8
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	0002      	movs	r2, r0
 80065ce:	1dfb      	adds	r3, r7, #7
 80065d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065d2:	1dfb      	adds	r3, r7, #7
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	b25b      	sxtb	r3, r3
 80065d8:	0018      	movs	r0, r3
 80065da:	f7ff ff33 	bl	8006444 <__NVIC_EnableIRQ>
}
 80065de:	46c0      	nop			; (mov r8, r8)
 80065e0:	46bd      	mov	sp, r7
 80065e2:	b002      	add	sp, #8
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7ff ffaf 	bl	8006554 <SysTick_Config>
 80065f6:	0003      	movs	r3, r0
}
 80065f8:	0018      	movs	r0, r3
 80065fa:	46bd      	mov	sp, r7
 80065fc:	b002      	add	sp, #8
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006600:	b5b0      	push	{r4, r5, r7, lr}
 8006602:	b086      	sub	sp, #24
 8006604:	af00      	add	r7, sp, #0
 8006606:	60f8      	str	r0, [r7, #12]
 8006608:	60b9      	str	r1, [r7, #8]
 800660a:	603a      	str	r2, [r7, #0]
 800660c:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800660e:	4b21      	ldr	r3, [pc, #132]	; (8006694 <HAL_FLASH_Program+0x94>)
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_FLASH_Program+0x1a>
 8006616:	2302      	movs	r3, #2
 8006618:	e038      	b.n	800668c <HAL_FLASH_Program+0x8c>
 800661a:	4b1e      	ldr	r3, [pc, #120]	; (8006694 <HAL_FLASH_Program+0x94>)
 800661c:	2201      	movs	r2, #1
 800661e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006620:	4b1c      	ldr	r3, [pc, #112]	; (8006694 <HAL_FLASH_Program+0x94>)
 8006622:	2200      	movs	r2, #0
 8006624:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006626:	2517      	movs	r5, #23
 8006628:	197c      	adds	r4, r7, r5
 800662a:	23fa      	movs	r3, #250	; 0xfa
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	0018      	movs	r0, r3
 8006630:	f000 f874 	bl	800671c <FLASH_WaitForLastOperation>
 8006634:	0003      	movs	r3, r0
 8006636:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006638:	197b      	adds	r3, r7, r5
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d11f      	bne.n	8006680 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d106      	bne.n	8006654 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	0008      	movs	r0, r1
 800664e:	f000 f8b3 	bl	80067b8 <FLASH_Program_DoubleWord>
 8006652:	e005      	b.n	8006660 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006654:	683a      	ldr	r2, [r7, #0]
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	0011      	movs	r1, r2
 800665a:	0018      	movs	r0, r3
 800665c:	f003 f8d0 	bl	8009800 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006660:	2317      	movs	r3, #23
 8006662:	18fc      	adds	r4, r7, r3
 8006664:	23fa      	movs	r3, #250	; 0xfa
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	0018      	movs	r0, r3
 800666a:	f000 f857 	bl	800671c <FLASH_WaitForLastOperation>
 800666e:	0003      	movs	r3, r0
 8006670:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8006672:	4b09      	ldr	r3, [pc, #36]	; (8006698 <HAL_FLASH_Program+0x98>)
 8006674:	695a      	ldr	r2, [r3, #20]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	43d9      	mvns	r1, r3
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_FLASH_Program+0x98>)
 800667c:	400a      	ands	r2, r1
 800667e:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006680:	4b04      	ldr	r3, [pc, #16]	; (8006694 <HAL_FLASH_Program+0x94>)
 8006682:	2200      	movs	r2, #0
 8006684:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006686:	2317      	movs	r3, #23
 8006688:	18fb      	adds	r3, r7, r3
 800668a:	781b      	ldrb	r3, [r3, #0]
}
 800668c:	0018      	movs	r0, r3
 800668e:	46bd      	mov	sp, r7
 8006690:	b006      	add	sp, #24
 8006692:	bdb0      	pop	{r4, r5, r7, pc}
 8006694:	20000168 	.word	0x20000168
 8006698:	40022000 	.word	0x40022000

0800669c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80066a2:	1dfb      	adds	r3, r7, #7
 80066a4:	2200      	movs	r2, #0
 80066a6:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80066a8:	4b0b      	ldr	r3, [pc, #44]	; (80066d8 <HAL_FLASH_Unlock+0x3c>)
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	da0c      	bge.n	80066ca <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80066b0:	4b09      	ldr	r3, [pc, #36]	; (80066d8 <HAL_FLASH_Unlock+0x3c>)
 80066b2:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <HAL_FLASH_Unlock+0x40>)
 80066b4:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <HAL_FLASH_Unlock+0x3c>)
 80066b8:	4a09      	ldr	r2, [pc, #36]	; (80066e0 <HAL_FLASH_Unlock+0x44>)
 80066ba:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <HAL_FLASH_Unlock+0x3c>)
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	da02      	bge.n	80066ca <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	2201      	movs	r2, #1
 80066c8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80066ca:	1dfb      	adds	r3, r7, #7
 80066cc:	781b      	ldrb	r3, [r3, #0]
}
 80066ce:	0018      	movs	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	b002      	add	sp, #8
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	46c0      	nop			; (mov r8, r8)
 80066d8:	40022000 	.word	0x40022000
 80066dc:	45670123 	.word	0x45670123
 80066e0:	cdef89ab 	.word	0xcdef89ab

080066e4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80066ea:	1dfb      	adds	r3, r7, #7
 80066ec:	2201      	movs	r2, #1
 80066ee:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80066f0:	4b09      	ldr	r3, [pc, #36]	; (8006718 <HAL_FLASH_Lock+0x34>)
 80066f2:	695a      	ldr	r2, [r3, #20]
 80066f4:	4b08      	ldr	r3, [pc, #32]	; (8006718 <HAL_FLASH_Lock+0x34>)
 80066f6:	2180      	movs	r1, #128	; 0x80
 80066f8:	0609      	lsls	r1, r1, #24
 80066fa:	430a      	orrs	r2, r1
 80066fc:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <HAL_FLASH_Lock+0x34>)
 8006700:	695b      	ldr	r3, [r3, #20]
 8006702:	2b00      	cmp	r3, #0
 8006704:	da02      	bge.n	800670c <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 8006706:	1dfb      	adds	r3, r7, #7
 8006708:	2200      	movs	r2, #0
 800670a:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800670c:	1dfb      	adds	r3, r7, #7
 800670e:	781b      	ldrb	r3, [r3, #0]
}
 8006710:	0018      	movs	r0, r3
 8006712:	46bd      	mov	sp, r7
 8006714:	b002      	add	sp, #8
 8006716:	bd80      	pop	{r7, pc}
 8006718:	40022000 	.word	0x40022000

0800671c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8006724:	f7ff f814 	bl	8005750 <HAL_GetTick>
 8006728:	0002      	movs	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	189b      	adds	r3, r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8006730:	2380      	movs	r3, #128	; 0x80
 8006732:	025b      	lsls	r3, r3, #9
 8006734:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 8006736:	e007      	b.n	8006748 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8006738:	f7ff f80a 	bl	8005750 <HAL_GetTick>
 800673c:	0002      	movs	r2, r0
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4293      	cmp	r3, r2
 8006742:	d801      	bhi.n	8006748 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e02a      	b.n	800679e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <FLASH_WaitForLastOperation+0x8c>)
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	68ba      	ldr	r2, [r7, #8]
 800674e:	4013      	ands	r3, r2
 8006750:	d1f2      	bne.n	8006738 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 8006752:	4b15      	ldr	r3, [pc, #84]	; (80067a8 <FLASH_WaitForLastOperation+0x8c>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	4a15      	ldr	r2, [pc, #84]	; (80067ac <FLASH_WaitForLastOperation+0x90>)
 8006758:	4013      	ands	r3, r2
 800675a:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 800675c:	4b12      	ldr	r3, [pc, #72]	; (80067a8 <FLASH_WaitForLastOperation+0x8c>)
 800675e:	4a14      	ldr	r2, [pc, #80]	; (80067b0 <FLASH_WaitForLastOperation+0x94>)
 8006760:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <FLASH_WaitForLastOperation+0x98>)
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	e015      	b.n	800679e <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 8006772:	f7fe ffed 	bl	8005750 <HAL_GetTick>
 8006776:	0002      	movs	r2, r0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	189b      	adds	r3, r3, r2
 800677c:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800677e:	e007      	b.n	8006790 <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 8006780:	f7fe ffe6 	bl	8005750 <HAL_GetTick>
 8006784:	0002      	movs	r2, r0
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4293      	cmp	r3, r2
 800678a:	d801      	bhi.n	8006790 <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e006      	b.n	800679e <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8006790:	4b05      	ldr	r3, [pc, #20]	; (80067a8 <FLASH_WaitForLastOperation+0x8c>)
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	2380      	movs	r3, #128	; 0x80
 8006796:	02db      	lsls	r3, r3, #11
 8006798:	4013      	ands	r3, r2
 800679a:	d1f1      	bne.n	8006780 <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	0018      	movs	r0, r3
 80067a0:	46bd      	mov	sp, r7
 80067a2:	b004      	add	sp, #16
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	46c0      	nop			; (mov r8, r8)
 80067a8:	40022000 	.word	0x40022000
 80067ac:	000083fa 	.word	0x000083fa
 80067b0:	000083fb 	.word	0x000083fb
 80067b4:	20000168 	.word	0x20000168

080067b8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80067b8:	b5b0      	push	{r4, r5, r7, lr}
 80067ba:	b084      	sub	sp, #16
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	603a      	str	r2, [r7, #0]
 80067c2:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80067c4:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <FLASH_Program_DoubleWord+0x3c>)
 80067c6:	695a      	ldr	r2, [r3, #20]
 80067c8:	4b0a      	ldr	r3, [pc, #40]	; (80067f4 <FLASH_Program_DoubleWord+0x3c>)
 80067ca:	2101      	movs	r1, #1
 80067cc:	430a      	orrs	r2, r1
 80067ce:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	683a      	ldr	r2, [r7, #0]
 80067d4:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80067d6:	f3bf 8f6f 	isb	sy
}
 80067da:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	001c      	movs	r4, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	001d      	movs	r5, r3
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3304      	adds	r3, #4
 80067e8:	0022      	movs	r2, r4
 80067ea:	601a      	str	r2, [r3, #0]
}
 80067ec:	46c0      	nop			; (mov r8, r8)
 80067ee:	46bd      	mov	sp, r7
 80067f0:	b004      	add	sp, #16
 80067f2:	bdb0      	pop	{r4, r5, r7, pc}
 80067f4:	40022000 	.word	0x40022000

080067f8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80067f8:	b5b0      	push	{r4, r5, r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006802:	4b35      	ldr	r3, [pc, #212]	; (80068d8 <HAL_FLASHEx_Erase+0xe0>)
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d101      	bne.n	800680e <HAL_FLASHEx_Erase+0x16>
 800680a:	2302      	movs	r3, #2
 800680c:	e05f      	b.n	80068ce <HAL_FLASHEx_Erase+0xd6>
 800680e:	4b32      	ldr	r3, [pc, #200]	; (80068d8 <HAL_FLASHEx_Erase+0xe0>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006814:	4b30      	ldr	r3, [pc, #192]	; (80068d8 <HAL_FLASHEx_Erase+0xe0>)
 8006816:	2200      	movs	r2, #0
 8006818:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800681a:	250f      	movs	r5, #15
 800681c:	197c      	adds	r4, r7, r5
 800681e:	23fa      	movs	r3, #250	; 0xfa
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	0018      	movs	r0, r3
 8006824:	f7ff ff7a 	bl	800671c <FLASH_WaitForLastOperation>
 8006828:	0003      	movs	r3, r0
 800682a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800682c:	002c      	movs	r4, r5
 800682e:	193b      	adds	r3, r7, r4
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d145      	bne.n	80068c2 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2204      	movs	r2, #4
 800683a:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b04      	cmp	r3, #4
 8006842:	d10d      	bne.n	8006860 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	0018      	movs	r0, r3
 800684a:	f000 f849 	bl	80068e0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800684e:	193c      	adds	r4, r7, r4
 8006850:	23fa      	movs	r3, #250	; 0xfa
 8006852:	009b      	lsls	r3, r3, #2
 8006854:	0018      	movs	r0, r3
 8006856:	f7ff ff61 	bl	800671c <FLASH_WaitForLastOperation>
 800685a:	0003      	movs	r3, r0
 800685c:	7023      	strb	r3, [r4, #0]
 800685e:	e030      	b.n	80068c2 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2201      	movs	r2, #1
 8006864:	4252      	negs	r2, r2
 8006866:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	60bb      	str	r3, [r7, #8]
 800686e:	e01a      	b.n	80068a6 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	0011      	movs	r1, r2
 8006878:	0018      	movs	r0, r3
 800687a:	f000 f845 	bl	8006908 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800687e:	250f      	movs	r5, #15
 8006880:	197c      	adds	r4, r7, r5
 8006882:	23fa      	movs	r3, #250	; 0xfa
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	0018      	movs	r0, r3
 8006888:	f7ff ff48 	bl	800671c <FLASH_WaitForLastOperation>
 800688c:	0003      	movs	r3, r0
 800688e:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8006890:	197b      	adds	r3, r7, r5
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d003      	beq.n	80068a0 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	68ba      	ldr	r2, [r7, #8]
 800689c:	601a      	str	r2, [r3, #0]
          break;
 800689e:	e00a      	b.n	80068b6 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3301      	adds	r3, #1
 80068a4:	60bb      	str	r3, [r7, #8]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	18d3      	adds	r3, r2, r3
 80068b0:	68ba      	ldr	r2, [r7, #8]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d3dc      	bcc.n	8006870 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80068b6:	4b09      	ldr	r3, [pc, #36]	; (80068dc <HAL_FLASHEx_Erase+0xe4>)
 80068b8:	695a      	ldr	r2, [r3, #20]
 80068ba:	4b08      	ldr	r3, [pc, #32]	; (80068dc <HAL_FLASHEx_Erase+0xe4>)
 80068bc:	2102      	movs	r1, #2
 80068be:	438a      	bics	r2, r1
 80068c0:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <HAL_FLASHEx_Erase+0xe0>)
 80068c4:	2200      	movs	r2, #0
 80068c6:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80068c8:	230f      	movs	r3, #15
 80068ca:	18fb      	adds	r3, r7, r3
 80068cc:	781b      	ldrb	r3, [r3, #0]
}
 80068ce:	0018      	movs	r0, r3
 80068d0:	46bd      	mov	sp, r7
 80068d2:	b004      	add	sp, #16
 80068d4:	bdb0      	pop	{r4, r5, r7, pc}
 80068d6:	46c0      	nop			; (mov r8, r8)
 80068d8:	20000168 	.word	0x20000168
 80068dc:	40022000 	.word	0x40022000

080068e0 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80068e8:	4b06      	ldr	r3, [pc, #24]	; (8006904 <FLASH_MassErase+0x24>)
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	431a      	orrs	r2, r3
 80068f0:	4b04      	ldr	r3, [pc, #16]	; (8006904 <FLASH_MassErase+0x24>)
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	0249      	lsls	r1, r1, #9
 80068f6:	430a      	orrs	r2, r1
 80068f8:	615a      	str	r2, [r3, #20]
}
 80068fa:	46c0      	nop			; (mov r8, r8)
 80068fc:	46bd      	mov	sp, r7
 80068fe:	b002      	add	sp, #8
 8006900:	bd80      	pop	{r7, pc}
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	40022000 	.word	0x40022000

08006908 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 8006912:	4b08      	ldr	r3, [pc, #32]	; (8006934 <FLASH_PageErase+0x2c>)
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <FLASH_PageErase+0x30>)
 8006918:	4013      	ands	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	00da      	lsls	r2, r3, #3
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	431a      	orrs	r2, r3
 8006924:	4b03      	ldr	r3, [pc, #12]	; (8006934 <FLASH_PageErase+0x2c>)
 8006926:	4905      	ldr	r1, [pc, #20]	; (800693c <FLASH_PageErase+0x34>)
 8006928:	430a      	orrs	r2, r1
 800692a:	615a      	str	r2, [r3, #20]
}
 800692c:	46c0      	nop			; (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b004      	add	sp, #16
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40022000 	.word	0x40022000
 8006938:	fffffe07 	.word	0xfffffe07
 800693c:	00010002 	.word	0x00010002

08006940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800694a:	2300      	movs	r3, #0
 800694c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800694e:	e147      	b.n	8006be0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2101      	movs	r1, #1
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	4091      	lsls	r1, r2
 800695a:	000a      	movs	r2, r1
 800695c:	4013      	ands	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d100      	bne.n	8006968 <HAL_GPIO_Init+0x28>
 8006966:	e138      	b.n	8006bda <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b01      	cmp	r3, #1
 800696e:	d00b      	beq.n	8006988 <HAL_GPIO_Init+0x48>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d007      	beq.n	8006988 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800697c:	2b11      	cmp	r3, #17
 800697e:	d003      	beq.n	8006988 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	2b12      	cmp	r3, #18
 8006986:	d130      	bne.n	80069ea <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	2203      	movs	r2, #3
 8006994:	409a      	lsls	r2, r3
 8006996:	0013      	movs	r3, r2
 8006998:	43da      	mvns	r2, r3
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	4013      	ands	r3, r2
 800699e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68da      	ldr	r2, [r3, #12]
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	409a      	lsls	r2, r3
 80069aa:	0013      	movs	r3, r2
 80069ac:	693a      	ldr	r2, [r7, #16]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	693a      	ldr	r2, [r7, #16]
 80069b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80069be:	2201      	movs	r2, #1
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	409a      	lsls	r2, r3
 80069c4:	0013      	movs	r3, r2
 80069c6:	43da      	mvns	r2, r3
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	4013      	ands	r3, r2
 80069cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	091b      	lsrs	r3, r3, #4
 80069d4:	2201      	movs	r2, #1
 80069d6:	401a      	ands	r2, r3
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	409a      	lsls	r2, r3
 80069dc:	0013      	movs	r3, r2
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	693a      	ldr	r2, [r7, #16]
 80069e8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	005b      	lsls	r3, r3, #1
 80069f4:	2203      	movs	r2, #3
 80069f6:	409a      	lsls	r2, r3
 80069f8:	0013      	movs	r3, r2
 80069fa:	43da      	mvns	r2, r3
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	4013      	ands	r3, r2
 8006a00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	409a      	lsls	r2, r3
 8006a0c:	0013      	movs	r3, r2
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	693a      	ldr	r2, [r7, #16]
 8006a18:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	2b02      	cmp	r3, #2
 8006a20:	d003      	beq.n	8006a2a <HAL_GPIO_Init+0xea>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b12      	cmp	r3, #18
 8006a28:	d123      	bne.n	8006a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	08da      	lsrs	r2, r3, #3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3208      	adds	r2, #8
 8006a32:	0092      	lsls	r2, r2, #2
 8006a34:	58d3      	ldr	r3, [r2, r3]
 8006a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	2207      	movs	r2, #7
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	220f      	movs	r2, #15
 8006a42:	409a      	lsls	r2, r3
 8006a44:	0013      	movs	r3, r2
 8006a46:	43da      	mvns	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	4013      	ands	r3, r2
 8006a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	691a      	ldr	r2, [r3, #16]
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2107      	movs	r1, #7
 8006a56:	400b      	ands	r3, r1
 8006a58:	009b      	lsls	r3, r3, #2
 8006a5a:	409a      	lsls	r2, r3
 8006a5c:	0013      	movs	r3, r2
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	08da      	lsrs	r2, r3, #3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3208      	adds	r2, #8
 8006a6c:	0092      	lsls	r2, r2, #2
 8006a6e:	6939      	ldr	r1, [r7, #16]
 8006a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	2203      	movs	r2, #3
 8006a7e:	409a      	lsls	r2, r3
 8006a80:	0013      	movs	r3, r2
 8006a82:	43da      	mvns	r2, r3
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	4013      	ands	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	2203      	movs	r2, #3
 8006a90:	401a      	ands	r2, r3
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	409a      	lsls	r2, r3
 8006a98:	0013      	movs	r3, r2
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	2380      	movs	r3, #128	; 0x80
 8006aac:	055b      	lsls	r3, r3, #21
 8006aae:	4013      	ands	r3, r2
 8006ab0:	d100      	bne.n	8006ab4 <HAL_GPIO_Init+0x174>
 8006ab2:	e092      	b.n	8006bda <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006ab4:	4a50      	ldr	r2, [pc, #320]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	089b      	lsrs	r3, r3, #2
 8006aba:	3318      	adds	r3, #24
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	589b      	ldr	r3, [r3, r2]
 8006ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	4013      	ands	r3, r2
 8006ac8:	00db      	lsls	r3, r3, #3
 8006aca:	220f      	movs	r2, #15
 8006acc:	409a      	lsls	r2, r3
 8006ace:	0013      	movs	r3, r2
 8006ad0:	43da      	mvns	r2, r3
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	23a0      	movs	r3, #160	; 0xa0
 8006adc:	05db      	lsls	r3, r3, #23
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d013      	beq.n	8006b0a <HAL_GPIO_Init+0x1ca>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a45      	ldr	r2, [pc, #276]	; (8006bfc <HAL_GPIO_Init+0x2bc>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d00d      	beq.n	8006b06 <HAL_GPIO_Init+0x1c6>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a44      	ldr	r2, [pc, #272]	; (8006c00 <HAL_GPIO_Init+0x2c0>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d007      	beq.n	8006b02 <HAL_GPIO_Init+0x1c2>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a43      	ldr	r2, [pc, #268]	; (8006c04 <HAL_GPIO_Init+0x2c4>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d101      	bne.n	8006afe <HAL_GPIO_Init+0x1be>
 8006afa:	2303      	movs	r3, #3
 8006afc:	e006      	b.n	8006b0c <HAL_GPIO_Init+0x1cc>
 8006afe:	2305      	movs	r3, #5
 8006b00:	e004      	b.n	8006b0c <HAL_GPIO_Init+0x1cc>
 8006b02:	2302      	movs	r3, #2
 8006b04:	e002      	b.n	8006b0c <HAL_GPIO_Init+0x1cc>
 8006b06:	2301      	movs	r3, #1
 8006b08:	e000      	b.n	8006b0c <HAL_GPIO_Init+0x1cc>
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	2103      	movs	r1, #3
 8006b10:	400a      	ands	r2, r1
 8006b12:	00d2      	lsls	r2, r2, #3
 8006b14:	4093      	lsls	r3, r2
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8006b1c:	4936      	ldr	r1, [pc, #216]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	089b      	lsrs	r3, r3, #2
 8006b22:	3318      	adds	r3, #24
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006b2a:	4a33      	ldr	r2, [pc, #204]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b2c:	2380      	movs	r3, #128	; 0x80
 8006b2e:	58d3      	ldr	r3, [r2, r3]
 8006b30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	43da      	mvns	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	4013      	ands	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	025b      	lsls	r3, r3, #9
 8006b44:	4013      	ands	r3, r2
 8006b46:	d003      	beq.n	8006b50 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006b50:	4929      	ldr	r1, [pc, #164]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006b58:	4a27      	ldr	r2, [pc, #156]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b5a:	2384      	movs	r3, #132	; 0x84
 8006b5c:	58d3      	ldr	r3, [r2, r3]
 8006b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	4013      	ands	r3, r2
 8006b68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685a      	ldr	r2, [r3, #4]
 8006b6e:	2380      	movs	r3, #128	; 0x80
 8006b70:	029b      	lsls	r3, r3, #10
 8006b72:	4013      	ands	r3, r2
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8006b76:	693a      	ldr	r2, [r7, #16]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006b7e:	491e      	ldr	r1, [pc, #120]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b80:	2284      	movs	r2, #132	; 0x84
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006b86:	4b1c      	ldr	r3, [pc, #112]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	43da      	mvns	r2, r3
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	4013      	ands	r3, r2
 8006b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	685a      	ldr	r2, [r3, #4]
 8006b9a:	2380      	movs	r3, #128	; 0x80
 8006b9c:	035b      	lsls	r3, r3, #13
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d003      	beq.n	8006baa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006baa:	4b13      	ldr	r3, [pc, #76]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006bac:	693a      	ldr	r2, [r7, #16]
 8006bae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8006bb0:	4b11      	ldr	r3, [pc, #68]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	43da      	mvns	r2, r3
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	2380      	movs	r3, #128	; 0x80
 8006bc6:	039b      	lsls	r3, r3, #14
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d003      	beq.n	8006bd4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <HAL_GPIO_Init+0x2b8>)
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	40da      	lsrs	r2, r3
 8006be8:	1e13      	subs	r3, r2, #0
 8006bea:	d000      	beq.n	8006bee <HAL_GPIO_Init+0x2ae>
 8006bec:	e6b0      	b.n	8006950 <HAL_GPIO_Init+0x10>
  }
}
 8006bee:	46c0      	nop			; (mov r8, r8)
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b006      	add	sp, #24
 8006bf6:	bd80      	pop	{r7, pc}
 8006bf8:	40021800 	.word	0x40021800
 8006bfc:	50000400 	.word	0x50000400
 8006c00:	50000800 	.word	0x50000800
 8006c04:	50000c00 	.word	0x50000c00

08006c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	000a      	movs	r2, r1
 8006c12:	1cbb      	adds	r3, r7, #2
 8006c14:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	1cba      	adds	r2, r7, #2
 8006c1c:	8812      	ldrh	r2, [r2, #0]
 8006c1e:	4013      	ands	r3, r2
 8006c20:	d004      	beq.n	8006c2c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006c22:	230f      	movs	r3, #15
 8006c24:	18fb      	adds	r3, r7, r3
 8006c26:	2201      	movs	r2, #1
 8006c28:	701a      	strb	r2, [r3, #0]
 8006c2a:	e003      	b.n	8006c34 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006c2c:	230f      	movs	r3, #15
 8006c2e:	18fb      	adds	r3, r7, r3
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006c34:	230f      	movs	r3, #15
 8006c36:	18fb      	adds	r3, r7, r3
 8006c38:	781b      	ldrb	r3, [r3, #0]
}
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	b004      	add	sp, #16
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	0008      	movs	r0, r1
 8006c4c:	0011      	movs	r1, r2
 8006c4e:	1cbb      	adds	r3, r7, #2
 8006c50:	1c02      	adds	r2, r0, #0
 8006c52:	801a      	strh	r2, [r3, #0]
 8006c54:	1c7b      	adds	r3, r7, #1
 8006c56:	1c0a      	adds	r2, r1, #0
 8006c58:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c5a:	1c7b      	adds	r3, r7, #1
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006c62:	1cbb      	adds	r3, r7, #2
 8006c64:	881a      	ldrh	r2, [r3, #0]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006c6a:	e003      	b.n	8006c74 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006c6c:	1cbb      	adds	r3, r7, #2
 8006c6e:	881a      	ldrh	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006c74:	46c0      	nop			; (mov r8, r8)
 8006c76:	46bd      	mov	sp, r7
 8006c78:	b002      	add	sp, #8
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c80:	4b04      	ldr	r3, [pc, #16]	; (8006c94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	4b03      	ldr	r3, [pc, #12]	; (8006c94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006c86:	2180      	movs	r1, #128	; 0x80
 8006c88:	0049      	lsls	r1, r1, #1
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	46c0      	nop			; (mov r8, r8)
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40007000 	.word	0x40007000

08006c98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006ca0:	4b19      	ldr	r3, [pc, #100]	; (8006d08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a19      	ldr	r2, [pc, #100]	; (8006d0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	0019      	movs	r1, r3
 8006caa:	4b17      	ldr	r3, [pc, #92]	; (8006d08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	2380      	movs	r3, #128	; 0x80
 8006cb6:	009b      	lsls	r3, r3, #2
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d11f      	bne.n	8006cfc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8006cbc:	4b14      	ldr	r3, [pc, #80]	; (8006d10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	0013      	movs	r3, r2
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	189b      	adds	r3, r3, r2
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	4912      	ldr	r1, [pc, #72]	; (8006d14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8006cca:	0018      	movs	r0, r3
 8006ccc:	f7f9 fa18 	bl	8000100 <__udivsi3>
 8006cd0:	0003      	movs	r3, r0
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cd6:	e008      	b.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d003      	beq.n	8006ce6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	3b01      	subs	r3, #1
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	e001      	b.n	8006cea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e009      	b.n	8006cfe <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006cea:	4b07      	ldr	r3, [pc, #28]	; (8006d08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006cec:	695a      	ldr	r2, [r3, #20]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	00db      	lsls	r3, r3, #3
 8006cf2:	401a      	ands	r2, r3
 8006cf4:	2380      	movs	r3, #128	; 0x80
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d0ed      	beq.n	8006cd8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	0018      	movs	r0, r3
 8006d00:	46bd      	mov	sp, r7
 8006d02:	b004      	add	sp, #16
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	46c0      	nop			; (mov r8, r8)
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	fffff9ff 	.word	0xfffff9ff
 8006d10:	20000020 	.word	0x20000020
 8006d14:	000f4240 	.word	0x000f4240

08006d18 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b088      	sub	sp, #32
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e2f9      	b.n	800731e <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4013      	ands	r3, r2
 8006d32:	d100      	bne.n	8006d36 <HAL_RCC_OscConfig+0x1e>
 8006d34:	e07c      	b.n	8006e30 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d36:	4bc3      	ldr	r3, [pc, #780]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	2238      	movs	r2, #56	; 0x38
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d40:	4bc0      	ldr	r3, [pc, #768]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	2203      	movs	r2, #3
 8006d46:	4013      	ands	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	2b10      	cmp	r3, #16
 8006d4e:	d102      	bne.n	8006d56 <HAL_RCC_OscConfig+0x3e>
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d002      	beq.n	8006d5c <HAL_RCC_OscConfig+0x44>
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	2b08      	cmp	r3, #8
 8006d5a:	d10b      	bne.n	8006d74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d5c:	4bb9      	ldr	r3, [pc, #740]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	2380      	movs	r3, #128	; 0x80
 8006d62:	029b      	lsls	r3, r3, #10
 8006d64:	4013      	ands	r3, r2
 8006d66:	d062      	beq.n	8006e2e <HAL_RCC_OscConfig+0x116>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d15e      	bne.n	8006e2e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006d70:	2301      	movs	r3, #1
 8006d72:	e2d4      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685a      	ldr	r2, [r3, #4]
 8006d78:	2380      	movs	r3, #128	; 0x80
 8006d7a:	025b      	lsls	r3, r3, #9
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d107      	bne.n	8006d90 <HAL_RCC_OscConfig+0x78>
 8006d80:	4bb0      	ldr	r3, [pc, #704]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d82:	681a      	ldr	r2, [r3, #0]
 8006d84:	4baf      	ldr	r3, [pc, #700]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d86:	2180      	movs	r1, #128	; 0x80
 8006d88:	0249      	lsls	r1, r1, #9
 8006d8a:	430a      	orrs	r2, r1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e020      	b.n	8006dd2 <HAL_RCC_OscConfig+0xba>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	23a0      	movs	r3, #160	; 0xa0
 8006d96:	02db      	lsls	r3, r3, #11
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d10e      	bne.n	8006dba <HAL_RCC_OscConfig+0xa2>
 8006d9c:	4ba9      	ldr	r3, [pc, #676]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	4ba8      	ldr	r3, [pc, #672]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006da2:	2180      	movs	r1, #128	; 0x80
 8006da4:	02c9      	lsls	r1, r1, #11
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
 8006daa:	4ba6      	ldr	r3, [pc, #664]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	4ba5      	ldr	r3, [pc, #660]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006db0:	2180      	movs	r1, #128	; 0x80
 8006db2:	0249      	lsls	r1, r1, #9
 8006db4:	430a      	orrs	r2, r1
 8006db6:	601a      	str	r2, [r3, #0]
 8006db8:	e00b      	b.n	8006dd2 <HAL_RCC_OscConfig+0xba>
 8006dba:	4ba2      	ldr	r3, [pc, #648]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	4ba1      	ldr	r3, [pc, #644]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006dc0:	49a1      	ldr	r1, [pc, #644]	; (8007048 <HAL_RCC_OscConfig+0x330>)
 8006dc2:	400a      	ands	r2, r1
 8006dc4:	601a      	str	r2, [r3, #0]
 8006dc6:	4b9f      	ldr	r3, [pc, #636]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	4b9e      	ldr	r3, [pc, #632]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006dcc:	499f      	ldr	r1, [pc, #636]	; (800704c <HAL_RCC_OscConfig+0x334>)
 8006dce:	400a      	ands	r2, r1
 8006dd0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d014      	beq.n	8006e04 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dda:	f7fe fcb9 	bl	8005750 <HAL_GetTick>
 8006dde:	0003      	movs	r3, r0
 8006de0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de2:	e008      	b.n	8006df6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006de4:	f7fe fcb4 	bl	8005750 <HAL_GetTick>
 8006de8:	0002      	movs	r2, r0
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	2b64      	cmp	r3, #100	; 0x64
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e293      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006df6:	4b93      	ldr	r3, [pc, #588]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	2380      	movs	r3, #128	; 0x80
 8006dfc:	029b      	lsls	r3, r3, #10
 8006dfe:	4013      	ands	r3, r2
 8006e00:	d0f0      	beq.n	8006de4 <HAL_RCC_OscConfig+0xcc>
 8006e02:	e015      	b.n	8006e30 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e04:	f7fe fca4 	bl	8005750 <HAL_GetTick>
 8006e08:	0003      	movs	r3, r0
 8006e0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e0c:	e008      	b.n	8006e20 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e0e:	f7fe fc9f 	bl	8005750 <HAL_GetTick>
 8006e12:	0002      	movs	r2, r0
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	1ad3      	subs	r3, r2, r3
 8006e18:	2b64      	cmp	r3, #100	; 0x64
 8006e1a:	d901      	bls.n	8006e20 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e27e      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e20:	4b88      	ldr	r3, [pc, #544]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	2380      	movs	r3, #128	; 0x80
 8006e26:	029b      	lsls	r3, r3, #10
 8006e28:	4013      	ands	r3, r2
 8006e2a:	d1f0      	bne.n	8006e0e <HAL_RCC_OscConfig+0xf6>
 8006e2c:	e000      	b.n	8006e30 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e2e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2202      	movs	r2, #2
 8006e36:	4013      	ands	r3, r2
 8006e38:	d100      	bne.n	8006e3c <HAL_RCC_OscConfig+0x124>
 8006e3a:	e099      	b.n	8006f70 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e3c:	4b81      	ldr	r3, [pc, #516]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	2238      	movs	r2, #56	; 0x38
 8006e42:	4013      	ands	r3, r2
 8006e44:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006e46:	4b7f      	ldr	r3, [pc, #508]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	2203      	movs	r2, #3
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	2b10      	cmp	r3, #16
 8006e54:	d102      	bne.n	8006e5c <HAL_RCC_OscConfig+0x144>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d002      	beq.n	8006e62 <HAL_RCC_OscConfig+0x14a>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d135      	bne.n	8006ece <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e62:	4b78      	ldr	r3, [pc, #480]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	2380      	movs	r3, #128	; 0x80
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCC_OscConfig+0x162>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e251      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7a:	4b72      	ldr	r3, [pc, #456]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	4a74      	ldr	r2, [pc, #464]	; (8007050 <HAL_RCC_OscConfig+0x338>)
 8006e80:	4013      	ands	r3, r2
 8006e82:	0019      	movs	r1, r3
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	021a      	lsls	r2, r3, #8
 8006e8a:	4b6e      	ldr	r3, [pc, #440]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e8c:	430a      	orrs	r2, r1
 8006e8e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006e90:	69bb      	ldr	r3, [r7, #24]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d112      	bne.n	8006ebc <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006e96:	4b6b      	ldr	r3, [pc, #428]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a6e      	ldr	r2, [pc, #440]	; (8007054 <HAL_RCC_OscConfig+0x33c>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	0019      	movs	r1, r3
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691a      	ldr	r2, [r3, #16]
 8006ea4:	4b67      	ldr	r3, [pc, #412]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006ea6:	430a      	orrs	r2, r1
 8006ea8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006eaa:	4b66      	ldr	r3, [pc, #408]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	0adb      	lsrs	r3, r3, #11
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	4a68      	ldr	r2, [pc, #416]	; (8007058 <HAL_RCC_OscConfig+0x340>)
 8006eb6:	40da      	lsrs	r2, r3
 8006eb8:	4b68      	ldr	r3, [pc, #416]	; (800705c <HAL_RCC_OscConfig+0x344>)
 8006eba:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006ebc:	4b68      	ldr	r3, [pc, #416]	; (8007060 <HAL_RCC_OscConfig+0x348>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	0018      	movs	r0, r3
 8006ec2:	f7fe fbe9 	bl	8005698 <HAL_InitTick>
 8006ec6:	1e03      	subs	r3, r0, #0
 8006ec8:	d051      	beq.n	8006f6e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e227      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d030      	beq.n	8006f38 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006ed6:	4b5b      	ldr	r3, [pc, #364]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a5e      	ldr	r2, [pc, #376]	; (8007054 <HAL_RCC_OscConfig+0x33c>)
 8006edc:	4013      	ands	r3, r2
 8006ede:	0019      	movs	r1, r3
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	691a      	ldr	r2, [r3, #16]
 8006ee4:	4b57      	ldr	r3, [pc, #348]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006eea:	4b56      	ldr	r3, [pc, #344]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b55      	ldr	r3, [pc, #340]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006ef0:	2180      	movs	r1, #128	; 0x80
 8006ef2:	0049      	lsls	r1, r1, #1
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ef8:	f7fe fc2a 	bl	8005750 <HAL_GetTick>
 8006efc:	0003      	movs	r3, r0
 8006efe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f00:	e008      	b.n	8006f14 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f02:	f7fe fc25 	bl	8005750 <HAL_GetTick>
 8006f06:	0002      	movs	r2, r0
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	1ad3      	subs	r3, r2, r3
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	d901      	bls.n	8006f14 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	e204      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f14:	4b4b      	ldr	r3, [pc, #300]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	2380      	movs	r3, #128	; 0x80
 8006f1a:	00db      	lsls	r3, r3, #3
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	d0f0      	beq.n	8006f02 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f20:	4b48      	ldr	r3, [pc, #288]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	4a4a      	ldr	r2, [pc, #296]	; (8007050 <HAL_RCC_OscConfig+0x338>)
 8006f26:	4013      	ands	r3, r2
 8006f28:	0019      	movs	r1, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	695b      	ldr	r3, [r3, #20]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	4b44      	ldr	r3, [pc, #272]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
 8006f36:	e01b      	b.n	8006f70 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b41      	ldr	r3, [pc, #260]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f3e:	4949      	ldr	r1, [pc, #292]	; (8007064 <HAL_RCC_OscConfig+0x34c>)
 8006f40:	400a      	ands	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f44:	f7fe fc04 	bl	8005750 <HAL_GetTick>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f4e:	f7fe fbff 	bl	8005750 <HAL_GetTick>
 8006f52:	0002      	movs	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e1de      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006f60:	4b38      	ldr	r3, [pc, #224]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d1f0      	bne.n	8006f4e <HAL_RCC_OscConfig+0x236>
 8006f6c:	e000      	b.n	8006f70 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006f6e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	4013      	ands	r3, r2
 8006f78:	d047      	beq.n	800700a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006f7a:	4b32      	ldr	r3, [pc, #200]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	2238      	movs	r2, #56	; 0x38
 8006f80:	4013      	ands	r3, r2
 8006f82:	2b18      	cmp	r3, #24
 8006f84:	d10a      	bne.n	8006f9c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006f86:	4b2f      	ldr	r3, [pc, #188]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	d03c      	beq.n	800700a <HAL_RCC_OscConfig+0x2f2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	699b      	ldr	r3, [r3, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d138      	bne.n	800700a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e1c0      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d019      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006fa4:	4b27      	ldr	r3, [pc, #156]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006fa6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fa8:	4b26      	ldr	r3, [pc, #152]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006faa:	2101      	movs	r1, #1
 8006fac:	430a      	orrs	r2, r1
 8006fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fe fbce 	bl	8005750 <HAL_GetTick>
 8006fb4:	0003      	movs	r3, r0
 8006fb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fba:	f7fe fbc9 	bl	8005750 <HAL_GetTick>
 8006fbe:	0002      	movs	r2, r0
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e1a8      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006fcc:	4b1d      	ldr	r3, [pc, #116]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	d0f1      	beq.n	8006fba <HAL_RCC_OscConfig+0x2a2>
 8006fd6:	e018      	b.n	800700a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006fd8:	4b1a      	ldr	r3, [pc, #104]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006fda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006fdc:	4b19      	ldr	r3, [pc, #100]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8006fde:	2101      	movs	r1, #1
 8006fe0:	438a      	bics	r2, r1
 8006fe2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fe4:	f7fe fbb4 	bl	8005750 <HAL_GetTick>
 8006fe8:	0003      	movs	r3, r0
 8006fea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006fec:	e008      	b.n	8007000 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006fee:	f7fe fbaf 	bl	8005750 <HAL_GetTick>
 8006ff2:	0002      	movs	r2, r0
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	2b02      	cmp	r3, #2
 8006ffa:	d901      	bls.n	8007000 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006ffc:	2303      	movs	r3, #3
 8006ffe:	e18e      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	2202      	movs	r2, #2
 8007006:	4013      	ands	r3, r2
 8007008:	d1f1      	bne.n	8006fee <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2204      	movs	r2, #4
 8007010:	4013      	ands	r3, r2
 8007012:	d100      	bne.n	8007016 <HAL_RCC_OscConfig+0x2fe>
 8007014:	e0c6      	b.n	80071a4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007016:	231f      	movs	r3, #31
 8007018:	18fb      	adds	r3, r7, r3
 800701a:	2200      	movs	r2, #0
 800701c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800701e:	4b09      	ldr	r3, [pc, #36]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	2238      	movs	r2, #56	; 0x38
 8007024:	4013      	ands	r3, r2
 8007026:	2b20      	cmp	r3, #32
 8007028:	d11e      	bne.n	8007068 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800702a:	4b06      	ldr	r3, [pc, #24]	; (8007044 <HAL_RCC_OscConfig+0x32c>)
 800702c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800702e:	2202      	movs	r2, #2
 8007030:	4013      	ands	r3, r2
 8007032:	d100      	bne.n	8007036 <HAL_RCC_OscConfig+0x31e>
 8007034:	e0b6      	b.n	80071a4 <HAL_RCC_OscConfig+0x48c>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	689b      	ldr	r3, [r3, #8]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d000      	beq.n	8007040 <HAL_RCC_OscConfig+0x328>
 800703e:	e0b1      	b.n	80071a4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e16c      	b.n	800731e <HAL_RCC_OscConfig+0x606>
 8007044:	40021000 	.word	0x40021000
 8007048:	fffeffff 	.word	0xfffeffff
 800704c:	fffbffff 	.word	0xfffbffff
 8007050:	ffff80ff 	.word	0xffff80ff
 8007054:	ffffc7ff 	.word	0xffffc7ff
 8007058:	00f42400 	.word	0x00f42400
 800705c:	20000020 	.word	0x20000020
 8007060:	20000024 	.word	0x20000024
 8007064:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007068:	4baf      	ldr	r3, [pc, #700]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800706a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800706c:	2380      	movs	r3, #128	; 0x80
 800706e:	055b      	lsls	r3, r3, #21
 8007070:	4013      	ands	r3, r2
 8007072:	d101      	bne.n	8007078 <HAL_RCC_OscConfig+0x360>
 8007074:	2301      	movs	r3, #1
 8007076:	e000      	b.n	800707a <HAL_RCC_OscConfig+0x362>
 8007078:	2300      	movs	r3, #0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d011      	beq.n	80070a2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800707e:	4baa      	ldr	r3, [pc, #680]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007080:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007082:	4ba9      	ldr	r3, [pc, #676]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007084:	2180      	movs	r1, #128	; 0x80
 8007086:	0549      	lsls	r1, r1, #21
 8007088:	430a      	orrs	r2, r1
 800708a:	63da      	str	r2, [r3, #60]	; 0x3c
 800708c:	4ba6      	ldr	r3, [pc, #664]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800708e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007090:	2380      	movs	r3, #128	; 0x80
 8007092:	055b      	lsls	r3, r3, #21
 8007094:	4013      	ands	r3, r2
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800709a:	231f      	movs	r3, #31
 800709c:	18fb      	adds	r3, r7, r3
 800709e:	2201      	movs	r2, #1
 80070a0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070a2:	4ba2      	ldr	r3, [pc, #648]	; (800732c <HAL_RCC_OscConfig+0x614>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	2380      	movs	r3, #128	; 0x80
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	4013      	ands	r3, r2
 80070ac:	d11a      	bne.n	80070e4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070ae:	4b9f      	ldr	r3, [pc, #636]	; (800732c <HAL_RCC_OscConfig+0x614>)
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	4b9e      	ldr	r3, [pc, #632]	; (800732c <HAL_RCC_OscConfig+0x614>)
 80070b4:	2180      	movs	r1, #128	; 0x80
 80070b6:	0049      	lsls	r1, r1, #1
 80070b8:	430a      	orrs	r2, r1
 80070ba:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80070bc:	f7fe fb48 	bl	8005750 <HAL_GetTick>
 80070c0:	0003      	movs	r3, r0
 80070c2:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c6:	f7fe fb43 	bl	8005750 <HAL_GetTick>
 80070ca:	0002      	movs	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e122      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80070d8:	4b94      	ldr	r3, [pc, #592]	; (800732c <HAL_RCC_OscConfig+0x614>)
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	2380      	movs	r3, #128	; 0x80
 80070de:	005b      	lsls	r3, r3, #1
 80070e0:	4013      	ands	r3, r2
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d106      	bne.n	80070fa <HAL_RCC_OscConfig+0x3e2>
 80070ec:	4b8e      	ldr	r3, [pc, #568]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80070ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80070f0:	4b8d      	ldr	r3, [pc, #564]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80070f2:	2101      	movs	r1, #1
 80070f4:	430a      	orrs	r2, r1
 80070f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80070f8:	e01c      	b.n	8007134 <HAL_RCC_OscConfig+0x41c>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	2b05      	cmp	r3, #5
 8007100:	d10c      	bne.n	800711c <HAL_RCC_OscConfig+0x404>
 8007102:	4b89      	ldr	r3, [pc, #548]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007104:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007106:	4b88      	ldr	r3, [pc, #544]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007108:	2104      	movs	r1, #4
 800710a:	430a      	orrs	r2, r1
 800710c:	65da      	str	r2, [r3, #92]	; 0x5c
 800710e:	4b86      	ldr	r3, [pc, #536]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007112:	4b85      	ldr	r3, [pc, #532]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007114:	2101      	movs	r1, #1
 8007116:	430a      	orrs	r2, r1
 8007118:	65da      	str	r2, [r3, #92]	; 0x5c
 800711a:	e00b      	b.n	8007134 <HAL_RCC_OscConfig+0x41c>
 800711c:	4b82      	ldr	r3, [pc, #520]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800711e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007120:	4b81      	ldr	r3, [pc, #516]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007122:	2101      	movs	r1, #1
 8007124:	438a      	bics	r2, r1
 8007126:	65da      	str	r2, [r3, #92]	; 0x5c
 8007128:	4b7f      	ldr	r3, [pc, #508]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800712a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800712c:	4b7e      	ldr	r3, [pc, #504]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800712e:	2104      	movs	r1, #4
 8007130:	438a      	bics	r2, r1
 8007132:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d014      	beq.n	8007166 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800713c:	f7fe fb08 	bl	8005750 <HAL_GetTick>
 8007140:	0003      	movs	r3, r0
 8007142:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007144:	e009      	b.n	800715a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007146:	f7fe fb03 	bl	8005750 <HAL_GetTick>
 800714a:	0002      	movs	r2, r0
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	4a77      	ldr	r2, [pc, #476]	; (8007330 <HAL_RCC_OscConfig+0x618>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d901      	bls.n	800715a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e0e1      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800715a:	4b73      	ldr	r3, [pc, #460]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800715c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715e:	2202      	movs	r2, #2
 8007160:	4013      	ands	r3, r2
 8007162:	d0f0      	beq.n	8007146 <HAL_RCC_OscConfig+0x42e>
 8007164:	e013      	b.n	800718e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007166:	f7fe faf3 	bl	8005750 <HAL_GetTick>
 800716a:	0003      	movs	r3, r0
 800716c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800716e:	e009      	b.n	8007184 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007170:	f7fe faee 	bl	8005750 <HAL_GetTick>
 8007174:	0002      	movs	r2, r0
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	1ad3      	subs	r3, r2, r3
 800717a:	4a6d      	ldr	r2, [pc, #436]	; (8007330 <HAL_RCC_OscConfig+0x618>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d901      	bls.n	8007184 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8007180:	2303      	movs	r3, #3
 8007182:	e0cc      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007184:	4b68      	ldr	r3, [pc, #416]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	2202      	movs	r2, #2
 800718a:	4013      	ands	r3, r2
 800718c:	d1f0      	bne.n	8007170 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800718e:	231f      	movs	r3, #31
 8007190:	18fb      	adds	r3, r7, r3
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d105      	bne.n	80071a4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8007198:	4b63      	ldr	r3, [pc, #396]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800719a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800719c:	4b62      	ldr	r3, [pc, #392]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800719e:	4965      	ldr	r1, [pc, #404]	; (8007334 <HAL_RCC_OscConfig+0x61c>)
 80071a0:	400a      	ands	r2, r1
 80071a2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d100      	bne.n	80071ae <HAL_RCC_OscConfig+0x496>
 80071ac:	e0b6      	b.n	800731c <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80071ae:	4b5e      	ldr	r3, [pc, #376]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	2238      	movs	r2, #56	; 0x38
 80071b4:	4013      	ands	r3, r2
 80071b6:	2b10      	cmp	r3, #16
 80071b8:	d100      	bne.n	80071bc <HAL_RCC_OscConfig+0x4a4>
 80071ba:	e07e      	b.n	80072ba <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	69db      	ldr	r3, [r3, #28]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d153      	bne.n	800726c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071c4:	4b58      	ldr	r3, [pc, #352]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	4b57      	ldr	r3, [pc, #348]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80071ca:	495b      	ldr	r1, [pc, #364]	; (8007338 <HAL_RCC_OscConfig+0x620>)
 80071cc:	400a      	ands	r2, r1
 80071ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071d0:	f7fe fabe 	bl	8005750 <HAL_GetTick>
 80071d4:	0003      	movs	r3, r0
 80071d6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d8:	e008      	b.n	80071ec <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071da:	f7fe fab9 	bl	8005750 <HAL_GetTick>
 80071de:	0002      	movs	r2, r0
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e098      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071ec:	4b4e      	ldr	r3, [pc, #312]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	2380      	movs	r3, #128	; 0x80
 80071f2:	049b      	lsls	r3, r3, #18
 80071f4:	4013      	ands	r3, r2
 80071f6:	d1f0      	bne.n	80071da <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80071f8:	4b4b      	ldr	r3, [pc, #300]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	4a4f      	ldr	r2, [pc, #316]	; (800733c <HAL_RCC_OscConfig+0x624>)
 80071fe:	4013      	ands	r3, r2
 8007200:	0019      	movs	r1, r3
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1a      	ldr	r2, [r3, #32]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007210:	021b      	lsls	r3, r3, #8
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	431a      	orrs	r2, r3
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721e:	431a      	orrs	r2, r3
 8007220:	4b41      	ldr	r3, [pc, #260]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007222:	430a      	orrs	r2, r1
 8007224:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007226:	4b40      	ldr	r3, [pc, #256]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	0449      	lsls	r1, r1, #17
 8007230:	430a      	orrs	r2, r1
 8007232:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8007234:	4b3c      	ldr	r3, [pc, #240]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	4b3b      	ldr	r3, [pc, #236]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800723a:	2180      	movs	r1, #128	; 0x80
 800723c:	0549      	lsls	r1, r1, #21
 800723e:	430a      	orrs	r2, r1
 8007240:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007242:	f7fe fa85 	bl	8005750 <HAL_GetTick>
 8007246:	0003      	movs	r3, r0
 8007248:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800724a:	e008      	b.n	800725e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800724c:	f7fe fa80 	bl	8005750 <HAL_GetTick>
 8007250:	0002      	movs	r2, r0
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	1ad3      	subs	r3, r2, r3
 8007256:	2b02      	cmp	r3, #2
 8007258:	d901      	bls.n	800725e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800725a:	2303      	movs	r3, #3
 800725c:	e05f      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	4b32      	ldr	r3, [pc, #200]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	2380      	movs	r3, #128	; 0x80
 8007264:	049b      	lsls	r3, r3, #18
 8007266:	4013      	ands	r3, r2
 8007268:	d0f0      	beq.n	800724c <HAL_RCC_OscConfig+0x534>
 800726a:	e057      	b.n	800731c <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800726c:	4b2e      	ldr	r3, [pc, #184]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	4b2d      	ldr	r3, [pc, #180]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007272:	4931      	ldr	r1, [pc, #196]	; (8007338 <HAL_RCC_OscConfig+0x620>)
 8007274:	400a      	ands	r2, r1
 8007276:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8007278:	4b2b      	ldr	r3, [pc, #172]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800727a:	68da      	ldr	r2, [r3, #12]
 800727c:	4b2a      	ldr	r3, [pc, #168]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800727e:	2103      	movs	r1, #3
 8007280:	438a      	bics	r2, r1
 8007282:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8007284:	4b28      	ldr	r3, [pc, #160]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 8007286:	68da      	ldr	r2, [r3, #12]
 8007288:	4b27      	ldr	r3, [pc, #156]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 800728a:	492d      	ldr	r1, [pc, #180]	; (8007340 <HAL_RCC_OscConfig+0x628>)
 800728c:	400a      	ands	r2, r1
 800728e:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007290:	f7fe fa5e 	bl	8005750 <HAL_GetTick>
 8007294:	0003      	movs	r3, r0
 8007296:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007298:	e008      	b.n	80072ac <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800729a:	f7fe fa59 	bl	8005750 <HAL_GetTick>
 800729e:	0002      	movs	r2, r0
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	1ad3      	subs	r3, r2, r3
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e038      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80072ac:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	2380      	movs	r3, #128	; 0x80
 80072b2:	049b      	lsls	r3, r3, #18
 80072b4:	4013      	ands	r3, r2
 80072b6:	d1f0      	bne.n	800729a <HAL_RCC_OscConfig+0x582>
 80072b8:	e030      	b.n	800731c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d101      	bne.n	80072c6 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e02b      	b.n	800731e <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80072c6:	4b18      	ldr	r3, [pc, #96]	; (8007328 <HAL_RCC_OscConfig+0x610>)
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2203      	movs	r2, #3
 80072d0:	401a      	ands	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a1b      	ldr	r3, [r3, #32]
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d11e      	bne.n	8007318 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2270      	movs	r2, #112	; 0x70
 80072de:	401a      	ands	r2, r3
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d117      	bne.n	8007318 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	23fe      	movs	r3, #254	; 0xfe
 80072ec:	01db      	lsls	r3, r3, #7
 80072ee:	401a      	ands	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d10e      	bne.n	8007318 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80072fa:	697a      	ldr	r2, [r7, #20]
 80072fc:	23f8      	movs	r3, #248	; 0xf8
 80072fe:	039b      	lsls	r3, r3, #14
 8007300:	401a      	ands	r2, r3
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007306:	429a      	cmp	r2, r3
 8007308:	d106      	bne.n	8007318 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	0f5b      	lsrs	r3, r3, #29
 800730e:	075a      	lsls	r2, r3, #29
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8007314:	429a      	cmp	r2, r3
 8007316:	d001      	beq.n	800731c <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8007318:	2301      	movs	r3, #1
 800731a:	e000      	b.n	800731e <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	0018      	movs	r0, r3
 8007320:	46bd      	mov	sp, r7
 8007322:	b008      	add	sp, #32
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	40021000 	.word	0x40021000
 800732c:	40007000 	.word	0x40007000
 8007330:	00001388 	.word	0x00001388
 8007334:	efffffff 	.word	0xefffffff
 8007338:	feffffff 	.word	0xfeffffff
 800733c:	1fc1808c 	.word	0x1fc1808c
 8007340:	effeffff 	.word	0xeffeffff

08007344 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d101      	bne.n	8007358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007354:	2301      	movs	r3, #1
 8007356:	e0e9      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007358:	4b76      	ldr	r3, [pc, #472]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2207      	movs	r2, #7
 800735e:	4013      	ands	r3, r2
 8007360:	683a      	ldr	r2, [r7, #0]
 8007362:	429a      	cmp	r2, r3
 8007364:	d91e      	bls.n	80073a4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007366:	4b73      	ldr	r3, [pc, #460]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2207      	movs	r2, #7
 800736c:	4393      	bics	r3, r2
 800736e:	0019      	movs	r1, r3
 8007370:	4b70      	ldr	r3, [pc, #448]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 8007372:	683a      	ldr	r2, [r7, #0]
 8007374:	430a      	orrs	r2, r1
 8007376:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007378:	f7fe f9ea 	bl	8005750 <HAL_GetTick>
 800737c:	0003      	movs	r3, r0
 800737e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007380:	e009      	b.n	8007396 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007382:	f7fe f9e5 	bl	8005750 <HAL_GetTick>
 8007386:	0002      	movs	r2, r0
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	1ad3      	subs	r3, r2, r3
 800738c:	4a6a      	ldr	r2, [pc, #424]	; (8007538 <HAL_RCC_ClockConfig+0x1f4>)
 800738e:	4293      	cmp	r3, r2
 8007390:	d901      	bls.n	8007396 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e0ca      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007396:	4b67      	ldr	r3, [pc, #412]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2207      	movs	r2, #7
 800739c:	4013      	ands	r3, r2
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d1ee      	bne.n	8007382 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2202      	movs	r2, #2
 80073aa:	4013      	ands	r3, r2
 80073ac:	d015      	beq.n	80073da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2204      	movs	r2, #4
 80073b4:	4013      	ands	r3, r2
 80073b6:	d006      	beq.n	80073c6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80073b8:	4b60      	ldr	r3, [pc, #384]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80073ba:	689a      	ldr	r2, [r3, #8]
 80073bc:	4b5f      	ldr	r3, [pc, #380]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80073be:	21e0      	movs	r1, #224	; 0xe0
 80073c0:	01c9      	lsls	r1, r1, #7
 80073c2:	430a      	orrs	r2, r1
 80073c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073c6:	4b5d      	ldr	r3, [pc, #372]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	4a5d      	ldr	r2, [pc, #372]	; (8007540 <HAL_RCC_ClockConfig+0x1fc>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	0019      	movs	r1, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	689a      	ldr	r2, [r3, #8]
 80073d4:	4b59      	ldr	r3, [pc, #356]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80073d6:	430a      	orrs	r2, r1
 80073d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	2201      	movs	r2, #1
 80073e0:	4013      	ands	r3, r2
 80073e2:	d057      	beq.n	8007494 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	2b01      	cmp	r3, #1
 80073ea:	d107      	bne.n	80073fc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073ec:	4b53      	ldr	r3, [pc, #332]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	2380      	movs	r3, #128	; 0x80
 80073f2:	029b      	lsls	r3, r3, #10
 80073f4:	4013      	ands	r3, r2
 80073f6:	d12b      	bne.n	8007450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	e097      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b02      	cmp	r3, #2
 8007402:	d107      	bne.n	8007414 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007404:	4b4d      	ldr	r3, [pc, #308]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	2380      	movs	r3, #128	; 0x80
 800740a:	049b      	lsls	r3, r3, #18
 800740c:	4013      	ands	r3, r2
 800740e:	d11f      	bne.n	8007450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
 8007412:	e08b      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d107      	bne.n	800742c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800741c:	4b47      	ldr	r3, [pc, #284]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 800741e:	681a      	ldr	r2, [r3, #0]
 8007420:	2380      	movs	r3, #128	; 0x80
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	4013      	ands	r3, r2
 8007426:	d113      	bne.n	8007450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e07f      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d106      	bne.n	8007442 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007434:	4b41      	ldr	r3, [pc, #260]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007436:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007438:	2202      	movs	r2, #2
 800743a:	4013      	ands	r3, r2
 800743c:	d108      	bne.n	8007450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	e074      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007442:	4b3e      	ldr	r3, [pc, #248]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007446:	2202      	movs	r2, #2
 8007448:	4013      	ands	r3, r2
 800744a:	d101      	bne.n	8007450 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	e06d      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007450:	4b3a      	ldr	r3, [pc, #232]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	2207      	movs	r2, #7
 8007456:	4393      	bics	r3, r2
 8007458:	0019      	movs	r1, r3
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	4b37      	ldr	r3, [pc, #220]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007460:	430a      	orrs	r2, r1
 8007462:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007464:	f7fe f974 	bl	8005750 <HAL_GetTick>
 8007468:	0003      	movs	r3, r0
 800746a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800746c:	e009      	b.n	8007482 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800746e:	f7fe f96f 	bl	8005750 <HAL_GetTick>
 8007472:	0002      	movs	r2, r0
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	4a2f      	ldr	r2, [pc, #188]	; (8007538 <HAL_RCC_ClockConfig+0x1f4>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e054      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007482:	4b2e      	ldr	r3, [pc, #184]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	2238      	movs	r2, #56	; 0x38
 8007488:	401a      	ands	r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	00db      	lsls	r3, r3, #3
 8007490:	429a      	cmp	r2, r3
 8007492:	d1ec      	bne.n	800746e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007494:	4b27      	ldr	r3, [pc, #156]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2207      	movs	r2, #7
 800749a:	4013      	ands	r3, r2
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d21e      	bcs.n	80074e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a2:	4b24      	ldr	r3, [pc, #144]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2207      	movs	r2, #7
 80074a8:	4393      	bics	r3, r2
 80074aa:	0019      	movs	r1, r3
 80074ac:	4b21      	ldr	r3, [pc, #132]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 80074ae:	683a      	ldr	r2, [r7, #0]
 80074b0:	430a      	orrs	r2, r1
 80074b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80074b4:	f7fe f94c 	bl	8005750 <HAL_GetTick>
 80074b8:	0003      	movs	r3, r0
 80074ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80074bc:	e009      	b.n	80074d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074be:	f7fe f947 	bl	8005750 <HAL_GetTick>
 80074c2:	0002      	movs	r2, r0
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	4a1b      	ldr	r2, [pc, #108]	; (8007538 <HAL_RCC_ClockConfig+0x1f4>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e02c      	b.n	800752c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80074d2:	4b18      	ldr	r3, [pc, #96]	; (8007534 <HAL_RCC_ClockConfig+0x1f0>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2207      	movs	r2, #7
 80074d8:	4013      	ands	r3, r2
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d1ee      	bne.n	80074be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2204      	movs	r2, #4
 80074e6:	4013      	ands	r3, r2
 80074e8:	d009      	beq.n	80074fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80074ea:	4b14      	ldr	r3, [pc, #80]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	4a15      	ldr	r2, [pc, #84]	; (8007544 <HAL_RCC_ClockConfig+0x200>)
 80074f0:	4013      	ands	r3, r2
 80074f2:	0019      	movs	r1, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	68da      	ldr	r2, [r3, #12]
 80074f8:	4b10      	ldr	r3, [pc, #64]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 80074fa:	430a      	orrs	r2, r1
 80074fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80074fe:	f000 f829 	bl	8007554 <HAL_RCC_GetSysClockFreq>
 8007502:	0001      	movs	r1, r0
 8007504:	4b0d      	ldr	r3, [pc, #52]	; (800753c <HAL_RCC_ClockConfig+0x1f8>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	0a1b      	lsrs	r3, r3, #8
 800750a:	220f      	movs	r2, #15
 800750c:	401a      	ands	r2, r3
 800750e:	4b0e      	ldr	r3, [pc, #56]	; (8007548 <HAL_RCC_ClockConfig+0x204>)
 8007510:	0092      	lsls	r2, r2, #2
 8007512:	58d3      	ldr	r3, [r2, r3]
 8007514:	221f      	movs	r2, #31
 8007516:	4013      	ands	r3, r2
 8007518:	000a      	movs	r2, r1
 800751a:	40da      	lsrs	r2, r3
 800751c:	4b0b      	ldr	r3, [pc, #44]	; (800754c <HAL_RCC_ClockConfig+0x208>)
 800751e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007520:	4b0b      	ldr	r3, [pc, #44]	; (8007550 <HAL_RCC_ClockConfig+0x20c>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	0018      	movs	r0, r3
 8007526:	f7fe f8b7 	bl	8005698 <HAL_InitTick>
 800752a:	0003      	movs	r3, r0
}
 800752c:	0018      	movs	r0, r3
 800752e:	46bd      	mov	sp, r7
 8007530:	b004      	add	sp, #16
 8007532:	bd80      	pop	{r7, pc}
 8007534:	40022000 	.word	0x40022000
 8007538:	00001388 	.word	0x00001388
 800753c:	40021000 	.word	0x40021000
 8007540:	fffff0ff 	.word	0xfffff0ff
 8007544:	ffff8fff 	.word	0xffff8fff
 8007548:	080098fc 	.word	0x080098fc
 800754c:	20000020 	.word	0x20000020
 8007550:	20000024 	.word	0x20000024

08007554 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b086      	sub	sp, #24
 8007558:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800755a:	4b3c      	ldr	r3, [pc, #240]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	2238      	movs	r2, #56	; 0x38
 8007560:	4013      	ands	r3, r2
 8007562:	d10f      	bne.n	8007584 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007564:	4b39      	ldr	r3, [pc, #228]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	0adb      	lsrs	r3, r3, #11
 800756a:	2207      	movs	r2, #7
 800756c:	4013      	ands	r3, r2
 800756e:	2201      	movs	r2, #1
 8007570:	409a      	lsls	r2, r3
 8007572:	0013      	movs	r3, r2
 8007574:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007576:	6839      	ldr	r1, [r7, #0]
 8007578:	4835      	ldr	r0, [pc, #212]	; (8007650 <HAL_RCC_GetSysClockFreq+0xfc>)
 800757a:	f7f8 fdc1 	bl	8000100 <__udivsi3>
 800757e:	0003      	movs	r3, r0
 8007580:	613b      	str	r3, [r7, #16]
 8007582:	e05d      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007584:	4b31      	ldr	r3, [pc, #196]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	2238      	movs	r2, #56	; 0x38
 800758a:	4013      	ands	r3, r2
 800758c:	2b08      	cmp	r3, #8
 800758e:	d102      	bne.n	8007596 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007590:	4b2f      	ldr	r3, [pc, #188]	; (8007650 <HAL_RCC_GetSysClockFreq+0xfc>)
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	e054      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007596:	4b2d      	ldr	r3, [pc, #180]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	2238      	movs	r2, #56	; 0x38
 800759c:	4013      	ands	r3, r2
 800759e:	2b10      	cmp	r3, #16
 80075a0:	d138      	bne.n	8007614 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80075a2:	4b2a      	ldr	r3, [pc, #168]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	2203      	movs	r2, #3
 80075a8:	4013      	ands	r3, r2
 80075aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80075ac:	4b27      	ldr	r3, [pc, #156]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	091b      	lsrs	r3, r3, #4
 80075b2:	2207      	movs	r2, #7
 80075b4:	4013      	ands	r3, r2
 80075b6:	3301      	adds	r3, #1
 80075b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2b03      	cmp	r3, #3
 80075be:	d10d      	bne.n	80075dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80075c0:	68b9      	ldr	r1, [r7, #8]
 80075c2:	4823      	ldr	r0, [pc, #140]	; (8007650 <HAL_RCC_GetSysClockFreq+0xfc>)
 80075c4:	f7f8 fd9c 	bl	8000100 <__udivsi3>
 80075c8:	0003      	movs	r3, r0
 80075ca:	0019      	movs	r1, r3
 80075cc:	4b1f      	ldr	r3, [pc, #124]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	0a1b      	lsrs	r3, r3, #8
 80075d2:	227f      	movs	r2, #127	; 0x7f
 80075d4:	4013      	ands	r3, r2
 80075d6:	434b      	muls	r3, r1
 80075d8:	617b      	str	r3, [r7, #20]
        break;
 80075da:	e00d      	b.n	80075f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	481c      	ldr	r0, [pc, #112]	; (8007650 <HAL_RCC_GetSysClockFreq+0xfc>)
 80075e0:	f7f8 fd8e 	bl	8000100 <__udivsi3>
 80075e4:	0003      	movs	r3, r0
 80075e6:	0019      	movs	r1, r3
 80075e8:	4b18      	ldr	r3, [pc, #96]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	227f      	movs	r2, #127	; 0x7f
 80075f0:	4013      	ands	r3, r2
 80075f2:	434b      	muls	r3, r1
 80075f4:	617b      	str	r3, [r7, #20]
        break;
 80075f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	0f5b      	lsrs	r3, r3, #29
 80075fe:	2207      	movs	r2, #7
 8007600:	4013      	ands	r3, r2
 8007602:	3301      	adds	r3, #1
 8007604:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8007606:	6879      	ldr	r1, [r7, #4]
 8007608:	6978      	ldr	r0, [r7, #20]
 800760a:	f7f8 fd79 	bl	8000100 <__udivsi3>
 800760e:	0003      	movs	r3, r0
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	e015      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8007614:	4b0d      	ldr	r3, [pc, #52]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	2238      	movs	r2, #56	; 0x38
 800761a:	4013      	ands	r3, r2
 800761c:	2b20      	cmp	r3, #32
 800761e:	d103      	bne.n	8007628 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8007620:	2380      	movs	r3, #128	; 0x80
 8007622:	021b      	lsls	r3, r3, #8
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e00b      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007628:	4b08      	ldr	r3, [pc, #32]	; (800764c <HAL_RCC_GetSysClockFreq+0xf8>)
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2238      	movs	r2, #56	; 0x38
 800762e:	4013      	ands	r3, r2
 8007630:	2b18      	cmp	r3, #24
 8007632:	d103      	bne.n	800763c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007634:	23fa      	movs	r3, #250	; 0xfa
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	613b      	str	r3, [r7, #16]
 800763a:	e001      	b.n	8007640 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007640:	693b      	ldr	r3, [r7, #16]
}
 8007642:	0018      	movs	r0, r3
 8007644:	46bd      	mov	sp, r7
 8007646:	b006      	add	sp, #24
 8007648:	bd80      	pop	{r7, pc}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	40021000 	.word	0x40021000
 8007650:	00f42400 	.word	0x00f42400

08007654 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007658:	4b04      	ldr	r3, [pc, #16]	; (800766c <HAL_RCC_EnableCSS+0x18>)
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	4b03      	ldr	r3, [pc, #12]	; (800766c <HAL_RCC_EnableCSS+0x18>)
 800765e:	2180      	movs	r1, #128	; 0x80
 8007660:	0309      	lsls	r1, r1, #12
 8007662:	430a      	orrs	r2, r1
 8007664:	601a      	str	r2, [r3, #0]
}
 8007666:	46c0      	nop			; (mov r8, r8)
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	40021000 	.word	0x40021000

08007670 <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8007676:	4b0d      	ldr	r3, [pc, #52]	; (80076ac <HAL_RCC_NMI_IRQHandler+0x3c>)
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 800767c:	4b0b      	ldr	r3, [pc, #44]	; (80076ac <HAL_RCC_NMI_IRQHandler+0x3c>)
 800767e:	6879      	ldr	r1, [r7, #4]
 8007680:	22c0      	movs	r2, #192	; 0xc0
 8007682:	0092      	lsls	r2, r2, #2
 8007684:	400a      	ands	r2, r1
 8007686:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8007688:	687a      	ldr	r2, [r7, #4]
 800768a:	2380      	movs	r3, #128	; 0x80
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4013      	ands	r3, r2
 8007690:	d001      	beq.n	8007696 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007692:	f000 f80d 	bl	80076b0 <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	2380      	movs	r3, #128	; 0x80
 800769a:	009b      	lsls	r3, r3, #2
 800769c:	4013      	ands	r3, r2
 800769e:	d001      	beq.n	80076a4 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 80076a0:	f000 f80b 	bl	80076ba <HAL_RCC_LSECSSCallback>
  }
}
 80076a4:	46c0      	nop			; (mov r8, r8)
 80076a6:	46bd      	mov	sp, r7
 80076a8:	b002      	add	sp, #8
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	40021000 	.word	0x40021000

080076b0 <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 80076b4:	46c0      	nop			; (mov r8, r8)
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}

080076ba <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80076cc:	2313      	movs	r3, #19
 80076ce:	18fb      	adds	r3, r7, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076d4:	2312      	movs	r3, #18
 80076d6:	18fb      	adds	r3, r7, r3
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	2380      	movs	r3, #128	; 0x80
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	4013      	ands	r3, r2
 80076e6:	d100      	bne.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x26>
 80076e8:	e0a3      	b.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ea:	2011      	movs	r0, #17
 80076ec:	183b      	adds	r3, r7, r0
 80076ee:	2200      	movs	r2, #0
 80076f0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076f2:	4b86      	ldr	r3, [pc, #536]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80076f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	055b      	lsls	r3, r3, #21
 80076fa:	4013      	ands	r3, r2
 80076fc:	d110      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076fe:	4b83      	ldr	r3, [pc, #524]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007702:	4b82      	ldr	r3, [pc, #520]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007704:	2180      	movs	r1, #128	; 0x80
 8007706:	0549      	lsls	r1, r1, #21
 8007708:	430a      	orrs	r2, r1
 800770a:	63da      	str	r2, [r3, #60]	; 0x3c
 800770c:	4b7f      	ldr	r3, [pc, #508]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800770e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007710:	2380      	movs	r3, #128	; 0x80
 8007712:	055b      	lsls	r3, r3, #21
 8007714:	4013      	ands	r3, r2
 8007716:	60bb      	str	r3, [r7, #8]
 8007718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800771a:	183b      	adds	r3, r7, r0
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007720:	4b7b      	ldr	r3, [pc, #492]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	4b7a      	ldr	r3, [pc, #488]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007726:	2180      	movs	r1, #128	; 0x80
 8007728:	0049      	lsls	r1, r1, #1
 800772a:	430a      	orrs	r2, r1
 800772c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800772e:	f7fe f80f 	bl	8005750 <HAL_GetTick>
 8007732:	0003      	movs	r3, r0
 8007734:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007736:	e00b      	b.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007738:	f7fe f80a 	bl	8005750 <HAL_GetTick>
 800773c:	0002      	movs	r2, r0
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d904      	bls.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007746:	2313      	movs	r3, #19
 8007748:	18fb      	adds	r3, r7, r3
 800774a:	2203      	movs	r2, #3
 800774c:	701a      	strb	r2, [r3, #0]
        break;
 800774e:	e005      	b.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007750:	4b6f      	ldr	r3, [pc, #444]	; (8007910 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	2380      	movs	r3, #128	; 0x80
 8007756:	005b      	lsls	r3, r3, #1
 8007758:	4013      	ands	r3, r2
 800775a:	d0ed      	beq.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800775c:	2313      	movs	r3, #19
 800775e:	18fb      	adds	r3, r7, r3
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d154      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007766:	4b69      	ldr	r3, [pc, #420]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007768:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800776a:	23c0      	movs	r3, #192	; 0xc0
 800776c:	009b      	lsls	r3, r3, #2
 800776e:	4013      	ands	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d019      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	429a      	cmp	r2, r3
 8007780:	d014      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007782:	4b62      	ldr	r3, [pc, #392]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007786:	4a63      	ldr	r2, [pc, #396]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007788:	4013      	ands	r3, r2
 800778a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800778c:	4b5f      	ldr	r3, [pc, #380]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800778e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007790:	4b5e      	ldr	r3, [pc, #376]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007792:	2180      	movs	r1, #128	; 0x80
 8007794:	0249      	lsls	r1, r1, #9
 8007796:	430a      	orrs	r2, r1
 8007798:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800779a:	4b5c      	ldr	r3, [pc, #368]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800779c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800779e:	4b5b      	ldr	r3, [pc, #364]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077a0:	495d      	ldr	r1, [pc, #372]	; (8007918 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80077a2:	400a      	ands	r2, r1
 80077a4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077a6:	4b59      	ldr	r3, [pc, #356]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	2201      	movs	r2, #1
 80077b0:	4013      	ands	r3, r2
 80077b2:	d016      	beq.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077b4:	f7fd ffcc 	bl	8005750 <HAL_GetTick>
 80077b8:	0003      	movs	r3, r0
 80077ba:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077bc:	e00c      	b.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077be:	f7fd ffc7 	bl	8005750 <HAL_GetTick>
 80077c2:	0002      	movs	r2, r0
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	4a54      	ldr	r2, [pc, #336]	; (800791c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d904      	bls.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80077ce:	2313      	movs	r3, #19
 80077d0:	18fb      	adds	r3, r7, r3
 80077d2:	2203      	movs	r2, #3
 80077d4:	701a      	strb	r2, [r3, #0]
            break;
 80077d6:	e004      	b.n	80077e2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077d8:	4b4c      	ldr	r3, [pc, #304]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077dc:	2202      	movs	r2, #2
 80077de:	4013      	ands	r3, r2
 80077e0:	d0ed      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80077e2:	2313      	movs	r3, #19
 80077e4:	18fb      	adds	r3, r7, r3
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077ec:	4b47      	ldr	r3, [pc, #284]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077f0:	4a48      	ldr	r2, [pc, #288]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80077f2:	4013      	ands	r3, r2
 80077f4:	0019      	movs	r1, r3
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	4b44      	ldr	r3, [pc, #272]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80077fc:	430a      	orrs	r2, r1
 80077fe:	65da      	str	r2, [r3, #92]	; 0x5c
 8007800:	e00c      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007802:	2312      	movs	r3, #18
 8007804:	18fb      	adds	r3, r7, r3
 8007806:	2213      	movs	r2, #19
 8007808:	18ba      	adds	r2, r7, r2
 800780a:	7812      	ldrb	r2, [r2, #0]
 800780c:	701a      	strb	r2, [r3, #0]
 800780e:	e005      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	2312      	movs	r3, #18
 8007812:	18fb      	adds	r3, r7, r3
 8007814:	2213      	movs	r2, #19
 8007816:	18ba      	adds	r2, r7, r2
 8007818:	7812      	ldrb	r2, [r2, #0]
 800781a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800781c:	2311      	movs	r3, #17
 800781e:	18fb      	adds	r3, r7, r3
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	2b01      	cmp	r3, #1
 8007824:	d105      	bne.n	8007832 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007826:	4b39      	ldr	r3, [pc, #228]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007828:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800782a:	4b38      	ldr	r3, [pc, #224]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800782c:	493c      	ldr	r1, [pc, #240]	; (8007920 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800782e:	400a      	ands	r2, r1
 8007830:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2201      	movs	r2, #1
 8007838:	4013      	ands	r3, r2
 800783a:	d009      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800783c:	4b33      	ldr	r3, [pc, #204]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800783e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007840:	2203      	movs	r2, #3
 8007842:	4393      	bics	r3, r2
 8007844:	0019      	movs	r1, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685a      	ldr	r2, [r3, #4]
 800784a:	4b30      	ldr	r3, [pc, #192]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800784c:	430a      	orrs	r2, r1
 800784e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	2202      	movs	r2, #2
 8007856:	4013      	ands	r3, r2
 8007858:	d009      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800785a:	4b2c      	ldr	r3, [pc, #176]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	220c      	movs	r2, #12
 8007860:	4393      	bics	r3, r2
 8007862:	0019      	movs	r1, r3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	4b28      	ldr	r3, [pc, #160]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800786a:	430a      	orrs	r2, r1
 800786c:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2220      	movs	r2, #32
 8007874:	4013      	ands	r3, r2
 8007876:	d009      	beq.n	800788c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007878:	4b24      	ldr	r3, [pc, #144]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800787a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800787c:	4a29      	ldr	r2, [pc, #164]	; (8007924 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800787e:	4013      	ands	r3, r2
 8007880:	0019      	movs	r1, r3
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	68da      	ldr	r2, [r3, #12]
 8007886:	4b21      	ldr	r3, [pc, #132]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007888:	430a      	orrs	r2, r1
 800788a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681a      	ldr	r2, [r3, #0]
 8007890:	2380      	movs	r3, #128	; 0x80
 8007892:	01db      	lsls	r3, r3, #7
 8007894:	4013      	ands	r3, r2
 8007896:	d015      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007898:	4b1c      	ldr	r3, [pc, #112]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800789a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	0899      	lsrs	r1, r3, #2
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	695a      	ldr	r2, [r3, #20]
 80078a4:	4b19      	ldr	r3, [pc, #100]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078a6:	430a      	orrs	r2, r1
 80078a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695a      	ldr	r2, [r3, #20]
 80078ae:	2380      	movs	r3, #128	; 0x80
 80078b0:	05db      	lsls	r3, r3, #23
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d106      	bne.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80078b6:	4b15      	ldr	r3, [pc, #84]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078b8:	68da      	ldr	r2, [r3, #12]
 80078ba:	4b14      	ldr	r3, [pc, #80]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078bc:	2180      	movs	r1, #128	; 0x80
 80078be:	0249      	lsls	r1, r1, #9
 80078c0:	430a      	orrs	r2, r1
 80078c2:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	2380      	movs	r3, #128	; 0x80
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	4013      	ands	r3, r2
 80078ce:	d016      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80078d0:	4b0e      	ldr	r3, [pc, #56]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078d4:	4a14      	ldr	r2, [pc, #80]	; (8007928 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80078d6:	4013      	ands	r3, r2
 80078d8:	0019      	movs	r1, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691a      	ldr	r2, [r3, #16]
 80078de:	4b0b      	ldr	r3, [pc, #44]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078e0:	430a      	orrs	r2, r1
 80078e2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	691a      	ldr	r2, [r3, #16]
 80078e8:	2380      	movs	r3, #128	; 0x80
 80078ea:	01db      	lsls	r3, r3, #7
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d106      	bne.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80078f0:	4b06      	ldr	r3, [pc, #24]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078f2:	68da      	ldr	r2, [r3, #12]
 80078f4:	4b05      	ldr	r3, [pc, #20]	; (800790c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80078f6:	2180      	movs	r1, #128	; 0x80
 80078f8:	0249      	lsls	r1, r1, #9
 80078fa:	430a      	orrs	r2, r1
 80078fc:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80078fe:	2312      	movs	r3, #18
 8007900:	18fb      	adds	r3, r7, r3
 8007902:	781b      	ldrb	r3, [r3, #0]
}
 8007904:	0018      	movs	r0, r3
 8007906:	46bd      	mov	sp, r7
 8007908:	b006      	add	sp, #24
 800790a:	bd80      	pop	{r7, pc}
 800790c:	40021000 	.word	0x40021000
 8007910:	40007000 	.word	0x40007000
 8007914:	fffffcff 	.word	0xfffffcff
 8007918:	fffeffff 	.word	0xfffeffff
 800791c:	00001388 	.word	0x00001388
 8007920:	efffffff 	.word	0xefffffff
 8007924:	ffffcfff 	.word	0xffffcfff
 8007928:	ffff3fff 	.word	0xffff3fff

0800792c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800792c:	b5b0      	push	{r4, r5, r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007934:	230f      	movs	r3, #15
 8007936:	18fb      	adds	r3, r7, r3
 8007938:	2201      	movs	r2, #1
 800793a:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d100      	bne.n	8007944 <HAL_RTC_Init+0x18>
 8007942:	e080      	b.n	8007a46 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2229      	movs	r2, #41	; 0x29
 8007948:	5c9b      	ldrb	r3, [r3, r2]
 800794a:	b2db      	uxtb	r3, r3
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2228      	movs	r2, #40	; 0x28
 8007954:	2100      	movs	r1, #0
 8007956:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2288      	movs	r2, #136	; 0x88
 800795c:	0212      	lsls	r2, r2, #8
 800795e:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	0018      	movs	r0, r3
 8007964:	f7fd fc36 	bl	80051d4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2229      	movs	r2, #41	; 0x29
 800796c:	2102      	movs	r1, #2
 800796e:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	22ca      	movs	r2, #202	; 0xca
 8007976:	625a      	str	r2, [r3, #36]	; 0x24
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2253      	movs	r2, #83	; 0x53
 800797e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007980:	250f      	movs	r5, #15
 8007982:	197c      	adds	r4, r7, r5
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0018      	movs	r0, r3
 8007988:	f000 f9df 	bl	8007d4a <RTC_EnterInitMode>
 800798c:	0003      	movs	r3, r0
 800798e:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 8007990:	0028      	movs	r0, r5
 8007992:	183b      	adds	r3, r7, r0
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d148      	bne.n	8007a2c <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	699a      	ldr	r2, [r3, #24]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	492b      	ldr	r1, [pc, #172]	; (8007a54 <HAL_RTC_Init+0x128>)
 80079a6:	400a      	ands	r2, r1
 80079a8:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	6999      	ldr	r1, [r3, #24]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	689a      	ldr	r2, [r3, #8]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	695b      	ldr	r3, [r3, #20]
 80079b8:	431a      	orrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	69db      	ldr	r3, [r3, #28]
 80079be:	431a      	orrs	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	6912      	ldr	r2, [r2, #16]
 80079d0:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	6919      	ldr	r1, [r3, #16]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	68db      	ldr	r3, [r3, #12]
 80079dc:	041a      	lsls	r2, r3, #16
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	430a      	orrs	r2, r1
 80079e4:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80079e6:	0005      	movs	r5, r0
 80079e8:	183c      	adds	r4, r7, r0
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	0018      	movs	r0, r3
 80079ee:	f000 f9ef 	bl	8007dd0 <RTC_ExitInitMode>
 80079f2:	0003      	movs	r3, r0
 80079f4:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80079f6:	197b      	adds	r3, r7, r5
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d116      	bne.n	8007a2c <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	00d2      	lsls	r2, r2, #3
 8007a0a:	08d2      	lsrs	r2, r2, #3
 8007a0c:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6999      	ldr	r1, [r3, #24]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6a1b      	ldr	r3, [r3, #32]
 8007a1c:	431a      	orrs	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	22ff      	movs	r2, #255	; 0xff
 8007a32:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007a34:	230f      	movs	r3, #15
 8007a36:	18fb      	adds	r3, r7, r3
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d103      	bne.n	8007a46 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2229      	movs	r2, #41	; 0x29
 8007a42:	2101      	movs	r1, #1
 8007a44:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007a46:	230f      	movs	r3, #15
 8007a48:	18fb      	adds	r3, r7, r3
 8007a4a:	781b      	ldrb	r3, [r3, #0]
}
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	b004      	add	sp, #16
 8007a52:	bdb0      	pop	{r4, r5, r7, pc}
 8007a54:	fb8fffbf 	.word	0xfb8fffbf

08007a58 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a58:	b5b0      	push	{r4, r5, r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2228      	movs	r2, #40	; 0x28
 8007a68:	5c9b      	ldrb	r3, [r3, r2]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_RTC_SetTime+0x1a>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e092      	b.n	8007b98 <HAL_RTC_SetTime+0x140>
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2228      	movs	r2, #40	; 0x28
 8007a76:	2101      	movs	r1, #1
 8007a78:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2229      	movs	r2, #41	; 0x29
 8007a7e:	2102      	movs	r1, #2
 8007a80:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	22ca      	movs	r2, #202	; 0xca
 8007a88:	625a      	str	r2, [r3, #36]	; 0x24
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2253      	movs	r2, #83	; 0x53
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007a92:	2513      	movs	r5, #19
 8007a94:	197c      	adds	r4, r7, r5
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	0018      	movs	r0, r3
 8007a9a:	f000 f956 	bl	8007d4a <RTC_EnterInitMode>
 8007a9e:	0003      	movs	r3, r0
 8007aa0:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8007aa2:	197b      	adds	r3, r7, r5
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d162      	bne.n	8007b70 <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d125      	bne.n	8007afc <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2240      	movs	r2, #64	; 0x40
 8007ab8:	4013      	ands	r3, r2
 8007aba:	d102      	bne.n	8007ac2 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	0018      	movs	r0, r3
 8007ac8:	f000 f9c6 	bl	8007e58 <RTC_ByteToBcd2>
 8007acc:	0003      	movs	r3, r0
 8007ace:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	0018      	movs	r0, r3
 8007ad6:	f000 f9bf 	bl	8007e58 <RTC_ByteToBcd2>
 8007ada:	0003      	movs	r3, r0
 8007adc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007ade:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	789b      	ldrb	r3, [r3, #2]
 8007ae4:	0018      	movs	r0, r3
 8007ae6:	f000 f9b7 	bl	8007e58 <RTC_ByteToBcd2>
 8007aea:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007aec:	0022      	movs	r2, r4
 8007aee:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	78db      	ldrb	r3, [r3, #3]
 8007af4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	e017      	b.n	8007b2c <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	2240      	movs	r2, #64	; 0x40
 8007b04:	4013      	ands	r3, r2
 8007b06:	d102      	bne.n	8007b0e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	785b      	ldrb	r3, [r3, #1]
 8007b18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007b20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	78db      	ldrb	r3, [r3, #3]
 8007b26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	697a      	ldr	r2, [r7, #20]
 8007b32:	491b      	ldr	r1, [pc, #108]	; (8007ba0 <HAL_RTC_SetTime+0x148>)
 8007b34:	400a      	ands	r2, r1
 8007b36:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4918      	ldr	r1, [pc, #96]	; (8007ba4 <HAL_RTC_SetTime+0x14c>)
 8007b44:	400a      	ands	r2, r1
 8007b46:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6999      	ldr	r1, [r3, #24]
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	68da      	ldr	r2, [r3, #12]
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	691b      	ldr	r3, [r3, #16]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	430a      	orrs	r2, r1
 8007b5e:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007b60:	2313      	movs	r3, #19
 8007b62:	18fc      	adds	r4, r7, r3
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0018      	movs	r0, r3
 8007b68:	f000 f932 	bl	8007dd0 <RTC_ExitInitMode>
 8007b6c:	0003      	movs	r3, r0
 8007b6e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	22ff      	movs	r2, #255	; 0xff
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8007b78:	2313      	movs	r3, #19
 8007b7a:	18fb      	adds	r3, r7, r3
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d103      	bne.n	8007b8a <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2229      	movs	r2, #41	; 0x29
 8007b86:	2101      	movs	r1, #1
 8007b88:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2228      	movs	r2, #40	; 0x28
 8007b8e:	2100      	movs	r1, #0
 8007b90:	5499      	strb	r1, [r3, r2]

  return status;
 8007b92:	2313      	movs	r3, #19
 8007b94:	18fb      	adds	r3, r7, r3
 8007b96:	781b      	ldrb	r3, [r3, #0]
}
 8007b98:	0018      	movs	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	b006      	add	sp, #24
 8007b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba0:	007f7f7f 	.word	0x007f7f7f
 8007ba4:	fffbffff 	.word	0xfffbffff

08007ba8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	689a      	ldr	r2, [r3, #8]
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	045b      	lsls	r3, r3, #17
 8007bc6:	0c5a      	lsrs	r2, r3, #17
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a22      	ldr	r2, [pc, #136]	; (8007c5c <HAL_RTC_GetTime+0xb4>)
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	0c1b      	lsrs	r3, r3, #16
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	223f      	movs	r2, #63	; 0x3f
 8007be0:	4013      	ands	r3, r2
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	0a1b      	lsrs	r3, r3, #8
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	227f      	movs	r2, #127	; 0x7f
 8007bf0:	4013      	ands	r3, r2
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	68bb      	ldr	r3, [r7, #8]
 8007bf6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	227f      	movs	r2, #127	; 0x7f
 8007bfe:	4013      	ands	r3, r2
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	0d9b      	lsrs	r3, r3, #22
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	4013      	ands	r3, r2
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11a      	bne.n	8007c52 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007c1c:	68bb      	ldr	r3, [r7, #8]
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	0018      	movs	r0, r3
 8007c22:	f000 f941 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007c26:	0003      	movs	r3, r0
 8007c28:	001a      	movs	r2, r3
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	0018      	movs	r0, r3
 8007c34:	f000 f938 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007c38:	0003      	movs	r3, r0
 8007c3a:	001a      	movs	r2, r3
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	789b      	ldrb	r3, [r3, #2]
 8007c44:	0018      	movs	r0, r3
 8007c46:	f000 f92f 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007c4a:	0003      	movs	r3, r0
 8007c4c:	001a      	movs	r2, r3
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007c52:	2300      	movs	r3, #0
}
 8007c54:	0018      	movs	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	b006      	add	sp, #24
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	007f7f7f 	.word	0x007f7f7f

08007c60 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	60b9      	str	r1, [r7, #8]
 8007c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4a21      	ldr	r2, [pc, #132]	; (8007cf8 <HAL_RTC_GetDate+0x98>)
 8007c74:	4013      	ands	r3, r2
 8007c76:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	0c1b      	lsrs	r3, r3, #16
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	0a1b      	lsrs	r3, r3, #8
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	221f      	movs	r2, #31
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	b2db      	uxtb	r3, r3
 8007c96:	223f      	movs	r2, #63	; 0x3f
 8007c98:	4013      	ands	r3, r2
 8007c9a:	b2da      	uxtb	r2, r3
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	0b5b      	lsrs	r3, r3, #13
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2207      	movs	r2, #7
 8007ca8:	4013      	ands	r3, r2
 8007caa:	b2da      	uxtb	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d11a      	bne.n	8007cec <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	78db      	ldrb	r3, [r3, #3]
 8007cba:	0018      	movs	r0, r3
 8007cbc:	f000 f8f4 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007cc0:	0003      	movs	r3, r0
 8007cc2:	001a      	movs	r2, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	785b      	ldrb	r3, [r3, #1]
 8007ccc:	0018      	movs	r0, r3
 8007cce:	f000 f8eb 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007cd2:	0003      	movs	r3, r0
 8007cd4:	001a      	movs	r2, r3
 8007cd6:	68bb      	ldr	r3, [r7, #8]
 8007cd8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	789b      	ldrb	r3, [r3, #2]
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f000 f8e2 	bl	8007ea8 <RTC_Bcd2ToByte>
 8007ce4:	0003      	movs	r3, r0
 8007ce6:	001a      	movs	r2, r3
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	0018      	movs	r0, r3
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	b006      	add	sp, #24
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	46c0      	nop			; (mov r8, r8)
 8007cf8:	00ffff3f 	.word	0x00ffff3f

08007cfc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68da      	ldr	r2, [r3, #12]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	21a0      	movs	r1, #160	; 0xa0
 8007d10:	438a      	bics	r2, r1
 8007d12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007d14:	f7fd fd1c 	bl	8005750 <HAL_GetTick>
 8007d18:	0003      	movs	r3, r0
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007d1c:	e00a      	b.n	8007d34 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d1e:	f7fd fd17 	bl	8005750 <HAL_GetTick>
 8007d22:	0002      	movs	r2, r0
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	23fa      	movs	r3, #250	; 0xfa
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d901      	bls.n	8007d34 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e006      	b.n	8007d42 <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d0ee      	beq.n	8007d1e <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	0018      	movs	r0, r3
 8007d44:	46bd      	mov	sp, r7
 8007d46:	b004      	add	sp, #16
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b084      	sub	sp, #16
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 8007d52:	230f      	movs	r3, #15
 8007d54:	18fb      	adds	r3, r7, r3
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	2240      	movs	r2, #64	; 0x40
 8007d62:	4013      	ands	r3, r2
 8007d64:	d12c      	bne.n	8007dc0 <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68da      	ldr	r2, [r3, #12]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2180      	movs	r1, #128	; 0x80
 8007d72:	430a      	orrs	r2, r1
 8007d74:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007d76:	f7fd fceb 	bl	8005750 <HAL_GetTick>
 8007d7a:	0003      	movs	r3, r0
 8007d7c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007d7e:	e014      	b.n	8007daa <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 8007d80:	f7fd fce6 	bl	8005750 <HAL_GetTick>
 8007d84:	0002      	movs	r2, r0
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	1ad2      	subs	r2, r2, r3
 8007d8a:	200f      	movs	r0, #15
 8007d8c:	183b      	adds	r3, r7, r0
 8007d8e:	1839      	adds	r1, r7, r0
 8007d90:	7809      	ldrb	r1, [r1, #0]
 8007d92:	7019      	strb	r1, [r3, #0]
 8007d94:	23fa      	movs	r3, #250	; 0xfa
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d906      	bls.n	8007daa <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8007d9c:	183b      	adds	r3, r7, r0
 8007d9e:	2203      	movs	r2, #3
 8007da0:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2229      	movs	r2, #41	; 0x29
 8007da6:	2103      	movs	r1, #3
 8007da8:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68db      	ldr	r3, [r3, #12]
 8007db0:	2240      	movs	r2, #64	; 0x40
 8007db2:	4013      	ands	r3, r2
 8007db4:	d104      	bne.n	8007dc0 <RTC_EnterInitMode+0x76>
 8007db6:	230f      	movs	r3, #15
 8007db8:	18fb      	adds	r3, r7, r3
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b03      	cmp	r3, #3
 8007dbe:	d1df      	bne.n	8007d80 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007dc0:	230f      	movs	r3, #15
 8007dc2:	18fb      	adds	r3, r7, r3
 8007dc4:	781b      	ldrb	r3, [r3, #0]
}
 8007dc6:	0018      	movs	r0, r3
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	b004      	add	sp, #16
 8007dcc:	bd80      	pop	{r7, pc}
	...

08007dd0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007dd0:	b590      	push	{r4, r7, lr}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007dd8:	240f      	movs	r4, #15
 8007dda:	193b      	adds	r3, r7, r4
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8007de0:	4b1c      	ldr	r3, [pc, #112]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007de2:	68da      	ldr	r2, [r3, #12]
 8007de4:	4b1b      	ldr	r3, [pc, #108]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007de6:	2180      	movs	r1, #128	; 0x80
 8007de8:	438a      	bics	r2, r1
 8007dea:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8007dec:	4b19      	ldr	r3, [pc, #100]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2220      	movs	r2, #32
 8007df2:	4013      	ands	r3, r2
 8007df4:	d10d      	bne.n	8007e12 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	0018      	movs	r0, r3
 8007dfa:	f7ff ff7f 	bl	8007cfc <HAL_RTC_WaitForSynchro>
 8007dfe:	1e03      	subs	r3, r0, #0
 8007e00:	d021      	beq.n	8007e46 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2229      	movs	r2, #41	; 0x29
 8007e06:	2103      	movs	r1, #3
 8007e08:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007e0a:	193b      	adds	r3, r7, r4
 8007e0c:	2203      	movs	r2, #3
 8007e0e:	701a      	strb	r2, [r3, #0]
 8007e10:	e019      	b.n	8007e46 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e12:	4b10      	ldr	r3, [pc, #64]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007e14:	699a      	ldr	r2, [r3, #24]
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007e18:	2120      	movs	r1, #32
 8007e1a:	438a      	bics	r2, r1
 8007e1c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	0018      	movs	r0, r3
 8007e22:	f7ff ff6b 	bl	8007cfc <HAL_RTC_WaitForSynchro>
 8007e26:	1e03      	subs	r3, r0, #0
 8007e28:	d007      	beq.n	8007e3a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2229      	movs	r2, #41	; 0x29
 8007e2e:	2103      	movs	r1, #3
 8007e30:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007e32:	230f      	movs	r3, #15
 8007e34:	18fb      	adds	r3, r7, r3
 8007e36:	2203      	movs	r2, #3
 8007e38:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007e3a:	4b06      	ldr	r3, [pc, #24]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <RTC_ExitInitMode+0x84>)
 8007e40:	2120      	movs	r1, #32
 8007e42:	430a      	orrs	r2, r1
 8007e44:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007e46:	230f      	movs	r3, #15
 8007e48:	18fb      	adds	r3, r7, r3
 8007e4a:	781b      	ldrb	r3, [r3, #0]
}
 8007e4c:	0018      	movs	r0, r3
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b005      	add	sp, #20
 8007e52:	bd90      	pop	{r4, r7, pc}
 8007e54:	40002800 	.word	0x40002800

08007e58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b084      	sub	sp, #16
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	0002      	movs	r2, r0
 8007e60:	1dfb      	adds	r3, r7, #7
 8007e62:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007e68:	230b      	movs	r3, #11
 8007e6a:	18fb      	adds	r3, r7, r3
 8007e6c:	1dfa      	adds	r2, r7, #7
 8007e6e:	7812      	ldrb	r2, [r2, #0]
 8007e70:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007e72:	e008      	b.n	8007e86 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007e7a:	220b      	movs	r2, #11
 8007e7c:	18bb      	adds	r3, r7, r2
 8007e7e:	18ba      	adds	r2, r7, r2
 8007e80:	7812      	ldrb	r2, [r2, #0]
 8007e82:	3a0a      	subs	r2, #10
 8007e84:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8007e86:	210b      	movs	r1, #11
 8007e88:	187b      	adds	r3, r7, r1
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	d8f1      	bhi.n	8007e74 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	011b      	lsls	r3, r3, #4
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	781b      	ldrb	r3, [r3, #0]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	b2db      	uxtb	r3, r3
}
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b084      	sub	sp, #16
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	0002      	movs	r2, r0
 8007eb0:	1dfb      	adds	r3, r7, #7
 8007eb2:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007eb4:	1dfb      	adds	r3, r7, #7
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	091b      	lsrs	r3, r3, #4
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	001a      	movs	r2, r3
 8007ebe:	0013      	movs	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	189b      	adds	r3, r3, r2
 8007ec4:	005b      	lsls	r3, r3, #1
 8007ec6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	1dfb      	adds	r3, r7, #7
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	210f      	movs	r1, #15
 8007ed2:	400b      	ands	r3, r1
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	18d3      	adds	r3, r2, r3
 8007ed8:	b2db      	uxtb	r3, r3
}
 8007eda:	0018      	movs	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}

08007ee2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ee2:	b580      	push	{r7, lr}
 8007ee4:	b082      	sub	sp, #8
 8007ee6:	af00      	add	r7, sp, #0
 8007ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e04a      	b.n	8007f8a <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	223d      	movs	r2, #61	; 0x3d
 8007ef8:	5c9b      	ldrb	r3, [r3, r2]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d107      	bne.n	8007f10 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	223c      	movs	r2, #60	; 0x3c
 8007f04:	2100      	movs	r1, #0
 8007f06:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	0018      	movs	r0, r3
 8007f0c:	f7fd f988 	bl	8005220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	223d      	movs	r2, #61	; 0x3d
 8007f14:	2102      	movs	r1, #2
 8007f16:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	3304      	adds	r3, #4
 8007f20:	0019      	movs	r1, r3
 8007f22:	0010      	movs	r0, r2
 8007f24:	f000 fd60 	bl	80089e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2248      	movs	r2, #72	; 0x48
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	223e      	movs	r2, #62	; 0x3e
 8007f34:	2101      	movs	r1, #1
 8007f36:	5499      	strb	r1, [r3, r2]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	223f      	movs	r2, #63	; 0x3f
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	5499      	strb	r1, [r3, r2]
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	2101      	movs	r1, #1
 8007f46:	5499      	strb	r1, [r3, r2]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2241      	movs	r2, #65	; 0x41
 8007f4c:	2101      	movs	r1, #1
 8007f4e:	5499      	strb	r1, [r3, r2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2242      	movs	r2, #66	; 0x42
 8007f54:	2101      	movs	r1, #1
 8007f56:	5499      	strb	r1, [r3, r2]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2243      	movs	r2, #67	; 0x43
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2244      	movs	r2, #68	; 0x44
 8007f64:	2101      	movs	r1, #1
 8007f66:	5499      	strb	r1, [r3, r2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2245      	movs	r2, #69	; 0x45
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	5499      	strb	r1, [r3, r2]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2246      	movs	r2, #70	; 0x46
 8007f74:	2101      	movs	r1, #1
 8007f76:	5499      	strb	r1, [r3, r2]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2247      	movs	r2, #71	; 0x47
 8007f7c:	2101      	movs	r1, #1
 8007f7e:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	223d      	movs	r2, #61	; 0x3d
 8007f84:	2101      	movs	r1, #1
 8007f86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	0018      	movs	r0, r3
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	b002      	add	sp, #8
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b084      	sub	sp, #16
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	223d      	movs	r2, #61	; 0x3d
 8007fa0:	5c9b      	ldrb	r3, [r3, r2]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d001      	beq.n	8007fac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e034      	b.n	8008016 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	223d      	movs	r2, #61	; 0x3d
 8007fb0:	2102      	movs	r1, #2
 8007fb2:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a19      	ldr	r2, [pc, #100]	; (8008020 <HAL_TIM_Base_Start+0x8c>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d009      	beq.n	8007fd2 <HAL_TIM_Base_Start+0x3e>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a18      	ldr	r2, [pc, #96]	; (8008024 <HAL_TIM_Base_Start+0x90>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d004      	beq.n	8007fd2 <HAL_TIM_Base_Start+0x3e>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a16      	ldr	r2, [pc, #88]	; (8008028 <HAL_TIM_Base_Start+0x94>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d116      	bne.n	8008000 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	4a14      	ldr	r2, [pc, #80]	; (800802c <HAL_TIM_Base_Start+0x98>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b06      	cmp	r3, #6
 8007fe2:	d016      	beq.n	8008012 <HAL_TIM_Base_Start+0x7e>
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	2380      	movs	r3, #128	; 0x80
 8007fe8:	025b      	lsls	r3, r3, #9
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d011      	beq.n	8008012 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	430a      	orrs	r2, r1
 8007ffc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ffe:	e008      	b.n	8008012 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2101      	movs	r1, #1
 800800c:	430a      	orrs	r2, r1
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e000      	b.n	8008014 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008012:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	0018      	movs	r0, r3
 8008018:	46bd      	mov	sp, r7
 800801a:	b004      	add	sp, #16
 800801c:	bd80      	pop	{r7, pc}
 800801e:	46c0      	nop			; (mov r8, r8)
 8008020:	40012c00 	.word	0x40012c00
 8008024:	40000400 	.word	0x40000400
 8008028:	40014000 	.word	0x40014000
 800802c:	00010007 	.word	0x00010007

08008030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	223d      	movs	r2, #61	; 0x3d
 800803c:	5c9b      	ldrb	r3, [r3, r2]
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b01      	cmp	r3, #1
 8008042:	d001      	beq.n	8008048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e03c      	b.n	80080c2 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	223d      	movs	r2, #61	; 0x3d
 800804c:	2102      	movs	r1, #2
 800804e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2101      	movs	r1, #1
 800805c:	430a      	orrs	r2, r1
 800805e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a19      	ldr	r2, [pc, #100]	; (80080cc <HAL_TIM_Base_Start_IT+0x9c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d009      	beq.n	800807e <HAL_TIM_Base_Start_IT+0x4e>
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a18      	ldr	r2, [pc, #96]	; (80080d0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d004      	beq.n	800807e <HAL_TIM_Base_Start_IT+0x4e>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <HAL_TIM_Base_Start_IT+0xa4>)
 800807a:	4293      	cmp	r3, r2
 800807c:	d116      	bne.n	80080ac <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	689b      	ldr	r3, [r3, #8]
 8008084:	4a14      	ldr	r2, [pc, #80]	; (80080d8 <HAL_TIM_Base_Start_IT+0xa8>)
 8008086:	4013      	ands	r3, r2
 8008088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2b06      	cmp	r3, #6
 800808e:	d016      	beq.n	80080be <HAL_TIM_Base_Start_IT+0x8e>
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	2380      	movs	r3, #128	; 0x80
 8008094:	025b      	lsls	r3, r3, #9
 8008096:	429a      	cmp	r2, r3
 8008098:	d011      	beq.n	80080be <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2101      	movs	r1, #1
 80080a6:	430a      	orrs	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080aa:	e008      	b.n	80080be <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2101      	movs	r1, #1
 80080b8:	430a      	orrs	r2, r1
 80080ba:	601a      	str	r2, [r3, #0]
 80080bc:	e000      	b.n	80080c0 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080be:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80080c0:	2300      	movs	r3, #0
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	b004      	add	sp, #16
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	40012c00 	.word	0x40012c00
 80080d0:	40000400 	.word	0x40000400
 80080d4:	40014000 	.word	0x40014000
 80080d8:	00010007 	.word	0x00010007

080080dc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b082      	sub	sp, #8
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68da      	ldr	r2, [r3, #12]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	2101      	movs	r1, #1
 80080f0:	438a      	bics	r2, r1
 80080f2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	4a0d      	ldr	r2, [pc, #52]	; (8008130 <HAL_TIM_Base_Stop_IT+0x54>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	d10d      	bne.n	800811c <HAL_TIM_Base_Stop_IT+0x40>
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	4a0b      	ldr	r2, [pc, #44]	; (8008134 <HAL_TIM_Base_Stop_IT+0x58>)
 8008108:	4013      	ands	r3, r2
 800810a:	d107      	bne.n	800811c <HAL_TIM_Base_Stop_IT+0x40>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2101      	movs	r1, #1
 8008118:	438a      	bics	r2, r1
 800811a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	223d      	movs	r2, #61	; 0x3d
 8008120:	2101      	movs	r1, #1
 8008122:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	0018      	movs	r0, r3
 8008128:	46bd      	mov	sp, r7
 800812a:	b002      	add	sp, #8
 800812c:	bd80      	pop	{r7, pc}
 800812e:	46c0      	nop			; (mov r8, r8)
 8008130:	00001111 	.word	0x00001111
 8008134:	00000444 	.word	0x00000444

08008138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d101      	bne.n	800814a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e04a      	b.n	80081e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	223d      	movs	r2, #61	; 0x3d
 800814e:	5c9b      	ldrb	r3, [r3, r2]
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d107      	bne.n	8008166 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	223c      	movs	r2, #60	; 0x3c
 800815a:	2100      	movs	r1, #0
 800815c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	0018      	movs	r0, r3
 8008162:	f000 f841 	bl	80081e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	223d      	movs	r2, #61	; 0x3d
 800816a:	2102      	movs	r1, #2
 800816c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	3304      	adds	r3, #4
 8008176:	0019      	movs	r1, r3
 8008178:	0010      	movs	r0, r2
 800817a:	f000 fc35 	bl	80089e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2248      	movs	r2, #72	; 0x48
 8008182:	2101      	movs	r1, #1
 8008184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	223e      	movs	r2, #62	; 0x3e
 800818a:	2101      	movs	r1, #1
 800818c:	5499      	strb	r1, [r3, r2]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	223f      	movs	r2, #63	; 0x3f
 8008192:	2101      	movs	r1, #1
 8008194:	5499      	strb	r1, [r3, r2]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2240      	movs	r2, #64	; 0x40
 800819a:	2101      	movs	r1, #1
 800819c:	5499      	strb	r1, [r3, r2]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2241      	movs	r2, #65	; 0x41
 80081a2:	2101      	movs	r1, #1
 80081a4:	5499      	strb	r1, [r3, r2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2242      	movs	r2, #66	; 0x42
 80081aa:	2101      	movs	r1, #1
 80081ac:	5499      	strb	r1, [r3, r2]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2243      	movs	r2, #67	; 0x43
 80081b2:	2101      	movs	r1, #1
 80081b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2244      	movs	r2, #68	; 0x44
 80081ba:	2101      	movs	r1, #1
 80081bc:	5499      	strb	r1, [r3, r2]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2245      	movs	r2, #69	; 0x45
 80081c2:	2101      	movs	r1, #1
 80081c4:	5499      	strb	r1, [r3, r2]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2246      	movs	r2, #70	; 0x46
 80081ca:	2101      	movs	r1, #1
 80081cc:	5499      	strb	r1, [r3, r2]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2247      	movs	r2, #71	; 0x47
 80081d2:	2101      	movs	r1, #1
 80081d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	223d      	movs	r2, #61	; 0x3d
 80081da:	2101      	movs	r1, #1
 80081dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80081de:	2300      	movs	r3, #0
}
 80081e0:	0018      	movs	r0, r3
 80081e2:	46bd      	mov	sp, r7
 80081e4:	b002      	add	sp, #8
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b082      	sub	sp, #8
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80081f0:	46c0      	nop			; (mov r8, r8)
 80081f2:	46bd      	mov	sp, r7
 80081f4:	b002      	add	sp, #8
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d108      	bne.n	800821a <HAL_TIM_PWM_Start+0x22>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	223e      	movs	r2, #62	; 0x3e
 800820c:	5c9b      	ldrb	r3, [r3, r2]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	3b01      	subs	r3, #1
 8008212:	1e5a      	subs	r2, r3, #1
 8008214:	4193      	sbcs	r3, r2
 8008216:	b2db      	uxtb	r3, r3
 8008218:	e037      	b.n	800828a <HAL_TIM_PWM_Start+0x92>
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b04      	cmp	r3, #4
 800821e:	d108      	bne.n	8008232 <HAL_TIM_PWM_Start+0x3a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	223f      	movs	r2, #63	; 0x3f
 8008224:	5c9b      	ldrb	r3, [r3, r2]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	3b01      	subs	r3, #1
 800822a:	1e5a      	subs	r2, r3, #1
 800822c:	4193      	sbcs	r3, r2
 800822e:	b2db      	uxtb	r3, r3
 8008230:	e02b      	b.n	800828a <HAL_TIM_PWM_Start+0x92>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b08      	cmp	r3, #8
 8008236:	d108      	bne.n	800824a <HAL_TIM_PWM_Start+0x52>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2240      	movs	r2, #64	; 0x40
 800823c:	5c9b      	ldrb	r3, [r3, r2]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	3b01      	subs	r3, #1
 8008242:	1e5a      	subs	r2, r3, #1
 8008244:	4193      	sbcs	r3, r2
 8008246:	b2db      	uxtb	r3, r3
 8008248:	e01f      	b.n	800828a <HAL_TIM_PWM_Start+0x92>
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	2b0c      	cmp	r3, #12
 800824e:	d108      	bne.n	8008262 <HAL_TIM_PWM_Start+0x6a>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2241      	movs	r2, #65	; 0x41
 8008254:	5c9b      	ldrb	r3, [r3, r2]
 8008256:	b2db      	uxtb	r3, r3
 8008258:	3b01      	subs	r3, #1
 800825a:	1e5a      	subs	r2, r3, #1
 800825c:	4193      	sbcs	r3, r2
 800825e:	b2db      	uxtb	r3, r3
 8008260:	e013      	b.n	800828a <HAL_TIM_PWM_Start+0x92>
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	2b10      	cmp	r3, #16
 8008266:	d108      	bne.n	800827a <HAL_TIM_PWM_Start+0x82>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2242      	movs	r2, #66	; 0x42
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	b2db      	uxtb	r3, r3
 8008270:	3b01      	subs	r3, #1
 8008272:	1e5a      	subs	r2, r3, #1
 8008274:	4193      	sbcs	r3, r2
 8008276:	b2db      	uxtb	r3, r3
 8008278:	e007      	b.n	800828a <HAL_TIM_PWM_Start+0x92>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2243      	movs	r2, #67	; 0x43
 800827e:	5c9b      	ldrb	r3, [r3, r2]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	3b01      	subs	r3, #1
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	4193      	sbcs	r3, r2
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e085      	b.n	800839e <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0xaa>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	223e      	movs	r2, #62	; 0x3e
 800829c:	2102      	movs	r1, #2
 800829e:	5499      	strb	r1, [r3, r2]
 80082a0:	e023      	b.n	80082ea <HAL_TIM_PWM_Start+0xf2>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0xba>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	223f      	movs	r2, #63	; 0x3f
 80082ac:	2102      	movs	r1, #2
 80082ae:	5499      	strb	r1, [r3, r2]
 80082b0:	e01b      	b.n	80082ea <HAL_TIM_PWM_Start+0xf2>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b08      	cmp	r3, #8
 80082b6:	d104      	bne.n	80082c2 <HAL_TIM_PWM_Start+0xca>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2240      	movs	r2, #64	; 0x40
 80082bc:	2102      	movs	r1, #2
 80082be:	5499      	strb	r1, [r3, r2]
 80082c0:	e013      	b.n	80082ea <HAL_TIM_PWM_Start+0xf2>
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b0c      	cmp	r3, #12
 80082c6:	d104      	bne.n	80082d2 <HAL_TIM_PWM_Start+0xda>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2241      	movs	r2, #65	; 0x41
 80082cc:	2102      	movs	r1, #2
 80082ce:	5499      	strb	r1, [r3, r2]
 80082d0:	e00b      	b.n	80082ea <HAL_TIM_PWM_Start+0xf2>
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2b10      	cmp	r3, #16
 80082d6:	d104      	bne.n	80082e2 <HAL_TIM_PWM_Start+0xea>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2242      	movs	r2, #66	; 0x42
 80082dc:	2102      	movs	r1, #2
 80082de:	5499      	strb	r1, [r3, r2]
 80082e0:	e003      	b.n	80082ea <HAL_TIM_PWM_Start+0xf2>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2243      	movs	r2, #67	; 0x43
 80082e6:	2102      	movs	r1, #2
 80082e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	2201      	movs	r2, #1
 80082f2:	0018      	movs	r0, r3
 80082f4:	f000 ff4e 	bl	8009194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a2a      	ldr	r2, [pc, #168]	; (80083a8 <HAL_TIM_PWM_Start+0x1b0>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d00e      	beq.n	8008320 <HAL_TIM_PWM_Start+0x128>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a29      	ldr	r2, [pc, #164]	; (80083ac <HAL_TIM_PWM_Start+0x1b4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d009      	beq.n	8008320 <HAL_TIM_PWM_Start+0x128>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a27      	ldr	r2, [pc, #156]	; (80083b0 <HAL_TIM_PWM_Start+0x1b8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d004      	beq.n	8008320 <HAL_TIM_PWM_Start+0x128>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a26      	ldr	r2, [pc, #152]	; (80083b4 <HAL_TIM_PWM_Start+0x1bc>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d101      	bne.n	8008324 <HAL_TIM_PWM_Start+0x12c>
 8008320:	2301      	movs	r3, #1
 8008322:	e000      	b.n	8008326 <HAL_TIM_PWM_Start+0x12e>
 8008324:	2300      	movs	r3, #0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d008      	beq.n	800833c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2180      	movs	r1, #128	; 0x80
 8008336:	0209      	lsls	r1, r1, #8
 8008338:	430a      	orrs	r2, r1
 800833a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a19      	ldr	r2, [pc, #100]	; (80083a8 <HAL_TIM_PWM_Start+0x1b0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d009      	beq.n	800835a <HAL_TIM_PWM_Start+0x162>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a1b      	ldr	r2, [pc, #108]	; (80083b8 <HAL_TIM_PWM_Start+0x1c0>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d004      	beq.n	800835a <HAL_TIM_PWM_Start+0x162>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <HAL_TIM_PWM_Start+0x1b4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d116      	bne.n	8008388 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	4a16      	ldr	r2, [pc, #88]	; (80083bc <HAL_TIM_PWM_Start+0x1c4>)
 8008362:	4013      	ands	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	2b06      	cmp	r3, #6
 800836a:	d016      	beq.n	800839a <HAL_TIM_PWM_Start+0x1a2>
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	2380      	movs	r3, #128	; 0x80
 8008370:	025b      	lsls	r3, r3, #9
 8008372:	429a      	cmp	r2, r3
 8008374:	d011      	beq.n	800839a <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2101      	movs	r1, #1
 8008382:	430a      	orrs	r2, r1
 8008384:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008386:	e008      	b.n	800839a <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2101      	movs	r1, #1
 8008394:	430a      	orrs	r2, r1
 8008396:	601a      	str	r2, [r3, #0]
 8008398:	e000      	b.n	800839c <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800839a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	0018      	movs	r0, r3
 80083a0:	46bd      	mov	sp, r7
 80083a2:	b004      	add	sp, #16
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	46c0      	nop			; (mov r8, r8)
 80083a8:	40012c00 	.word	0x40012c00
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800
 80083b8:	40000400 	.word	0x40000400
 80083bc:	00010007 	.word	0x00010007

080083c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b082      	sub	sp, #8
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691b      	ldr	r3, [r3, #16]
 80083ce:	2202      	movs	r2, #2
 80083d0:	4013      	ands	r3, r2
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d124      	bne.n	8008420 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	2202      	movs	r2, #2
 80083de:	4013      	ands	r3, r2
 80083e0:	2b02      	cmp	r3, #2
 80083e2:	d11d      	bne.n	8008420 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2203      	movs	r2, #3
 80083ea:	4252      	negs	r2, r2
 80083ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	2203      	movs	r2, #3
 80083fc:	4013      	ands	r3, r2
 80083fe:	d004      	beq.n	800840a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	0018      	movs	r0, r3
 8008404:	f000 fad8 	bl	80089b8 <HAL_TIM_IC_CaptureCallback>
 8008408:	e007      	b.n	800841a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	0018      	movs	r0, r3
 800840e:	f000 facb 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	0018      	movs	r0, r3
 8008416:	f000 fad7 	bl	80089c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	2204      	movs	r2, #4
 8008428:	4013      	ands	r3, r2
 800842a:	2b04      	cmp	r3, #4
 800842c:	d125      	bne.n	800847a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	2204      	movs	r2, #4
 8008436:	4013      	ands	r3, r2
 8008438:	2b04      	cmp	r3, #4
 800843a:	d11e      	bne.n	800847a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2205      	movs	r2, #5
 8008442:	4252      	negs	r2, r2
 8008444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2202      	movs	r2, #2
 800844a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	23c0      	movs	r3, #192	; 0xc0
 8008454:	009b      	lsls	r3, r3, #2
 8008456:	4013      	ands	r3, r2
 8008458:	d004      	beq.n	8008464 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	0018      	movs	r0, r3
 800845e:	f000 faab 	bl	80089b8 <HAL_TIM_IC_CaptureCallback>
 8008462:	e007      	b.n	8008474 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0018      	movs	r0, r3
 8008468:	f000 fa9e 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	0018      	movs	r0, r3
 8008470:	f000 faaa 	bl	80089c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	691b      	ldr	r3, [r3, #16]
 8008480:	2208      	movs	r2, #8
 8008482:	4013      	ands	r3, r2
 8008484:	2b08      	cmp	r3, #8
 8008486:	d124      	bne.n	80084d2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	2208      	movs	r2, #8
 8008490:	4013      	ands	r3, r2
 8008492:	2b08      	cmp	r3, #8
 8008494:	d11d      	bne.n	80084d2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2209      	movs	r2, #9
 800849c:	4252      	negs	r2, r2
 800849e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2204      	movs	r2, #4
 80084a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69db      	ldr	r3, [r3, #28]
 80084ac:	2203      	movs	r2, #3
 80084ae:	4013      	ands	r3, r2
 80084b0:	d004      	beq.n	80084bc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	0018      	movs	r0, r3
 80084b6:	f000 fa7f 	bl	80089b8 <HAL_TIM_IC_CaptureCallback>
 80084ba:	e007      	b.n	80084cc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	0018      	movs	r0, r3
 80084c0:	f000 fa72 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 fa7e 	bl	80089c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	2210      	movs	r2, #16
 80084da:	4013      	ands	r3, r2
 80084dc:	2b10      	cmp	r3, #16
 80084de:	d125      	bne.n	800852c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	68db      	ldr	r3, [r3, #12]
 80084e6:	2210      	movs	r2, #16
 80084e8:	4013      	ands	r3, r2
 80084ea:	2b10      	cmp	r3, #16
 80084ec:	d11e      	bne.n	800852c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2211      	movs	r2, #17
 80084f4:	4252      	negs	r2, r2
 80084f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2208      	movs	r2, #8
 80084fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	23c0      	movs	r3, #192	; 0xc0
 8008506:	009b      	lsls	r3, r3, #2
 8008508:	4013      	ands	r3, r2
 800850a:	d004      	beq.n	8008516 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	0018      	movs	r0, r3
 8008510:	f000 fa52 	bl	80089b8 <HAL_TIM_IC_CaptureCallback>
 8008514:	e007      	b.n	8008526 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	0018      	movs	r0, r3
 800851a:	f000 fa45 	bl	80089a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	0018      	movs	r0, r3
 8008522:	f000 fa51 	bl	80089c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	691b      	ldr	r3, [r3, #16]
 8008532:	2201      	movs	r2, #1
 8008534:	4013      	ands	r3, r2
 8008536:	2b01      	cmp	r3, #1
 8008538:	d10f      	bne.n	800855a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	68db      	ldr	r3, [r3, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	4013      	ands	r3, r2
 8008544:	2b01      	cmp	r3, #1
 8008546:	d108      	bne.n	800855a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2202      	movs	r2, #2
 800854e:	4252      	negs	r2, r2
 8008550:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	0018      	movs	r0, r3
 8008556:	f7fa fc1b 	bl	8002d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	2280      	movs	r2, #128	; 0x80
 8008562:	4013      	ands	r3, r2
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d10f      	bne.n	8008588 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	2280      	movs	r2, #128	; 0x80
 8008570:	4013      	ands	r3, r2
 8008572:	2b80      	cmp	r3, #128	; 0x80
 8008574:	d108      	bne.n	8008588 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2281      	movs	r2, #129	; 0x81
 800857c:	4252      	negs	r2, r2
 800857e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	0018      	movs	r0, r3
 8008584:	f000 ff40 	bl	8009408 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	691a      	ldr	r2, [r3, #16]
 800858e:	2380      	movs	r3, #128	; 0x80
 8008590:	005b      	lsls	r3, r3, #1
 8008592:	401a      	ands	r2, r3
 8008594:	2380      	movs	r3, #128	; 0x80
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	429a      	cmp	r2, r3
 800859a:	d10e      	bne.n	80085ba <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	2280      	movs	r2, #128	; 0x80
 80085a4:	4013      	ands	r3, r2
 80085a6:	2b80      	cmp	r3, #128	; 0x80
 80085a8:	d107      	bne.n	80085ba <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a1c      	ldr	r2, [pc, #112]	; (8008620 <HAL_TIM_IRQHandler+0x260>)
 80085b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	0018      	movs	r0, r3
 80085b6:	f000 ff2f 	bl	8009418 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	2240      	movs	r2, #64	; 0x40
 80085c2:	4013      	ands	r3, r2
 80085c4:	2b40      	cmp	r3, #64	; 0x40
 80085c6:	d10f      	bne.n	80085e8 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	2240      	movs	r2, #64	; 0x40
 80085d0:	4013      	ands	r3, r2
 80085d2:	2b40      	cmp	r3, #64	; 0x40
 80085d4:	d108      	bne.n	80085e8 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2241      	movs	r2, #65	; 0x41
 80085dc:	4252      	negs	r2, r2
 80085de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	0018      	movs	r0, r3
 80085e4:	f000 f9f8 	bl	80089d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	2220      	movs	r2, #32
 80085f0:	4013      	ands	r3, r2
 80085f2:	2b20      	cmp	r3, #32
 80085f4:	d10f      	bne.n	8008616 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	2220      	movs	r2, #32
 80085fe:	4013      	ands	r3, r2
 8008600:	2b20      	cmp	r3, #32
 8008602:	d108      	bne.n	8008616 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	2221      	movs	r2, #33	; 0x21
 800860a:	4252      	negs	r2, r2
 800860c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	0018      	movs	r0, r3
 8008612:	f000 fef1 	bl	80093f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008616:	46c0      	nop			; (mov r8, r8)
 8008618:	46bd      	mov	sp, r7
 800861a:	b002      	add	sp, #8
 800861c:	bd80      	pop	{r7, pc}
 800861e:	46c0      	nop			; (mov r8, r8)
 8008620:	fffffeff 	.word	0xfffffeff

08008624 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	223c      	movs	r2, #60	; 0x3c
 8008634:	5c9b      	ldrb	r3, [r3, r2]
 8008636:	2b01      	cmp	r3, #1
 8008638:	d101      	bne.n	800863e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800863a:	2302      	movs	r3, #2
 800863c:	e0df      	b.n	80087fe <HAL_TIM_PWM_ConfigChannel+0x1da>
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	223c      	movs	r2, #60	; 0x3c
 8008642:	2101      	movs	r1, #1
 8008644:	5499      	strb	r1, [r3, r2]
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2b14      	cmp	r3, #20
 800864a:	d900      	bls.n	800864e <HAL_TIM_PWM_ConfigChannel+0x2a>
 800864c:	e0d1      	b.n	80087f2 <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	009a      	lsls	r2, r3, #2
 8008652:	4b6d      	ldr	r3, [pc, #436]	; (8008808 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008654:	18d3      	adds	r3, r2, r3
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	0011      	movs	r1, r2
 8008662:	0018      	movs	r0, r3
 8008664:	f000 fa36 	bl	8008ad4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	699a      	ldr	r2, [r3, #24]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	2108      	movs	r1, #8
 8008674:	430a      	orrs	r2, r1
 8008676:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	699a      	ldr	r2, [r3, #24]
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2104      	movs	r1, #4
 8008684:	438a      	bics	r2, r1
 8008686:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6999      	ldr	r1, [r3, #24]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	691a      	ldr	r2, [r3, #16]
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	430a      	orrs	r2, r1
 8008698:	619a      	str	r2, [r3, #24]
      break;
 800869a:	e0ab      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	0011      	movs	r1, r2
 80086a4:	0018      	movs	r0, r3
 80086a6:	f000 fa9f 	bl	8008be8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	699a      	ldr	r2, [r3, #24]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	2180      	movs	r1, #128	; 0x80
 80086b6:	0109      	lsls	r1, r1, #4
 80086b8:	430a      	orrs	r2, r1
 80086ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	699a      	ldr	r2, [r3, #24]
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4951      	ldr	r1, [pc, #324]	; (800880c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80086c8:	400a      	ands	r2, r1
 80086ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	6999      	ldr	r1, [r3, #24]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	021a      	lsls	r2, r3, #8
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	430a      	orrs	r2, r1
 80086de:	619a      	str	r2, [r3, #24]
      break;
 80086e0:	e088      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	0011      	movs	r1, r2
 80086ea:	0018      	movs	r0, r3
 80086ec:	f000 fb00 	bl	8008cf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	69da      	ldr	r2, [r3, #28]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	2108      	movs	r1, #8
 80086fc:	430a      	orrs	r2, r1
 80086fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	69da      	ldr	r2, [r3, #28]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2104      	movs	r1, #4
 800870c:	438a      	bics	r2, r1
 800870e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69d9      	ldr	r1, [r3, #28]
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	691a      	ldr	r2, [r3, #16]
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	430a      	orrs	r2, r1
 8008720:	61da      	str	r2, [r3, #28]
      break;
 8008722:	e067      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	68ba      	ldr	r2, [r7, #8]
 800872a:	0011      	movs	r1, r2
 800872c:	0018      	movs	r0, r3
 800872e:	f000 fb67 	bl	8008e00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	69da      	ldr	r2, [r3, #28]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2180      	movs	r1, #128	; 0x80
 800873e:	0109      	lsls	r1, r1, #4
 8008740:	430a      	orrs	r2, r1
 8008742:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	69da      	ldr	r2, [r3, #28]
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	492f      	ldr	r1, [pc, #188]	; (800880c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 8008750:	400a      	ands	r2, r1
 8008752:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	69d9      	ldr	r1, [r3, #28]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	430a      	orrs	r2, r1
 8008766:	61da      	str	r2, [r3, #28]
      break;
 8008768:	e044      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68ba      	ldr	r2, [r7, #8]
 8008770:	0011      	movs	r1, r2
 8008772:	0018      	movs	r0, r3
 8008774:	f000 fbae 	bl	8008ed4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2108      	movs	r1, #8
 8008784:	430a      	orrs	r2, r1
 8008786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2104      	movs	r1, #4
 8008794:	438a      	bics	r2, r1
 8008796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	691a      	ldr	r2, [r3, #16]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	430a      	orrs	r2, r1
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087aa:	e023      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68ba      	ldr	r2, [r7, #8]
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f000 fbed 	bl	8008f94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2180      	movs	r1, #128	; 0x80
 80087c6:	0109      	lsls	r1, r1, #4
 80087c8:	430a      	orrs	r2, r1
 80087ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	490d      	ldr	r1, [pc, #52]	; (800880c <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80087d8:	400a      	ands	r2, r1
 80087da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	021a      	lsls	r2, r3, #8
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	430a      	orrs	r2, r1
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80087f0:	e000      	b.n	80087f4 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80087f2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	223c      	movs	r2, #60	; 0x3c
 80087f8:	2100      	movs	r1, #0
 80087fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	0018      	movs	r0, r3
 8008800:	46bd      	mov	sp, r7
 8008802:	b004      	add	sp, #16
 8008804:	bd80      	pop	{r7, pc}
 8008806:	46c0      	nop			; (mov r8, r8)
 8008808:	0800993c 	.word	0x0800993c
 800880c:	fffffbff 	.word	0xfffffbff

08008810 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	223c      	movs	r2, #60	; 0x3c
 800881e:	5c9b      	ldrb	r3, [r3, r2]
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_TIM_ConfigClockSource+0x18>
 8008824:	2302      	movs	r3, #2
 8008826:	e0b7      	b.n	8008998 <HAL_TIM_ConfigClockSource+0x188>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	223c      	movs	r2, #60	; 0x3c
 800882c:	2101      	movs	r1, #1
 800882e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	223d      	movs	r2, #61	; 0x3d
 8008834:	2102      	movs	r1, #2
 8008836:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4a57      	ldr	r2, [pc, #348]	; (80089a0 <HAL_TIM_ConfigClockSource+0x190>)
 8008844:	4013      	ands	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4a56      	ldr	r2, [pc, #344]	; (80089a4 <HAL_TIM_ConfigClockSource+0x194>)
 800884c:	4013      	ands	r3, r2
 800884e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2280      	movs	r2, #128	; 0x80
 800885e:	0192      	lsls	r2, r2, #6
 8008860:	4293      	cmp	r3, r2
 8008862:	d040      	beq.n	80088e6 <HAL_TIM_ConfigClockSource+0xd6>
 8008864:	2280      	movs	r2, #128	; 0x80
 8008866:	0192      	lsls	r2, r2, #6
 8008868:	4293      	cmp	r3, r2
 800886a:	d900      	bls.n	800886e <HAL_TIM_ConfigClockSource+0x5e>
 800886c:	e088      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 800886e:	2280      	movs	r2, #128	; 0x80
 8008870:	0152      	lsls	r2, r2, #5
 8008872:	4293      	cmp	r3, r2
 8008874:	d100      	bne.n	8008878 <HAL_TIM_ConfigClockSource+0x68>
 8008876:	e085      	b.n	8008984 <HAL_TIM_ConfigClockSource+0x174>
 8008878:	2280      	movs	r2, #128	; 0x80
 800887a:	0152      	lsls	r2, r2, #5
 800887c:	4293      	cmp	r3, r2
 800887e:	d900      	bls.n	8008882 <HAL_TIM_ConfigClockSource+0x72>
 8008880:	e07e      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 8008882:	2b70      	cmp	r3, #112	; 0x70
 8008884:	d018      	beq.n	80088b8 <HAL_TIM_ConfigClockSource+0xa8>
 8008886:	d900      	bls.n	800888a <HAL_TIM_ConfigClockSource+0x7a>
 8008888:	e07a      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 800888a:	2b60      	cmp	r3, #96	; 0x60
 800888c:	d04f      	beq.n	800892e <HAL_TIM_ConfigClockSource+0x11e>
 800888e:	d900      	bls.n	8008892 <HAL_TIM_ConfigClockSource+0x82>
 8008890:	e076      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 8008892:	2b50      	cmp	r3, #80	; 0x50
 8008894:	d03b      	beq.n	800890e <HAL_TIM_ConfigClockSource+0xfe>
 8008896:	d900      	bls.n	800889a <HAL_TIM_ConfigClockSource+0x8a>
 8008898:	e072      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 800889a:	2b40      	cmp	r3, #64	; 0x40
 800889c:	d057      	beq.n	800894e <HAL_TIM_ConfigClockSource+0x13e>
 800889e:	d900      	bls.n	80088a2 <HAL_TIM_ConfigClockSource+0x92>
 80088a0:	e06e      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 80088a2:	2b30      	cmp	r3, #48	; 0x30
 80088a4:	d063      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x15e>
 80088a6:	d86b      	bhi.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 80088a8:	2b20      	cmp	r3, #32
 80088aa:	d060      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x15e>
 80088ac:	d868      	bhi.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d05d      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x15e>
 80088b2:	2b10      	cmp	r3, #16
 80088b4:	d05b      	beq.n	800896e <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80088b6:	e063      	b.n	8008980 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6818      	ldr	r0, [r3, #0]
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	6899      	ldr	r1, [r3, #8]
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	f000 fc44 	bl	8009154 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2277      	movs	r2, #119	; 0x77
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	609a      	str	r2, [r3, #8]
      break;
 80088e4:	e04f      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	6899      	ldr	r1, [r3, #8]
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f000 fc2d 	bl	8009154 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2180      	movs	r1, #128	; 0x80
 8008906:	01c9      	lsls	r1, r1, #7
 8008908:	430a      	orrs	r2, r1
 800890a:	609a      	str	r2, [r3, #8]
      break;
 800890c:	e03b      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6818      	ldr	r0, [r3, #0]
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	6859      	ldr	r1, [r3, #4]
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	001a      	movs	r2, r3
 800891c:	f000 fb9e 	bl	800905c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2150      	movs	r1, #80	; 0x50
 8008926:	0018      	movs	r0, r3
 8008928:	f000 fbf8 	bl	800911c <TIM_ITRx_SetConfig>
      break;
 800892c:	e02b      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	6859      	ldr	r1, [r3, #4]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	001a      	movs	r2, r3
 800893c:	f000 fbbc 	bl	80090b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2160      	movs	r1, #96	; 0x60
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fbe8 	bl	800911c <TIM_ITRx_SetConfig>
      break;
 800894c:	e01b      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6818      	ldr	r0, [r3, #0]
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	6859      	ldr	r1, [r3, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	001a      	movs	r2, r3
 800895c:	f000 fb7e 	bl	800905c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2140      	movs	r1, #64	; 0x40
 8008966:	0018      	movs	r0, r3
 8008968:	f000 fbd8 	bl	800911c <TIM_ITRx_SetConfig>
      break;
 800896c:	e00b      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681a      	ldr	r2, [r3, #0]
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	0019      	movs	r1, r3
 8008978:	0010      	movs	r0, r2
 800897a:	f000 fbcf 	bl	800911c <TIM_ITRx_SetConfig>
        break;
 800897e:	e002      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008980:	46c0      	nop			; (mov r8, r8)
 8008982:	e000      	b.n	8008986 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008984:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	223d      	movs	r2, #61	; 0x3d
 800898a:	2101      	movs	r1, #1
 800898c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	223c      	movs	r2, #60	; 0x3c
 8008992:	2100      	movs	r1, #0
 8008994:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008996:	2300      	movs	r3, #0
}
 8008998:	0018      	movs	r0, r3
 800899a:	46bd      	mov	sp, r7
 800899c:	b004      	add	sp, #16
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	ffceff88 	.word	0xffceff88
 80089a4:	ffff00ff 	.word	0xffff00ff

080089a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b082      	sub	sp, #8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089b0:	46c0      	nop			; (mov r8, r8)
 80089b2:	46bd      	mov	sp, r7
 80089b4:	b002      	add	sp, #8
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b002      	add	sp, #8
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	46bd      	mov	sp, r7
 80089d4:	b002      	add	sp, #8
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80089e0:	46c0      	nop			; (mov r8, r8)
 80089e2:	46bd      	mov	sp, r7
 80089e4:	b002      	add	sp, #8
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
 80089f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	4a2f      	ldr	r2, [pc, #188]	; (8008ab8 <TIM_Base_SetConfig+0xd0>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d003      	beq.n	8008a08 <TIM_Base_SetConfig+0x20>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	4a2e      	ldr	r2, [pc, #184]	; (8008abc <TIM_Base_SetConfig+0xd4>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d108      	bne.n	8008a1a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2270      	movs	r2, #112	; 0x70
 8008a0c:	4393      	bics	r3, r2
 8008a0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	4a26      	ldr	r2, [pc, #152]	; (8008ab8 <TIM_Base_SetConfig+0xd0>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d013      	beq.n	8008a4a <TIM_Base_SetConfig+0x62>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	4a25      	ldr	r2, [pc, #148]	; (8008abc <TIM_Base_SetConfig+0xd4>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d00f      	beq.n	8008a4a <TIM_Base_SetConfig+0x62>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	4a24      	ldr	r2, [pc, #144]	; (8008ac0 <TIM_Base_SetConfig+0xd8>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00b      	beq.n	8008a4a <TIM_Base_SetConfig+0x62>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	4a23      	ldr	r2, [pc, #140]	; (8008ac4 <TIM_Base_SetConfig+0xdc>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <TIM_Base_SetConfig+0x62>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	4a22      	ldr	r2, [pc, #136]	; (8008ac8 <TIM_Base_SetConfig+0xe0>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d003      	beq.n	8008a4a <TIM_Base_SetConfig+0x62>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	4a21      	ldr	r2, [pc, #132]	; (8008acc <TIM_Base_SetConfig+0xe4>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d108      	bne.n	8008a5c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	4a20      	ldr	r2, [pc, #128]	; (8008ad0 <TIM_Base_SetConfig+0xe8>)
 8008a4e:	4013      	ands	r3, r2
 8008a50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2280      	movs	r2, #128	; 0x80
 8008a60:	4393      	bics	r3, r2
 8008a62:	001a      	movs	r2, r3
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	68fa      	ldr	r2, [r7, #12]
 8008a70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	681a      	ldr	r2, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a0c      	ldr	r2, [pc, #48]	; (8008ab8 <TIM_Base_SetConfig+0xd0>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d00b      	beq.n	8008aa2 <TIM_Base_SetConfig+0xba>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	4a0d      	ldr	r2, [pc, #52]	; (8008ac4 <TIM_Base_SetConfig+0xdc>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d007      	beq.n	8008aa2 <TIM_Base_SetConfig+0xba>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a0c      	ldr	r2, [pc, #48]	; (8008ac8 <TIM_Base_SetConfig+0xe0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d003      	beq.n	8008aa2 <TIM_Base_SetConfig+0xba>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a0b      	ldr	r2, [pc, #44]	; (8008acc <TIM_Base_SetConfig+0xe4>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d103      	bne.n	8008aaa <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	691a      	ldr	r2, [r3, #16]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2201      	movs	r2, #1
 8008aae:	615a      	str	r2, [r3, #20]
}
 8008ab0:	46c0      	nop			; (mov r8, r8)
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	b004      	add	sp, #16
 8008ab6:	bd80      	pop	{r7, pc}
 8008ab8:	40012c00 	.word	0x40012c00
 8008abc:	40000400 	.word	0x40000400
 8008ac0:	40002000 	.word	0x40002000
 8008ac4:	40014000 	.word	0x40014000
 8008ac8:	40014400 	.word	0x40014400
 8008acc:	40014800 	.word	0x40014800
 8008ad0:	fffffcff 	.word	0xfffffcff

08008ad4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b086      	sub	sp, #24
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4393      	bics	r3, r2
 8008ae6:	001a      	movs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a1b      	ldr	r3, [r3, #32]
 8008af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a32      	ldr	r2, [pc, #200]	; (8008bcc <TIM_OC1_SetConfig+0xf8>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2203      	movs	r2, #3
 8008b0a:	4393      	bics	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	68fa      	ldr	r2, [r7, #12]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	4393      	bics	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a28      	ldr	r2, [pc, #160]	; (8008bd0 <TIM_OC1_SetConfig+0xfc>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00b      	beq.n	8008b4a <TIM_OC1_SetConfig+0x76>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a27      	ldr	r2, [pc, #156]	; (8008bd4 <TIM_OC1_SetConfig+0x100>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d007      	beq.n	8008b4a <TIM_OC1_SetConfig+0x76>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a26      	ldr	r2, [pc, #152]	; (8008bd8 <TIM_OC1_SetConfig+0x104>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d003      	beq.n	8008b4a <TIM_OC1_SetConfig+0x76>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a25      	ldr	r2, [pc, #148]	; (8008bdc <TIM_OC1_SetConfig+0x108>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d10c      	bne.n	8008b64 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2208      	movs	r2, #8
 8008b4e:	4393      	bics	r3, r2
 8008b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	697a      	ldr	r2, [r7, #20]
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	2204      	movs	r2, #4
 8008b60:	4393      	bics	r3, r2
 8008b62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	4a1a      	ldr	r2, [pc, #104]	; (8008bd0 <TIM_OC1_SetConfig+0xfc>)
 8008b68:	4293      	cmp	r3, r2
 8008b6a:	d00b      	beq.n	8008b84 <TIM_OC1_SetConfig+0xb0>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a19      	ldr	r2, [pc, #100]	; (8008bd4 <TIM_OC1_SetConfig+0x100>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d007      	beq.n	8008b84 <TIM_OC1_SetConfig+0xb0>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a18      	ldr	r2, [pc, #96]	; (8008bd8 <TIM_OC1_SetConfig+0x104>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d003      	beq.n	8008b84 <TIM_OC1_SetConfig+0xb0>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a17      	ldr	r2, [pc, #92]	; (8008bdc <TIM_OC1_SetConfig+0x108>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d111      	bne.n	8008ba8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	4a16      	ldr	r2, [pc, #88]	; (8008be0 <TIM_OC1_SetConfig+0x10c>)
 8008b88:	4013      	ands	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	4a15      	ldr	r2, [pc, #84]	; (8008be4 <TIM_OC1_SetConfig+0x110>)
 8008b90:	4013      	ands	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	693a      	ldr	r2, [r7, #16]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	693a      	ldr	r2, [r7, #16]
 8008bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	621a      	str	r2, [r3, #32]
}
 8008bc2:	46c0      	nop			; (mov r8, r8)
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	b006      	add	sp, #24
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	46c0      	nop			; (mov r8, r8)
 8008bcc:	fffeff8f 	.word	0xfffeff8f
 8008bd0:	40012c00 	.word	0x40012c00
 8008bd4:	40014000 	.word	0x40014000
 8008bd8:	40014400 	.word	0x40014400
 8008bdc:	40014800 	.word	0x40014800
 8008be0:	fffffeff 	.word	0xfffffeff
 8008be4:	fffffdff 	.word	0xfffffdff

08008be8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a1b      	ldr	r3, [r3, #32]
 8008bf6:	2210      	movs	r2, #16
 8008bf8:	4393      	bics	r3, r2
 8008bfa:	001a      	movs	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	4a2e      	ldr	r2, [pc, #184]	; (8008cd0 <TIM_OC2_SetConfig+0xe8>)
 8008c16:	4013      	ands	r3, r2
 8008c18:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4a2d      	ldr	r2, [pc, #180]	; (8008cd4 <TIM_OC2_SetConfig+0xec>)
 8008c1e:	4013      	ands	r3, r2
 8008c20:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	021b      	lsls	r3, r3, #8
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2220      	movs	r2, #32
 8008c32:	4393      	bics	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	011b      	lsls	r3, r3, #4
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a24      	ldr	r2, [pc, #144]	; (8008cd8 <TIM_OC2_SetConfig+0xf0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d10d      	bne.n	8008c66 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	2280      	movs	r2, #128	; 0x80
 8008c4e:	4393      	bics	r3, r2
 8008c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	011b      	lsls	r3, r3, #4
 8008c58:	697a      	ldr	r2, [r7, #20]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2240      	movs	r2, #64	; 0x40
 8008c62:	4393      	bics	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a1b      	ldr	r2, [pc, #108]	; (8008cd8 <TIM_OC2_SetConfig+0xf0>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d00b      	beq.n	8008c86 <TIM_OC2_SetConfig+0x9e>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a1a      	ldr	r2, [pc, #104]	; (8008cdc <TIM_OC2_SetConfig+0xf4>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d007      	beq.n	8008c86 <TIM_OC2_SetConfig+0x9e>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a19      	ldr	r2, [pc, #100]	; (8008ce0 <TIM_OC2_SetConfig+0xf8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d003      	beq.n	8008c86 <TIM_OC2_SetConfig+0x9e>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a18      	ldr	r2, [pc, #96]	; (8008ce4 <TIM_OC2_SetConfig+0xfc>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d113      	bne.n	8008cae <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	4a17      	ldr	r2, [pc, #92]	; (8008ce8 <TIM_OC2_SetConfig+0x100>)
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	4a16      	ldr	r2, [pc, #88]	; (8008cec <TIM_OC2_SetConfig+0x104>)
 8008c92:	4013      	ands	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	693a      	ldr	r2, [r7, #16]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	699b      	ldr	r3, [r3, #24]
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68fa      	ldr	r2, [r7, #12]
 8008cb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	685a      	ldr	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	621a      	str	r2, [r3, #32]
}
 8008cc8:	46c0      	nop			; (mov r8, r8)
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	b006      	add	sp, #24
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	feff8fff 	.word	0xfeff8fff
 8008cd4:	fffffcff 	.word	0xfffffcff
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40014000 	.word	0x40014000
 8008ce0:	40014400 	.word	0x40014400
 8008ce4:	40014800 	.word	0x40014800
 8008ce8:	fffffbff 	.word	0xfffffbff
 8008cec:	fffff7ff 	.word	0xfffff7ff

08008cf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b086      	sub	sp, #24
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	4a35      	ldr	r2, [pc, #212]	; (8008dd4 <TIM_OC3_SetConfig+0xe4>)
 8008d00:	401a      	ands	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	4a2f      	ldr	r2, [pc, #188]	; (8008dd8 <TIM_OC3_SetConfig+0xe8>)
 8008d1c:	4013      	ands	r3, r2
 8008d1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2203      	movs	r2, #3
 8008d24:	4393      	bics	r3, r2
 8008d26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	4a29      	ldr	r2, [pc, #164]	; (8008ddc <TIM_OC3_SetConfig+0xec>)
 8008d36:	4013      	ands	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	021b      	lsls	r3, r3, #8
 8008d40:	697a      	ldr	r2, [r7, #20]
 8008d42:	4313      	orrs	r3, r2
 8008d44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	4a25      	ldr	r2, [pc, #148]	; (8008de0 <TIM_OC3_SetConfig+0xf0>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d10d      	bne.n	8008d6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	4a24      	ldr	r2, [pc, #144]	; (8008de4 <TIM_OC3_SetConfig+0xf4>)
 8008d52:	4013      	ands	r3, r2
 8008d54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	021b      	lsls	r3, r3, #8
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	4a20      	ldr	r2, [pc, #128]	; (8008de8 <TIM_OC3_SetConfig+0xf8>)
 8008d66:	4013      	ands	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	4a1c      	ldr	r2, [pc, #112]	; (8008de0 <TIM_OC3_SetConfig+0xf0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d00b      	beq.n	8008d8a <TIM_OC3_SetConfig+0x9a>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	4a1d      	ldr	r2, [pc, #116]	; (8008dec <TIM_OC3_SetConfig+0xfc>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d007      	beq.n	8008d8a <TIM_OC3_SetConfig+0x9a>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a1c      	ldr	r2, [pc, #112]	; (8008df0 <TIM_OC3_SetConfig+0x100>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d003      	beq.n	8008d8a <TIM_OC3_SetConfig+0x9a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <TIM_OC3_SetConfig+0x104>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d113      	bne.n	8008db2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <TIM_OC3_SetConfig+0x108>)
 8008d8e:	4013      	ands	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	4a19      	ldr	r2, [pc, #100]	; (8008dfc <TIM_OC3_SetConfig+0x10c>)
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	695b      	ldr	r3, [r3, #20]
 8008d9e:	011b      	lsls	r3, r3, #4
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	621a      	str	r2, [r3, #32]
}
 8008dcc:	46c0      	nop			; (mov r8, r8)
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	b006      	add	sp, #24
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	fffffeff 	.word	0xfffffeff
 8008dd8:	fffeff8f 	.word	0xfffeff8f
 8008ddc:	fffffdff 	.word	0xfffffdff
 8008de0:	40012c00 	.word	0x40012c00
 8008de4:	fffff7ff 	.word	0xfffff7ff
 8008de8:	fffffbff 	.word	0xfffffbff
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40014400 	.word	0x40014400
 8008df4:	40014800 	.word	0x40014800
 8008df8:	ffffefff 	.word	0xffffefff
 8008dfc:	ffffdfff 	.word	0xffffdfff

08008e00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b086      	sub	sp, #24
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	4a28      	ldr	r2, [pc, #160]	; (8008eb0 <TIM_OC4_SetConfig+0xb0>)
 8008e10:	401a      	ands	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	4a22      	ldr	r2, [pc, #136]	; (8008eb4 <TIM_OC4_SetConfig+0xb4>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4a21      	ldr	r2, [pc, #132]	; (8008eb8 <TIM_OC4_SetConfig+0xb8>)
 8008e34:	4013      	ands	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	021b      	lsls	r3, r3, #8
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	4a1d      	ldr	r2, [pc, #116]	; (8008ebc <TIM_OC4_SetConfig+0xbc>)
 8008e48:	4013      	ands	r3, r2
 8008e4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	031b      	lsls	r3, r3, #12
 8008e52:	693a      	ldr	r2, [r7, #16]
 8008e54:	4313      	orrs	r3, r2
 8008e56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a19      	ldr	r2, [pc, #100]	; (8008ec0 <TIM_OC4_SetConfig+0xc0>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_OC4_SetConfig+0x78>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a18      	ldr	r2, [pc, #96]	; (8008ec4 <TIM_OC4_SetConfig+0xc4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_OC4_SetConfig+0x78>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a17      	ldr	r2, [pc, #92]	; (8008ec8 <TIM_OC4_SetConfig+0xc8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_OC4_SetConfig+0x78>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a16      	ldr	r2, [pc, #88]	; (8008ecc <TIM_OC4_SetConfig+0xcc>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d109      	bne.n	8008e8c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	4a15      	ldr	r2, [pc, #84]	; (8008ed0 <TIM_OC4_SetConfig+0xd0>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	019b      	lsls	r3, r3, #6
 8008e86:	697a      	ldr	r2, [r7, #20]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	697a      	ldr	r2, [r7, #20]
 8008e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	685a      	ldr	r2, [r3, #4]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	621a      	str	r2, [r3, #32]
}
 8008ea6:	46c0      	nop			; (mov r8, r8)
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	b006      	add	sp, #24
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	46c0      	nop			; (mov r8, r8)
 8008eb0:	ffffefff 	.word	0xffffefff
 8008eb4:	feff8fff 	.word	0xfeff8fff
 8008eb8:	fffffcff 	.word	0xfffffcff
 8008ebc:	ffffdfff 	.word	0xffffdfff
 8008ec0:	40012c00 	.word	0x40012c00
 8008ec4:	40014000 	.word	0x40014000
 8008ec8:	40014400 	.word	0x40014400
 8008ecc:	40014800 	.word	0x40014800
 8008ed0:	ffffbfff 	.word	0xffffbfff

08008ed4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	4a25      	ldr	r2, [pc, #148]	; (8008f78 <TIM_OC5_SetConfig+0xa4>)
 8008ee4:	401a      	ands	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4a1f      	ldr	r2, [pc, #124]	; (8008f7c <TIM_OC5_SetConfig+0xa8>)
 8008f00:	4013      	ands	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	4a1b      	ldr	r2, [pc, #108]	; (8008f80 <TIM_OC5_SetConfig+0xac>)
 8008f12:	4013      	ands	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	693a      	ldr	r2, [r7, #16]
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	4a17      	ldr	r2, [pc, #92]	; (8008f84 <TIM_OC5_SetConfig+0xb0>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d00b      	beq.n	8008f42 <TIM_OC5_SetConfig+0x6e>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	4a16      	ldr	r2, [pc, #88]	; (8008f88 <TIM_OC5_SetConfig+0xb4>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d007      	beq.n	8008f42 <TIM_OC5_SetConfig+0x6e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a15      	ldr	r2, [pc, #84]	; (8008f8c <TIM_OC5_SetConfig+0xb8>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d003      	beq.n	8008f42 <TIM_OC5_SetConfig+0x6e>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a14      	ldr	r2, [pc, #80]	; (8008f90 <TIM_OC5_SetConfig+0xbc>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d109      	bne.n	8008f56 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	4a0c      	ldr	r2, [pc, #48]	; (8008f78 <TIM_OC5_SetConfig+0xa4>)
 8008f46:	4013      	ands	r3, r2
 8008f48:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	695b      	ldr	r3, [r3, #20]
 8008f4e:	021b      	lsls	r3, r3, #8
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	697a      	ldr	r2, [r7, #20]
 8008f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	68fa      	ldr	r2, [r7, #12]
 8008f60:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	685a      	ldr	r2, [r3, #4]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	693a      	ldr	r2, [r7, #16]
 8008f6e:	621a      	str	r2, [r3, #32]
}
 8008f70:	46c0      	nop			; (mov r8, r8)
 8008f72:	46bd      	mov	sp, r7
 8008f74:	b006      	add	sp, #24
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	fffeffff 	.word	0xfffeffff
 8008f7c:	fffeff8f 	.word	0xfffeff8f
 8008f80:	fffdffff 	.word	0xfffdffff
 8008f84:	40012c00 	.word	0x40012c00
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800

08008f94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b086      	sub	sp, #24
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	4a26      	ldr	r2, [pc, #152]	; (800903c <TIM_OC6_SetConfig+0xa8>)
 8008fa4:	401a      	ands	r2, r3
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4a20      	ldr	r2, [pc, #128]	; (8009040 <TIM_OC6_SetConfig+0xac>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	021b      	lsls	r3, r3, #8
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	4a1c      	ldr	r2, [pc, #112]	; (8009044 <TIM_OC6_SetConfig+0xb0>)
 8008fd4:	4013      	ands	r3, r2
 8008fd6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	051b      	lsls	r3, r3, #20
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <TIM_OC6_SetConfig+0xb4>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00b      	beq.n	8009004 <TIM_OC6_SetConfig+0x70>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a17      	ldr	r2, [pc, #92]	; (800904c <TIM_OC6_SetConfig+0xb8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_OC6_SetConfig+0x70>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a16      	ldr	r2, [pc, #88]	; (8009050 <TIM_OC6_SetConfig+0xbc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_OC6_SetConfig+0x70>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	; (8009054 <TIM_OC6_SetConfig+0xc0>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d109      	bne.n	8009018 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	4a14      	ldr	r2, [pc, #80]	; (8009058 <TIM_OC6_SetConfig+0xc4>)
 8009008:	4013      	ands	r3, r2
 800900a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	029b      	lsls	r3, r3, #10
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4313      	orrs	r3, r2
 8009016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	697a      	ldr	r2, [r7, #20]
 800901c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	68fa      	ldr	r2, [r7, #12]
 8009022:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	621a      	str	r2, [r3, #32]
}
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	46bd      	mov	sp, r7
 8009036:	b006      	add	sp, #24
 8009038:	bd80      	pop	{r7, pc}
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	ffefffff 	.word	0xffefffff
 8009040:	feff8fff 	.word	0xfeff8fff
 8009044:	ffdfffff 	.word	0xffdfffff
 8009048:	40012c00 	.word	0x40012c00
 800904c:	40014000 	.word	0x40014000
 8009050:	40014400 	.word	0x40014400
 8009054:	40014800 	.word	0x40014800
 8009058:	fffbffff 	.word	0xfffbffff

0800905c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905c:	b580      	push	{r7, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	2201      	movs	r2, #1
 8009074:	4393      	bics	r3, r2
 8009076:	001a      	movs	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	22f0      	movs	r2, #240	; 0xf0
 8009086:	4393      	bics	r3, r2
 8009088:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	011b      	lsls	r3, r3, #4
 800908e:	693a      	ldr	r2, [r7, #16]
 8009090:	4313      	orrs	r3, r2
 8009092:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	220a      	movs	r2, #10
 8009098:	4393      	bics	r3, r2
 800909a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	621a      	str	r2, [r3, #32]
}
 80090b0:	46c0      	nop			; (mov r8, r8)
 80090b2:	46bd      	mov	sp, r7
 80090b4:	b006      	add	sp, #24
 80090b6:	bd80      	pop	{r7, pc}

080090b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b086      	sub	sp, #24
 80090bc:	af00      	add	r7, sp, #0
 80090be:	60f8      	str	r0, [r7, #12]
 80090c0:	60b9      	str	r1, [r7, #8]
 80090c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a1b      	ldr	r3, [r3, #32]
 80090c8:	2210      	movs	r2, #16
 80090ca:	4393      	bics	r3, r2
 80090cc:	001a      	movs	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4a0d      	ldr	r2, [pc, #52]	; (8009118 <TIM_TI2_ConfigInputStage+0x60>)
 80090e2:	4013      	ands	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	031b      	lsls	r3, r3, #12
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	22a0      	movs	r2, #160	; 0xa0
 80090f4:	4393      	bics	r3, r2
 80090f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	693a      	ldr	r2, [r7, #16]
 80090fe:	4313      	orrs	r3, r2
 8009100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	697a      	ldr	r2, [r7, #20]
 8009106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	693a      	ldr	r2, [r7, #16]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	46c0      	nop			; (mov r8, r8)
 8009110:	46bd      	mov	sp, r7
 8009112:	b006      	add	sp, #24
 8009114:	bd80      	pop	{r7, pc}
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	ffff0fff 	.word	0xffff0fff

0800911c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b084      	sub	sp, #16
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4a08      	ldr	r2, [pc, #32]	; (8009150 <TIM_ITRx_SetConfig+0x34>)
 8009130:	4013      	ands	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	4313      	orrs	r3, r2
 800913a:	2207      	movs	r2, #7
 800913c:	4313      	orrs	r3, r2
 800913e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	609a      	str	r2, [r3, #8]
}
 8009146:	46c0      	nop			; (mov r8, r8)
 8009148:	46bd      	mov	sp, r7
 800914a:	b004      	add	sp, #16
 800914c:	bd80      	pop	{r7, pc}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	ffcfff8f 	.word	0xffcfff8f

08009154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	607a      	str	r2, [r7, #4]
 8009160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	689b      	ldr	r3, [r3, #8]
 8009166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009168:	697b      	ldr	r3, [r7, #20]
 800916a:	4a09      	ldr	r2, [pc, #36]	; (8009190 <TIM_ETR_SetConfig+0x3c>)
 800916c:	4013      	ands	r3, r2
 800916e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	021a      	lsls	r2, r3, #8
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	431a      	orrs	r2, r3
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	4313      	orrs	r3, r2
 800917c:	697a      	ldr	r2, [r7, #20]
 800917e:	4313      	orrs	r3, r2
 8009180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	697a      	ldr	r2, [r7, #20]
 8009186:	609a      	str	r2, [r3, #8]
}
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	46bd      	mov	sp, r7
 800918c:	b006      	add	sp, #24
 800918e:	bd80      	pop	{r7, pc}
 8009190:	ffff00ff 	.word	0xffff00ff

08009194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b086      	sub	sp, #24
 8009198:	af00      	add	r7, sp, #0
 800919a:	60f8      	str	r0, [r7, #12]
 800919c:	60b9      	str	r1, [r7, #8]
 800919e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	221f      	movs	r2, #31
 80091a4:	4013      	ands	r3, r2
 80091a6:	2201      	movs	r2, #1
 80091a8:	409a      	lsls	r2, r3
 80091aa:	0013      	movs	r3, r2
 80091ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	697a      	ldr	r2, [r7, #20]
 80091b4:	43d2      	mvns	r2, r2
 80091b6:	401a      	ands	r2, r3
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1a      	ldr	r2, [r3, #32]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	211f      	movs	r1, #31
 80091c4:	400b      	ands	r3, r1
 80091c6:	6879      	ldr	r1, [r7, #4]
 80091c8:	4099      	lsls	r1, r3
 80091ca:	000b      	movs	r3, r1
 80091cc:	431a      	orrs	r2, r3
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	621a      	str	r2, [r3, #32]
}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	46bd      	mov	sp, r7
 80091d6:	b006      	add	sp, #24
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	223c      	movs	r2, #60	; 0x3c
 80091ea:	5c9b      	ldrb	r3, [r3, r2]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e04f      	b.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	223c      	movs	r2, #60	; 0x3c
 80091f8:	2101      	movs	r1, #1
 80091fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	223d      	movs	r2, #61	; 0x3d
 8009200:	2102      	movs	r1, #2
 8009202:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a20      	ldr	r2, [pc, #128]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d108      	bne.n	8009230 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	4a1f      	ldr	r2, [pc, #124]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009222:	4013      	ands	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009226:	683b      	ldr	r3, [r7, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	4313      	orrs	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2270      	movs	r2, #112	; 0x70
 8009234:	4393      	bics	r3, r2
 8009236:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	68fa      	ldr	r2, [r7, #12]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68fa      	ldr	r2, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a13      	ldr	r2, [pc, #76]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d009      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a12      	ldr	r2, [pc, #72]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d004      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a11      	ldr	r2, [pc, #68]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10c      	bne.n	8009282 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	2280      	movs	r2, #128	; 0x80
 800926c:	4393      	bics	r3, r2
 800926e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4313      	orrs	r3, r2
 8009278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	223d      	movs	r2, #61	; 0x3d
 8009286:	2101      	movs	r1, #1
 8009288:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	223c      	movs	r2, #60	; 0x3c
 800928e:	2100      	movs	r1, #0
 8009290:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	0018      	movs	r0, r3
 8009296:	46bd      	mov	sp, r7
 8009298:	b004      	add	sp, #16
 800929a:	bd80      	pop	{r7, pc}
 800929c:	40012c00 	.word	0x40012c00
 80092a0:	ff0fffff 	.word	0xff0fffff
 80092a4:	40000400 	.word	0x40000400
 80092a8:	40014000 	.word	0x40014000

080092ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	223c      	movs	r2, #60	; 0x3c
 80092be:	5c9b      	ldrb	r3, [r3, r2]
 80092c0:	2b01      	cmp	r3, #1
 80092c2:	d101      	bne.n	80092c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80092c4:	2302      	movs	r3, #2
 80092c6:	e079      	b.n	80093bc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	223c      	movs	r2, #60	; 0x3c
 80092cc:	2101      	movs	r1, #1
 80092ce:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	22ff      	movs	r2, #255	; 0xff
 80092d4:	4393      	bics	r3, r2
 80092d6:	001a      	movs	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	68db      	ldr	r3, [r3, #12]
 80092dc:	4313      	orrs	r3, r2
 80092de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	4a38      	ldr	r2, [pc, #224]	; (80093c4 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80092e4:	401a      	ands	r2, r3
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	4a35      	ldr	r2, [pc, #212]	; (80093c8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80092f2:	401a      	ands	r2, r3
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	685b      	ldr	r3, [r3, #4]
 80092f8:	4313      	orrs	r3, r2
 80092fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4a33      	ldr	r2, [pc, #204]	; (80093cc <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8009300:	401a      	ands	r2, r3
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4313      	orrs	r3, r2
 8009308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	4a30      	ldr	r2, [pc, #192]	; (80093d0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800930e:	401a      	ands	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	691b      	ldr	r3, [r3, #16]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4a2e      	ldr	r2, [pc, #184]	; (80093d4 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800931c:	401a      	ands	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	4a2b      	ldr	r2, [pc, #172]	; (80093d8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800932a:	401a      	ands	r2, r3
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	4313      	orrs	r3, r2
 8009332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	4a29      	ldr	r2, [pc, #164]	; (80093dc <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8009338:	401a      	ands	r2, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	4313      	orrs	r3, r2
 8009342:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a25      	ldr	r2, [pc, #148]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d106      	bne.n	800935c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	4a24      	ldr	r2, [pc, #144]	; (80093e4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009352:	401a      	ands	r2, r3
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	69db      	ldr	r3, [r3, #28]
 8009358:	4313      	orrs	r3, r2
 800935a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009362:	4293      	cmp	r3, r2
 8009364:	d121      	bne.n	80093aa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	4a1f      	ldr	r2, [pc, #124]	; (80093e8 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800936a:	401a      	ands	r2, r3
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009370:	051b      	lsls	r3, r3, #20
 8009372:	4313      	orrs	r3, r2
 8009374:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a1c      	ldr	r2, [pc, #112]	; (80093ec <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800937a:	401a      	ands	r2, r3
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	4313      	orrs	r3, r2
 8009382:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	4a1a      	ldr	r2, [pc, #104]	; (80093f0 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8009388:	401a      	ands	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a12      	ldr	r2, [pc, #72]	; (80093e0 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d106      	bne.n	80093aa <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4a15      	ldr	r2, [pc, #84]	; (80093f4 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80093a0:	401a      	ands	r2, r3
 80093a2:	683b      	ldr	r3, [r7, #0]
 80093a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	223c      	movs	r2, #60	; 0x3c
 80093b6:	2100      	movs	r1, #0
 80093b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	0018      	movs	r0, r3
 80093be:	46bd      	mov	sp, r7
 80093c0:	b004      	add	sp, #16
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	fffffcff 	.word	0xfffffcff
 80093c8:	fffffbff 	.word	0xfffffbff
 80093cc:	fffff7ff 	.word	0xfffff7ff
 80093d0:	ffffefff 	.word	0xffffefff
 80093d4:	ffffdfff 	.word	0xffffdfff
 80093d8:	ffffbfff 	.word	0xffffbfff
 80093dc:	fff0ffff 	.word	0xfff0ffff
 80093e0:	40012c00 	.word	0x40012c00
 80093e4:	efffffff 	.word	0xefffffff
 80093e8:	ff0fffff 	.word	0xff0fffff
 80093ec:	feffffff 	.word	0xfeffffff
 80093f0:	fdffffff 	.word	0xfdffffff
 80093f4:	dfffffff 	.word	0xdfffffff

080093f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009400:	46c0      	nop			; (mov r8, r8)
 8009402:	46bd      	mov	sp, r7
 8009404:	b002      	add	sp, #8
 8009406:	bd80      	pop	{r7, pc}

08009408 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b082      	sub	sp, #8
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009410:	46c0      	nop			; (mov r8, r8)
 8009412:	46bd      	mov	sp, r7
 8009414:	b002      	add	sp, #8
 8009416:	bd80      	pop	{r7, pc}

08009418 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009420:	46c0      	nop			; (mov r8, r8)
 8009422:	46bd      	mov	sp, r7
 8009424:	b002      	add	sp, #8
 8009426:	bd80      	pop	{r7, pc}

08009428 <__errno>:
 8009428:	4b01      	ldr	r3, [pc, #4]	; (8009430 <__errno+0x8>)
 800942a:	6818      	ldr	r0, [r3, #0]
 800942c:	4770      	bx	lr
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	2000002c 	.word	0x2000002c

08009434 <__libc_init_array>:
 8009434:	b570      	push	{r4, r5, r6, lr}
 8009436:	2600      	movs	r6, #0
 8009438:	4d0c      	ldr	r5, [pc, #48]	; (800946c <__libc_init_array+0x38>)
 800943a:	4c0d      	ldr	r4, [pc, #52]	; (8009470 <__libc_init_array+0x3c>)
 800943c:	1b64      	subs	r4, r4, r5
 800943e:	10a4      	asrs	r4, r4, #2
 8009440:	42a6      	cmp	r6, r4
 8009442:	d109      	bne.n	8009458 <__libc_init_array+0x24>
 8009444:	2600      	movs	r6, #0
 8009446:	f000 f9cf 	bl	80097e8 <_init>
 800944a:	4d0a      	ldr	r5, [pc, #40]	; (8009474 <__libc_init_array+0x40>)
 800944c:	4c0a      	ldr	r4, [pc, #40]	; (8009478 <__libc_init_array+0x44>)
 800944e:	1b64      	subs	r4, r4, r5
 8009450:	10a4      	asrs	r4, r4, #2
 8009452:	42a6      	cmp	r6, r4
 8009454:	d105      	bne.n	8009462 <__libc_init_array+0x2e>
 8009456:	bd70      	pop	{r4, r5, r6, pc}
 8009458:	00b3      	lsls	r3, r6, #2
 800945a:	58eb      	ldr	r3, [r5, r3]
 800945c:	4798      	blx	r3
 800945e:	3601      	adds	r6, #1
 8009460:	e7ee      	b.n	8009440 <__libc_init_array+0xc>
 8009462:	00b3      	lsls	r3, r6, #2
 8009464:	58eb      	ldr	r3, [r5, r3]
 8009466:	4798      	blx	r3
 8009468:	3601      	adds	r6, #1
 800946a:	e7f2      	b.n	8009452 <__libc_init_array+0x1e>
 800946c:	080099c0 	.word	0x080099c0
 8009470:	080099c0 	.word	0x080099c0
 8009474:	080099c0 	.word	0x080099c0
 8009478:	080099c4 	.word	0x080099c4

0800947c <memset>:
 800947c:	0003      	movs	r3, r0
 800947e:	1882      	adds	r2, r0, r2
 8009480:	4293      	cmp	r3, r2
 8009482:	d100      	bne.n	8009486 <memset+0xa>
 8009484:	4770      	bx	lr
 8009486:	7019      	strb	r1, [r3, #0]
 8009488:	3301      	adds	r3, #1
 800948a:	e7f9      	b.n	8009480 <memset+0x4>

0800948c <exp>:
 800948c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800948e:	0004      	movs	r4, r0
 8009490:	000d      	movs	r5, r1
 8009492:	f000 f839 	bl	8009508 <__ieee754_exp>
 8009496:	4b16      	ldr	r3, [pc, #88]	; (80094f0 <exp+0x64>)
 8009498:	0006      	movs	r6, r0
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	000f      	movs	r7, r1
 800949e:	b25b      	sxtb	r3, r3
 80094a0:	3301      	adds	r3, #1
 80094a2:	d013      	beq.n	80094cc <exp+0x40>
 80094a4:	0020      	movs	r0, r4
 80094a6:	0029      	movs	r1, r5
 80094a8:	f000 f996 	bl	80097d8 <finite>
 80094ac:	2800      	cmp	r0, #0
 80094ae:	d00d      	beq.n	80094cc <exp+0x40>
 80094b0:	0020      	movs	r0, r4
 80094b2:	0029      	movs	r1, r5
 80094b4:	4a0f      	ldr	r2, [pc, #60]	; (80094f4 <exp+0x68>)
 80094b6:	4b10      	ldr	r3, [pc, #64]	; (80094f8 <exp+0x6c>)
 80094b8:	f7f6 ffc2 	bl	8000440 <__aeabi_dcmpgt>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d008      	beq.n	80094d2 <exp+0x46>
 80094c0:	f7ff ffb2 	bl	8009428 <__errno>
 80094c4:	2322      	movs	r3, #34	; 0x22
 80094c6:	2600      	movs	r6, #0
 80094c8:	4f0c      	ldr	r7, [pc, #48]	; (80094fc <exp+0x70>)
 80094ca:	6003      	str	r3, [r0, #0]
 80094cc:	0030      	movs	r0, r6
 80094ce:	0039      	movs	r1, r7
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094d2:	0020      	movs	r0, r4
 80094d4:	0029      	movs	r1, r5
 80094d6:	4a0a      	ldr	r2, [pc, #40]	; (8009500 <exp+0x74>)
 80094d8:	4b0a      	ldr	r3, [pc, #40]	; (8009504 <exp+0x78>)
 80094da:	f7f6 ff9d 	bl	8000418 <__aeabi_dcmplt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d0f4      	beq.n	80094cc <exp+0x40>
 80094e2:	f7ff ffa1 	bl	8009428 <__errno>
 80094e6:	2322      	movs	r3, #34	; 0x22
 80094e8:	2600      	movs	r6, #0
 80094ea:	2700      	movs	r7, #0
 80094ec:	6003      	str	r3, [r0, #0]
 80094ee:	e7ed      	b.n	80094cc <exp+0x40>
 80094f0:	20000090 	.word	0x20000090
 80094f4:	fefa39ef 	.word	0xfefa39ef
 80094f8:	40862e42 	.word	0x40862e42
 80094fc:	7ff00000 	.word	0x7ff00000
 8009500:	d52d3051 	.word	0xd52d3051
 8009504:	c0874910 	.word	0xc0874910

08009508 <__ieee754_exp>:
 8009508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800950a:	004b      	lsls	r3, r1, #1
 800950c:	000c      	movs	r4, r1
 800950e:	0fce      	lsrs	r6, r1, #31
 8009510:	4991      	ldr	r1, [pc, #580]	; (8009758 <__ieee754_exp+0x250>)
 8009512:	0005      	movs	r5, r0
 8009514:	b089      	sub	sp, #36	; 0x24
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	428b      	cmp	r3, r1
 800951a:	d92f      	bls.n	800957c <__ieee754_exp+0x74>
 800951c:	498f      	ldr	r1, [pc, #572]	; (800975c <__ieee754_exp+0x254>)
 800951e:	428b      	cmp	r3, r1
 8009520:	d912      	bls.n	8009548 <__ieee754_exp+0x40>
 8009522:	0323      	lsls	r3, r4, #12
 8009524:	0b1b      	lsrs	r3, r3, #12
 8009526:	4303      	orrs	r3, r0
 8009528:	d008      	beq.n	800953c <__ieee754_exp+0x34>
 800952a:	0002      	movs	r2, r0
 800952c:	0023      	movs	r3, r4
 800952e:	0028      	movs	r0, r5
 8009530:	0021      	movs	r1, r4
 8009532:	f7f6 ff99 	bl	8000468 <__aeabi_dadd>
 8009536:	0005      	movs	r5, r0
 8009538:	000c      	movs	r4, r1
 800953a:	e001      	b.n	8009540 <__ieee754_exp+0x38>
 800953c:	2e00      	cmp	r6, #0
 800953e:	d11a      	bne.n	8009576 <__ieee754_exp+0x6e>
 8009540:	0028      	movs	r0, r5
 8009542:	0021      	movs	r1, r4
 8009544:	b009      	add	sp, #36	; 0x24
 8009546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009548:	0021      	movs	r1, r4
 800954a:	4a85      	ldr	r2, [pc, #532]	; (8009760 <__ieee754_exp+0x258>)
 800954c:	4b85      	ldr	r3, [pc, #532]	; (8009764 <__ieee754_exp+0x25c>)
 800954e:	f7f6 ff77 	bl	8000440 <__aeabi_dcmpgt>
 8009552:	2800      	cmp	r0, #0
 8009554:	d006      	beq.n	8009564 <__ieee754_exp+0x5c>
 8009556:	4a84      	ldr	r2, [pc, #528]	; (8009768 <__ieee754_exp+0x260>)
 8009558:	4b84      	ldr	r3, [pc, #528]	; (800976c <__ieee754_exp+0x264>)
 800955a:	0010      	movs	r0, r2
 800955c:	0019      	movs	r1, r3
 800955e:	f7f7 fef3 	bl	8001348 <__aeabi_dmul>
 8009562:	e7e8      	b.n	8009536 <__ieee754_exp+0x2e>
 8009564:	0028      	movs	r0, r5
 8009566:	0021      	movs	r1, r4
 8009568:	4a81      	ldr	r2, [pc, #516]	; (8009770 <__ieee754_exp+0x268>)
 800956a:	4b82      	ldr	r3, [pc, #520]	; (8009774 <__ieee754_exp+0x26c>)
 800956c:	f7f6 ff54 	bl	8000418 <__aeabi_dcmplt>
 8009570:	2800      	cmp	r0, #0
 8009572:	d100      	bne.n	8009576 <__ieee754_exp+0x6e>
 8009574:	e07c      	b.n	8009670 <__ieee754_exp+0x168>
 8009576:	2500      	movs	r5, #0
 8009578:	002c      	movs	r4, r5
 800957a:	e7e1      	b.n	8009540 <__ieee754_exp+0x38>
 800957c:	4a7e      	ldr	r2, [pc, #504]	; (8009778 <__ieee754_exp+0x270>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d800      	bhi.n	8009584 <__ieee754_exp+0x7c>
 8009582:	e09e      	b.n	80096c2 <__ieee754_exp+0x1ba>
 8009584:	4a7d      	ldr	r2, [pc, #500]	; (800977c <__ieee754_exp+0x274>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d872      	bhi.n	8009670 <__ieee754_exp+0x168>
 800958a:	4b7d      	ldr	r3, [pc, #500]	; (8009780 <__ieee754_exp+0x278>)
 800958c:	00f7      	lsls	r7, r6, #3
 800958e:	19db      	adds	r3, r3, r7
 8009590:	0021      	movs	r1, r4
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	f7f8 f943 	bl	8001820 <__aeabi_dsub>
 800959a:	9002      	str	r0, [sp, #8]
 800959c:	9103      	str	r1, [sp, #12]
 800959e:	2001      	movs	r0, #1
 80095a0:	4b78      	ldr	r3, [pc, #480]	; (8009784 <__ieee754_exp+0x27c>)
 80095a2:	1b80      	subs	r0, r0, r6
 80095a4:	19df      	adds	r7, r3, r7
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	687c      	ldr	r4, [r7, #4]
 80095aa:	9304      	str	r3, [sp, #16]
 80095ac:	9405      	str	r4, [sp, #20]
 80095ae:	1b83      	subs	r3, r0, r6
 80095b0:	9301      	str	r3, [sp, #4]
 80095b2:	9a04      	ldr	r2, [sp, #16]
 80095b4:	9b05      	ldr	r3, [sp, #20]
 80095b6:	9802      	ldr	r0, [sp, #8]
 80095b8:	9903      	ldr	r1, [sp, #12]
 80095ba:	f7f8 f931 	bl	8001820 <__aeabi_dsub>
 80095be:	0005      	movs	r5, r0
 80095c0:	000c      	movs	r4, r1
 80095c2:	002a      	movs	r2, r5
 80095c4:	0023      	movs	r3, r4
 80095c6:	0028      	movs	r0, r5
 80095c8:	0021      	movs	r1, r4
 80095ca:	f7f7 febd 	bl	8001348 <__aeabi_dmul>
 80095ce:	0006      	movs	r6, r0
 80095d0:	000f      	movs	r7, r1
 80095d2:	4a6d      	ldr	r2, [pc, #436]	; (8009788 <__ieee754_exp+0x280>)
 80095d4:	4b6d      	ldr	r3, [pc, #436]	; (800978c <__ieee754_exp+0x284>)
 80095d6:	f7f7 feb7 	bl	8001348 <__aeabi_dmul>
 80095da:	4a6d      	ldr	r2, [pc, #436]	; (8009790 <__ieee754_exp+0x288>)
 80095dc:	4b6d      	ldr	r3, [pc, #436]	; (8009794 <__ieee754_exp+0x28c>)
 80095de:	f7f8 f91f 	bl	8001820 <__aeabi_dsub>
 80095e2:	0032      	movs	r2, r6
 80095e4:	003b      	movs	r3, r7
 80095e6:	f7f7 feaf 	bl	8001348 <__aeabi_dmul>
 80095ea:	4a6b      	ldr	r2, [pc, #428]	; (8009798 <__ieee754_exp+0x290>)
 80095ec:	4b6b      	ldr	r3, [pc, #428]	; (800979c <__ieee754_exp+0x294>)
 80095ee:	f7f6 ff3b 	bl	8000468 <__aeabi_dadd>
 80095f2:	0032      	movs	r2, r6
 80095f4:	003b      	movs	r3, r7
 80095f6:	f7f7 fea7 	bl	8001348 <__aeabi_dmul>
 80095fa:	4a69      	ldr	r2, [pc, #420]	; (80097a0 <__ieee754_exp+0x298>)
 80095fc:	4b69      	ldr	r3, [pc, #420]	; (80097a4 <__ieee754_exp+0x29c>)
 80095fe:	f7f8 f90f 	bl	8001820 <__aeabi_dsub>
 8009602:	0032      	movs	r2, r6
 8009604:	003b      	movs	r3, r7
 8009606:	f7f7 fe9f 	bl	8001348 <__aeabi_dmul>
 800960a:	4a67      	ldr	r2, [pc, #412]	; (80097a8 <__ieee754_exp+0x2a0>)
 800960c:	4b67      	ldr	r3, [pc, #412]	; (80097ac <__ieee754_exp+0x2a4>)
 800960e:	f7f6 ff2b 	bl	8000468 <__aeabi_dadd>
 8009612:	0032      	movs	r2, r6
 8009614:	003b      	movs	r3, r7
 8009616:	f7f7 fe97 	bl	8001348 <__aeabi_dmul>
 800961a:	0002      	movs	r2, r0
 800961c:	000b      	movs	r3, r1
 800961e:	0028      	movs	r0, r5
 8009620:	0021      	movs	r1, r4
 8009622:	f7f8 f8fd 	bl	8001820 <__aeabi_dsub>
 8009626:	000b      	movs	r3, r1
 8009628:	0002      	movs	r2, r0
 800962a:	0006      	movs	r6, r0
 800962c:	000f      	movs	r7, r1
 800962e:	0028      	movs	r0, r5
 8009630:	0021      	movs	r1, r4
 8009632:	f7f7 fe89 	bl	8001348 <__aeabi_dmul>
 8009636:	9b01      	ldr	r3, [sp, #4]
 8009638:	9006      	str	r0, [sp, #24]
 800963a:	9107      	str	r1, [sp, #28]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d156      	bne.n	80096ee <__ieee754_exp+0x1e6>
 8009640:	2380      	movs	r3, #128	; 0x80
 8009642:	2200      	movs	r2, #0
 8009644:	0030      	movs	r0, r6
 8009646:	0039      	movs	r1, r7
 8009648:	05db      	lsls	r3, r3, #23
 800964a:	f7f8 f8e9 	bl	8001820 <__aeabi_dsub>
 800964e:	0002      	movs	r2, r0
 8009650:	000b      	movs	r3, r1
 8009652:	9806      	ldr	r0, [sp, #24]
 8009654:	9907      	ldr	r1, [sp, #28]
 8009656:	f7f7 fa71 	bl	8000b3c <__aeabi_ddiv>
 800965a:	002a      	movs	r2, r5
 800965c:	0023      	movs	r3, r4
 800965e:	f7f8 f8df 	bl	8001820 <__aeabi_dsub>
 8009662:	0002      	movs	r2, r0
 8009664:	000b      	movs	r3, r1
 8009666:	2000      	movs	r0, #0
 8009668:	4951      	ldr	r1, [pc, #324]	; (80097b0 <__ieee754_exp+0x2a8>)
 800966a:	f7f8 f8d9 	bl	8001820 <__aeabi_dsub>
 800966e:	e762      	b.n	8009536 <__ieee754_exp+0x2e>
 8009670:	4850      	ldr	r0, [pc, #320]	; (80097b4 <__ieee754_exp+0x2ac>)
 8009672:	00f6      	lsls	r6, r6, #3
 8009674:	1986      	adds	r6, r0, r6
 8009676:	4a50      	ldr	r2, [pc, #320]	; (80097b8 <__ieee754_exp+0x2b0>)
 8009678:	4b50      	ldr	r3, [pc, #320]	; (80097bc <__ieee754_exp+0x2b4>)
 800967a:	0028      	movs	r0, r5
 800967c:	0021      	movs	r1, r4
 800967e:	f7f7 fe63 	bl	8001348 <__aeabi_dmul>
 8009682:	6832      	ldr	r2, [r6, #0]
 8009684:	6873      	ldr	r3, [r6, #4]
 8009686:	f7f6 feef 	bl	8000468 <__aeabi_dadd>
 800968a:	f7f8 fc5b 	bl	8001f44 <__aeabi_d2iz>
 800968e:	9001      	str	r0, [sp, #4]
 8009690:	f7f8 fc8e 	bl	8001fb0 <__aeabi_i2d>
 8009694:	4a4a      	ldr	r2, [pc, #296]	; (80097c0 <__ieee754_exp+0x2b8>)
 8009696:	4b4b      	ldr	r3, [pc, #300]	; (80097c4 <__ieee754_exp+0x2bc>)
 8009698:	0006      	movs	r6, r0
 800969a:	000f      	movs	r7, r1
 800969c:	f7f7 fe54 	bl	8001348 <__aeabi_dmul>
 80096a0:	0002      	movs	r2, r0
 80096a2:	000b      	movs	r3, r1
 80096a4:	0028      	movs	r0, r5
 80096a6:	0021      	movs	r1, r4
 80096a8:	f7f8 f8ba 	bl	8001820 <__aeabi_dsub>
 80096ac:	4a46      	ldr	r2, [pc, #280]	; (80097c8 <__ieee754_exp+0x2c0>)
 80096ae:	9002      	str	r0, [sp, #8]
 80096b0:	9103      	str	r1, [sp, #12]
 80096b2:	4b46      	ldr	r3, [pc, #280]	; (80097cc <__ieee754_exp+0x2c4>)
 80096b4:	0030      	movs	r0, r6
 80096b6:	0039      	movs	r1, r7
 80096b8:	f7f7 fe46 	bl	8001348 <__aeabi_dmul>
 80096bc:	9004      	str	r0, [sp, #16]
 80096be:	9105      	str	r1, [sp, #20]
 80096c0:	e777      	b.n	80095b2 <__ieee754_exp+0xaa>
 80096c2:	4a43      	ldr	r2, [pc, #268]	; (80097d0 <__ieee754_exp+0x2c8>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d80d      	bhi.n	80096e4 <__ieee754_exp+0x1dc>
 80096c8:	4a27      	ldr	r2, [pc, #156]	; (8009768 <__ieee754_exp+0x260>)
 80096ca:	4b28      	ldr	r3, [pc, #160]	; (800976c <__ieee754_exp+0x264>)
 80096cc:	0021      	movs	r1, r4
 80096ce:	f7f6 fecb 	bl	8000468 <__aeabi_dadd>
 80096d2:	2200      	movs	r2, #0
 80096d4:	4b36      	ldr	r3, [pc, #216]	; (80097b0 <__ieee754_exp+0x2a8>)
 80096d6:	f7f6 feb3 	bl	8000440 <__aeabi_dcmpgt>
 80096da:	2800      	cmp	r0, #0
 80096dc:	d005      	beq.n	80096ea <__ieee754_exp+0x1e2>
 80096de:	2200      	movs	r2, #0
 80096e0:	4b33      	ldr	r3, [pc, #204]	; (80097b0 <__ieee754_exp+0x2a8>)
 80096e2:	e724      	b.n	800952e <__ieee754_exp+0x26>
 80096e4:	2300      	movs	r3, #0
 80096e6:	9301      	str	r3, [sp, #4]
 80096e8:	e76b      	b.n	80095c2 <__ieee754_exp+0xba>
 80096ea:	9001      	str	r0, [sp, #4]
 80096ec:	e769      	b.n	80095c2 <__ieee754_exp+0xba>
 80096ee:	2180      	movs	r1, #128	; 0x80
 80096f0:	0032      	movs	r2, r6
 80096f2:	003b      	movs	r3, r7
 80096f4:	2000      	movs	r0, #0
 80096f6:	05c9      	lsls	r1, r1, #23
 80096f8:	f7f8 f892 	bl	8001820 <__aeabi_dsub>
 80096fc:	0002      	movs	r2, r0
 80096fe:	000b      	movs	r3, r1
 8009700:	9806      	ldr	r0, [sp, #24]
 8009702:	9907      	ldr	r1, [sp, #28]
 8009704:	f7f7 fa1a 	bl	8000b3c <__aeabi_ddiv>
 8009708:	0002      	movs	r2, r0
 800970a:	000b      	movs	r3, r1
 800970c:	9804      	ldr	r0, [sp, #16]
 800970e:	9905      	ldr	r1, [sp, #20]
 8009710:	f7f8 f886 	bl	8001820 <__aeabi_dsub>
 8009714:	9a02      	ldr	r2, [sp, #8]
 8009716:	9b03      	ldr	r3, [sp, #12]
 8009718:	f7f8 f882 	bl	8001820 <__aeabi_dsub>
 800971c:	0002      	movs	r2, r0
 800971e:	000b      	movs	r3, r1
 8009720:	2000      	movs	r0, #0
 8009722:	4923      	ldr	r1, [pc, #140]	; (80097b0 <__ieee754_exp+0x2a8>)
 8009724:	f7f8 f87c 	bl	8001820 <__aeabi_dsub>
 8009728:	4b2a      	ldr	r3, [pc, #168]	; (80097d4 <__ieee754_exp+0x2cc>)
 800972a:	9a01      	ldr	r2, [sp, #4]
 800972c:	0004      	movs	r4, r0
 800972e:	000d      	movs	r5, r1
 8009730:	429a      	cmp	r2, r3
 8009732:	db05      	blt.n	8009740 <__ieee754_exp+0x238>
 8009734:	9901      	ldr	r1, [sp, #4]
 8009736:	0508      	lsls	r0, r1, #20
 8009738:	1943      	adds	r3, r0, r5
 800973a:	0025      	movs	r5, r4
 800973c:	001c      	movs	r4, r3
 800973e:	e6ff      	b.n	8009540 <__ieee754_exp+0x38>
 8009740:	22fa      	movs	r2, #250	; 0xfa
 8009742:	0092      	lsls	r2, r2, #2
 8009744:	4694      	mov	ip, r2
 8009746:	9b01      	ldr	r3, [sp, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	4463      	add	r3, ip
 800974c:	051b      	lsls	r3, r3, #20
 800974e:	1859      	adds	r1, r3, r1
 8009750:	23b8      	movs	r3, #184	; 0xb8
 8009752:	045b      	lsls	r3, r3, #17
 8009754:	e703      	b.n	800955e <__ieee754_exp+0x56>
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	40862e41 	.word	0x40862e41
 800975c:	7fefffff 	.word	0x7fefffff
 8009760:	fefa39ef 	.word	0xfefa39ef
 8009764:	40862e42 	.word	0x40862e42
 8009768:	8800759c 	.word	0x8800759c
 800976c:	7e37e43c 	.word	0x7e37e43c
 8009770:	d52d3051 	.word	0xd52d3051
 8009774:	c0874910 	.word	0xc0874910
 8009778:	3fd62e42 	.word	0x3fd62e42
 800977c:	3ff0a2b1 	.word	0x3ff0a2b1
 8009780:	080099a0 	.word	0x080099a0
 8009784:	080099b0 	.word	0x080099b0
 8009788:	72bea4d0 	.word	0x72bea4d0
 800978c:	3e663769 	.word	0x3e663769
 8009790:	c5d26bf1 	.word	0xc5d26bf1
 8009794:	3ebbbd41 	.word	0x3ebbbd41
 8009798:	af25de2c 	.word	0xaf25de2c
 800979c:	3f11566a 	.word	0x3f11566a
 80097a0:	16bebd93 	.word	0x16bebd93
 80097a4:	3f66c16c 	.word	0x3f66c16c
 80097a8:	5555553e 	.word	0x5555553e
 80097ac:	3fc55555 	.word	0x3fc55555
 80097b0:	3ff00000 	.word	0x3ff00000
 80097b4:	08009990 	.word	0x08009990
 80097b8:	652b82fe 	.word	0x652b82fe
 80097bc:	3ff71547 	.word	0x3ff71547
 80097c0:	fee00000 	.word	0xfee00000
 80097c4:	3fe62e42 	.word	0x3fe62e42
 80097c8:	35793c76 	.word	0x35793c76
 80097cc:	3dea39ef 	.word	0x3dea39ef
 80097d0:	3e2fffff 	.word	0x3e2fffff
 80097d4:	fffffc03 	.word	0xfffffc03

080097d8 <finite>:
 80097d8:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <finite+0xc>)
 80097da:	0048      	lsls	r0, r1, #1
 80097dc:	0840      	lsrs	r0, r0, #1
 80097de:	18c0      	adds	r0, r0, r3
 80097e0:	0fc0      	lsrs	r0, r0, #31
 80097e2:	4770      	bx	lr
 80097e4:	80100000 	.word	0x80100000

080097e8 <_init>:
 80097e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ea:	46c0      	nop			; (mov r8, r8)
 80097ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ee:	bc08      	pop	{r3}
 80097f0:	469e      	mov	lr, r3
 80097f2:	4770      	bx	lr

080097f4 <_fini>:
 80097f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097fa:	bc08      	pop	{r3}
 80097fc:	469e      	mov	lr, r3
 80097fe:	4770      	bx	lr

08009800 <__FLASH_Program_Fast_veneer>:
 8009800:	b401      	push	{r0}
 8009802:	4802      	ldr	r0, [pc, #8]	; (800980c <__FLASH_Program_Fast_veneer+0xc>)
 8009804:	4684      	mov	ip, r0
 8009806:	bc01      	pop	{r0}
 8009808:	4760      	bx	ip
 800980a:	bf00      	nop
 800980c:	20000095 	.word	0x20000095

Disassembly of section .data:

20000000 <FREQUENCY_CALIBRATION>:
20000000:	1eb851ec 3fefeb85                       .Q.....?

20000008 <FM_FREQUENCY>:
20000008:	0000222e                                ."..

2000000c <MODE>:
2000000c:	00000002                                ....

20000010 <STATION>:
20000010:	ffffffff                                ....

20000014 <STANDBY>:
20000014:	                                         .

20000015 <STANDBY_DISPLAY_ON>:
20000015:	                                         .

20000016 <LOCK_FREQUENCY>:
20000016:	                                         ..

20000018 <AM_FREQUENCY>:
20000018:	00000213                                ....

2000001c <COLD_START>:
2000001c:	00000001                                ....

20000020 <SystemCoreClock>:
20000020:	00f42400                                .$..

20000024 <uwTickPrio>:
20000024:	00000004                                ....

20000028 <uwTickFreq>:
20000028:	00000001                                ....

2000002c <_impure_ptr>:
2000002c:	20000030                                0.. 

20000030 <impure_data>:
	...

20000090 <__fdlib_version>:
20000090:	000000ff                                ....

20000094 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000094:	b580      	push	{r7, lr}
20000096:	b088      	sub	sp, #32
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
2000009c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000009e:	231f      	movs	r3, #31
200000a0:	18fb      	adds	r3, r7, r3
200000a2:	2200      	movs	r2, #0
200000a4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000aa:	683b      	ldr	r3, [r7, #0]
200000ac:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ae:	4b1a      	ldr	r3, [pc, #104]	; (20000118 <FLASH_Program_Fast+0x84>)
200000b0:	695a      	ldr	r2, [r3, #20]
200000b2:	4b19      	ldr	r3, [pc, #100]	; (20000118 <FLASH_Program_Fast+0x84>)
200000b4:	2180      	movs	r1, #128	; 0x80
200000b6:	02c9      	lsls	r1, r1, #11
200000b8:	430a      	orrs	r2, r1
200000ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000bc:	f3ef 8310 	mrs	r3, PRIMASK
200000c0:	60fb      	str	r3, [r7, #12]
  return(result);
200000c2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000c6:	b672      	cpsid	i
}
200000c8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ca:	e00f      	b.n	200000ec <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000cc:	697a      	ldr	r2, [r7, #20]
200000ce:	69bb      	ldr	r3, [r7, #24]
200000d0:	6812      	ldr	r2, [r2, #0]
200000d2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000d4:	697b      	ldr	r3, [r7, #20]
200000d6:	3304      	adds	r3, #4
200000d8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000da:	69bb      	ldr	r3, [r7, #24]
200000dc:	3304      	adds	r3, #4
200000de:	61bb      	str	r3, [r7, #24]
    index++;
200000e0:	211f      	movs	r1, #31
200000e2:	187b      	adds	r3, r7, r1
200000e4:	781a      	ldrb	r2, [r3, #0]
200000e6:	187b      	adds	r3, r7, r1
200000e8:	3201      	adds	r2, #1
200000ea:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000ec:	231f      	movs	r3, #31
200000ee:	18fb      	adds	r3, r7, r3
200000f0:	781b      	ldrb	r3, [r3, #0]
200000f2:	2b3f      	cmp	r3, #63	; 0x3f
200000f4:	d9ea      	bls.n	200000cc <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	4b07      	ldr	r3, [pc, #28]	; (20000118 <FLASH_Program_Fast+0x84>)
200000fa:	691a      	ldr	r2, [r3, #16]
200000fc:	2380      	movs	r3, #128	; 0x80
200000fe:	025b      	lsls	r3, r3, #9
20000100:	4013      	ands	r3, r2
20000102:	d1f9      	bne.n	200000f8 <FLASH_Program_Fast+0x64>
20000104:	693b      	ldr	r3, [r7, #16]
20000106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000108:	68bb      	ldr	r3, [r7, #8]
2000010a:	f383 8810 	msr	PRIMASK, r3
}
2000010e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b008      	add	sp, #32
20000116:	bd80      	pop	{r7, pc}
20000118:	40022000 	.word	0x40022000
