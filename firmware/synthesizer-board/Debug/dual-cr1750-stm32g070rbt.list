
dual-cr1750-stm32g070rbt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009338  080000b8  080000b8  000100b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080093f0  080093f0  000193f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009598  08009598  0002011c  2**0
                  CONTENTS
  4 .ARM          00000000  08009598  08009598  0002011c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009598  08009598  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009598  08009598  00019598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800959c  0800959c  0001959c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080095a0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000310  2000011c  080096bc  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080096bc  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011cdd  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d81  00000000  00000000  00031e21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001098  00000000  00000000  00034ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f70  00000000  00000000  00035c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180ff  00000000  00000000  00036bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f68  00000000  00000000  0004ecaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009791b  00000000  00000000  00062c17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fa532  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da8  00000000  00000000  000fa588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000011c 	.word	0x2000011c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080093c4 	.word	0x080093c4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000120 	.word	0x20000120
 80000fc:	080093c4 	.word	0x080093c4

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f8f0 	bl	80003e8 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__divsi3>:
 8000214:	4603      	mov	r3, r0
 8000216:	430b      	orrs	r3, r1
 8000218:	d47f      	bmi.n	800031a <__divsi3+0x106>
 800021a:	2200      	movs	r2, #0
 800021c:	0843      	lsrs	r3, r0, #1
 800021e:	428b      	cmp	r3, r1
 8000220:	d374      	bcc.n	800030c <__divsi3+0xf8>
 8000222:	0903      	lsrs	r3, r0, #4
 8000224:	428b      	cmp	r3, r1
 8000226:	d35f      	bcc.n	80002e8 <__divsi3+0xd4>
 8000228:	0a03      	lsrs	r3, r0, #8
 800022a:	428b      	cmp	r3, r1
 800022c:	d344      	bcc.n	80002b8 <__divsi3+0xa4>
 800022e:	0b03      	lsrs	r3, r0, #12
 8000230:	428b      	cmp	r3, r1
 8000232:	d328      	bcc.n	8000286 <__divsi3+0x72>
 8000234:	0c03      	lsrs	r3, r0, #16
 8000236:	428b      	cmp	r3, r1
 8000238:	d30d      	bcc.n	8000256 <__divsi3+0x42>
 800023a:	22ff      	movs	r2, #255	; 0xff
 800023c:	0209      	lsls	r1, r1, #8
 800023e:	ba12      	rev	r2, r2
 8000240:	0c03      	lsrs	r3, r0, #16
 8000242:	428b      	cmp	r3, r1
 8000244:	d302      	bcc.n	800024c <__divsi3+0x38>
 8000246:	1212      	asrs	r2, r2, #8
 8000248:	0209      	lsls	r1, r1, #8
 800024a:	d065      	beq.n	8000318 <__divsi3+0x104>
 800024c:	0b03      	lsrs	r3, r0, #12
 800024e:	428b      	cmp	r3, r1
 8000250:	d319      	bcc.n	8000286 <__divsi3+0x72>
 8000252:	e000      	b.n	8000256 <__divsi3+0x42>
 8000254:	0a09      	lsrs	r1, r1, #8
 8000256:	0bc3      	lsrs	r3, r0, #15
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__divsi3+0x4c>
 800025c:	03cb      	lsls	r3, r1, #15
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0b83      	lsrs	r3, r0, #14
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__divsi3+0x58>
 8000268:	038b      	lsls	r3, r1, #14
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	0b43      	lsrs	r3, r0, #13
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x64>
 8000274:	034b      	lsls	r3, r1, #13
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b03      	lsrs	r3, r0, #12
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x70>
 8000280:	030b      	lsls	r3, r1, #12
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0ac3      	lsrs	r3, r0, #11
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x7c>
 800028c:	02cb      	lsls	r3, r1, #11
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0a83      	lsrs	r3, r0, #10
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x88>
 8000298:	028b      	lsls	r3, r1, #10
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0a43      	lsrs	r3, r0, #9
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x94>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a03      	lsrs	r3, r0, #8
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0xa0>
 80002b0:	020b      	lsls	r3, r1, #8
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	d2cd      	bcs.n	8000254 <__divsi3+0x40>
 80002b8:	09c3      	lsrs	r3, r0, #7
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d301      	bcc.n	80002c2 <__divsi3+0xae>
 80002be:	01cb      	lsls	r3, r1, #7
 80002c0:	1ac0      	subs	r0, r0, r3
 80002c2:	4152      	adcs	r2, r2
 80002c4:	0983      	lsrs	r3, r0, #6
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d301      	bcc.n	80002ce <__divsi3+0xba>
 80002ca:	018b      	lsls	r3, r1, #6
 80002cc:	1ac0      	subs	r0, r0, r3
 80002ce:	4152      	adcs	r2, r2
 80002d0:	0943      	lsrs	r3, r0, #5
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xc6>
 80002d6:	014b      	lsls	r3, r1, #5
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0903      	lsrs	r3, r0, #4
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xd2>
 80002e2:	010b      	lsls	r3, r1, #4
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	08c3      	lsrs	r3, r0, #3
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xde>
 80002ee:	00cb      	lsls	r3, r1, #3
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0883      	lsrs	r3, r0, #2
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xea>
 80002fa:	008b      	lsls	r3, r1, #2
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	0843      	lsrs	r3, r0, #1
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xf6>
 8000306:	004b      	lsls	r3, r1, #1
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	1a41      	subs	r1, r0, r1
 800030e:	d200      	bcs.n	8000312 <__divsi3+0xfe>
 8000310:	4601      	mov	r1, r0
 8000312:	4152      	adcs	r2, r2
 8000314:	4610      	mov	r0, r2
 8000316:	4770      	bx	lr
 8000318:	e05d      	b.n	80003d6 <__divsi3+0x1c2>
 800031a:	0fca      	lsrs	r2, r1, #31
 800031c:	d000      	beq.n	8000320 <__divsi3+0x10c>
 800031e:	4249      	negs	r1, r1
 8000320:	1003      	asrs	r3, r0, #32
 8000322:	d300      	bcc.n	8000326 <__divsi3+0x112>
 8000324:	4240      	negs	r0, r0
 8000326:	4053      	eors	r3, r2
 8000328:	2200      	movs	r2, #0
 800032a:	469c      	mov	ip, r3
 800032c:	0903      	lsrs	r3, r0, #4
 800032e:	428b      	cmp	r3, r1
 8000330:	d32d      	bcc.n	800038e <__divsi3+0x17a>
 8000332:	0a03      	lsrs	r3, r0, #8
 8000334:	428b      	cmp	r3, r1
 8000336:	d312      	bcc.n	800035e <__divsi3+0x14a>
 8000338:	22fc      	movs	r2, #252	; 0xfc
 800033a:	0189      	lsls	r1, r1, #6
 800033c:	ba12      	rev	r2, r2
 800033e:	0a03      	lsrs	r3, r0, #8
 8000340:	428b      	cmp	r3, r1
 8000342:	d30c      	bcc.n	800035e <__divsi3+0x14a>
 8000344:	0189      	lsls	r1, r1, #6
 8000346:	1192      	asrs	r2, r2, #6
 8000348:	428b      	cmp	r3, r1
 800034a:	d308      	bcc.n	800035e <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d304      	bcc.n	800035e <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	d03a      	beq.n	80003ce <__divsi3+0x1ba>
 8000358:	1192      	asrs	r2, r2, #6
 800035a:	e000      	b.n	800035e <__divsi3+0x14a>
 800035c:	0989      	lsrs	r1, r1, #6
 800035e:	09c3      	lsrs	r3, r0, #7
 8000360:	428b      	cmp	r3, r1
 8000362:	d301      	bcc.n	8000368 <__divsi3+0x154>
 8000364:	01cb      	lsls	r3, r1, #7
 8000366:	1ac0      	subs	r0, r0, r3
 8000368:	4152      	adcs	r2, r2
 800036a:	0983      	lsrs	r3, r0, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d301      	bcc.n	8000374 <__divsi3+0x160>
 8000370:	018b      	lsls	r3, r1, #6
 8000372:	1ac0      	subs	r0, r0, r3
 8000374:	4152      	adcs	r2, r2
 8000376:	0943      	lsrs	r3, r0, #5
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x16c>
 800037c:	014b      	lsls	r3, r1, #5
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0903      	lsrs	r3, r0, #4
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x178>
 8000388:	010b      	lsls	r3, r1, #4
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	08c3      	lsrs	r3, r0, #3
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x184>
 8000394:	00cb      	lsls	r3, r1, #3
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0883      	lsrs	r3, r0, #2
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x190>
 80003a0:	008b      	lsls	r3, r1, #2
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	d2d9      	bcs.n	800035c <__divsi3+0x148>
 80003a8:	0843      	lsrs	r3, r0, #1
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d301      	bcc.n	80003b2 <__divsi3+0x19e>
 80003ae:	004b      	lsls	r3, r1, #1
 80003b0:	1ac0      	subs	r0, r0, r3
 80003b2:	4152      	adcs	r2, r2
 80003b4:	1a41      	subs	r1, r0, r1
 80003b6:	d200      	bcs.n	80003ba <__divsi3+0x1a6>
 80003b8:	4601      	mov	r1, r0
 80003ba:	4663      	mov	r3, ip
 80003bc:	4152      	adcs	r2, r2
 80003be:	105b      	asrs	r3, r3, #1
 80003c0:	4610      	mov	r0, r2
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x1b4>
 80003c4:	4240      	negs	r0, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d500      	bpl.n	80003cc <__divsi3+0x1b8>
 80003ca:	4249      	negs	r1, r1
 80003cc:	4770      	bx	lr
 80003ce:	4663      	mov	r3, ip
 80003d0:	105b      	asrs	r3, r3, #1
 80003d2:	d300      	bcc.n	80003d6 <__divsi3+0x1c2>
 80003d4:	4240      	negs	r0, r0
 80003d6:	b501      	push	{r0, lr}
 80003d8:	2000      	movs	r0, #0
 80003da:	f000 f805 	bl	80003e8 <__aeabi_idiv0>
 80003de:	bd02      	pop	{r1, pc}

080003e0 <__aeabi_idivmod>:
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d0f8      	beq.n	80003d6 <__divsi3+0x1c2>
 80003e4:	e716      	b.n	8000214 <__divsi3>
 80003e6:	4770      	bx	lr

080003e8 <__aeabi_idiv0>:
 80003e8:	4770      	bx	lr
 80003ea:	46c0      	nop			; (mov r8, r8)

080003ec <__aeabi_cdrcmple>:
 80003ec:	4684      	mov	ip, r0
 80003ee:	1c10      	adds	r0, r2, #0
 80003f0:	4662      	mov	r2, ip
 80003f2:	468c      	mov	ip, r1
 80003f4:	1c19      	adds	r1, r3, #0
 80003f6:	4663      	mov	r3, ip
 80003f8:	e000      	b.n	80003fc <__aeabi_cdcmpeq>
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__aeabi_cdcmpeq>:
 80003fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80003fe:	f000 ff33 	bl	8001268 <__ledf2>
 8000402:	2800      	cmp	r0, #0
 8000404:	d401      	bmi.n	800040a <__aeabi_cdcmpeq+0xe>
 8000406:	2100      	movs	r1, #0
 8000408:	42c8      	cmn	r0, r1
 800040a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800040c <__aeabi_dcmpeq>:
 800040c:	b510      	push	{r4, lr}
 800040e:	f000 fe7d 	bl	800110c <__eqdf2>
 8000412:	4240      	negs	r0, r0
 8000414:	3001      	adds	r0, #1
 8000416:	bd10      	pop	{r4, pc}

08000418 <__aeabi_dcmplt>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 ff25 	bl	8001268 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	db01      	blt.n	8000426 <__aeabi_dcmplt+0xe>
 8000422:	2000      	movs	r0, #0
 8000424:	bd10      	pop	{r4, pc}
 8000426:	2001      	movs	r0, #1
 8000428:	bd10      	pop	{r4, pc}
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_dcmple>:
 800042c:	b510      	push	{r4, lr}
 800042e:	f000 ff1b 	bl	8001268 <__ledf2>
 8000432:	2800      	cmp	r0, #0
 8000434:	dd01      	ble.n	800043a <__aeabi_dcmple+0xe>
 8000436:	2000      	movs	r0, #0
 8000438:	bd10      	pop	{r4, pc}
 800043a:	2001      	movs	r0, #1
 800043c:	bd10      	pop	{r4, pc}
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_dcmpgt>:
 8000440:	b510      	push	{r4, lr}
 8000442:	f000 fe9f 	bl	8001184 <__gedf2>
 8000446:	2800      	cmp	r0, #0
 8000448:	dc01      	bgt.n	800044e <__aeabi_dcmpgt+0xe>
 800044a:	2000      	movs	r0, #0
 800044c:	bd10      	pop	{r4, pc}
 800044e:	2001      	movs	r0, #1
 8000450:	bd10      	pop	{r4, pc}
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_dcmpge>:
 8000454:	b510      	push	{r4, lr}
 8000456:	f000 fe95 	bl	8001184 <__gedf2>
 800045a:	2800      	cmp	r0, #0
 800045c:	da01      	bge.n	8000462 <__aeabi_dcmpge+0xe>
 800045e:	2000      	movs	r0, #0
 8000460:	bd10      	pop	{r4, pc}
 8000462:	2001      	movs	r0, #1
 8000464:	bd10      	pop	{r4, pc}
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__aeabi_dadd>:
 8000468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046a:	464f      	mov	r7, r9
 800046c:	46d6      	mov	lr, sl
 800046e:	4646      	mov	r6, r8
 8000470:	000d      	movs	r5, r1
 8000472:	0001      	movs	r1, r0
 8000474:	0018      	movs	r0, r3
 8000476:	b5c0      	push	{r6, r7, lr}
 8000478:	0017      	movs	r7, r2
 800047a:	032b      	lsls	r3, r5, #12
 800047c:	0a5a      	lsrs	r2, r3, #9
 800047e:	0f4b      	lsrs	r3, r1, #29
 8000480:	4313      	orrs	r3, r2
 8000482:	00ca      	lsls	r2, r1, #3
 8000484:	4691      	mov	r9, r2
 8000486:	0302      	lsls	r2, r0, #12
 8000488:	006e      	lsls	r6, r5, #1
 800048a:	0041      	lsls	r1, r0, #1
 800048c:	0a52      	lsrs	r2, r2, #9
 800048e:	0fec      	lsrs	r4, r5, #31
 8000490:	0f7d      	lsrs	r5, r7, #29
 8000492:	4315      	orrs	r5, r2
 8000494:	0d76      	lsrs	r6, r6, #21
 8000496:	0d49      	lsrs	r1, r1, #21
 8000498:	0fc0      	lsrs	r0, r0, #31
 800049a:	4682      	mov	sl, r0
 800049c:	46ac      	mov	ip, r5
 800049e:	00ff      	lsls	r7, r7, #3
 80004a0:	1a72      	subs	r2, r6, r1
 80004a2:	4284      	cmp	r4, r0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x40>
 80004a6:	e098      	b.n	80005da <__aeabi_dadd+0x172>
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	dc00      	bgt.n	80004ae <__aeabi_dadd+0x46>
 80004ac:	e081      	b.n	80005b2 <__aeabi_dadd+0x14a>
 80004ae:	2900      	cmp	r1, #0
 80004b0:	d100      	bne.n	80004b4 <__aeabi_dadd+0x4c>
 80004b2:	e0b6      	b.n	8000622 <__aeabi_dadd+0x1ba>
 80004b4:	49c9      	ldr	r1, [pc, #804]	; (80007dc <__aeabi_dadd+0x374>)
 80004b6:	428e      	cmp	r6, r1
 80004b8:	d100      	bne.n	80004bc <__aeabi_dadd+0x54>
 80004ba:	e172      	b.n	80007a2 <__aeabi_dadd+0x33a>
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	0028      	movs	r0, r5
 80004c0:	0409      	lsls	r1, r1, #16
 80004c2:	4308      	orrs	r0, r1
 80004c4:	4684      	mov	ip, r0
 80004c6:	2a38      	cmp	r2, #56	; 0x38
 80004c8:	dd00      	ble.n	80004cc <__aeabi_dadd+0x64>
 80004ca:	e15e      	b.n	800078a <__aeabi_dadd+0x322>
 80004cc:	2a1f      	cmp	r2, #31
 80004ce:	dd00      	ble.n	80004d2 <__aeabi_dadd+0x6a>
 80004d0:	e1ee      	b.n	80008b0 <__aeabi_dadd+0x448>
 80004d2:	2020      	movs	r0, #32
 80004d4:	0039      	movs	r1, r7
 80004d6:	4665      	mov	r5, ip
 80004d8:	1a80      	subs	r0, r0, r2
 80004da:	4087      	lsls	r7, r0
 80004dc:	40d1      	lsrs	r1, r2
 80004de:	4085      	lsls	r5, r0
 80004e0:	430d      	orrs	r5, r1
 80004e2:	0039      	movs	r1, r7
 80004e4:	1e4f      	subs	r7, r1, #1
 80004e6:	41b9      	sbcs	r1, r7
 80004e8:	4667      	mov	r7, ip
 80004ea:	40d7      	lsrs	r7, r2
 80004ec:	4329      	orrs	r1, r5
 80004ee:	1bdb      	subs	r3, r3, r7
 80004f0:	464a      	mov	r2, r9
 80004f2:	1a55      	subs	r5, r2, r1
 80004f4:	45a9      	cmp	r9, r5
 80004f6:	4189      	sbcs	r1, r1
 80004f8:	4249      	negs	r1, r1
 80004fa:	1a5b      	subs	r3, r3, r1
 80004fc:	4698      	mov	r8, r3
 80004fe:	4643      	mov	r3, r8
 8000500:	021b      	lsls	r3, r3, #8
 8000502:	d400      	bmi.n	8000506 <__aeabi_dadd+0x9e>
 8000504:	e0cc      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000506:	4643      	mov	r3, r8
 8000508:	025b      	lsls	r3, r3, #9
 800050a:	0a5b      	lsrs	r3, r3, #9
 800050c:	4698      	mov	r8, r3
 800050e:	4643      	mov	r3, r8
 8000510:	2b00      	cmp	r3, #0
 8000512:	d100      	bne.n	8000516 <__aeabi_dadd+0xae>
 8000514:	e12c      	b.n	8000770 <__aeabi_dadd+0x308>
 8000516:	4640      	mov	r0, r8
 8000518:	f001 fda0 	bl	800205c <__clzsi2>
 800051c:	0001      	movs	r1, r0
 800051e:	3908      	subs	r1, #8
 8000520:	2220      	movs	r2, #32
 8000522:	0028      	movs	r0, r5
 8000524:	4643      	mov	r3, r8
 8000526:	1a52      	subs	r2, r2, r1
 8000528:	408b      	lsls	r3, r1
 800052a:	40d0      	lsrs	r0, r2
 800052c:	408d      	lsls	r5, r1
 800052e:	4303      	orrs	r3, r0
 8000530:	428e      	cmp	r6, r1
 8000532:	dd00      	ble.n	8000536 <__aeabi_dadd+0xce>
 8000534:	e117      	b.n	8000766 <__aeabi_dadd+0x2fe>
 8000536:	1b8e      	subs	r6, r1, r6
 8000538:	1c72      	adds	r2, r6, #1
 800053a:	2a1f      	cmp	r2, #31
 800053c:	dd00      	ble.n	8000540 <__aeabi_dadd+0xd8>
 800053e:	e1a7      	b.n	8000890 <__aeabi_dadd+0x428>
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	002e      	movs	r6, r5
 8000546:	1a89      	subs	r1, r1, r2
 8000548:	408d      	lsls	r5, r1
 800054a:	4088      	lsls	r0, r1
 800054c:	40d6      	lsrs	r6, r2
 800054e:	40d3      	lsrs	r3, r2
 8000550:	1e69      	subs	r1, r5, #1
 8000552:	418d      	sbcs	r5, r1
 8000554:	4330      	orrs	r0, r6
 8000556:	4698      	mov	r8, r3
 8000558:	2600      	movs	r6, #0
 800055a:	4305      	orrs	r5, r0
 800055c:	076b      	lsls	r3, r5, #29
 800055e:	d009      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000560:	230f      	movs	r3, #15
 8000562:	402b      	ands	r3, r5
 8000564:	2b04      	cmp	r3, #4
 8000566:	d005      	beq.n	8000574 <__aeabi_dadd+0x10c>
 8000568:	1d2b      	adds	r3, r5, #4
 800056a:	42ab      	cmp	r3, r5
 800056c:	41ad      	sbcs	r5, r5
 800056e:	426d      	negs	r5, r5
 8000570:	44a8      	add	r8, r5
 8000572:	001d      	movs	r5, r3
 8000574:	4643      	mov	r3, r8
 8000576:	021b      	lsls	r3, r3, #8
 8000578:	d400      	bmi.n	800057c <__aeabi_dadd+0x114>
 800057a:	e094      	b.n	80006a6 <__aeabi_dadd+0x23e>
 800057c:	4b97      	ldr	r3, [pc, #604]	; (80007dc <__aeabi_dadd+0x374>)
 800057e:	1c72      	adds	r2, r6, #1
 8000580:	429a      	cmp	r2, r3
 8000582:	d100      	bne.n	8000586 <__aeabi_dadd+0x11e>
 8000584:	e09d      	b.n	80006c2 <__aeabi_dadd+0x25a>
 8000586:	4641      	mov	r1, r8
 8000588:	4b95      	ldr	r3, [pc, #596]	; (80007e0 <__aeabi_dadd+0x378>)
 800058a:	08ed      	lsrs	r5, r5, #3
 800058c:	4019      	ands	r1, r3
 800058e:	000b      	movs	r3, r1
 8000590:	0552      	lsls	r2, r2, #21
 8000592:	0749      	lsls	r1, r1, #29
 8000594:	025b      	lsls	r3, r3, #9
 8000596:	4329      	orrs	r1, r5
 8000598:	0b1b      	lsrs	r3, r3, #12
 800059a:	0d52      	lsrs	r2, r2, #21
 800059c:	0512      	lsls	r2, r2, #20
 800059e:	4313      	orrs	r3, r2
 80005a0:	07e4      	lsls	r4, r4, #31
 80005a2:	4323      	orrs	r3, r4
 80005a4:	0008      	movs	r0, r1
 80005a6:	0019      	movs	r1, r3
 80005a8:	bce0      	pop	{r5, r6, r7}
 80005aa:	46ba      	mov	sl, r7
 80005ac:	46b1      	mov	r9, r6
 80005ae:	46a8      	mov	r8, r5
 80005b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b2:	2a00      	cmp	r2, #0
 80005b4:	d043      	beq.n	800063e <__aeabi_dadd+0x1d6>
 80005b6:	1b8a      	subs	r2, r1, r6
 80005b8:	2e00      	cmp	r6, #0
 80005ba:	d000      	beq.n	80005be <__aeabi_dadd+0x156>
 80005bc:	e12a      	b.n	8000814 <__aeabi_dadd+0x3ac>
 80005be:	464c      	mov	r4, r9
 80005c0:	431c      	orrs	r4, r3
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x15e>
 80005c4:	e1d1      	b.n	800096a <__aeabi_dadd+0x502>
 80005c6:	1e54      	subs	r4, r2, #1
 80005c8:	2a01      	cmp	r2, #1
 80005ca:	d100      	bne.n	80005ce <__aeabi_dadd+0x166>
 80005cc:	e21f      	b.n	8000a0e <__aeabi_dadd+0x5a6>
 80005ce:	4d83      	ldr	r5, [pc, #524]	; (80007dc <__aeabi_dadd+0x374>)
 80005d0:	42aa      	cmp	r2, r5
 80005d2:	d100      	bne.n	80005d6 <__aeabi_dadd+0x16e>
 80005d4:	e272      	b.n	8000abc <__aeabi_dadd+0x654>
 80005d6:	0022      	movs	r2, r4
 80005d8:	e123      	b.n	8000822 <__aeabi_dadd+0x3ba>
 80005da:	2a00      	cmp	r2, #0
 80005dc:	dc00      	bgt.n	80005e0 <__aeabi_dadd+0x178>
 80005de:	e098      	b.n	8000712 <__aeabi_dadd+0x2aa>
 80005e0:	2900      	cmp	r1, #0
 80005e2:	d042      	beq.n	800066a <__aeabi_dadd+0x202>
 80005e4:	497d      	ldr	r1, [pc, #500]	; (80007dc <__aeabi_dadd+0x374>)
 80005e6:	428e      	cmp	r6, r1
 80005e8:	d100      	bne.n	80005ec <__aeabi_dadd+0x184>
 80005ea:	e0da      	b.n	80007a2 <__aeabi_dadd+0x33a>
 80005ec:	2180      	movs	r1, #128	; 0x80
 80005ee:	0028      	movs	r0, r5
 80005f0:	0409      	lsls	r1, r1, #16
 80005f2:	4308      	orrs	r0, r1
 80005f4:	4684      	mov	ip, r0
 80005f6:	2a38      	cmp	r2, #56	; 0x38
 80005f8:	dd00      	ble.n	80005fc <__aeabi_dadd+0x194>
 80005fa:	e129      	b.n	8000850 <__aeabi_dadd+0x3e8>
 80005fc:	2a1f      	cmp	r2, #31
 80005fe:	dc00      	bgt.n	8000602 <__aeabi_dadd+0x19a>
 8000600:	e187      	b.n	8000912 <__aeabi_dadd+0x4aa>
 8000602:	0011      	movs	r1, r2
 8000604:	4665      	mov	r5, ip
 8000606:	3920      	subs	r1, #32
 8000608:	40cd      	lsrs	r5, r1
 800060a:	2a20      	cmp	r2, #32
 800060c:	d004      	beq.n	8000618 <__aeabi_dadd+0x1b0>
 800060e:	2040      	movs	r0, #64	; 0x40
 8000610:	4661      	mov	r1, ip
 8000612:	1a82      	subs	r2, r0, r2
 8000614:	4091      	lsls	r1, r2
 8000616:	430f      	orrs	r7, r1
 8000618:	0039      	movs	r1, r7
 800061a:	1e4f      	subs	r7, r1, #1
 800061c:	41b9      	sbcs	r1, r7
 800061e:	430d      	orrs	r5, r1
 8000620:	e11b      	b.n	800085a <__aeabi_dadd+0x3f2>
 8000622:	0029      	movs	r1, r5
 8000624:	4339      	orrs	r1, r7
 8000626:	d100      	bne.n	800062a <__aeabi_dadd+0x1c2>
 8000628:	e0b5      	b.n	8000796 <__aeabi_dadd+0x32e>
 800062a:	1e51      	subs	r1, r2, #1
 800062c:	2a01      	cmp	r2, #1
 800062e:	d100      	bne.n	8000632 <__aeabi_dadd+0x1ca>
 8000630:	e1ab      	b.n	800098a <__aeabi_dadd+0x522>
 8000632:	486a      	ldr	r0, [pc, #424]	; (80007dc <__aeabi_dadd+0x374>)
 8000634:	4282      	cmp	r2, r0
 8000636:	d100      	bne.n	800063a <__aeabi_dadd+0x1d2>
 8000638:	e1b2      	b.n	80009a0 <__aeabi_dadd+0x538>
 800063a:	000a      	movs	r2, r1
 800063c:	e743      	b.n	80004c6 <__aeabi_dadd+0x5e>
 800063e:	4969      	ldr	r1, [pc, #420]	; (80007e4 <__aeabi_dadd+0x37c>)
 8000640:	1c75      	adds	r5, r6, #1
 8000642:	420d      	tst	r5, r1
 8000644:	d000      	beq.n	8000648 <__aeabi_dadd+0x1e0>
 8000646:	e0cf      	b.n	80007e8 <__aeabi_dadd+0x380>
 8000648:	2e00      	cmp	r6, #0
 800064a:	d000      	beq.n	800064e <__aeabi_dadd+0x1e6>
 800064c:	e193      	b.n	8000976 <__aeabi_dadd+0x50e>
 800064e:	4649      	mov	r1, r9
 8000650:	4319      	orrs	r1, r3
 8000652:	d100      	bne.n	8000656 <__aeabi_dadd+0x1ee>
 8000654:	e1d1      	b.n	80009fa <__aeabi_dadd+0x592>
 8000656:	4661      	mov	r1, ip
 8000658:	4339      	orrs	r1, r7
 800065a:	d000      	beq.n	800065e <__aeabi_dadd+0x1f6>
 800065c:	e1e3      	b.n	8000a26 <__aeabi_dadd+0x5be>
 800065e:	4649      	mov	r1, r9
 8000660:	0758      	lsls	r0, r3, #29
 8000662:	08c9      	lsrs	r1, r1, #3
 8000664:	4301      	orrs	r1, r0
 8000666:	08db      	lsrs	r3, r3, #3
 8000668:	e026      	b.n	80006b8 <__aeabi_dadd+0x250>
 800066a:	0029      	movs	r1, r5
 800066c:	4339      	orrs	r1, r7
 800066e:	d100      	bne.n	8000672 <__aeabi_dadd+0x20a>
 8000670:	e091      	b.n	8000796 <__aeabi_dadd+0x32e>
 8000672:	1e51      	subs	r1, r2, #1
 8000674:	2a01      	cmp	r2, #1
 8000676:	d005      	beq.n	8000684 <__aeabi_dadd+0x21c>
 8000678:	4858      	ldr	r0, [pc, #352]	; (80007dc <__aeabi_dadd+0x374>)
 800067a:	4282      	cmp	r2, r0
 800067c:	d100      	bne.n	8000680 <__aeabi_dadd+0x218>
 800067e:	e18f      	b.n	80009a0 <__aeabi_dadd+0x538>
 8000680:	000a      	movs	r2, r1
 8000682:	e7b8      	b.n	80005f6 <__aeabi_dadd+0x18e>
 8000684:	003d      	movs	r5, r7
 8000686:	444d      	add	r5, r9
 8000688:	454d      	cmp	r5, r9
 800068a:	4189      	sbcs	r1, r1
 800068c:	4463      	add	r3, ip
 800068e:	4698      	mov	r8, r3
 8000690:	4249      	negs	r1, r1
 8000692:	4488      	add	r8, r1
 8000694:	4643      	mov	r3, r8
 8000696:	2602      	movs	r6, #2
 8000698:	021b      	lsls	r3, r3, #8
 800069a:	d500      	bpl.n	800069e <__aeabi_dadd+0x236>
 800069c:	e0eb      	b.n	8000876 <__aeabi_dadd+0x40e>
 800069e:	3e01      	subs	r6, #1
 80006a0:	076b      	lsls	r3, r5, #29
 80006a2:	d000      	beq.n	80006a6 <__aeabi_dadd+0x23e>
 80006a4:	e75c      	b.n	8000560 <__aeabi_dadd+0xf8>
 80006a6:	4643      	mov	r3, r8
 80006a8:	08e9      	lsrs	r1, r5, #3
 80006aa:	075a      	lsls	r2, r3, #29
 80006ac:	4311      	orrs	r1, r2
 80006ae:	0032      	movs	r2, r6
 80006b0:	08db      	lsrs	r3, r3, #3
 80006b2:	484a      	ldr	r0, [pc, #296]	; (80007dc <__aeabi_dadd+0x374>)
 80006b4:	4282      	cmp	r2, r0
 80006b6:	d021      	beq.n	80006fc <__aeabi_dadd+0x294>
 80006b8:	031b      	lsls	r3, r3, #12
 80006ba:	0552      	lsls	r2, r2, #21
 80006bc:	0b1b      	lsrs	r3, r3, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	e76c      	b.n	800059c <__aeabi_dadd+0x134>
 80006c2:	2300      	movs	r3, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	e769      	b.n	800059c <__aeabi_dadd+0x134>
 80006c8:	002a      	movs	r2, r5
 80006ca:	433a      	orrs	r2, r7
 80006cc:	d069      	beq.n	80007a2 <__aeabi_dadd+0x33a>
 80006ce:	464a      	mov	r2, r9
 80006d0:	0758      	lsls	r0, r3, #29
 80006d2:	08d1      	lsrs	r1, r2, #3
 80006d4:	08da      	lsrs	r2, r3, #3
 80006d6:	2380      	movs	r3, #128	; 0x80
 80006d8:	031b      	lsls	r3, r3, #12
 80006da:	4308      	orrs	r0, r1
 80006dc:	421a      	tst	r2, r3
 80006de:	d007      	beq.n	80006f0 <__aeabi_dadd+0x288>
 80006e0:	0029      	movs	r1, r5
 80006e2:	08ed      	lsrs	r5, r5, #3
 80006e4:	421d      	tst	r5, r3
 80006e6:	d103      	bne.n	80006f0 <__aeabi_dadd+0x288>
 80006e8:	002a      	movs	r2, r5
 80006ea:	08ff      	lsrs	r7, r7, #3
 80006ec:	0748      	lsls	r0, r1, #29
 80006ee:	4338      	orrs	r0, r7
 80006f0:	0f43      	lsrs	r3, r0, #29
 80006f2:	00c1      	lsls	r1, r0, #3
 80006f4:	075b      	lsls	r3, r3, #29
 80006f6:	08c9      	lsrs	r1, r1, #3
 80006f8:	4319      	orrs	r1, r3
 80006fa:	0013      	movs	r3, r2
 80006fc:	000a      	movs	r2, r1
 80006fe:	431a      	orrs	r2, r3
 8000700:	d100      	bne.n	8000704 <__aeabi_dadd+0x29c>
 8000702:	e213      	b.n	8000b2c <__aeabi_dadd+0x6c4>
 8000704:	2280      	movs	r2, #128	; 0x80
 8000706:	0312      	lsls	r2, r2, #12
 8000708:	4313      	orrs	r3, r2
 800070a:	031b      	lsls	r3, r3, #12
 800070c:	4a33      	ldr	r2, [pc, #204]	; (80007dc <__aeabi_dadd+0x374>)
 800070e:	0b1b      	lsrs	r3, r3, #12
 8000710:	e744      	b.n	800059c <__aeabi_dadd+0x134>
 8000712:	2a00      	cmp	r2, #0
 8000714:	d04b      	beq.n	80007ae <__aeabi_dadd+0x346>
 8000716:	1b8a      	subs	r2, r1, r6
 8000718:	2e00      	cmp	r6, #0
 800071a:	d100      	bne.n	800071e <__aeabi_dadd+0x2b6>
 800071c:	e0e7      	b.n	80008ee <__aeabi_dadd+0x486>
 800071e:	482f      	ldr	r0, [pc, #188]	; (80007dc <__aeabi_dadd+0x374>)
 8000720:	4281      	cmp	r1, r0
 8000722:	d100      	bne.n	8000726 <__aeabi_dadd+0x2be>
 8000724:	e195      	b.n	8000a52 <__aeabi_dadd+0x5ea>
 8000726:	2080      	movs	r0, #128	; 0x80
 8000728:	0400      	lsls	r0, r0, #16
 800072a:	4303      	orrs	r3, r0
 800072c:	2a38      	cmp	r2, #56	; 0x38
 800072e:	dd00      	ble.n	8000732 <__aeabi_dadd+0x2ca>
 8000730:	e143      	b.n	80009ba <__aeabi_dadd+0x552>
 8000732:	2a1f      	cmp	r2, #31
 8000734:	dd00      	ble.n	8000738 <__aeabi_dadd+0x2d0>
 8000736:	e1db      	b.n	8000af0 <__aeabi_dadd+0x688>
 8000738:	2020      	movs	r0, #32
 800073a:	001d      	movs	r5, r3
 800073c:	464e      	mov	r6, r9
 800073e:	1a80      	subs	r0, r0, r2
 8000740:	4085      	lsls	r5, r0
 8000742:	40d6      	lsrs	r6, r2
 8000744:	4335      	orrs	r5, r6
 8000746:	464e      	mov	r6, r9
 8000748:	4086      	lsls	r6, r0
 800074a:	0030      	movs	r0, r6
 800074c:	40d3      	lsrs	r3, r2
 800074e:	1e46      	subs	r6, r0, #1
 8000750:	41b0      	sbcs	r0, r6
 8000752:	449c      	add	ip, r3
 8000754:	4305      	orrs	r5, r0
 8000756:	19ed      	adds	r5, r5, r7
 8000758:	42bd      	cmp	r5, r7
 800075a:	419b      	sbcs	r3, r3
 800075c:	425b      	negs	r3, r3
 800075e:	4463      	add	r3, ip
 8000760:	4698      	mov	r8, r3
 8000762:	000e      	movs	r6, r1
 8000764:	e07f      	b.n	8000866 <__aeabi_dadd+0x3fe>
 8000766:	4a1e      	ldr	r2, [pc, #120]	; (80007e0 <__aeabi_dadd+0x378>)
 8000768:	1a76      	subs	r6, r6, r1
 800076a:	4013      	ands	r3, r2
 800076c:	4698      	mov	r8, r3
 800076e:	e6f5      	b.n	800055c <__aeabi_dadd+0xf4>
 8000770:	0028      	movs	r0, r5
 8000772:	f001 fc73 	bl	800205c <__clzsi2>
 8000776:	0001      	movs	r1, r0
 8000778:	3118      	adds	r1, #24
 800077a:	291f      	cmp	r1, #31
 800077c:	dc00      	bgt.n	8000780 <__aeabi_dadd+0x318>
 800077e:	e6cf      	b.n	8000520 <__aeabi_dadd+0xb8>
 8000780:	002b      	movs	r3, r5
 8000782:	3808      	subs	r0, #8
 8000784:	4083      	lsls	r3, r0
 8000786:	2500      	movs	r5, #0
 8000788:	e6d2      	b.n	8000530 <__aeabi_dadd+0xc8>
 800078a:	4662      	mov	r2, ip
 800078c:	433a      	orrs	r2, r7
 800078e:	0011      	movs	r1, r2
 8000790:	1e4f      	subs	r7, r1, #1
 8000792:	41b9      	sbcs	r1, r7
 8000794:	e6ac      	b.n	80004f0 <__aeabi_dadd+0x88>
 8000796:	4649      	mov	r1, r9
 8000798:	0758      	lsls	r0, r3, #29
 800079a:	08c9      	lsrs	r1, r1, #3
 800079c:	4301      	orrs	r1, r0
 800079e:	08db      	lsrs	r3, r3, #3
 80007a0:	e787      	b.n	80006b2 <__aeabi_dadd+0x24a>
 80007a2:	4649      	mov	r1, r9
 80007a4:	075a      	lsls	r2, r3, #29
 80007a6:	08c9      	lsrs	r1, r1, #3
 80007a8:	4311      	orrs	r1, r2
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e7a6      	b.n	80006fc <__aeabi_dadd+0x294>
 80007ae:	490d      	ldr	r1, [pc, #52]	; (80007e4 <__aeabi_dadd+0x37c>)
 80007b0:	1c70      	adds	r0, r6, #1
 80007b2:	4208      	tst	r0, r1
 80007b4:	d000      	beq.n	80007b8 <__aeabi_dadd+0x350>
 80007b6:	e0bb      	b.n	8000930 <__aeabi_dadd+0x4c8>
 80007b8:	2e00      	cmp	r6, #0
 80007ba:	d000      	beq.n	80007be <__aeabi_dadd+0x356>
 80007bc:	e114      	b.n	80009e8 <__aeabi_dadd+0x580>
 80007be:	4649      	mov	r1, r9
 80007c0:	4319      	orrs	r1, r3
 80007c2:	d100      	bne.n	80007c6 <__aeabi_dadd+0x35e>
 80007c4:	e175      	b.n	8000ab2 <__aeabi_dadd+0x64a>
 80007c6:	0029      	movs	r1, r5
 80007c8:	4339      	orrs	r1, r7
 80007ca:	d000      	beq.n	80007ce <__aeabi_dadd+0x366>
 80007cc:	e17e      	b.n	8000acc <__aeabi_dadd+0x664>
 80007ce:	4649      	mov	r1, r9
 80007d0:	0758      	lsls	r0, r3, #29
 80007d2:	08c9      	lsrs	r1, r1, #3
 80007d4:	4301      	orrs	r1, r0
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	e76e      	b.n	80006b8 <__aeabi_dadd+0x250>
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	000007ff 	.word	0x000007ff
 80007e0:	ff7fffff 	.word	0xff7fffff
 80007e4:	000007fe 	.word	0x000007fe
 80007e8:	4649      	mov	r1, r9
 80007ea:	1bcd      	subs	r5, r1, r7
 80007ec:	4661      	mov	r1, ip
 80007ee:	1a58      	subs	r0, r3, r1
 80007f0:	45a9      	cmp	r9, r5
 80007f2:	4189      	sbcs	r1, r1
 80007f4:	4249      	negs	r1, r1
 80007f6:	4688      	mov	r8, r1
 80007f8:	0001      	movs	r1, r0
 80007fa:	4640      	mov	r0, r8
 80007fc:	1a09      	subs	r1, r1, r0
 80007fe:	4688      	mov	r8, r1
 8000800:	0209      	lsls	r1, r1, #8
 8000802:	d500      	bpl.n	8000806 <__aeabi_dadd+0x39e>
 8000804:	e0a6      	b.n	8000954 <__aeabi_dadd+0x4ec>
 8000806:	4641      	mov	r1, r8
 8000808:	4329      	orrs	r1, r5
 800080a:	d000      	beq.n	800080e <__aeabi_dadd+0x3a6>
 800080c:	e67f      	b.n	800050e <__aeabi_dadd+0xa6>
 800080e:	2300      	movs	r3, #0
 8000810:	2400      	movs	r4, #0
 8000812:	e751      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000814:	4cc7      	ldr	r4, [pc, #796]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000816:	42a1      	cmp	r1, r4
 8000818:	d100      	bne.n	800081c <__aeabi_dadd+0x3b4>
 800081a:	e0c7      	b.n	80009ac <__aeabi_dadd+0x544>
 800081c:	2480      	movs	r4, #128	; 0x80
 800081e:	0424      	lsls	r4, r4, #16
 8000820:	4323      	orrs	r3, r4
 8000822:	2a38      	cmp	r2, #56	; 0x38
 8000824:	dc54      	bgt.n	80008d0 <__aeabi_dadd+0x468>
 8000826:	2a1f      	cmp	r2, #31
 8000828:	dd00      	ble.n	800082c <__aeabi_dadd+0x3c4>
 800082a:	e0cc      	b.n	80009c6 <__aeabi_dadd+0x55e>
 800082c:	2420      	movs	r4, #32
 800082e:	4648      	mov	r0, r9
 8000830:	1aa4      	subs	r4, r4, r2
 8000832:	001d      	movs	r5, r3
 8000834:	464e      	mov	r6, r9
 8000836:	40a0      	lsls	r0, r4
 8000838:	40d6      	lsrs	r6, r2
 800083a:	40a5      	lsls	r5, r4
 800083c:	0004      	movs	r4, r0
 800083e:	40d3      	lsrs	r3, r2
 8000840:	4662      	mov	r2, ip
 8000842:	4335      	orrs	r5, r6
 8000844:	1e66      	subs	r6, r4, #1
 8000846:	41b4      	sbcs	r4, r6
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	469c      	mov	ip, r3
 800084c:	4325      	orrs	r5, r4
 800084e:	e044      	b.n	80008da <__aeabi_dadd+0x472>
 8000850:	4662      	mov	r2, ip
 8000852:	433a      	orrs	r2, r7
 8000854:	0015      	movs	r5, r2
 8000856:	1e6f      	subs	r7, r5, #1
 8000858:	41bd      	sbcs	r5, r7
 800085a:	444d      	add	r5, r9
 800085c:	454d      	cmp	r5, r9
 800085e:	4189      	sbcs	r1, r1
 8000860:	4249      	negs	r1, r1
 8000862:	4688      	mov	r8, r1
 8000864:	4498      	add	r8, r3
 8000866:	4643      	mov	r3, r8
 8000868:	021b      	lsls	r3, r3, #8
 800086a:	d400      	bmi.n	800086e <__aeabi_dadd+0x406>
 800086c:	e718      	b.n	80006a0 <__aeabi_dadd+0x238>
 800086e:	4bb1      	ldr	r3, [pc, #708]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000870:	3601      	adds	r6, #1
 8000872:	429e      	cmp	r6, r3
 8000874:	d049      	beq.n	800090a <__aeabi_dadd+0x4a2>
 8000876:	4642      	mov	r2, r8
 8000878:	4baf      	ldr	r3, [pc, #700]	; (8000b38 <__aeabi_dadd+0x6d0>)
 800087a:	2101      	movs	r1, #1
 800087c:	401a      	ands	r2, r3
 800087e:	0013      	movs	r3, r2
 8000880:	086a      	lsrs	r2, r5, #1
 8000882:	400d      	ands	r5, r1
 8000884:	4315      	orrs	r5, r2
 8000886:	07d9      	lsls	r1, r3, #31
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	4698      	mov	r8, r3
 800088c:	430d      	orrs	r5, r1
 800088e:	e665      	b.n	800055c <__aeabi_dadd+0xf4>
 8000890:	0018      	movs	r0, r3
 8000892:	3e1f      	subs	r6, #31
 8000894:	40f0      	lsrs	r0, r6
 8000896:	2a20      	cmp	r2, #32
 8000898:	d003      	beq.n	80008a2 <__aeabi_dadd+0x43a>
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	1a8a      	subs	r2, r1, r2
 800089e:	4093      	lsls	r3, r2
 80008a0:	431d      	orrs	r5, r3
 80008a2:	1e69      	subs	r1, r5, #1
 80008a4:	418d      	sbcs	r5, r1
 80008a6:	2300      	movs	r3, #0
 80008a8:	2600      	movs	r6, #0
 80008aa:	4698      	mov	r8, r3
 80008ac:	4305      	orrs	r5, r0
 80008ae:	e6f7      	b.n	80006a0 <__aeabi_dadd+0x238>
 80008b0:	0011      	movs	r1, r2
 80008b2:	4665      	mov	r5, ip
 80008b4:	3920      	subs	r1, #32
 80008b6:	40cd      	lsrs	r5, r1
 80008b8:	2a20      	cmp	r2, #32
 80008ba:	d004      	beq.n	80008c6 <__aeabi_dadd+0x45e>
 80008bc:	2040      	movs	r0, #64	; 0x40
 80008be:	4661      	mov	r1, ip
 80008c0:	1a82      	subs	r2, r0, r2
 80008c2:	4091      	lsls	r1, r2
 80008c4:	430f      	orrs	r7, r1
 80008c6:	0039      	movs	r1, r7
 80008c8:	1e4f      	subs	r7, r1, #1
 80008ca:	41b9      	sbcs	r1, r7
 80008cc:	4329      	orrs	r1, r5
 80008ce:	e60f      	b.n	80004f0 <__aeabi_dadd+0x88>
 80008d0:	464a      	mov	r2, r9
 80008d2:	4313      	orrs	r3, r2
 80008d4:	001d      	movs	r5, r3
 80008d6:	1e6b      	subs	r3, r5, #1
 80008d8:	419d      	sbcs	r5, r3
 80008da:	1b7d      	subs	r5, r7, r5
 80008dc:	42af      	cmp	r7, r5
 80008de:	419b      	sbcs	r3, r3
 80008e0:	4662      	mov	r2, ip
 80008e2:	425b      	negs	r3, r3
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	4698      	mov	r8, r3
 80008e8:	4654      	mov	r4, sl
 80008ea:	000e      	movs	r6, r1
 80008ec:	e607      	b.n	80004fe <__aeabi_dadd+0x96>
 80008ee:	4648      	mov	r0, r9
 80008f0:	4318      	orrs	r0, r3
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x48e>
 80008f4:	e0b3      	b.n	8000a5e <__aeabi_dadd+0x5f6>
 80008f6:	1e50      	subs	r0, r2, #1
 80008f8:	2a01      	cmp	r2, #1
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x496>
 80008fc:	e10d      	b.n	8000b1a <__aeabi_dadd+0x6b2>
 80008fe:	4d8d      	ldr	r5, [pc, #564]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000900:	42aa      	cmp	r2, r5
 8000902:	d100      	bne.n	8000906 <__aeabi_dadd+0x49e>
 8000904:	e0a5      	b.n	8000a52 <__aeabi_dadd+0x5ea>
 8000906:	0002      	movs	r2, r0
 8000908:	e710      	b.n	800072c <__aeabi_dadd+0x2c4>
 800090a:	0032      	movs	r2, r6
 800090c:	2300      	movs	r3, #0
 800090e:	2100      	movs	r1, #0
 8000910:	e644      	b.n	800059c <__aeabi_dadd+0x134>
 8000912:	2120      	movs	r1, #32
 8000914:	0038      	movs	r0, r7
 8000916:	1a89      	subs	r1, r1, r2
 8000918:	4665      	mov	r5, ip
 800091a:	408f      	lsls	r7, r1
 800091c:	408d      	lsls	r5, r1
 800091e:	40d0      	lsrs	r0, r2
 8000920:	1e79      	subs	r1, r7, #1
 8000922:	418f      	sbcs	r7, r1
 8000924:	4305      	orrs	r5, r0
 8000926:	433d      	orrs	r5, r7
 8000928:	4667      	mov	r7, ip
 800092a:	40d7      	lsrs	r7, r2
 800092c:	19db      	adds	r3, r3, r7
 800092e:	e794      	b.n	800085a <__aeabi_dadd+0x3f2>
 8000930:	4a80      	ldr	r2, [pc, #512]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000932:	4290      	cmp	r0, r2
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x4d0>
 8000936:	e0ec      	b.n	8000b12 <__aeabi_dadd+0x6aa>
 8000938:	0039      	movs	r1, r7
 800093a:	4449      	add	r1, r9
 800093c:	4549      	cmp	r1, r9
 800093e:	4192      	sbcs	r2, r2
 8000940:	4463      	add	r3, ip
 8000942:	4252      	negs	r2, r2
 8000944:	189b      	adds	r3, r3, r2
 8000946:	07dd      	lsls	r5, r3, #31
 8000948:	0849      	lsrs	r1, r1, #1
 800094a:	085b      	lsrs	r3, r3, #1
 800094c:	4698      	mov	r8, r3
 800094e:	0006      	movs	r6, r0
 8000950:	430d      	orrs	r5, r1
 8000952:	e6a5      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000954:	464a      	mov	r2, r9
 8000956:	1abd      	subs	r5, r7, r2
 8000958:	42af      	cmp	r7, r5
 800095a:	4189      	sbcs	r1, r1
 800095c:	4662      	mov	r2, ip
 800095e:	4249      	negs	r1, r1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	4698      	mov	r8, r3
 8000966:	4654      	mov	r4, sl
 8000968:	e5d1      	b.n	800050e <__aeabi_dadd+0xa6>
 800096a:	076c      	lsls	r4, r5, #29
 800096c:	08f9      	lsrs	r1, r7, #3
 800096e:	4321      	orrs	r1, r4
 8000970:	08eb      	lsrs	r3, r5, #3
 8000972:	0004      	movs	r4, r0
 8000974:	e69d      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000976:	464a      	mov	r2, r9
 8000978:	431a      	orrs	r2, r3
 800097a:	d175      	bne.n	8000a68 <__aeabi_dadd+0x600>
 800097c:	4661      	mov	r1, ip
 800097e:	4339      	orrs	r1, r7
 8000980:	d114      	bne.n	80009ac <__aeabi_dadd+0x544>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	2400      	movs	r4, #0
 8000986:	031b      	lsls	r3, r3, #12
 8000988:	e6bc      	b.n	8000704 <__aeabi_dadd+0x29c>
 800098a:	464a      	mov	r2, r9
 800098c:	1bd5      	subs	r5, r2, r7
 800098e:	45a9      	cmp	r9, r5
 8000990:	4189      	sbcs	r1, r1
 8000992:	4662      	mov	r2, ip
 8000994:	4249      	negs	r1, r1
 8000996:	1a9b      	subs	r3, r3, r2
 8000998:	1a5b      	subs	r3, r3, r1
 800099a:	4698      	mov	r8, r3
 800099c:	2601      	movs	r6, #1
 800099e:	e5ae      	b.n	80004fe <__aeabi_dadd+0x96>
 80009a0:	464a      	mov	r2, r9
 80009a2:	08d1      	lsrs	r1, r2, #3
 80009a4:	075a      	lsls	r2, r3, #29
 80009a6:	4311      	orrs	r1, r2
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	e6a7      	b.n	80006fc <__aeabi_dadd+0x294>
 80009ac:	4663      	mov	r3, ip
 80009ae:	08f9      	lsrs	r1, r7, #3
 80009b0:	075a      	lsls	r2, r3, #29
 80009b2:	4654      	mov	r4, sl
 80009b4:	4311      	orrs	r1, r2
 80009b6:	08db      	lsrs	r3, r3, #3
 80009b8:	e6a0      	b.n	80006fc <__aeabi_dadd+0x294>
 80009ba:	464a      	mov	r2, r9
 80009bc:	4313      	orrs	r3, r2
 80009be:	001d      	movs	r5, r3
 80009c0:	1e6b      	subs	r3, r5, #1
 80009c2:	419d      	sbcs	r5, r3
 80009c4:	e6c7      	b.n	8000756 <__aeabi_dadd+0x2ee>
 80009c6:	0014      	movs	r4, r2
 80009c8:	001e      	movs	r6, r3
 80009ca:	3c20      	subs	r4, #32
 80009cc:	40e6      	lsrs	r6, r4
 80009ce:	2a20      	cmp	r2, #32
 80009d0:	d005      	beq.n	80009de <__aeabi_dadd+0x576>
 80009d2:	2440      	movs	r4, #64	; 0x40
 80009d4:	1aa2      	subs	r2, r4, r2
 80009d6:	4093      	lsls	r3, r2
 80009d8:	464a      	mov	r2, r9
 80009da:	431a      	orrs	r2, r3
 80009dc:	4691      	mov	r9, r2
 80009de:	464d      	mov	r5, r9
 80009e0:	1e6b      	subs	r3, r5, #1
 80009e2:	419d      	sbcs	r5, r3
 80009e4:	4335      	orrs	r5, r6
 80009e6:	e778      	b.n	80008da <__aeabi_dadd+0x472>
 80009e8:	464a      	mov	r2, r9
 80009ea:	431a      	orrs	r2, r3
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x588>
 80009ee:	e66b      	b.n	80006c8 <__aeabi_dadd+0x260>
 80009f0:	076b      	lsls	r3, r5, #29
 80009f2:	08f9      	lsrs	r1, r7, #3
 80009f4:	4319      	orrs	r1, r3
 80009f6:	08eb      	lsrs	r3, r5, #3
 80009f8:	e680      	b.n	80006fc <__aeabi_dadd+0x294>
 80009fa:	4661      	mov	r1, ip
 80009fc:	4339      	orrs	r1, r7
 80009fe:	d054      	beq.n	8000aaa <__aeabi_dadd+0x642>
 8000a00:	4663      	mov	r3, ip
 8000a02:	08f9      	lsrs	r1, r7, #3
 8000a04:	075c      	lsls	r4, r3, #29
 8000a06:	4321      	orrs	r1, r4
 8000a08:	08db      	lsrs	r3, r3, #3
 8000a0a:	0004      	movs	r4, r0
 8000a0c:	e654      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000a0e:	464a      	mov	r2, r9
 8000a10:	1abd      	subs	r5, r7, r2
 8000a12:	42af      	cmp	r7, r5
 8000a14:	4189      	sbcs	r1, r1
 8000a16:	4662      	mov	r2, ip
 8000a18:	4249      	negs	r1, r1
 8000a1a:	1ad3      	subs	r3, r2, r3
 8000a1c:	1a5b      	subs	r3, r3, r1
 8000a1e:	4698      	mov	r8, r3
 8000a20:	0004      	movs	r4, r0
 8000a22:	2601      	movs	r6, #1
 8000a24:	e56b      	b.n	80004fe <__aeabi_dadd+0x96>
 8000a26:	464a      	mov	r2, r9
 8000a28:	1bd5      	subs	r5, r2, r7
 8000a2a:	45a9      	cmp	r9, r5
 8000a2c:	4189      	sbcs	r1, r1
 8000a2e:	4662      	mov	r2, ip
 8000a30:	4249      	negs	r1, r1
 8000a32:	1a9a      	subs	r2, r3, r2
 8000a34:	1a52      	subs	r2, r2, r1
 8000a36:	4690      	mov	r8, r2
 8000a38:	0212      	lsls	r2, r2, #8
 8000a3a:	d532      	bpl.n	8000aa2 <__aeabi_dadd+0x63a>
 8000a3c:	464a      	mov	r2, r9
 8000a3e:	1abd      	subs	r5, r7, r2
 8000a40:	42af      	cmp	r7, r5
 8000a42:	4189      	sbcs	r1, r1
 8000a44:	4662      	mov	r2, ip
 8000a46:	4249      	negs	r1, r1
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	1a5b      	subs	r3, r3, r1
 8000a4c:	4698      	mov	r8, r3
 8000a4e:	0004      	movs	r4, r0
 8000a50:	e584      	b.n	800055c <__aeabi_dadd+0xf4>
 8000a52:	4663      	mov	r3, ip
 8000a54:	08f9      	lsrs	r1, r7, #3
 8000a56:	075a      	lsls	r2, r3, #29
 8000a58:	4311      	orrs	r1, r2
 8000a5a:	08db      	lsrs	r3, r3, #3
 8000a5c:	e64e      	b.n	80006fc <__aeabi_dadd+0x294>
 8000a5e:	08f9      	lsrs	r1, r7, #3
 8000a60:	0768      	lsls	r0, r5, #29
 8000a62:	4301      	orrs	r1, r0
 8000a64:	08eb      	lsrs	r3, r5, #3
 8000a66:	e624      	b.n	80006b2 <__aeabi_dadd+0x24a>
 8000a68:	4662      	mov	r2, ip
 8000a6a:	433a      	orrs	r2, r7
 8000a6c:	d100      	bne.n	8000a70 <__aeabi_dadd+0x608>
 8000a6e:	e698      	b.n	80007a2 <__aeabi_dadd+0x33a>
 8000a70:	464a      	mov	r2, r9
 8000a72:	08d1      	lsrs	r1, r2, #3
 8000a74:	075a      	lsls	r2, r3, #29
 8000a76:	4311      	orrs	r1, r2
 8000a78:	08da      	lsrs	r2, r3, #3
 8000a7a:	2380      	movs	r3, #128	; 0x80
 8000a7c:	031b      	lsls	r3, r3, #12
 8000a7e:	421a      	tst	r2, r3
 8000a80:	d008      	beq.n	8000a94 <__aeabi_dadd+0x62c>
 8000a82:	4660      	mov	r0, ip
 8000a84:	08c5      	lsrs	r5, r0, #3
 8000a86:	421d      	tst	r5, r3
 8000a88:	d104      	bne.n	8000a94 <__aeabi_dadd+0x62c>
 8000a8a:	4654      	mov	r4, sl
 8000a8c:	002a      	movs	r2, r5
 8000a8e:	08f9      	lsrs	r1, r7, #3
 8000a90:	0743      	lsls	r3, r0, #29
 8000a92:	4319      	orrs	r1, r3
 8000a94:	0f4b      	lsrs	r3, r1, #29
 8000a96:	00c9      	lsls	r1, r1, #3
 8000a98:	075b      	lsls	r3, r3, #29
 8000a9a:	08c9      	lsrs	r1, r1, #3
 8000a9c:	4319      	orrs	r1, r3
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	e62c      	b.n	80006fc <__aeabi_dadd+0x294>
 8000aa2:	4641      	mov	r1, r8
 8000aa4:	4329      	orrs	r1, r5
 8000aa6:	d000      	beq.n	8000aaa <__aeabi_dadd+0x642>
 8000aa8:	e5fa      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000aaa:	2300      	movs	r3, #0
 8000aac:	000a      	movs	r2, r1
 8000aae:	2400      	movs	r4, #0
 8000ab0:	e602      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000ab2:	076b      	lsls	r3, r5, #29
 8000ab4:	08f9      	lsrs	r1, r7, #3
 8000ab6:	4319      	orrs	r1, r3
 8000ab8:	08eb      	lsrs	r3, r5, #3
 8000aba:	e5fd      	b.n	80006b8 <__aeabi_dadd+0x250>
 8000abc:	4663      	mov	r3, ip
 8000abe:	08f9      	lsrs	r1, r7, #3
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4319      	orrs	r1, r3
 8000ac4:	4663      	mov	r3, ip
 8000ac6:	0004      	movs	r4, r0
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	e617      	b.n	80006fc <__aeabi_dadd+0x294>
 8000acc:	003d      	movs	r5, r7
 8000ace:	444d      	add	r5, r9
 8000ad0:	4463      	add	r3, ip
 8000ad2:	454d      	cmp	r5, r9
 8000ad4:	4189      	sbcs	r1, r1
 8000ad6:	4698      	mov	r8, r3
 8000ad8:	4249      	negs	r1, r1
 8000ada:	4488      	add	r8, r1
 8000adc:	4643      	mov	r3, r8
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	d400      	bmi.n	8000ae4 <__aeabi_dadd+0x67c>
 8000ae2:	e5dd      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000ae4:	4642      	mov	r2, r8
 8000ae6:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <__aeabi_dadd+0x6d0>)
 8000ae8:	2601      	movs	r6, #1
 8000aea:	401a      	ands	r2, r3
 8000aec:	4690      	mov	r8, r2
 8000aee:	e5d7      	b.n	80006a0 <__aeabi_dadd+0x238>
 8000af0:	0010      	movs	r0, r2
 8000af2:	001e      	movs	r6, r3
 8000af4:	3820      	subs	r0, #32
 8000af6:	40c6      	lsrs	r6, r0
 8000af8:	2a20      	cmp	r2, #32
 8000afa:	d005      	beq.n	8000b08 <__aeabi_dadd+0x6a0>
 8000afc:	2040      	movs	r0, #64	; 0x40
 8000afe:	1a82      	subs	r2, r0, r2
 8000b00:	4093      	lsls	r3, r2
 8000b02:	464a      	mov	r2, r9
 8000b04:	431a      	orrs	r2, r3
 8000b06:	4691      	mov	r9, r2
 8000b08:	464d      	mov	r5, r9
 8000b0a:	1e6b      	subs	r3, r5, #1
 8000b0c:	419d      	sbcs	r5, r3
 8000b0e:	4335      	orrs	r5, r6
 8000b10:	e621      	b.n	8000756 <__aeabi_dadd+0x2ee>
 8000b12:	0002      	movs	r2, r0
 8000b14:	2300      	movs	r3, #0
 8000b16:	2100      	movs	r1, #0
 8000b18:	e540      	b.n	800059c <__aeabi_dadd+0x134>
 8000b1a:	464a      	mov	r2, r9
 8000b1c:	19d5      	adds	r5, r2, r7
 8000b1e:	42bd      	cmp	r5, r7
 8000b20:	4189      	sbcs	r1, r1
 8000b22:	4463      	add	r3, ip
 8000b24:	4698      	mov	r8, r3
 8000b26:	4249      	negs	r1, r1
 8000b28:	4488      	add	r8, r1
 8000b2a:	e5b3      	b.n	8000694 <__aeabi_dadd+0x22c>
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	4a01      	ldr	r2, [pc, #4]	; (8000b34 <__aeabi_dadd+0x6cc>)
 8000b30:	000b      	movs	r3, r1
 8000b32:	e533      	b.n	800059c <__aeabi_dadd+0x134>
 8000b34:	000007ff 	.word	0x000007ff
 8000b38:	ff7fffff 	.word	0xff7fffff

08000b3c <__aeabi_ddiv>:
 8000b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3e:	4657      	mov	r7, sl
 8000b40:	464e      	mov	r6, r9
 8000b42:	4645      	mov	r5, r8
 8000b44:	46de      	mov	lr, fp
 8000b46:	b5e0      	push	{r5, r6, r7, lr}
 8000b48:	4681      	mov	r9, r0
 8000b4a:	0005      	movs	r5, r0
 8000b4c:	030c      	lsls	r4, r1, #12
 8000b4e:	0048      	lsls	r0, r1, #1
 8000b50:	4692      	mov	sl, r2
 8000b52:	001f      	movs	r7, r3
 8000b54:	b085      	sub	sp, #20
 8000b56:	0b24      	lsrs	r4, r4, #12
 8000b58:	0d40      	lsrs	r0, r0, #21
 8000b5a:	0fce      	lsrs	r6, r1, #31
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d059      	beq.n	8000c14 <__aeabi_ddiv+0xd8>
 8000b60:	4b87      	ldr	r3, [pc, #540]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000b62:	4298      	cmp	r0, r3
 8000b64:	d100      	bne.n	8000b68 <__aeabi_ddiv+0x2c>
 8000b66:	e098      	b.n	8000c9a <__aeabi_ddiv+0x15e>
 8000b68:	0f6b      	lsrs	r3, r5, #29
 8000b6a:	00e4      	lsls	r4, r4, #3
 8000b6c:	431c      	orrs	r4, r3
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	041b      	lsls	r3, r3, #16
 8000b72:	4323      	orrs	r3, r4
 8000b74:	4698      	mov	r8, r3
 8000b76:	4b83      	ldr	r3, [pc, #524]	; (8000d84 <__aeabi_ddiv+0x248>)
 8000b78:	00ed      	lsls	r5, r5, #3
 8000b7a:	469b      	mov	fp, r3
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4699      	mov	r9, r3
 8000b80:	4483      	add	fp, r0
 8000b82:	9300      	str	r3, [sp, #0]
 8000b84:	033c      	lsls	r4, r7, #12
 8000b86:	007b      	lsls	r3, r7, #1
 8000b88:	4650      	mov	r0, sl
 8000b8a:	0b24      	lsrs	r4, r4, #12
 8000b8c:	0d5b      	lsrs	r3, r3, #21
 8000b8e:	0fff      	lsrs	r7, r7, #31
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d067      	beq.n	8000c64 <__aeabi_ddiv+0x128>
 8000b94:	4a7a      	ldr	r2, [pc, #488]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d018      	beq.n	8000bcc <__aeabi_ddiv+0x90>
 8000b9a:	497a      	ldr	r1, [pc, #488]	; (8000d84 <__aeabi_ddiv+0x248>)
 8000b9c:	0f42      	lsrs	r2, r0, #29
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	00e4      	lsls	r4, r4, #3
 8000ba2:	4659      	mov	r1, fp
 8000ba4:	4314      	orrs	r4, r2
 8000ba6:	2280      	movs	r2, #128	; 0x80
 8000ba8:	4463      	add	r3, ip
 8000baa:	0412      	lsls	r2, r2, #16
 8000bac:	1acb      	subs	r3, r1, r3
 8000bae:	4314      	orrs	r4, r2
 8000bb0:	469b      	mov	fp, r3
 8000bb2:	00c2      	lsls	r2, r0, #3
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	0033      	movs	r3, r6
 8000bb8:	407b      	eors	r3, r7
 8000bba:	469a      	mov	sl, r3
 8000bbc:	464b      	mov	r3, r9
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d900      	bls.n	8000bc4 <__aeabi_ddiv+0x88>
 8000bc2:	e0ef      	b.n	8000da4 <__aeabi_ddiv+0x268>
 8000bc4:	4970      	ldr	r1, [pc, #448]	; (8000d88 <__aeabi_ddiv+0x24c>)
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	58cb      	ldr	r3, [r1, r3]
 8000bca:	469f      	mov	pc, r3
 8000bcc:	4b6f      	ldr	r3, [pc, #444]	; (8000d8c <__aeabi_ddiv+0x250>)
 8000bce:	4652      	mov	r2, sl
 8000bd0:	469c      	mov	ip, r3
 8000bd2:	4322      	orrs	r2, r4
 8000bd4:	44e3      	add	fp, ip
 8000bd6:	2a00      	cmp	r2, #0
 8000bd8:	d000      	beq.n	8000bdc <__aeabi_ddiv+0xa0>
 8000bda:	e095      	b.n	8000d08 <__aeabi_ddiv+0x1cc>
 8000bdc:	4649      	mov	r1, r9
 8000bde:	2302      	movs	r3, #2
 8000be0:	4319      	orrs	r1, r3
 8000be2:	4689      	mov	r9, r1
 8000be4:	2400      	movs	r4, #0
 8000be6:	2002      	movs	r0, #2
 8000be8:	e7e5      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000bea:	2300      	movs	r3, #0
 8000bec:	2400      	movs	r4, #0
 8000bee:	2500      	movs	r5, #0
 8000bf0:	4652      	mov	r2, sl
 8000bf2:	051b      	lsls	r3, r3, #20
 8000bf4:	4323      	orrs	r3, r4
 8000bf6:	07d2      	lsls	r2, r2, #31
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	b005      	add	sp, #20
 8000c00:	bcf0      	pop	{r4, r5, r6, r7}
 8000c02:	46bb      	mov	fp, r7
 8000c04:	46b2      	mov	sl, r6
 8000c06:	46a9      	mov	r9, r5
 8000c08:	46a0      	mov	r8, r4
 8000c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c0c:	2400      	movs	r4, #0
 8000c0e:	2500      	movs	r5, #0
 8000c10:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000c12:	e7ed      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000c14:	464b      	mov	r3, r9
 8000c16:	4323      	orrs	r3, r4
 8000c18:	4698      	mov	r8, r3
 8000c1a:	d100      	bne.n	8000c1e <__aeabi_ddiv+0xe2>
 8000c1c:	e089      	b.n	8000d32 <__aeabi_ddiv+0x1f6>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d100      	bne.n	8000c24 <__aeabi_ddiv+0xe8>
 8000c22:	e1e0      	b.n	8000fe6 <__aeabi_ddiv+0x4aa>
 8000c24:	0020      	movs	r0, r4
 8000c26:	f001 fa19 	bl	800205c <__clzsi2>
 8000c2a:	0001      	movs	r1, r0
 8000c2c:	0002      	movs	r2, r0
 8000c2e:	390b      	subs	r1, #11
 8000c30:	231d      	movs	r3, #29
 8000c32:	1a5b      	subs	r3, r3, r1
 8000c34:	4649      	mov	r1, r9
 8000c36:	0010      	movs	r0, r2
 8000c38:	40d9      	lsrs	r1, r3
 8000c3a:	3808      	subs	r0, #8
 8000c3c:	4084      	lsls	r4, r0
 8000c3e:	000b      	movs	r3, r1
 8000c40:	464d      	mov	r5, r9
 8000c42:	4323      	orrs	r3, r4
 8000c44:	4698      	mov	r8, r3
 8000c46:	4085      	lsls	r5, r0
 8000c48:	4851      	ldr	r0, [pc, #324]	; (8000d90 <__aeabi_ddiv+0x254>)
 8000c4a:	033c      	lsls	r4, r7, #12
 8000c4c:	1a83      	subs	r3, r0, r2
 8000c4e:	469b      	mov	fp, r3
 8000c50:	2300      	movs	r3, #0
 8000c52:	4699      	mov	r9, r3
 8000c54:	9300      	str	r3, [sp, #0]
 8000c56:	007b      	lsls	r3, r7, #1
 8000c58:	4650      	mov	r0, sl
 8000c5a:	0b24      	lsrs	r4, r4, #12
 8000c5c:	0d5b      	lsrs	r3, r3, #21
 8000c5e:	0fff      	lsrs	r7, r7, #31
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d197      	bne.n	8000b94 <__aeabi_ddiv+0x58>
 8000c64:	4652      	mov	r2, sl
 8000c66:	4322      	orrs	r2, r4
 8000c68:	d055      	beq.n	8000d16 <__aeabi_ddiv+0x1da>
 8000c6a:	2c00      	cmp	r4, #0
 8000c6c:	d100      	bne.n	8000c70 <__aeabi_ddiv+0x134>
 8000c6e:	e1ca      	b.n	8001006 <__aeabi_ddiv+0x4ca>
 8000c70:	0020      	movs	r0, r4
 8000c72:	f001 f9f3 	bl	800205c <__clzsi2>
 8000c76:	0002      	movs	r2, r0
 8000c78:	3a0b      	subs	r2, #11
 8000c7a:	231d      	movs	r3, #29
 8000c7c:	0001      	movs	r1, r0
 8000c7e:	1a9b      	subs	r3, r3, r2
 8000c80:	4652      	mov	r2, sl
 8000c82:	3908      	subs	r1, #8
 8000c84:	40da      	lsrs	r2, r3
 8000c86:	408c      	lsls	r4, r1
 8000c88:	4314      	orrs	r4, r2
 8000c8a:	4652      	mov	r2, sl
 8000c8c:	408a      	lsls	r2, r1
 8000c8e:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <__aeabi_ddiv+0x258>)
 8000c90:	4458      	add	r0, fp
 8000c92:	469b      	mov	fp, r3
 8000c94:	4483      	add	fp, r0
 8000c96:	2000      	movs	r0, #0
 8000c98:	e78d      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000c9a:	464b      	mov	r3, r9
 8000c9c:	4323      	orrs	r3, r4
 8000c9e:	4698      	mov	r8, r3
 8000ca0:	d140      	bne.n	8000d24 <__aeabi_ddiv+0x1e8>
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	3b06      	subs	r3, #6
 8000ca8:	2500      	movs	r5, #0
 8000caa:	4683      	mov	fp, r0
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	e769      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000cb0:	46b2      	mov	sl, r6
 8000cb2:	9b00      	ldr	r3, [sp, #0]
 8000cb4:	2b02      	cmp	r3, #2
 8000cb6:	d0a9      	beq.n	8000c0c <__aeabi_ddiv+0xd0>
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d100      	bne.n	8000cbe <__aeabi_ddiv+0x182>
 8000cbc:	e211      	b.n	80010e2 <__aeabi_ddiv+0x5a6>
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d093      	beq.n	8000bea <__aeabi_ddiv+0xae>
 8000cc2:	4a35      	ldr	r2, [pc, #212]	; (8000d98 <__aeabi_ddiv+0x25c>)
 8000cc4:	445a      	add	r2, fp
 8000cc6:	2a00      	cmp	r2, #0
 8000cc8:	dc00      	bgt.n	8000ccc <__aeabi_ddiv+0x190>
 8000cca:	e13c      	b.n	8000f46 <__aeabi_ddiv+0x40a>
 8000ccc:	076b      	lsls	r3, r5, #29
 8000cce:	d000      	beq.n	8000cd2 <__aeabi_ddiv+0x196>
 8000cd0:	e1a7      	b.n	8001022 <__aeabi_ddiv+0x4e6>
 8000cd2:	08ed      	lsrs	r5, r5, #3
 8000cd4:	4643      	mov	r3, r8
 8000cd6:	01db      	lsls	r3, r3, #7
 8000cd8:	d506      	bpl.n	8000ce8 <__aeabi_ddiv+0x1ac>
 8000cda:	4642      	mov	r2, r8
 8000cdc:	4b2f      	ldr	r3, [pc, #188]	; (8000d9c <__aeabi_ddiv+0x260>)
 8000cde:	401a      	ands	r2, r3
 8000ce0:	4690      	mov	r8, r2
 8000ce2:	2280      	movs	r2, #128	; 0x80
 8000ce4:	00d2      	lsls	r2, r2, #3
 8000ce6:	445a      	add	r2, fp
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <__aeabi_ddiv+0x264>)
 8000cea:	429a      	cmp	r2, r3
 8000cec:	dc8e      	bgt.n	8000c0c <__aeabi_ddiv+0xd0>
 8000cee:	4643      	mov	r3, r8
 8000cf0:	0552      	lsls	r2, r2, #21
 8000cf2:	0758      	lsls	r0, r3, #29
 8000cf4:	025c      	lsls	r4, r3, #9
 8000cf6:	4305      	orrs	r5, r0
 8000cf8:	0b24      	lsrs	r4, r4, #12
 8000cfa:	0d53      	lsrs	r3, r2, #21
 8000cfc:	e778      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000cfe:	46ba      	mov	sl, r7
 8000d00:	46a0      	mov	r8, r4
 8000d02:	0015      	movs	r5, r2
 8000d04:	9000      	str	r0, [sp, #0]
 8000d06:	e7d4      	b.n	8000cb2 <__aeabi_ddiv+0x176>
 8000d08:	464a      	mov	r2, r9
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	4691      	mov	r9, r2
 8000d10:	2003      	movs	r0, #3
 8000d12:	4652      	mov	r2, sl
 8000d14:	e74f      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000d16:	4649      	mov	r1, r9
 8000d18:	2301      	movs	r3, #1
 8000d1a:	4319      	orrs	r1, r3
 8000d1c:	4689      	mov	r9, r1
 8000d1e:	2400      	movs	r4, #0
 8000d20:	2001      	movs	r0, #1
 8000d22:	e748      	b.n	8000bb6 <__aeabi_ddiv+0x7a>
 8000d24:	230c      	movs	r3, #12
 8000d26:	4699      	mov	r9, r3
 8000d28:	3b09      	subs	r3, #9
 8000d2a:	46a0      	mov	r8, r4
 8000d2c:	4683      	mov	fp, r0
 8000d2e:	9300      	str	r3, [sp, #0]
 8000d30:	e728      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000d32:	2304      	movs	r3, #4
 8000d34:	4699      	mov	r9, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	469b      	mov	fp, r3
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	2500      	movs	r5, #0
 8000d3e:	9300      	str	r3, [sp, #0]
 8000d40:	e720      	b.n	8000b84 <__aeabi_ddiv+0x48>
 8000d42:	2300      	movs	r3, #0
 8000d44:	2480      	movs	r4, #128	; 0x80
 8000d46:	469a      	mov	sl, r3
 8000d48:	2500      	movs	r5, #0
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d4c:	0324      	lsls	r4, r4, #12
 8000d4e:	e74f      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d50:	2380      	movs	r3, #128	; 0x80
 8000d52:	4641      	mov	r1, r8
 8000d54:	031b      	lsls	r3, r3, #12
 8000d56:	4219      	tst	r1, r3
 8000d58:	d008      	beq.n	8000d6c <__aeabi_ddiv+0x230>
 8000d5a:	421c      	tst	r4, r3
 8000d5c:	d106      	bne.n	8000d6c <__aeabi_ddiv+0x230>
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	0324      	lsls	r4, r4, #12
 8000d62:	46ba      	mov	sl, r7
 8000d64:	0015      	movs	r5, r2
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d68:	0b24      	lsrs	r4, r4, #12
 8000d6a:	e741      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d6c:	2480      	movs	r4, #128	; 0x80
 8000d6e:	4643      	mov	r3, r8
 8000d70:	0324      	lsls	r4, r4, #12
 8000d72:	431c      	orrs	r4, r3
 8000d74:	0324      	lsls	r4, r4, #12
 8000d76:	46b2      	mov	sl, r6
 8000d78:	4b01      	ldr	r3, [pc, #4]	; (8000d80 <__aeabi_ddiv+0x244>)
 8000d7a:	0b24      	lsrs	r4, r4, #12
 8000d7c:	e738      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	000007ff 	.word	0x000007ff
 8000d84:	fffffc01 	.word	0xfffffc01
 8000d88:	08009410 	.word	0x08009410
 8000d8c:	fffff801 	.word	0xfffff801
 8000d90:	fffffc0d 	.word	0xfffffc0d
 8000d94:	000003f3 	.word	0x000003f3
 8000d98:	000003ff 	.word	0x000003ff
 8000d9c:	feffffff 	.word	0xfeffffff
 8000da0:	000007fe 	.word	0x000007fe
 8000da4:	4544      	cmp	r4, r8
 8000da6:	d200      	bcs.n	8000daa <__aeabi_ddiv+0x26e>
 8000da8:	e116      	b.n	8000fd8 <__aeabi_ddiv+0x49c>
 8000daa:	d100      	bne.n	8000dae <__aeabi_ddiv+0x272>
 8000dac:	e111      	b.n	8000fd2 <__aeabi_ddiv+0x496>
 8000dae:	2301      	movs	r3, #1
 8000db0:	425b      	negs	r3, r3
 8000db2:	469c      	mov	ip, r3
 8000db4:	002e      	movs	r6, r5
 8000db6:	4640      	mov	r0, r8
 8000db8:	2500      	movs	r5, #0
 8000dba:	44e3      	add	fp, ip
 8000dbc:	0223      	lsls	r3, r4, #8
 8000dbe:	0e14      	lsrs	r4, r2, #24
 8000dc0:	431c      	orrs	r4, r3
 8000dc2:	0c1b      	lsrs	r3, r3, #16
 8000dc4:	4699      	mov	r9, r3
 8000dc6:	0423      	lsls	r3, r4, #16
 8000dc8:	0c1f      	lsrs	r7, r3, #16
 8000dca:	0212      	lsls	r2, r2, #8
 8000dcc:	4649      	mov	r1, r9
 8000dce:	9200      	str	r2, [sp, #0]
 8000dd0:	9701      	str	r7, [sp, #4]
 8000dd2:	f7ff fa1b 	bl	800020c <__aeabi_uidivmod>
 8000dd6:	0002      	movs	r2, r0
 8000dd8:	437a      	muls	r2, r7
 8000dda:	040b      	lsls	r3, r1, #16
 8000ddc:	0c31      	lsrs	r1, r6, #16
 8000dde:	4680      	mov	r8, r0
 8000de0:	4319      	orrs	r1, r3
 8000de2:	428a      	cmp	r2, r1
 8000de4:	d90b      	bls.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000de6:	2301      	movs	r3, #1
 8000de8:	425b      	negs	r3, r3
 8000dea:	469c      	mov	ip, r3
 8000dec:	1909      	adds	r1, r1, r4
 8000dee:	44e0      	add	r8, ip
 8000df0:	428c      	cmp	r4, r1
 8000df2:	d804      	bhi.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	d902      	bls.n	8000dfe <__aeabi_ddiv+0x2c2>
 8000df8:	1e83      	subs	r3, r0, #2
 8000dfa:	4698      	mov	r8, r3
 8000dfc:	1909      	adds	r1, r1, r4
 8000dfe:	1a88      	subs	r0, r1, r2
 8000e00:	4649      	mov	r1, r9
 8000e02:	f7ff fa03 	bl	800020c <__aeabi_uidivmod>
 8000e06:	0409      	lsls	r1, r1, #16
 8000e08:	468c      	mov	ip, r1
 8000e0a:	0431      	lsls	r1, r6, #16
 8000e0c:	4666      	mov	r6, ip
 8000e0e:	9a01      	ldr	r2, [sp, #4]
 8000e10:	0c09      	lsrs	r1, r1, #16
 8000e12:	4342      	muls	r2, r0
 8000e14:	0003      	movs	r3, r0
 8000e16:	4331      	orrs	r1, r6
 8000e18:	428a      	cmp	r2, r1
 8000e1a:	d904      	bls.n	8000e26 <__aeabi_ddiv+0x2ea>
 8000e1c:	1909      	adds	r1, r1, r4
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	428c      	cmp	r4, r1
 8000e22:	d800      	bhi.n	8000e26 <__aeabi_ddiv+0x2ea>
 8000e24:	e111      	b.n	800104a <__aeabi_ddiv+0x50e>
 8000e26:	1a89      	subs	r1, r1, r2
 8000e28:	4642      	mov	r2, r8
 8000e2a:	9e00      	ldr	r6, [sp, #0]
 8000e2c:	0412      	lsls	r2, r2, #16
 8000e2e:	431a      	orrs	r2, r3
 8000e30:	0c33      	lsrs	r3, r6, #16
 8000e32:	001f      	movs	r7, r3
 8000e34:	0c10      	lsrs	r0, r2, #16
 8000e36:	4690      	mov	r8, r2
 8000e38:	9302      	str	r3, [sp, #8]
 8000e3a:	0413      	lsls	r3, r2, #16
 8000e3c:	0432      	lsls	r2, r6, #16
 8000e3e:	0c16      	lsrs	r6, r2, #16
 8000e40:	0032      	movs	r2, r6
 8000e42:	0c1b      	lsrs	r3, r3, #16
 8000e44:	435a      	muls	r2, r3
 8000e46:	9603      	str	r6, [sp, #12]
 8000e48:	437b      	muls	r3, r7
 8000e4a:	4346      	muls	r6, r0
 8000e4c:	4378      	muls	r0, r7
 8000e4e:	0c17      	lsrs	r7, r2, #16
 8000e50:	46bc      	mov	ip, r7
 8000e52:	199b      	adds	r3, r3, r6
 8000e54:	4463      	add	r3, ip
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d903      	bls.n	8000e62 <__aeabi_ddiv+0x326>
 8000e5a:	2680      	movs	r6, #128	; 0x80
 8000e5c:	0276      	lsls	r6, r6, #9
 8000e5e:	46b4      	mov	ip, r6
 8000e60:	4460      	add	r0, ip
 8000e62:	0c1e      	lsrs	r6, r3, #16
 8000e64:	1830      	adds	r0, r6, r0
 8000e66:	0416      	lsls	r6, r2, #16
 8000e68:	041b      	lsls	r3, r3, #16
 8000e6a:	0c36      	lsrs	r6, r6, #16
 8000e6c:	199e      	adds	r6, r3, r6
 8000e6e:	4281      	cmp	r1, r0
 8000e70:	d200      	bcs.n	8000e74 <__aeabi_ddiv+0x338>
 8000e72:	e09c      	b.n	8000fae <__aeabi_ddiv+0x472>
 8000e74:	d100      	bne.n	8000e78 <__aeabi_ddiv+0x33c>
 8000e76:	e097      	b.n	8000fa8 <__aeabi_ddiv+0x46c>
 8000e78:	1bae      	subs	r6, r5, r6
 8000e7a:	1a09      	subs	r1, r1, r0
 8000e7c:	42b5      	cmp	r5, r6
 8000e7e:	4180      	sbcs	r0, r0
 8000e80:	4240      	negs	r0, r0
 8000e82:	1a08      	subs	r0, r1, r0
 8000e84:	4284      	cmp	r4, r0
 8000e86:	d100      	bne.n	8000e8a <__aeabi_ddiv+0x34e>
 8000e88:	e111      	b.n	80010ae <__aeabi_ddiv+0x572>
 8000e8a:	4649      	mov	r1, r9
 8000e8c:	f7ff f9be 	bl	800020c <__aeabi_uidivmod>
 8000e90:	9a01      	ldr	r2, [sp, #4]
 8000e92:	040b      	lsls	r3, r1, #16
 8000e94:	4342      	muls	r2, r0
 8000e96:	0c31      	lsrs	r1, r6, #16
 8000e98:	0005      	movs	r5, r0
 8000e9a:	4319      	orrs	r1, r3
 8000e9c:	428a      	cmp	r2, r1
 8000e9e:	d907      	bls.n	8000eb0 <__aeabi_ddiv+0x374>
 8000ea0:	1909      	adds	r1, r1, r4
 8000ea2:	3d01      	subs	r5, #1
 8000ea4:	428c      	cmp	r4, r1
 8000ea6:	d803      	bhi.n	8000eb0 <__aeabi_ddiv+0x374>
 8000ea8:	428a      	cmp	r2, r1
 8000eaa:	d901      	bls.n	8000eb0 <__aeabi_ddiv+0x374>
 8000eac:	1e85      	subs	r5, r0, #2
 8000eae:	1909      	adds	r1, r1, r4
 8000eb0:	1a88      	subs	r0, r1, r2
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	f7ff f9aa 	bl	800020c <__aeabi_uidivmod>
 8000eb8:	0409      	lsls	r1, r1, #16
 8000eba:	468c      	mov	ip, r1
 8000ebc:	0431      	lsls	r1, r6, #16
 8000ebe:	4666      	mov	r6, ip
 8000ec0:	9a01      	ldr	r2, [sp, #4]
 8000ec2:	0c09      	lsrs	r1, r1, #16
 8000ec4:	4342      	muls	r2, r0
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	4331      	orrs	r1, r6
 8000eca:	428a      	cmp	r2, r1
 8000ecc:	d907      	bls.n	8000ede <__aeabi_ddiv+0x3a2>
 8000ece:	1909      	adds	r1, r1, r4
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	428c      	cmp	r4, r1
 8000ed4:	d803      	bhi.n	8000ede <__aeabi_ddiv+0x3a2>
 8000ed6:	428a      	cmp	r2, r1
 8000ed8:	d901      	bls.n	8000ede <__aeabi_ddiv+0x3a2>
 8000eda:	1e83      	subs	r3, r0, #2
 8000edc:	1909      	adds	r1, r1, r4
 8000ede:	9e03      	ldr	r6, [sp, #12]
 8000ee0:	1a89      	subs	r1, r1, r2
 8000ee2:	0032      	movs	r2, r6
 8000ee4:	042d      	lsls	r5, r5, #16
 8000ee6:	431d      	orrs	r5, r3
 8000ee8:	9f02      	ldr	r7, [sp, #8]
 8000eea:	042b      	lsls	r3, r5, #16
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	435a      	muls	r2, r3
 8000ef0:	437b      	muls	r3, r7
 8000ef2:	469c      	mov	ip, r3
 8000ef4:	0c28      	lsrs	r0, r5, #16
 8000ef6:	4346      	muls	r6, r0
 8000ef8:	0c13      	lsrs	r3, r2, #16
 8000efa:	44b4      	add	ip, r6
 8000efc:	4463      	add	r3, ip
 8000efe:	4378      	muls	r0, r7
 8000f00:	429e      	cmp	r6, r3
 8000f02:	d903      	bls.n	8000f0c <__aeabi_ddiv+0x3d0>
 8000f04:	2680      	movs	r6, #128	; 0x80
 8000f06:	0276      	lsls	r6, r6, #9
 8000f08:	46b4      	mov	ip, r6
 8000f0a:	4460      	add	r0, ip
 8000f0c:	0c1e      	lsrs	r6, r3, #16
 8000f0e:	0412      	lsls	r2, r2, #16
 8000f10:	041b      	lsls	r3, r3, #16
 8000f12:	0c12      	lsrs	r2, r2, #16
 8000f14:	1830      	adds	r0, r6, r0
 8000f16:	189b      	adds	r3, r3, r2
 8000f18:	4281      	cmp	r1, r0
 8000f1a:	d306      	bcc.n	8000f2a <__aeabi_ddiv+0x3ee>
 8000f1c:	d002      	beq.n	8000f24 <__aeabi_ddiv+0x3e8>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	431d      	orrs	r5, r3
 8000f22:	e6ce      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d100      	bne.n	8000f2a <__aeabi_ddiv+0x3ee>
 8000f28:	e6cb      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8000f2a:	1861      	adds	r1, r4, r1
 8000f2c:	1e6e      	subs	r6, r5, #1
 8000f2e:	42a1      	cmp	r1, r4
 8000f30:	d200      	bcs.n	8000f34 <__aeabi_ddiv+0x3f8>
 8000f32:	e0a4      	b.n	800107e <__aeabi_ddiv+0x542>
 8000f34:	4281      	cmp	r1, r0
 8000f36:	d200      	bcs.n	8000f3a <__aeabi_ddiv+0x3fe>
 8000f38:	e0c9      	b.n	80010ce <__aeabi_ddiv+0x592>
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_ddiv+0x402>
 8000f3c:	e0d9      	b.n	80010f2 <__aeabi_ddiv+0x5b6>
 8000f3e:	0035      	movs	r5, r6
 8000f40:	e7ed      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 8000f42:	2501      	movs	r5, #1
 8000f44:	426d      	negs	r5, r5
 8000f46:	2101      	movs	r1, #1
 8000f48:	1a89      	subs	r1, r1, r2
 8000f4a:	2938      	cmp	r1, #56	; 0x38
 8000f4c:	dd00      	ble.n	8000f50 <__aeabi_ddiv+0x414>
 8000f4e:	e64c      	b.n	8000bea <__aeabi_ddiv+0xae>
 8000f50:	291f      	cmp	r1, #31
 8000f52:	dc00      	bgt.n	8000f56 <__aeabi_ddiv+0x41a>
 8000f54:	e07f      	b.n	8001056 <__aeabi_ddiv+0x51a>
 8000f56:	231f      	movs	r3, #31
 8000f58:	425b      	negs	r3, r3
 8000f5a:	1a9a      	subs	r2, r3, r2
 8000f5c:	4643      	mov	r3, r8
 8000f5e:	40d3      	lsrs	r3, r2
 8000f60:	2920      	cmp	r1, #32
 8000f62:	d004      	beq.n	8000f6e <__aeabi_ddiv+0x432>
 8000f64:	4644      	mov	r4, r8
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <__aeabi_ddiv+0x5c0>)
 8000f68:	445a      	add	r2, fp
 8000f6a:	4094      	lsls	r4, r2
 8000f6c:	4325      	orrs	r5, r4
 8000f6e:	1e6a      	subs	r2, r5, #1
 8000f70:	4195      	sbcs	r5, r2
 8000f72:	2207      	movs	r2, #7
 8000f74:	432b      	orrs	r3, r5
 8000f76:	0015      	movs	r5, r2
 8000f78:	2400      	movs	r4, #0
 8000f7a:	401d      	ands	r5, r3
 8000f7c:	421a      	tst	r2, r3
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_ddiv+0x446>
 8000f80:	e0a1      	b.n	80010c6 <__aeabi_ddiv+0x58a>
 8000f82:	220f      	movs	r2, #15
 8000f84:	2400      	movs	r4, #0
 8000f86:	401a      	ands	r2, r3
 8000f88:	2a04      	cmp	r2, #4
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_ddiv+0x452>
 8000f8c:	e098      	b.n	80010c0 <__aeabi_ddiv+0x584>
 8000f8e:	1d1a      	adds	r2, r3, #4
 8000f90:	429a      	cmp	r2, r3
 8000f92:	419b      	sbcs	r3, r3
 8000f94:	425b      	negs	r3, r3
 8000f96:	18e4      	adds	r4, r4, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	0222      	lsls	r2, r4, #8
 8000f9c:	d400      	bmi.n	8000fa0 <__aeabi_ddiv+0x464>
 8000f9e:	e08f      	b.n	80010c0 <__aeabi_ddiv+0x584>
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	2400      	movs	r4, #0
 8000fa4:	2500      	movs	r5, #0
 8000fa6:	e623      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 8000fa8:	42b5      	cmp	r5, r6
 8000faa:	d300      	bcc.n	8000fae <__aeabi_ddiv+0x472>
 8000fac:	e764      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 8000fae:	4643      	mov	r3, r8
 8000fb0:	1e5a      	subs	r2, r3, #1
 8000fb2:	9b00      	ldr	r3, [sp, #0]
 8000fb4:	469c      	mov	ip, r3
 8000fb6:	4465      	add	r5, ip
 8000fb8:	001f      	movs	r7, r3
 8000fba:	429d      	cmp	r5, r3
 8000fbc:	419b      	sbcs	r3, r3
 8000fbe:	425b      	negs	r3, r3
 8000fc0:	191b      	adds	r3, r3, r4
 8000fc2:	18c9      	adds	r1, r1, r3
 8000fc4:	428c      	cmp	r4, r1
 8000fc6:	d23a      	bcs.n	800103e <__aeabi_ddiv+0x502>
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	d863      	bhi.n	8001094 <__aeabi_ddiv+0x558>
 8000fcc:	d060      	beq.n	8001090 <__aeabi_ddiv+0x554>
 8000fce:	4690      	mov	r8, r2
 8000fd0:	e752      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 8000fd2:	42aa      	cmp	r2, r5
 8000fd4:	d900      	bls.n	8000fd8 <__aeabi_ddiv+0x49c>
 8000fd6:	e6ea      	b.n	8000dae <__aeabi_ddiv+0x272>
 8000fd8:	4643      	mov	r3, r8
 8000fda:	07de      	lsls	r6, r3, #31
 8000fdc:	0858      	lsrs	r0, r3, #1
 8000fde:	086b      	lsrs	r3, r5, #1
 8000fe0:	431e      	orrs	r6, r3
 8000fe2:	07ed      	lsls	r5, r5, #31
 8000fe4:	e6ea      	b.n	8000dbc <__aeabi_ddiv+0x280>
 8000fe6:	4648      	mov	r0, r9
 8000fe8:	f001 f838 	bl	800205c <__clzsi2>
 8000fec:	0001      	movs	r1, r0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	3115      	adds	r1, #21
 8000ff2:	3220      	adds	r2, #32
 8000ff4:	291c      	cmp	r1, #28
 8000ff6:	dc00      	bgt.n	8000ffa <__aeabi_ddiv+0x4be>
 8000ff8:	e61a      	b.n	8000c30 <__aeabi_ddiv+0xf4>
 8000ffa:	464b      	mov	r3, r9
 8000ffc:	3808      	subs	r0, #8
 8000ffe:	4083      	lsls	r3, r0
 8001000:	2500      	movs	r5, #0
 8001002:	4698      	mov	r8, r3
 8001004:	e620      	b.n	8000c48 <__aeabi_ddiv+0x10c>
 8001006:	f001 f829 	bl	800205c <__clzsi2>
 800100a:	0003      	movs	r3, r0
 800100c:	001a      	movs	r2, r3
 800100e:	3215      	adds	r2, #21
 8001010:	3020      	adds	r0, #32
 8001012:	2a1c      	cmp	r2, #28
 8001014:	dc00      	bgt.n	8001018 <__aeabi_ddiv+0x4dc>
 8001016:	e630      	b.n	8000c7a <__aeabi_ddiv+0x13e>
 8001018:	4654      	mov	r4, sl
 800101a:	3b08      	subs	r3, #8
 800101c:	2200      	movs	r2, #0
 800101e:	409c      	lsls	r4, r3
 8001020:	e635      	b.n	8000c8e <__aeabi_ddiv+0x152>
 8001022:	230f      	movs	r3, #15
 8001024:	402b      	ands	r3, r5
 8001026:	2b04      	cmp	r3, #4
 8001028:	d100      	bne.n	800102c <__aeabi_ddiv+0x4f0>
 800102a:	e652      	b.n	8000cd2 <__aeabi_ddiv+0x196>
 800102c:	2305      	movs	r3, #5
 800102e:	425b      	negs	r3, r3
 8001030:	42ab      	cmp	r3, r5
 8001032:	419b      	sbcs	r3, r3
 8001034:	3504      	adds	r5, #4
 8001036:	425b      	negs	r3, r3
 8001038:	08ed      	lsrs	r5, r5, #3
 800103a:	4498      	add	r8, r3
 800103c:	e64a      	b.n	8000cd4 <__aeabi_ddiv+0x198>
 800103e:	428c      	cmp	r4, r1
 8001040:	d1c5      	bne.n	8000fce <__aeabi_ddiv+0x492>
 8001042:	42af      	cmp	r7, r5
 8001044:	d9c0      	bls.n	8000fc8 <__aeabi_ddiv+0x48c>
 8001046:	4690      	mov	r8, r2
 8001048:	e716      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 800104a:	428a      	cmp	r2, r1
 800104c:	d800      	bhi.n	8001050 <__aeabi_ddiv+0x514>
 800104e:	e6ea      	b.n	8000e26 <__aeabi_ddiv+0x2ea>
 8001050:	1e83      	subs	r3, r0, #2
 8001052:	1909      	adds	r1, r1, r4
 8001054:	e6e7      	b.n	8000e26 <__aeabi_ddiv+0x2ea>
 8001056:	4a2a      	ldr	r2, [pc, #168]	; (8001100 <__aeabi_ddiv+0x5c4>)
 8001058:	0028      	movs	r0, r5
 800105a:	445a      	add	r2, fp
 800105c:	4643      	mov	r3, r8
 800105e:	4095      	lsls	r5, r2
 8001060:	4093      	lsls	r3, r2
 8001062:	40c8      	lsrs	r0, r1
 8001064:	1e6a      	subs	r2, r5, #1
 8001066:	4195      	sbcs	r5, r2
 8001068:	4644      	mov	r4, r8
 800106a:	4303      	orrs	r3, r0
 800106c:	432b      	orrs	r3, r5
 800106e:	40cc      	lsrs	r4, r1
 8001070:	075a      	lsls	r2, r3, #29
 8001072:	d092      	beq.n	8000f9a <__aeabi_ddiv+0x45e>
 8001074:	220f      	movs	r2, #15
 8001076:	401a      	ands	r2, r3
 8001078:	2a04      	cmp	r2, #4
 800107a:	d188      	bne.n	8000f8e <__aeabi_ddiv+0x452>
 800107c:	e78d      	b.n	8000f9a <__aeabi_ddiv+0x45e>
 800107e:	0035      	movs	r5, r6
 8001080:	4281      	cmp	r1, r0
 8001082:	d000      	beq.n	8001086 <__aeabi_ddiv+0x54a>
 8001084:	e74b      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 8001086:	9a00      	ldr	r2, [sp, #0]
 8001088:	4293      	cmp	r3, r2
 800108a:	d000      	beq.n	800108e <__aeabi_ddiv+0x552>
 800108c:	e747      	b.n	8000f1e <__aeabi_ddiv+0x3e2>
 800108e:	e618      	b.n	8000cc2 <__aeabi_ddiv+0x186>
 8001090:	42ae      	cmp	r6, r5
 8001092:	d99c      	bls.n	8000fce <__aeabi_ddiv+0x492>
 8001094:	2302      	movs	r3, #2
 8001096:	425b      	negs	r3, r3
 8001098:	469c      	mov	ip, r3
 800109a:	9b00      	ldr	r3, [sp, #0]
 800109c:	44e0      	add	r8, ip
 800109e:	469c      	mov	ip, r3
 80010a0:	4465      	add	r5, ip
 80010a2:	429d      	cmp	r5, r3
 80010a4:	419b      	sbcs	r3, r3
 80010a6:	425b      	negs	r3, r3
 80010a8:	191b      	adds	r3, r3, r4
 80010aa:	18c9      	adds	r1, r1, r3
 80010ac:	e6e4      	b.n	8000e78 <__aeabi_ddiv+0x33c>
 80010ae:	4a15      	ldr	r2, [pc, #84]	; (8001104 <__aeabi_ddiv+0x5c8>)
 80010b0:	445a      	add	r2, fp
 80010b2:	2a00      	cmp	r2, #0
 80010b4:	dc00      	bgt.n	80010b8 <__aeabi_ddiv+0x57c>
 80010b6:	e744      	b.n	8000f42 <__aeabi_ddiv+0x406>
 80010b8:	2301      	movs	r3, #1
 80010ba:	2500      	movs	r5, #0
 80010bc:	4498      	add	r8, r3
 80010be:	e609      	b.n	8000cd4 <__aeabi_ddiv+0x198>
 80010c0:	0765      	lsls	r5, r4, #29
 80010c2:	0264      	lsls	r4, r4, #9
 80010c4:	0b24      	lsrs	r4, r4, #12
 80010c6:	08db      	lsrs	r3, r3, #3
 80010c8:	431d      	orrs	r5, r3
 80010ca:	2300      	movs	r3, #0
 80010cc:	e590      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 80010ce:	9e00      	ldr	r6, [sp, #0]
 80010d0:	3d02      	subs	r5, #2
 80010d2:	0072      	lsls	r2, r6, #1
 80010d4:	42b2      	cmp	r2, r6
 80010d6:	41bf      	sbcs	r7, r7
 80010d8:	427f      	negs	r7, r7
 80010da:	193c      	adds	r4, r7, r4
 80010dc:	1909      	adds	r1, r1, r4
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	e7ce      	b.n	8001080 <__aeabi_ddiv+0x544>
 80010e2:	2480      	movs	r4, #128	; 0x80
 80010e4:	4643      	mov	r3, r8
 80010e6:	0324      	lsls	r4, r4, #12
 80010e8:	431c      	orrs	r4, r3
 80010ea:	0324      	lsls	r4, r4, #12
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <__aeabi_ddiv+0x5cc>)
 80010ee:	0b24      	lsrs	r4, r4, #12
 80010f0:	e57e      	b.n	8000bf0 <__aeabi_ddiv+0xb4>
 80010f2:	9a00      	ldr	r2, [sp, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d3ea      	bcc.n	80010ce <__aeabi_ddiv+0x592>
 80010f8:	0035      	movs	r5, r6
 80010fa:	e7c4      	b.n	8001086 <__aeabi_ddiv+0x54a>
 80010fc:	0000043e 	.word	0x0000043e
 8001100:	0000041e 	.word	0x0000041e
 8001104:	000003ff 	.word	0x000003ff
 8001108:	000007ff 	.word	0x000007ff

0800110c <__eqdf2>:
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	464f      	mov	r7, r9
 8001110:	4646      	mov	r6, r8
 8001112:	46d6      	mov	lr, sl
 8001114:	4694      	mov	ip, r2
 8001116:	4691      	mov	r9, r2
 8001118:	031a      	lsls	r2, r3, #12
 800111a:	0b12      	lsrs	r2, r2, #12
 800111c:	4d18      	ldr	r5, [pc, #96]	; (8001180 <__eqdf2+0x74>)
 800111e:	b5c0      	push	{r6, r7, lr}
 8001120:	004c      	lsls	r4, r1, #1
 8001122:	030f      	lsls	r7, r1, #12
 8001124:	4692      	mov	sl, r2
 8001126:	005a      	lsls	r2, r3, #1
 8001128:	0006      	movs	r6, r0
 800112a:	4680      	mov	r8, r0
 800112c:	0b3f      	lsrs	r7, r7, #12
 800112e:	2001      	movs	r0, #1
 8001130:	0d64      	lsrs	r4, r4, #21
 8001132:	0fc9      	lsrs	r1, r1, #31
 8001134:	0d52      	lsrs	r2, r2, #21
 8001136:	0fdb      	lsrs	r3, r3, #31
 8001138:	42ac      	cmp	r4, r5
 800113a:	d00a      	beq.n	8001152 <__eqdf2+0x46>
 800113c:	42aa      	cmp	r2, r5
 800113e:	d003      	beq.n	8001148 <__eqdf2+0x3c>
 8001140:	4294      	cmp	r4, r2
 8001142:	d101      	bne.n	8001148 <__eqdf2+0x3c>
 8001144:	4557      	cmp	r7, sl
 8001146:	d00d      	beq.n	8001164 <__eqdf2+0x58>
 8001148:	bce0      	pop	{r5, r6, r7}
 800114a:	46ba      	mov	sl, r7
 800114c:	46b1      	mov	r9, r6
 800114e:	46a8      	mov	r8, r5
 8001150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001152:	003d      	movs	r5, r7
 8001154:	4335      	orrs	r5, r6
 8001156:	d1f7      	bne.n	8001148 <__eqdf2+0x3c>
 8001158:	42a2      	cmp	r2, r4
 800115a:	d1f5      	bne.n	8001148 <__eqdf2+0x3c>
 800115c:	4652      	mov	r2, sl
 800115e:	4665      	mov	r5, ip
 8001160:	432a      	orrs	r2, r5
 8001162:	d1f1      	bne.n	8001148 <__eqdf2+0x3c>
 8001164:	2001      	movs	r0, #1
 8001166:	45c8      	cmp	r8, r9
 8001168:	d1ee      	bne.n	8001148 <__eqdf2+0x3c>
 800116a:	4299      	cmp	r1, r3
 800116c:	d006      	beq.n	800117c <__eqdf2+0x70>
 800116e:	2c00      	cmp	r4, #0
 8001170:	d1ea      	bne.n	8001148 <__eqdf2+0x3c>
 8001172:	433e      	orrs	r6, r7
 8001174:	0030      	movs	r0, r6
 8001176:	1e46      	subs	r6, r0, #1
 8001178:	41b0      	sbcs	r0, r6
 800117a:	e7e5      	b.n	8001148 <__eqdf2+0x3c>
 800117c:	2000      	movs	r0, #0
 800117e:	e7e3      	b.n	8001148 <__eqdf2+0x3c>
 8001180:	000007ff 	.word	0x000007ff

08001184 <__gedf2>:
 8001184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001186:	464e      	mov	r6, r9
 8001188:	4645      	mov	r5, r8
 800118a:	4657      	mov	r7, sl
 800118c:	46de      	mov	lr, fp
 800118e:	0004      	movs	r4, r0
 8001190:	0018      	movs	r0, r3
 8001192:	b5e0      	push	{r5, r6, r7, lr}
 8001194:	0016      	movs	r6, r2
 8001196:	031b      	lsls	r3, r3, #12
 8001198:	0b1b      	lsrs	r3, r3, #12
 800119a:	4d32      	ldr	r5, [pc, #200]	; (8001264 <__gedf2+0xe0>)
 800119c:	030f      	lsls	r7, r1, #12
 800119e:	004a      	lsls	r2, r1, #1
 80011a0:	4699      	mov	r9, r3
 80011a2:	0043      	lsls	r3, r0, #1
 80011a4:	46a4      	mov	ip, r4
 80011a6:	46b0      	mov	r8, r6
 80011a8:	0b3f      	lsrs	r7, r7, #12
 80011aa:	0d52      	lsrs	r2, r2, #21
 80011ac:	0fc9      	lsrs	r1, r1, #31
 80011ae:	0d5b      	lsrs	r3, r3, #21
 80011b0:	0fc0      	lsrs	r0, r0, #31
 80011b2:	42aa      	cmp	r2, r5
 80011b4:	d029      	beq.n	800120a <__gedf2+0x86>
 80011b6:	42ab      	cmp	r3, r5
 80011b8:	d018      	beq.n	80011ec <__gedf2+0x68>
 80011ba:	2a00      	cmp	r2, #0
 80011bc:	d12a      	bne.n	8001214 <__gedf2+0x90>
 80011be:	433c      	orrs	r4, r7
 80011c0:	46a3      	mov	fp, r4
 80011c2:	4265      	negs	r5, r4
 80011c4:	4165      	adcs	r5, r4
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d102      	bne.n	80011d0 <__gedf2+0x4c>
 80011ca:	464c      	mov	r4, r9
 80011cc:	4326      	orrs	r6, r4
 80011ce:	d027      	beq.n	8001220 <__gedf2+0x9c>
 80011d0:	2d00      	cmp	r5, #0
 80011d2:	d115      	bne.n	8001200 <__gedf2+0x7c>
 80011d4:	4281      	cmp	r1, r0
 80011d6:	d028      	beq.n	800122a <__gedf2+0xa6>
 80011d8:	2002      	movs	r0, #2
 80011da:	3901      	subs	r1, #1
 80011dc:	4008      	ands	r0, r1
 80011de:	3801      	subs	r0, #1
 80011e0:	bcf0      	pop	{r4, r5, r6, r7}
 80011e2:	46bb      	mov	fp, r7
 80011e4:	46b2      	mov	sl, r6
 80011e6:	46a9      	mov	r9, r5
 80011e8:	46a0      	mov	r8, r4
 80011ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ec:	464d      	mov	r5, r9
 80011ee:	432e      	orrs	r6, r5
 80011f0:	d12f      	bne.n	8001252 <__gedf2+0xce>
 80011f2:	2a00      	cmp	r2, #0
 80011f4:	d1ee      	bne.n	80011d4 <__gedf2+0x50>
 80011f6:	433c      	orrs	r4, r7
 80011f8:	4265      	negs	r5, r4
 80011fa:	4165      	adcs	r5, r4
 80011fc:	2d00      	cmp	r5, #0
 80011fe:	d0e9      	beq.n	80011d4 <__gedf2+0x50>
 8001200:	2800      	cmp	r0, #0
 8001202:	d1ed      	bne.n	80011e0 <__gedf2+0x5c>
 8001204:	2001      	movs	r0, #1
 8001206:	4240      	negs	r0, r0
 8001208:	e7ea      	b.n	80011e0 <__gedf2+0x5c>
 800120a:	003d      	movs	r5, r7
 800120c:	4325      	orrs	r5, r4
 800120e:	d120      	bne.n	8001252 <__gedf2+0xce>
 8001210:	4293      	cmp	r3, r2
 8001212:	d0eb      	beq.n	80011ec <__gedf2+0x68>
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1dd      	bne.n	80011d4 <__gedf2+0x50>
 8001218:	464c      	mov	r4, r9
 800121a:	4326      	orrs	r6, r4
 800121c:	d1da      	bne.n	80011d4 <__gedf2+0x50>
 800121e:	e7db      	b.n	80011d8 <__gedf2+0x54>
 8001220:	465b      	mov	r3, fp
 8001222:	2000      	movs	r0, #0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0db      	beq.n	80011e0 <__gedf2+0x5c>
 8001228:	e7d6      	b.n	80011d8 <__gedf2+0x54>
 800122a:	429a      	cmp	r2, r3
 800122c:	dc0a      	bgt.n	8001244 <__gedf2+0xc0>
 800122e:	dbe7      	blt.n	8001200 <__gedf2+0x7c>
 8001230:	454f      	cmp	r7, r9
 8001232:	d8d1      	bhi.n	80011d8 <__gedf2+0x54>
 8001234:	d010      	beq.n	8001258 <__gedf2+0xd4>
 8001236:	2000      	movs	r0, #0
 8001238:	454f      	cmp	r7, r9
 800123a:	d2d1      	bcs.n	80011e0 <__gedf2+0x5c>
 800123c:	2900      	cmp	r1, #0
 800123e:	d0e1      	beq.n	8001204 <__gedf2+0x80>
 8001240:	0008      	movs	r0, r1
 8001242:	e7cd      	b.n	80011e0 <__gedf2+0x5c>
 8001244:	4243      	negs	r3, r0
 8001246:	4158      	adcs	r0, r3
 8001248:	2302      	movs	r3, #2
 800124a:	4240      	negs	r0, r0
 800124c:	4018      	ands	r0, r3
 800124e:	3801      	subs	r0, #1
 8001250:	e7c6      	b.n	80011e0 <__gedf2+0x5c>
 8001252:	2002      	movs	r0, #2
 8001254:	4240      	negs	r0, r0
 8001256:	e7c3      	b.n	80011e0 <__gedf2+0x5c>
 8001258:	45c4      	cmp	ip, r8
 800125a:	d8bd      	bhi.n	80011d8 <__gedf2+0x54>
 800125c:	2000      	movs	r0, #0
 800125e:	45c4      	cmp	ip, r8
 8001260:	d2be      	bcs.n	80011e0 <__gedf2+0x5c>
 8001262:	e7eb      	b.n	800123c <__gedf2+0xb8>
 8001264:	000007ff 	.word	0x000007ff

08001268 <__ledf2>:
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
 800126a:	464e      	mov	r6, r9
 800126c:	4645      	mov	r5, r8
 800126e:	4657      	mov	r7, sl
 8001270:	46de      	mov	lr, fp
 8001272:	0004      	movs	r4, r0
 8001274:	0018      	movs	r0, r3
 8001276:	b5e0      	push	{r5, r6, r7, lr}
 8001278:	0016      	movs	r6, r2
 800127a:	031b      	lsls	r3, r3, #12
 800127c:	0b1b      	lsrs	r3, r3, #12
 800127e:	4d31      	ldr	r5, [pc, #196]	; (8001344 <__ledf2+0xdc>)
 8001280:	030f      	lsls	r7, r1, #12
 8001282:	004a      	lsls	r2, r1, #1
 8001284:	4699      	mov	r9, r3
 8001286:	0043      	lsls	r3, r0, #1
 8001288:	46a4      	mov	ip, r4
 800128a:	46b0      	mov	r8, r6
 800128c:	0b3f      	lsrs	r7, r7, #12
 800128e:	0d52      	lsrs	r2, r2, #21
 8001290:	0fc9      	lsrs	r1, r1, #31
 8001292:	0d5b      	lsrs	r3, r3, #21
 8001294:	0fc0      	lsrs	r0, r0, #31
 8001296:	42aa      	cmp	r2, r5
 8001298:	d011      	beq.n	80012be <__ledf2+0x56>
 800129a:	42ab      	cmp	r3, r5
 800129c:	d014      	beq.n	80012c8 <__ledf2+0x60>
 800129e:	2a00      	cmp	r2, #0
 80012a0:	d12f      	bne.n	8001302 <__ledf2+0x9a>
 80012a2:	433c      	orrs	r4, r7
 80012a4:	46a3      	mov	fp, r4
 80012a6:	4265      	negs	r5, r4
 80012a8:	4165      	adcs	r5, r4
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d114      	bne.n	80012d8 <__ledf2+0x70>
 80012ae:	464c      	mov	r4, r9
 80012b0:	4326      	orrs	r6, r4
 80012b2:	d111      	bne.n	80012d8 <__ledf2+0x70>
 80012b4:	465b      	mov	r3, fp
 80012b6:	2000      	movs	r0, #0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d017      	beq.n	80012ec <__ledf2+0x84>
 80012bc:	e010      	b.n	80012e0 <__ledf2+0x78>
 80012be:	003d      	movs	r5, r7
 80012c0:	4325      	orrs	r5, r4
 80012c2:	d112      	bne.n	80012ea <__ledf2+0x82>
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d11c      	bne.n	8001302 <__ledf2+0x9a>
 80012c8:	464d      	mov	r5, r9
 80012ca:	432e      	orrs	r6, r5
 80012cc:	d10d      	bne.n	80012ea <__ledf2+0x82>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d104      	bne.n	80012dc <__ledf2+0x74>
 80012d2:	433c      	orrs	r4, r7
 80012d4:	4265      	negs	r5, r4
 80012d6:	4165      	adcs	r5, r4
 80012d8:	2d00      	cmp	r5, #0
 80012da:	d10d      	bne.n	80012f8 <__ledf2+0x90>
 80012dc:	4281      	cmp	r1, r0
 80012de:	d016      	beq.n	800130e <__ledf2+0xa6>
 80012e0:	2002      	movs	r0, #2
 80012e2:	3901      	subs	r1, #1
 80012e4:	4008      	ands	r0, r1
 80012e6:	3801      	subs	r0, #1
 80012e8:	e000      	b.n	80012ec <__ledf2+0x84>
 80012ea:	2002      	movs	r0, #2
 80012ec:	bcf0      	pop	{r4, r5, r6, r7}
 80012ee:	46bb      	mov	fp, r7
 80012f0:	46b2      	mov	sl, r6
 80012f2:	46a9      	mov	r9, r5
 80012f4:	46a0      	mov	r8, r4
 80012f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012f8:	2800      	cmp	r0, #0
 80012fa:	d1f7      	bne.n	80012ec <__ledf2+0x84>
 80012fc:	2001      	movs	r0, #1
 80012fe:	4240      	negs	r0, r0
 8001300:	e7f4      	b.n	80012ec <__ledf2+0x84>
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1ea      	bne.n	80012dc <__ledf2+0x74>
 8001306:	464c      	mov	r4, r9
 8001308:	4326      	orrs	r6, r4
 800130a:	d1e7      	bne.n	80012dc <__ledf2+0x74>
 800130c:	e7e8      	b.n	80012e0 <__ledf2+0x78>
 800130e:	429a      	cmp	r2, r3
 8001310:	dd06      	ble.n	8001320 <__ledf2+0xb8>
 8001312:	4243      	negs	r3, r0
 8001314:	4158      	adcs	r0, r3
 8001316:	2302      	movs	r3, #2
 8001318:	4240      	negs	r0, r0
 800131a:	4018      	ands	r0, r3
 800131c:	3801      	subs	r0, #1
 800131e:	e7e5      	b.n	80012ec <__ledf2+0x84>
 8001320:	429a      	cmp	r2, r3
 8001322:	dbe9      	blt.n	80012f8 <__ledf2+0x90>
 8001324:	454f      	cmp	r7, r9
 8001326:	d8db      	bhi.n	80012e0 <__ledf2+0x78>
 8001328:	d006      	beq.n	8001338 <__ledf2+0xd0>
 800132a:	2000      	movs	r0, #0
 800132c:	454f      	cmp	r7, r9
 800132e:	d2dd      	bcs.n	80012ec <__ledf2+0x84>
 8001330:	2900      	cmp	r1, #0
 8001332:	d0e3      	beq.n	80012fc <__ledf2+0x94>
 8001334:	0008      	movs	r0, r1
 8001336:	e7d9      	b.n	80012ec <__ledf2+0x84>
 8001338:	45c4      	cmp	ip, r8
 800133a:	d8d1      	bhi.n	80012e0 <__ledf2+0x78>
 800133c:	2000      	movs	r0, #0
 800133e:	45c4      	cmp	ip, r8
 8001340:	d2d4      	bcs.n	80012ec <__ledf2+0x84>
 8001342:	e7f5      	b.n	8001330 <__ledf2+0xc8>
 8001344:	000007ff 	.word	0x000007ff

08001348 <__aeabi_dmul>:
 8001348:	b5f0      	push	{r4, r5, r6, r7, lr}
 800134a:	4657      	mov	r7, sl
 800134c:	464e      	mov	r6, r9
 800134e:	4645      	mov	r5, r8
 8001350:	46de      	mov	lr, fp
 8001352:	b5e0      	push	{r5, r6, r7, lr}
 8001354:	4698      	mov	r8, r3
 8001356:	030c      	lsls	r4, r1, #12
 8001358:	004b      	lsls	r3, r1, #1
 800135a:	0006      	movs	r6, r0
 800135c:	4692      	mov	sl, r2
 800135e:	b087      	sub	sp, #28
 8001360:	0b24      	lsrs	r4, r4, #12
 8001362:	0d5b      	lsrs	r3, r3, #21
 8001364:	0fcf      	lsrs	r7, r1, #31
 8001366:	2b00      	cmp	r3, #0
 8001368:	d06c      	beq.n	8001444 <__aeabi_dmul+0xfc>
 800136a:	4add      	ldr	r2, [pc, #884]	; (80016e0 <__aeabi_dmul+0x398>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d100      	bne.n	8001372 <__aeabi_dmul+0x2a>
 8001370:	e086      	b.n	8001480 <__aeabi_dmul+0x138>
 8001372:	0f42      	lsrs	r2, r0, #29
 8001374:	00e4      	lsls	r4, r4, #3
 8001376:	4314      	orrs	r4, r2
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	0412      	lsls	r2, r2, #16
 800137c:	4314      	orrs	r4, r2
 800137e:	4ad9      	ldr	r2, [pc, #868]	; (80016e4 <__aeabi_dmul+0x39c>)
 8001380:	00c5      	lsls	r5, r0, #3
 8001382:	4694      	mov	ip, r2
 8001384:	4463      	add	r3, ip
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	2300      	movs	r3, #0
 800138a:	4699      	mov	r9, r3
 800138c:	469b      	mov	fp, r3
 800138e:	4643      	mov	r3, r8
 8001390:	4642      	mov	r2, r8
 8001392:	031e      	lsls	r6, r3, #12
 8001394:	0fd2      	lsrs	r2, r2, #31
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	4650      	mov	r0, sl
 800139a:	4690      	mov	r8, r2
 800139c:	0b36      	lsrs	r6, r6, #12
 800139e:	0d5b      	lsrs	r3, r3, #21
 80013a0:	d100      	bne.n	80013a4 <__aeabi_dmul+0x5c>
 80013a2:	e078      	b.n	8001496 <__aeabi_dmul+0x14e>
 80013a4:	4ace      	ldr	r2, [pc, #824]	; (80016e0 <__aeabi_dmul+0x398>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d01d      	beq.n	80013e6 <__aeabi_dmul+0x9e>
 80013aa:	49ce      	ldr	r1, [pc, #824]	; (80016e4 <__aeabi_dmul+0x39c>)
 80013ac:	0f42      	lsrs	r2, r0, #29
 80013ae:	468c      	mov	ip, r1
 80013b0:	9900      	ldr	r1, [sp, #0]
 80013b2:	4463      	add	r3, ip
 80013b4:	00f6      	lsls	r6, r6, #3
 80013b6:	468c      	mov	ip, r1
 80013b8:	4316      	orrs	r6, r2
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	449c      	add	ip, r3
 80013be:	0412      	lsls	r2, r2, #16
 80013c0:	4663      	mov	r3, ip
 80013c2:	4316      	orrs	r6, r2
 80013c4:	00c2      	lsls	r2, r0, #3
 80013c6:	2000      	movs	r0, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	9900      	ldr	r1, [sp, #0]
 80013cc:	4643      	mov	r3, r8
 80013ce:	3101      	adds	r1, #1
 80013d0:	468c      	mov	ip, r1
 80013d2:	4649      	mov	r1, r9
 80013d4:	407b      	eors	r3, r7
 80013d6:	9301      	str	r3, [sp, #4]
 80013d8:	290f      	cmp	r1, #15
 80013da:	d900      	bls.n	80013de <__aeabi_dmul+0x96>
 80013dc:	e07e      	b.n	80014dc <__aeabi_dmul+0x194>
 80013de:	4bc2      	ldr	r3, [pc, #776]	; (80016e8 <__aeabi_dmul+0x3a0>)
 80013e0:	0089      	lsls	r1, r1, #2
 80013e2:	5859      	ldr	r1, [r3, r1]
 80013e4:	468f      	mov	pc, r1
 80013e6:	4652      	mov	r2, sl
 80013e8:	9b00      	ldr	r3, [sp, #0]
 80013ea:	4332      	orrs	r2, r6
 80013ec:	d000      	beq.n	80013f0 <__aeabi_dmul+0xa8>
 80013ee:	e156      	b.n	800169e <__aeabi_dmul+0x356>
 80013f0:	49bb      	ldr	r1, [pc, #748]	; (80016e0 <__aeabi_dmul+0x398>)
 80013f2:	2600      	movs	r6, #0
 80013f4:	468c      	mov	ip, r1
 80013f6:	4463      	add	r3, ip
 80013f8:	4649      	mov	r1, r9
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2302      	movs	r3, #2
 80013fe:	4319      	orrs	r1, r3
 8001400:	4689      	mov	r9, r1
 8001402:	2002      	movs	r0, #2
 8001404:	e7e1      	b.n	80013ca <__aeabi_dmul+0x82>
 8001406:	4643      	mov	r3, r8
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	0034      	movs	r4, r6
 800140c:	0015      	movs	r5, r2
 800140e:	4683      	mov	fp, r0
 8001410:	465b      	mov	r3, fp
 8001412:	2b02      	cmp	r3, #2
 8001414:	d05e      	beq.n	80014d4 <__aeabi_dmul+0x18c>
 8001416:	2b03      	cmp	r3, #3
 8001418:	d100      	bne.n	800141c <__aeabi_dmul+0xd4>
 800141a:	e1f3      	b.n	8001804 <__aeabi_dmul+0x4bc>
 800141c:	2b01      	cmp	r3, #1
 800141e:	d000      	beq.n	8001422 <__aeabi_dmul+0xda>
 8001420:	e118      	b.n	8001654 <__aeabi_dmul+0x30c>
 8001422:	2200      	movs	r2, #0
 8001424:	2400      	movs	r4, #0
 8001426:	2500      	movs	r5, #0
 8001428:	9b01      	ldr	r3, [sp, #4]
 800142a:	0512      	lsls	r2, r2, #20
 800142c:	4322      	orrs	r2, r4
 800142e:	07db      	lsls	r3, r3, #31
 8001430:	431a      	orrs	r2, r3
 8001432:	0028      	movs	r0, r5
 8001434:	0011      	movs	r1, r2
 8001436:	b007      	add	sp, #28
 8001438:	bcf0      	pop	{r4, r5, r6, r7}
 800143a:	46bb      	mov	fp, r7
 800143c:	46b2      	mov	sl, r6
 800143e:	46a9      	mov	r9, r5
 8001440:	46a0      	mov	r8, r4
 8001442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001444:	0025      	movs	r5, r4
 8001446:	4305      	orrs	r5, r0
 8001448:	d100      	bne.n	800144c <__aeabi_dmul+0x104>
 800144a:	e141      	b.n	80016d0 <__aeabi_dmul+0x388>
 800144c:	2c00      	cmp	r4, #0
 800144e:	d100      	bne.n	8001452 <__aeabi_dmul+0x10a>
 8001450:	e1ad      	b.n	80017ae <__aeabi_dmul+0x466>
 8001452:	0020      	movs	r0, r4
 8001454:	f000 fe02 	bl	800205c <__clzsi2>
 8001458:	0001      	movs	r1, r0
 800145a:	0002      	movs	r2, r0
 800145c:	390b      	subs	r1, #11
 800145e:	231d      	movs	r3, #29
 8001460:	0010      	movs	r0, r2
 8001462:	1a5b      	subs	r3, r3, r1
 8001464:	0031      	movs	r1, r6
 8001466:	0035      	movs	r5, r6
 8001468:	3808      	subs	r0, #8
 800146a:	4084      	lsls	r4, r0
 800146c:	40d9      	lsrs	r1, r3
 800146e:	4085      	lsls	r5, r0
 8001470:	430c      	orrs	r4, r1
 8001472:	489e      	ldr	r0, [pc, #632]	; (80016ec <__aeabi_dmul+0x3a4>)
 8001474:	1a83      	subs	r3, r0, r2
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	4699      	mov	r9, r3
 800147c:	469b      	mov	fp, r3
 800147e:	e786      	b.n	800138e <__aeabi_dmul+0x46>
 8001480:	0005      	movs	r5, r0
 8001482:	4325      	orrs	r5, r4
 8001484:	d000      	beq.n	8001488 <__aeabi_dmul+0x140>
 8001486:	e11c      	b.n	80016c2 <__aeabi_dmul+0x37a>
 8001488:	2208      	movs	r2, #8
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2302      	movs	r3, #2
 800148e:	2400      	movs	r4, #0
 8001490:	4691      	mov	r9, r2
 8001492:	469b      	mov	fp, r3
 8001494:	e77b      	b.n	800138e <__aeabi_dmul+0x46>
 8001496:	4652      	mov	r2, sl
 8001498:	4332      	orrs	r2, r6
 800149a:	d100      	bne.n	800149e <__aeabi_dmul+0x156>
 800149c:	e10a      	b.n	80016b4 <__aeabi_dmul+0x36c>
 800149e:	2e00      	cmp	r6, #0
 80014a0:	d100      	bne.n	80014a4 <__aeabi_dmul+0x15c>
 80014a2:	e176      	b.n	8001792 <__aeabi_dmul+0x44a>
 80014a4:	0030      	movs	r0, r6
 80014a6:	f000 fdd9 	bl	800205c <__clzsi2>
 80014aa:	0002      	movs	r2, r0
 80014ac:	3a0b      	subs	r2, #11
 80014ae:	231d      	movs	r3, #29
 80014b0:	0001      	movs	r1, r0
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	4652      	mov	r2, sl
 80014b6:	3908      	subs	r1, #8
 80014b8:	40da      	lsrs	r2, r3
 80014ba:	408e      	lsls	r6, r1
 80014bc:	4316      	orrs	r6, r2
 80014be:	4652      	mov	r2, sl
 80014c0:	408a      	lsls	r2, r1
 80014c2:	9b00      	ldr	r3, [sp, #0]
 80014c4:	4989      	ldr	r1, [pc, #548]	; (80016ec <__aeabi_dmul+0x3a4>)
 80014c6:	1a18      	subs	r0, r3, r0
 80014c8:	0003      	movs	r3, r0
 80014ca:	468c      	mov	ip, r1
 80014cc:	4463      	add	r3, ip
 80014ce:	2000      	movs	r0, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	e77a      	b.n	80013ca <__aeabi_dmul+0x82>
 80014d4:	2400      	movs	r4, #0
 80014d6:	2500      	movs	r5, #0
 80014d8:	4a81      	ldr	r2, [pc, #516]	; (80016e0 <__aeabi_dmul+0x398>)
 80014da:	e7a5      	b.n	8001428 <__aeabi_dmul+0xe0>
 80014dc:	0c2f      	lsrs	r7, r5, #16
 80014de:	042d      	lsls	r5, r5, #16
 80014e0:	0c2d      	lsrs	r5, r5, #16
 80014e2:	002b      	movs	r3, r5
 80014e4:	0c11      	lsrs	r1, r2, #16
 80014e6:	0412      	lsls	r2, r2, #16
 80014e8:	0c12      	lsrs	r2, r2, #16
 80014ea:	4353      	muls	r3, r2
 80014ec:	4698      	mov	r8, r3
 80014ee:	0013      	movs	r3, r2
 80014f0:	0028      	movs	r0, r5
 80014f2:	437b      	muls	r3, r7
 80014f4:	4699      	mov	r9, r3
 80014f6:	4348      	muls	r0, r1
 80014f8:	4448      	add	r0, r9
 80014fa:	4683      	mov	fp, r0
 80014fc:	4640      	mov	r0, r8
 80014fe:	000b      	movs	r3, r1
 8001500:	0c00      	lsrs	r0, r0, #16
 8001502:	4682      	mov	sl, r0
 8001504:	4658      	mov	r0, fp
 8001506:	437b      	muls	r3, r7
 8001508:	4450      	add	r0, sl
 800150a:	9302      	str	r3, [sp, #8]
 800150c:	4581      	cmp	r9, r0
 800150e:	d906      	bls.n	800151e <__aeabi_dmul+0x1d6>
 8001510:	469a      	mov	sl, r3
 8001512:	2380      	movs	r3, #128	; 0x80
 8001514:	025b      	lsls	r3, r3, #9
 8001516:	4699      	mov	r9, r3
 8001518:	44ca      	add	sl, r9
 800151a:	4653      	mov	r3, sl
 800151c:	9302      	str	r3, [sp, #8]
 800151e:	0c03      	lsrs	r3, r0, #16
 8001520:	469b      	mov	fp, r3
 8001522:	4643      	mov	r3, r8
 8001524:	041b      	lsls	r3, r3, #16
 8001526:	0400      	lsls	r0, r0, #16
 8001528:	0c1b      	lsrs	r3, r3, #16
 800152a:	4698      	mov	r8, r3
 800152c:	0003      	movs	r3, r0
 800152e:	4443      	add	r3, r8
 8001530:	9304      	str	r3, [sp, #16]
 8001532:	0c33      	lsrs	r3, r6, #16
 8001534:	4699      	mov	r9, r3
 8001536:	002b      	movs	r3, r5
 8001538:	0436      	lsls	r6, r6, #16
 800153a:	0c36      	lsrs	r6, r6, #16
 800153c:	4373      	muls	r3, r6
 800153e:	4698      	mov	r8, r3
 8001540:	0033      	movs	r3, r6
 8001542:	437b      	muls	r3, r7
 8001544:	469a      	mov	sl, r3
 8001546:	464b      	mov	r3, r9
 8001548:	435d      	muls	r5, r3
 800154a:	435f      	muls	r7, r3
 800154c:	4643      	mov	r3, r8
 800154e:	4455      	add	r5, sl
 8001550:	0c18      	lsrs	r0, r3, #16
 8001552:	1940      	adds	r0, r0, r5
 8001554:	4582      	cmp	sl, r0
 8001556:	d903      	bls.n	8001560 <__aeabi_dmul+0x218>
 8001558:	2380      	movs	r3, #128	; 0x80
 800155a:	025b      	lsls	r3, r3, #9
 800155c:	469a      	mov	sl, r3
 800155e:	4457      	add	r7, sl
 8001560:	0c05      	lsrs	r5, r0, #16
 8001562:	19eb      	adds	r3, r5, r7
 8001564:	9305      	str	r3, [sp, #20]
 8001566:	4643      	mov	r3, r8
 8001568:	041d      	lsls	r5, r3, #16
 800156a:	0c2d      	lsrs	r5, r5, #16
 800156c:	0400      	lsls	r0, r0, #16
 800156e:	1940      	adds	r0, r0, r5
 8001570:	0c25      	lsrs	r5, r4, #16
 8001572:	0424      	lsls	r4, r4, #16
 8001574:	0c24      	lsrs	r4, r4, #16
 8001576:	0027      	movs	r7, r4
 8001578:	4357      	muls	r7, r2
 800157a:	436a      	muls	r2, r5
 800157c:	4690      	mov	r8, r2
 800157e:	002a      	movs	r2, r5
 8001580:	0c3b      	lsrs	r3, r7, #16
 8001582:	469a      	mov	sl, r3
 8001584:	434a      	muls	r2, r1
 8001586:	4361      	muls	r1, r4
 8001588:	4441      	add	r1, r8
 800158a:	4451      	add	r1, sl
 800158c:	4483      	add	fp, r0
 800158e:	4588      	cmp	r8, r1
 8001590:	d903      	bls.n	800159a <__aeabi_dmul+0x252>
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	025b      	lsls	r3, r3, #9
 8001596:	4698      	mov	r8, r3
 8001598:	4442      	add	r2, r8
 800159a:	043f      	lsls	r7, r7, #16
 800159c:	0c0b      	lsrs	r3, r1, #16
 800159e:	0c3f      	lsrs	r7, r7, #16
 80015a0:	0409      	lsls	r1, r1, #16
 80015a2:	19c9      	adds	r1, r1, r7
 80015a4:	0027      	movs	r7, r4
 80015a6:	4698      	mov	r8, r3
 80015a8:	464b      	mov	r3, r9
 80015aa:	4377      	muls	r7, r6
 80015ac:	435c      	muls	r4, r3
 80015ae:	436e      	muls	r6, r5
 80015b0:	435d      	muls	r5, r3
 80015b2:	0c3b      	lsrs	r3, r7, #16
 80015b4:	4699      	mov	r9, r3
 80015b6:	19a4      	adds	r4, r4, r6
 80015b8:	444c      	add	r4, r9
 80015ba:	4442      	add	r2, r8
 80015bc:	9503      	str	r5, [sp, #12]
 80015be:	42a6      	cmp	r6, r4
 80015c0:	d904      	bls.n	80015cc <__aeabi_dmul+0x284>
 80015c2:	2380      	movs	r3, #128	; 0x80
 80015c4:	025b      	lsls	r3, r3, #9
 80015c6:	4698      	mov	r8, r3
 80015c8:	4445      	add	r5, r8
 80015ca:	9503      	str	r5, [sp, #12]
 80015cc:	9b02      	ldr	r3, [sp, #8]
 80015ce:	043f      	lsls	r7, r7, #16
 80015d0:	445b      	add	r3, fp
 80015d2:	001e      	movs	r6, r3
 80015d4:	4283      	cmp	r3, r0
 80015d6:	4180      	sbcs	r0, r0
 80015d8:	0423      	lsls	r3, r4, #16
 80015da:	4698      	mov	r8, r3
 80015dc:	9b05      	ldr	r3, [sp, #20]
 80015de:	0c3f      	lsrs	r7, r7, #16
 80015e0:	4447      	add	r7, r8
 80015e2:	4698      	mov	r8, r3
 80015e4:	1876      	adds	r6, r6, r1
 80015e6:	428e      	cmp	r6, r1
 80015e8:	4189      	sbcs	r1, r1
 80015ea:	4447      	add	r7, r8
 80015ec:	4240      	negs	r0, r0
 80015ee:	183d      	adds	r5, r7, r0
 80015f0:	46a8      	mov	r8, r5
 80015f2:	4693      	mov	fp, r2
 80015f4:	4249      	negs	r1, r1
 80015f6:	468a      	mov	sl, r1
 80015f8:	44c3      	add	fp, r8
 80015fa:	429f      	cmp	r7, r3
 80015fc:	41bf      	sbcs	r7, r7
 80015fe:	4580      	cmp	r8, r0
 8001600:	4180      	sbcs	r0, r0
 8001602:	9b03      	ldr	r3, [sp, #12]
 8001604:	44da      	add	sl, fp
 8001606:	4698      	mov	r8, r3
 8001608:	4653      	mov	r3, sl
 800160a:	4240      	negs	r0, r0
 800160c:	427f      	negs	r7, r7
 800160e:	4307      	orrs	r7, r0
 8001610:	0c24      	lsrs	r4, r4, #16
 8001612:	4593      	cmp	fp, r2
 8001614:	4192      	sbcs	r2, r2
 8001616:	458a      	cmp	sl, r1
 8001618:	4189      	sbcs	r1, r1
 800161a:	193f      	adds	r7, r7, r4
 800161c:	0ddc      	lsrs	r4, r3, #23
 800161e:	9b04      	ldr	r3, [sp, #16]
 8001620:	0275      	lsls	r5, r6, #9
 8001622:	431d      	orrs	r5, r3
 8001624:	1e68      	subs	r0, r5, #1
 8001626:	4185      	sbcs	r5, r0
 8001628:	4653      	mov	r3, sl
 800162a:	4252      	negs	r2, r2
 800162c:	4249      	negs	r1, r1
 800162e:	430a      	orrs	r2, r1
 8001630:	18bf      	adds	r7, r7, r2
 8001632:	4447      	add	r7, r8
 8001634:	0df6      	lsrs	r6, r6, #23
 8001636:	027f      	lsls	r7, r7, #9
 8001638:	4335      	orrs	r5, r6
 800163a:	025a      	lsls	r2, r3, #9
 800163c:	433c      	orrs	r4, r7
 800163e:	4315      	orrs	r5, r2
 8001640:	01fb      	lsls	r3, r7, #7
 8001642:	d400      	bmi.n	8001646 <__aeabi_dmul+0x2fe>
 8001644:	e0c1      	b.n	80017ca <__aeabi_dmul+0x482>
 8001646:	2101      	movs	r1, #1
 8001648:	086a      	lsrs	r2, r5, #1
 800164a:	400d      	ands	r5, r1
 800164c:	4315      	orrs	r5, r2
 800164e:	07e2      	lsls	r2, r4, #31
 8001650:	4315      	orrs	r5, r2
 8001652:	0864      	lsrs	r4, r4, #1
 8001654:	4926      	ldr	r1, [pc, #152]	; (80016f0 <__aeabi_dmul+0x3a8>)
 8001656:	4461      	add	r1, ip
 8001658:	2900      	cmp	r1, #0
 800165a:	dd56      	ble.n	800170a <__aeabi_dmul+0x3c2>
 800165c:	076b      	lsls	r3, r5, #29
 800165e:	d009      	beq.n	8001674 <__aeabi_dmul+0x32c>
 8001660:	220f      	movs	r2, #15
 8001662:	402a      	ands	r2, r5
 8001664:	2a04      	cmp	r2, #4
 8001666:	d005      	beq.n	8001674 <__aeabi_dmul+0x32c>
 8001668:	1d2a      	adds	r2, r5, #4
 800166a:	42aa      	cmp	r2, r5
 800166c:	41ad      	sbcs	r5, r5
 800166e:	426d      	negs	r5, r5
 8001670:	1964      	adds	r4, r4, r5
 8001672:	0015      	movs	r5, r2
 8001674:	01e3      	lsls	r3, r4, #7
 8001676:	d504      	bpl.n	8001682 <__aeabi_dmul+0x33a>
 8001678:	2180      	movs	r1, #128	; 0x80
 800167a:	4a1e      	ldr	r2, [pc, #120]	; (80016f4 <__aeabi_dmul+0x3ac>)
 800167c:	00c9      	lsls	r1, r1, #3
 800167e:	4014      	ands	r4, r2
 8001680:	4461      	add	r1, ip
 8001682:	4a1d      	ldr	r2, [pc, #116]	; (80016f8 <__aeabi_dmul+0x3b0>)
 8001684:	4291      	cmp	r1, r2
 8001686:	dd00      	ble.n	800168a <__aeabi_dmul+0x342>
 8001688:	e724      	b.n	80014d4 <__aeabi_dmul+0x18c>
 800168a:	0762      	lsls	r2, r4, #29
 800168c:	08ed      	lsrs	r5, r5, #3
 800168e:	0264      	lsls	r4, r4, #9
 8001690:	0549      	lsls	r1, r1, #21
 8001692:	4315      	orrs	r5, r2
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d4a      	lsrs	r2, r1, #21
 8001698:	e6c6      	b.n	8001428 <__aeabi_dmul+0xe0>
 800169a:	9701      	str	r7, [sp, #4]
 800169c:	e6b8      	b.n	8001410 <__aeabi_dmul+0xc8>
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <__aeabi_dmul+0x398>)
 80016a0:	2003      	movs	r0, #3
 80016a2:	4694      	mov	ip, r2
 80016a4:	4463      	add	r3, ip
 80016a6:	464a      	mov	r2, r9
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2303      	movs	r3, #3
 80016ac:	431a      	orrs	r2, r3
 80016ae:	4691      	mov	r9, r2
 80016b0:	4652      	mov	r2, sl
 80016b2:	e68a      	b.n	80013ca <__aeabi_dmul+0x82>
 80016b4:	4649      	mov	r1, r9
 80016b6:	2301      	movs	r3, #1
 80016b8:	4319      	orrs	r1, r3
 80016ba:	4689      	mov	r9, r1
 80016bc:	2600      	movs	r6, #0
 80016be:	2001      	movs	r0, #1
 80016c0:	e683      	b.n	80013ca <__aeabi_dmul+0x82>
 80016c2:	220c      	movs	r2, #12
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2303      	movs	r3, #3
 80016c8:	0005      	movs	r5, r0
 80016ca:	4691      	mov	r9, r2
 80016cc:	469b      	mov	fp, r3
 80016ce:	e65e      	b.n	800138e <__aeabi_dmul+0x46>
 80016d0:	2304      	movs	r3, #4
 80016d2:	4699      	mov	r9, r3
 80016d4:	2300      	movs	r3, #0
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	2400      	movs	r4, #0
 80016dc:	469b      	mov	fp, r3
 80016de:	e656      	b.n	800138e <__aeabi_dmul+0x46>
 80016e0:	000007ff 	.word	0x000007ff
 80016e4:	fffffc01 	.word	0xfffffc01
 80016e8:	08009450 	.word	0x08009450
 80016ec:	fffffc0d 	.word	0xfffffc0d
 80016f0:	000003ff 	.word	0x000003ff
 80016f4:	feffffff 	.word	0xfeffffff
 80016f8:	000007fe 	.word	0x000007fe
 80016fc:	2300      	movs	r3, #0
 80016fe:	2480      	movs	r4, #128	; 0x80
 8001700:	2500      	movs	r5, #0
 8001702:	4a44      	ldr	r2, [pc, #272]	; (8001814 <__aeabi_dmul+0x4cc>)
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	0324      	lsls	r4, r4, #12
 8001708:	e68e      	b.n	8001428 <__aeabi_dmul+0xe0>
 800170a:	2001      	movs	r0, #1
 800170c:	1a40      	subs	r0, r0, r1
 800170e:	2838      	cmp	r0, #56	; 0x38
 8001710:	dd00      	ble.n	8001714 <__aeabi_dmul+0x3cc>
 8001712:	e686      	b.n	8001422 <__aeabi_dmul+0xda>
 8001714:	281f      	cmp	r0, #31
 8001716:	dd5b      	ble.n	80017d0 <__aeabi_dmul+0x488>
 8001718:	221f      	movs	r2, #31
 800171a:	0023      	movs	r3, r4
 800171c:	4252      	negs	r2, r2
 800171e:	1a51      	subs	r1, r2, r1
 8001720:	40cb      	lsrs	r3, r1
 8001722:	0019      	movs	r1, r3
 8001724:	2820      	cmp	r0, #32
 8001726:	d003      	beq.n	8001730 <__aeabi_dmul+0x3e8>
 8001728:	4a3b      	ldr	r2, [pc, #236]	; (8001818 <__aeabi_dmul+0x4d0>)
 800172a:	4462      	add	r2, ip
 800172c:	4094      	lsls	r4, r2
 800172e:	4325      	orrs	r5, r4
 8001730:	1e6a      	subs	r2, r5, #1
 8001732:	4195      	sbcs	r5, r2
 8001734:	002a      	movs	r2, r5
 8001736:	430a      	orrs	r2, r1
 8001738:	2107      	movs	r1, #7
 800173a:	000d      	movs	r5, r1
 800173c:	2400      	movs	r4, #0
 800173e:	4015      	ands	r5, r2
 8001740:	4211      	tst	r1, r2
 8001742:	d05b      	beq.n	80017fc <__aeabi_dmul+0x4b4>
 8001744:	210f      	movs	r1, #15
 8001746:	2400      	movs	r4, #0
 8001748:	4011      	ands	r1, r2
 800174a:	2904      	cmp	r1, #4
 800174c:	d053      	beq.n	80017f6 <__aeabi_dmul+0x4ae>
 800174e:	1d11      	adds	r1, r2, #4
 8001750:	4291      	cmp	r1, r2
 8001752:	4192      	sbcs	r2, r2
 8001754:	4252      	negs	r2, r2
 8001756:	18a4      	adds	r4, r4, r2
 8001758:	000a      	movs	r2, r1
 800175a:	0223      	lsls	r3, r4, #8
 800175c:	d54b      	bpl.n	80017f6 <__aeabi_dmul+0x4ae>
 800175e:	2201      	movs	r2, #1
 8001760:	2400      	movs	r4, #0
 8001762:	2500      	movs	r5, #0
 8001764:	e660      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001766:	2380      	movs	r3, #128	; 0x80
 8001768:	031b      	lsls	r3, r3, #12
 800176a:	421c      	tst	r4, r3
 800176c:	d009      	beq.n	8001782 <__aeabi_dmul+0x43a>
 800176e:	421e      	tst	r6, r3
 8001770:	d107      	bne.n	8001782 <__aeabi_dmul+0x43a>
 8001772:	4333      	orrs	r3, r6
 8001774:	031c      	lsls	r4, r3, #12
 8001776:	4643      	mov	r3, r8
 8001778:	0015      	movs	r5, r2
 800177a:	0b24      	lsrs	r4, r4, #12
 800177c:	4a25      	ldr	r2, [pc, #148]	; (8001814 <__aeabi_dmul+0x4cc>)
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	e652      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001782:	2280      	movs	r2, #128	; 0x80
 8001784:	0312      	lsls	r2, r2, #12
 8001786:	4314      	orrs	r4, r2
 8001788:	0324      	lsls	r4, r4, #12
 800178a:	4a22      	ldr	r2, [pc, #136]	; (8001814 <__aeabi_dmul+0x4cc>)
 800178c:	0b24      	lsrs	r4, r4, #12
 800178e:	9701      	str	r7, [sp, #4]
 8001790:	e64a      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001792:	f000 fc63 	bl	800205c <__clzsi2>
 8001796:	0003      	movs	r3, r0
 8001798:	001a      	movs	r2, r3
 800179a:	3215      	adds	r2, #21
 800179c:	3020      	adds	r0, #32
 800179e:	2a1c      	cmp	r2, #28
 80017a0:	dc00      	bgt.n	80017a4 <__aeabi_dmul+0x45c>
 80017a2:	e684      	b.n	80014ae <__aeabi_dmul+0x166>
 80017a4:	4656      	mov	r6, sl
 80017a6:	3b08      	subs	r3, #8
 80017a8:	2200      	movs	r2, #0
 80017aa:	409e      	lsls	r6, r3
 80017ac:	e689      	b.n	80014c2 <__aeabi_dmul+0x17a>
 80017ae:	f000 fc55 	bl	800205c <__clzsi2>
 80017b2:	0001      	movs	r1, r0
 80017b4:	0002      	movs	r2, r0
 80017b6:	3115      	adds	r1, #21
 80017b8:	3220      	adds	r2, #32
 80017ba:	291c      	cmp	r1, #28
 80017bc:	dc00      	bgt.n	80017c0 <__aeabi_dmul+0x478>
 80017be:	e64e      	b.n	800145e <__aeabi_dmul+0x116>
 80017c0:	0034      	movs	r4, r6
 80017c2:	3808      	subs	r0, #8
 80017c4:	2500      	movs	r5, #0
 80017c6:	4084      	lsls	r4, r0
 80017c8:	e653      	b.n	8001472 <__aeabi_dmul+0x12a>
 80017ca:	9b00      	ldr	r3, [sp, #0]
 80017cc:	469c      	mov	ip, r3
 80017ce:	e741      	b.n	8001654 <__aeabi_dmul+0x30c>
 80017d0:	4912      	ldr	r1, [pc, #72]	; (800181c <__aeabi_dmul+0x4d4>)
 80017d2:	0022      	movs	r2, r4
 80017d4:	4461      	add	r1, ip
 80017d6:	002e      	movs	r6, r5
 80017d8:	408d      	lsls	r5, r1
 80017da:	408a      	lsls	r2, r1
 80017dc:	40c6      	lsrs	r6, r0
 80017de:	1e69      	subs	r1, r5, #1
 80017e0:	418d      	sbcs	r5, r1
 80017e2:	4332      	orrs	r2, r6
 80017e4:	432a      	orrs	r2, r5
 80017e6:	40c4      	lsrs	r4, r0
 80017e8:	0753      	lsls	r3, r2, #29
 80017ea:	d0b6      	beq.n	800175a <__aeabi_dmul+0x412>
 80017ec:	210f      	movs	r1, #15
 80017ee:	4011      	ands	r1, r2
 80017f0:	2904      	cmp	r1, #4
 80017f2:	d1ac      	bne.n	800174e <__aeabi_dmul+0x406>
 80017f4:	e7b1      	b.n	800175a <__aeabi_dmul+0x412>
 80017f6:	0765      	lsls	r5, r4, #29
 80017f8:	0264      	lsls	r4, r4, #9
 80017fa:	0b24      	lsrs	r4, r4, #12
 80017fc:	08d2      	lsrs	r2, r2, #3
 80017fe:	4315      	orrs	r5, r2
 8001800:	2200      	movs	r2, #0
 8001802:	e611      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001804:	2280      	movs	r2, #128	; 0x80
 8001806:	0312      	lsls	r2, r2, #12
 8001808:	4314      	orrs	r4, r2
 800180a:	0324      	lsls	r4, r4, #12
 800180c:	4a01      	ldr	r2, [pc, #4]	; (8001814 <__aeabi_dmul+0x4cc>)
 800180e:	0b24      	lsrs	r4, r4, #12
 8001810:	e60a      	b.n	8001428 <__aeabi_dmul+0xe0>
 8001812:	46c0      	nop			; (mov r8, r8)
 8001814:	000007ff 	.word	0x000007ff
 8001818:	0000043e 	.word	0x0000043e
 800181c:	0000041e 	.word	0x0000041e

08001820 <__aeabi_dsub>:
 8001820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001822:	4657      	mov	r7, sl
 8001824:	464e      	mov	r6, r9
 8001826:	4645      	mov	r5, r8
 8001828:	46de      	mov	lr, fp
 800182a:	0004      	movs	r4, r0
 800182c:	b5e0      	push	{r5, r6, r7, lr}
 800182e:	001f      	movs	r7, r3
 8001830:	0010      	movs	r0, r2
 8001832:	030b      	lsls	r3, r1, #12
 8001834:	0f62      	lsrs	r2, r4, #29
 8001836:	004e      	lsls	r6, r1, #1
 8001838:	0fcd      	lsrs	r5, r1, #31
 800183a:	0a5b      	lsrs	r3, r3, #9
 800183c:	0339      	lsls	r1, r7, #12
 800183e:	4313      	orrs	r3, r2
 8001840:	0a49      	lsrs	r1, r1, #9
 8001842:	00e2      	lsls	r2, r4, #3
 8001844:	0f44      	lsrs	r4, r0, #29
 8001846:	4321      	orrs	r1, r4
 8001848:	4cc2      	ldr	r4, [pc, #776]	; (8001b54 <__aeabi_dsub+0x334>)
 800184a:	4691      	mov	r9, r2
 800184c:	4692      	mov	sl, r2
 800184e:	00c0      	lsls	r0, r0, #3
 8001850:	007a      	lsls	r2, r7, #1
 8001852:	4680      	mov	r8, r0
 8001854:	0d76      	lsrs	r6, r6, #21
 8001856:	0d52      	lsrs	r2, r2, #21
 8001858:	0fff      	lsrs	r7, r7, #31
 800185a:	42a2      	cmp	r2, r4
 800185c:	d100      	bne.n	8001860 <__aeabi_dsub+0x40>
 800185e:	e0b4      	b.n	80019ca <__aeabi_dsub+0x1aa>
 8001860:	2401      	movs	r4, #1
 8001862:	4067      	eors	r7, r4
 8001864:	46bb      	mov	fp, r7
 8001866:	42bd      	cmp	r5, r7
 8001868:	d100      	bne.n	800186c <__aeabi_dsub+0x4c>
 800186a:	e088      	b.n	800197e <__aeabi_dsub+0x15e>
 800186c:	1ab4      	subs	r4, r6, r2
 800186e:	46a4      	mov	ip, r4
 8001870:	2c00      	cmp	r4, #0
 8001872:	dc00      	bgt.n	8001876 <__aeabi_dsub+0x56>
 8001874:	e0b2      	b.n	80019dc <__aeabi_dsub+0x1bc>
 8001876:	2a00      	cmp	r2, #0
 8001878:	d100      	bne.n	800187c <__aeabi_dsub+0x5c>
 800187a:	e0c5      	b.n	8001a08 <__aeabi_dsub+0x1e8>
 800187c:	4ab5      	ldr	r2, [pc, #724]	; (8001b54 <__aeabi_dsub+0x334>)
 800187e:	4296      	cmp	r6, r2
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x64>
 8001882:	e28b      	b.n	8001d9c <__aeabi_dsub+0x57c>
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	0412      	lsls	r2, r2, #16
 8001888:	4311      	orrs	r1, r2
 800188a:	4662      	mov	r2, ip
 800188c:	2a38      	cmp	r2, #56	; 0x38
 800188e:	dd00      	ble.n	8001892 <__aeabi_dsub+0x72>
 8001890:	e1a1      	b.n	8001bd6 <__aeabi_dsub+0x3b6>
 8001892:	2a1f      	cmp	r2, #31
 8001894:	dd00      	ble.n	8001898 <__aeabi_dsub+0x78>
 8001896:	e216      	b.n	8001cc6 <__aeabi_dsub+0x4a6>
 8001898:	2720      	movs	r7, #32
 800189a:	000c      	movs	r4, r1
 800189c:	1abf      	subs	r7, r7, r2
 800189e:	40bc      	lsls	r4, r7
 80018a0:	0002      	movs	r2, r0
 80018a2:	46a0      	mov	r8, r4
 80018a4:	4664      	mov	r4, ip
 80018a6:	40b8      	lsls	r0, r7
 80018a8:	40e2      	lsrs	r2, r4
 80018aa:	4644      	mov	r4, r8
 80018ac:	4314      	orrs	r4, r2
 80018ae:	0002      	movs	r2, r0
 80018b0:	1e50      	subs	r0, r2, #1
 80018b2:	4182      	sbcs	r2, r0
 80018b4:	4660      	mov	r0, ip
 80018b6:	40c1      	lsrs	r1, r0
 80018b8:	4322      	orrs	r2, r4
 80018ba:	1a5b      	subs	r3, r3, r1
 80018bc:	4649      	mov	r1, r9
 80018be:	1a8c      	subs	r4, r1, r2
 80018c0:	45a1      	cmp	r9, r4
 80018c2:	4192      	sbcs	r2, r2
 80018c4:	4252      	negs	r2, r2
 80018c6:	1a9b      	subs	r3, r3, r2
 80018c8:	4698      	mov	r8, r3
 80018ca:	4643      	mov	r3, r8
 80018cc:	021b      	lsls	r3, r3, #8
 80018ce:	d400      	bmi.n	80018d2 <__aeabi_dsub+0xb2>
 80018d0:	e117      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 80018d2:	4643      	mov	r3, r8
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	0a5b      	lsrs	r3, r3, #9
 80018d8:	4698      	mov	r8, r3
 80018da:	4643      	mov	r3, r8
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d100      	bne.n	80018e2 <__aeabi_dsub+0xc2>
 80018e0:	e16c      	b.n	8001bbc <__aeabi_dsub+0x39c>
 80018e2:	4640      	mov	r0, r8
 80018e4:	f000 fbba 	bl	800205c <__clzsi2>
 80018e8:	0002      	movs	r2, r0
 80018ea:	3a08      	subs	r2, #8
 80018ec:	2120      	movs	r1, #32
 80018ee:	0020      	movs	r0, r4
 80018f0:	4643      	mov	r3, r8
 80018f2:	1a89      	subs	r1, r1, r2
 80018f4:	4093      	lsls	r3, r2
 80018f6:	40c8      	lsrs	r0, r1
 80018f8:	4094      	lsls	r4, r2
 80018fa:	4303      	orrs	r3, r0
 80018fc:	4296      	cmp	r6, r2
 80018fe:	dd00      	ble.n	8001902 <__aeabi_dsub+0xe2>
 8001900:	e157      	b.n	8001bb2 <__aeabi_dsub+0x392>
 8001902:	1b96      	subs	r6, r2, r6
 8001904:	1c71      	adds	r1, r6, #1
 8001906:	291f      	cmp	r1, #31
 8001908:	dd00      	ble.n	800190c <__aeabi_dsub+0xec>
 800190a:	e1cb      	b.n	8001ca4 <__aeabi_dsub+0x484>
 800190c:	2220      	movs	r2, #32
 800190e:	0018      	movs	r0, r3
 8001910:	0026      	movs	r6, r4
 8001912:	1a52      	subs	r2, r2, r1
 8001914:	4094      	lsls	r4, r2
 8001916:	4090      	lsls	r0, r2
 8001918:	40ce      	lsrs	r6, r1
 800191a:	40cb      	lsrs	r3, r1
 800191c:	1e62      	subs	r2, r4, #1
 800191e:	4194      	sbcs	r4, r2
 8001920:	4330      	orrs	r0, r6
 8001922:	4698      	mov	r8, r3
 8001924:	2600      	movs	r6, #0
 8001926:	4304      	orrs	r4, r0
 8001928:	0763      	lsls	r3, r4, #29
 800192a:	d009      	beq.n	8001940 <__aeabi_dsub+0x120>
 800192c:	230f      	movs	r3, #15
 800192e:	4023      	ands	r3, r4
 8001930:	2b04      	cmp	r3, #4
 8001932:	d005      	beq.n	8001940 <__aeabi_dsub+0x120>
 8001934:	1d23      	adds	r3, r4, #4
 8001936:	42a3      	cmp	r3, r4
 8001938:	41a4      	sbcs	r4, r4
 800193a:	4264      	negs	r4, r4
 800193c:	44a0      	add	r8, r4
 800193e:	001c      	movs	r4, r3
 8001940:	4643      	mov	r3, r8
 8001942:	021b      	lsls	r3, r3, #8
 8001944:	d400      	bmi.n	8001948 <__aeabi_dsub+0x128>
 8001946:	e0df      	b.n	8001b08 <__aeabi_dsub+0x2e8>
 8001948:	4b82      	ldr	r3, [pc, #520]	; (8001b54 <__aeabi_dsub+0x334>)
 800194a:	3601      	adds	r6, #1
 800194c:	429e      	cmp	r6, r3
 800194e:	d100      	bne.n	8001952 <__aeabi_dsub+0x132>
 8001950:	e0fb      	b.n	8001b4a <__aeabi_dsub+0x32a>
 8001952:	4642      	mov	r2, r8
 8001954:	4b80      	ldr	r3, [pc, #512]	; (8001b58 <__aeabi_dsub+0x338>)
 8001956:	08e4      	lsrs	r4, r4, #3
 8001958:	401a      	ands	r2, r3
 800195a:	0013      	movs	r3, r2
 800195c:	0571      	lsls	r1, r6, #21
 800195e:	0752      	lsls	r2, r2, #29
 8001960:	025b      	lsls	r3, r3, #9
 8001962:	4322      	orrs	r2, r4
 8001964:	0b1b      	lsrs	r3, r3, #12
 8001966:	0d49      	lsrs	r1, r1, #21
 8001968:	0509      	lsls	r1, r1, #20
 800196a:	07ed      	lsls	r5, r5, #31
 800196c:	4319      	orrs	r1, r3
 800196e:	4329      	orrs	r1, r5
 8001970:	0010      	movs	r0, r2
 8001972:	bcf0      	pop	{r4, r5, r6, r7}
 8001974:	46bb      	mov	fp, r7
 8001976:	46b2      	mov	sl, r6
 8001978:	46a9      	mov	r9, r5
 800197a:	46a0      	mov	r8, r4
 800197c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800197e:	1ab4      	subs	r4, r6, r2
 8001980:	46a4      	mov	ip, r4
 8001982:	2c00      	cmp	r4, #0
 8001984:	dd58      	ble.n	8001a38 <__aeabi_dsub+0x218>
 8001986:	2a00      	cmp	r2, #0
 8001988:	d100      	bne.n	800198c <__aeabi_dsub+0x16c>
 800198a:	e09e      	b.n	8001aca <__aeabi_dsub+0x2aa>
 800198c:	4a71      	ldr	r2, [pc, #452]	; (8001b54 <__aeabi_dsub+0x334>)
 800198e:	4296      	cmp	r6, r2
 8001990:	d100      	bne.n	8001994 <__aeabi_dsub+0x174>
 8001992:	e13b      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001994:	2280      	movs	r2, #128	; 0x80
 8001996:	0412      	lsls	r2, r2, #16
 8001998:	4311      	orrs	r1, r2
 800199a:	4662      	mov	r2, ip
 800199c:	2a38      	cmp	r2, #56	; 0x38
 800199e:	dd00      	ble.n	80019a2 <__aeabi_dsub+0x182>
 80019a0:	e0c1      	b.n	8001b26 <__aeabi_dsub+0x306>
 80019a2:	2a1f      	cmp	r2, #31
 80019a4:	dc00      	bgt.n	80019a8 <__aeabi_dsub+0x188>
 80019a6:	e1bb      	b.n	8001d20 <__aeabi_dsub+0x500>
 80019a8:	000c      	movs	r4, r1
 80019aa:	3a20      	subs	r2, #32
 80019ac:	40d4      	lsrs	r4, r2
 80019ae:	0022      	movs	r2, r4
 80019b0:	4664      	mov	r4, ip
 80019b2:	2c20      	cmp	r4, #32
 80019b4:	d004      	beq.n	80019c0 <__aeabi_dsub+0x1a0>
 80019b6:	2740      	movs	r7, #64	; 0x40
 80019b8:	1b3f      	subs	r7, r7, r4
 80019ba:	40b9      	lsls	r1, r7
 80019bc:	4308      	orrs	r0, r1
 80019be:	4680      	mov	r8, r0
 80019c0:	4644      	mov	r4, r8
 80019c2:	1e61      	subs	r1, r4, #1
 80019c4:	418c      	sbcs	r4, r1
 80019c6:	4314      	orrs	r4, r2
 80019c8:	e0b1      	b.n	8001b2e <__aeabi_dsub+0x30e>
 80019ca:	000c      	movs	r4, r1
 80019cc:	4304      	orrs	r4, r0
 80019ce:	d02a      	beq.n	8001a26 <__aeabi_dsub+0x206>
 80019d0:	46bb      	mov	fp, r7
 80019d2:	42bd      	cmp	r5, r7
 80019d4:	d02d      	beq.n	8001a32 <__aeabi_dsub+0x212>
 80019d6:	4c61      	ldr	r4, [pc, #388]	; (8001b5c <__aeabi_dsub+0x33c>)
 80019d8:	46a4      	mov	ip, r4
 80019da:	44b4      	add	ip, r6
 80019dc:	4664      	mov	r4, ip
 80019de:	2c00      	cmp	r4, #0
 80019e0:	d05c      	beq.n	8001a9c <__aeabi_dsub+0x27c>
 80019e2:	1b94      	subs	r4, r2, r6
 80019e4:	46a4      	mov	ip, r4
 80019e6:	2e00      	cmp	r6, #0
 80019e8:	d000      	beq.n	80019ec <__aeabi_dsub+0x1cc>
 80019ea:	e115      	b.n	8001c18 <__aeabi_dsub+0x3f8>
 80019ec:	464d      	mov	r5, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	d100      	bne.n	80019f4 <__aeabi_dsub+0x1d4>
 80019f2:	e1c3      	b.n	8001d7c <__aeabi_dsub+0x55c>
 80019f4:	1e65      	subs	r5, r4, #1
 80019f6:	2c01      	cmp	r4, #1
 80019f8:	d100      	bne.n	80019fc <__aeabi_dsub+0x1dc>
 80019fa:	e20c      	b.n	8001e16 <__aeabi_dsub+0x5f6>
 80019fc:	4e55      	ldr	r6, [pc, #340]	; (8001b54 <__aeabi_dsub+0x334>)
 80019fe:	42b4      	cmp	r4, r6
 8001a00:	d100      	bne.n	8001a04 <__aeabi_dsub+0x1e4>
 8001a02:	e1f8      	b.n	8001df6 <__aeabi_dsub+0x5d6>
 8001a04:	46ac      	mov	ip, r5
 8001a06:	e10e      	b.n	8001c26 <__aeabi_dsub+0x406>
 8001a08:	000a      	movs	r2, r1
 8001a0a:	4302      	orrs	r2, r0
 8001a0c:	d100      	bne.n	8001a10 <__aeabi_dsub+0x1f0>
 8001a0e:	e136      	b.n	8001c7e <__aeabi_dsub+0x45e>
 8001a10:	0022      	movs	r2, r4
 8001a12:	3a01      	subs	r2, #1
 8001a14:	2c01      	cmp	r4, #1
 8001a16:	d100      	bne.n	8001a1a <__aeabi_dsub+0x1fa>
 8001a18:	e1c6      	b.n	8001da8 <__aeabi_dsub+0x588>
 8001a1a:	4c4e      	ldr	r4, [pc, #312]	; (8001b54 <__aeabi_dsub+0x334>)
 8001a1c:	45a4      	cmp	ip, r4
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x202>
 8001a20:	e0f4      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001a22:	4694      	mov	ip, r2
 8001a24:	e731      	b.n	800188a <__aeabi_dsub+0x6a>
 8001a26:	2401      	movs	r4, #1
 8001a28:	4067      	eors	r7, r4
 8001a2a:	46bb      	mov	fp, r7
 8001a2c:	42bd      	cmp	r5, r7
 8001a2e:	d000      	beq.n	8001a32 <__aeabi_dsub+0x212>
 8001a30:	e71c      	b.n	800186c <__aeabi_dsub+0x4c>
 8001a32:	4c4a      	ldr	r4, [pc, #296]	; (8001b5c <__aeabi_dsub+0x33c>)
 8001a34:	46a4      	mov	ip, r4
 8001a36:	44b4      	add	ip, r6
 8001a38:	4664      	mov	r4, ip
 8001a3a:	2c00      	cmp	r4, #0
 8001a3c:	d100      	bne.n	8001a40 <__aeabi_dsub+0x220>
 8001a3e:	e0cf      	b.n	8001be0 <__aeabi_dsub+0x3c0>
 8001a40:	1b94      	subs	r4, r2, r6
 8001a42:	46a4      	mov	ip, r4
 8001a44:	2e00      	cmp	r6, #0
 8001a46:	d100      	bne.n	8001a4a <__aeabi_dsub+0x22a>
 8001a48:	e15c      	b.n	8001d04 <__aeabi_dsub+0x4e4>
 8001a4a:	4e42      	ldr	r6, [pc, #264]	; (8001b54 <__aeabi_dsub+0x334>)
 8001a4c:	42b2      	cmp	r2, r6
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dsub+0x232>
 8001a50:	e1ec      	b.n	8001e2c <__aeabi_dsub+0x60c>
 8001a52:	2680      	movs	r6, #128	; 0x80
 8001a54:	0436      	lsls	r6, r6, #16
 8001a56:	4333      	orrs	r3, r6
 8001a58:	4664      	mov	r4, ip
 8001a5a:	2c38      	cmp	r4, #56	; 0x38
 8001a5c:	dd00      	ble.n	8001a60 <__aeabi_dsub+0x240>
 8001a5e:	e1b3      	b.n	8001dc8 <__aeabi_dsub+0x5a8>
 8001a60:	2c1f      	cmp	r4, #31
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x246>
 8001a64:	e238      	b.n	8001ed8 <__aeabi_dsub+0x6b8>
 8001a66:	2620      	movs	r6, #32
 8001a68:	1b36      	subs	r6, r6, r4
 8001a6a:	001c      	movs	r4, r3
 8001a6c:	40b4      	lsls	r4, r6
 8001a6e:	464f      	mov	r7, r9
 8001a70:	46a0      	mov	r8, r4
 8001a72:	4664      	mov	r4, ip
 8001a74:	40e7      	lsrs	r7, r4
 8001a76:	4644      	mov	r4, r8
 8001a78:	433c      	orrs	r4, r7
 8001a7a:	464f      	mov	r7, r9
 8001a7c:	40b7      	lsls	r7, r6
 8001a7e:	003e      	movs	r6, r7
 8001a80:	1e77      	subs	r7, r6, #1
 8001a82:	41be      	sbcs	r6, r7
 8001a84:	4334      	orrs	r4, r6
 8001a86:	4666      	mov	r6, ip
 8001a88:	40f3      	lsrs	r3, r6
 8001a8a:	18c9      	adds	r1, r1, r3
 8001a8c:	1824      	adds	r4, r4, r0
 8001a8e:	4284      	cmp	r4, r0
 8001a90:	419b      	sbcs	r3, r3
 8001a92:	425b      	negs	r3, r3
 8001a94:	4698      	mov	r8, r3
 8001a96:	0016      	movs	r6, r2
 8001a98:	4488      	add	r8, r1
 8001a9a:	e04e      	b.n	8001b3a <__aeabi_dsub+0x31a>
 8001a9c:	4a30      	ldr	r2, [pc, #192]	; (8001b60 <__aeabi_dsub+0x340>)
 8001a9e:	1c74      	adds	r4, r6, #1
 8001aa0:	4214      	tst	r4, r2
 8001aa2:	d000      	beq.n	8001aa6 <__aeabi_dsub+0x286>
 8001aa4:	e0d6      	b.n	8001c54 <__aeabi_dsub+0x434>
 8001aa6:	464a      	mov	r2, r9
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	2e00      	cmp	r6, #0
 8001aac:	d000      	beq.n	8001ab0 <__aeabi_dsub+0x290>
 8001aae:	e15b      	b.n	8001d68 <__aeabi_dsub+0x548>
 8001ab0:	2a00      	cmp	r2, #0
 8001ab2:	d100      	bne.n	8001ab6 <__aeabi_dsub+0x296>
 8001ab4:	e1a5      	b.n	8001e02 <__aeabi_dsub+0x5e2>
 8001ab6:	000a      	movs	r2, r1
 8001ab8:	4302      	orrs	r2, r0
 8001aba:	d000      	beq.n	8001abe <__aeabi_dsub+0x29e>
 8001abc:	e1bb      	b.n	8001e36 <__aeabi_dsub+0x616>
 8001abe:	464a      	mov	r2, r9
 8001ac0:	0759      	lsls	r1, r3, #29
 8001ac2:	08d2      	lsrs	r2, r2, #3
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	08db      	lsrs	r3, r3, #3
 8001ac8:	e027      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001aca:	000a      	movs	r2, r1
 8001acc:	4302      	orrs	r2, r0
 8001ace:	d100      	bne.n	8001ad2 <__aeabi_dsub+0x2b2>
 8001ad0:	e174      	b.n	8001dbc <__aeabi_dsub+0x59c>
 8001ad2:	0022      	movs	r2, r4
 8001ad4:	3a01      	subs	r2, #1
 8001ad6:	2c01      	cmp	r4, #1
 8001ad8:	d005      	beq.n	8001ae6 <__aeabi_dsub+0x2c6>
 8001ada:	4c1e      	ldr	r4, [pc, #120]	; (8001b54 <__aeabi_dsub+0x334>)
 8001adc:	45a4      	cmp	ip, r4
 8001ade:	d100      	bne.n	8001ae2 <__aeabi_dsub+0x2c2>
 8001ae0:	e094      	b.n	8001c0c <__aeabi_dsub+0x3ec>
 8001ae2:	4694      	mov	ip, r2
 8001ae4:	e759      	b.n	800199a <__aeabi_dsub+0x17a>
 8001ae6:	4448      	add	r0, r9
 8001ae8:	4548      	cmp	r0, r9
 8001aea:	4192      	sbcs	r2, r2
 8001aec:	185b      	adds	r3, r3, r1
 8001aee:	4698      	mov	r8, r3
 8001af0:	0004      	movs	r4, r0
 8001af2:	4252      	negs	r2, r2
 8001af4:	4490      	add	r8, r2
 8001af6:	4643      	mov	r3, r8
 8001af8:	2602      	movs	r6, #2
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	d500      	bpl.n	8001b00 <__aeabi_dsub+0x2e0>
 8001afe:	e0c4      	b.n	8001c8a <__aeabi_dsub+0x46a>
 8001b00:	3e01      	subs	r6, #1
 8001b02:	0763      	lsls	r3, r4, #29
 8001b04:	d000      	beq.n	8001b08 <__aeabi_dsub+0x2e8>
 8001b06:	e711      	b.n	800192c <__aeabi_dsub+0x10c>
 8001b08:	4643      	mov	r3, r8
 8001b0a:	46b4      	mov	ip, r6
 8001b0c:	0759      	lsls	r1, r3, #29
 8001b0e:	08e2      	lsrs	r2, r4, #3
 8001b10:	430a      	orrs	r2, r1
 8001b12:	08db      	lsrs	r3, r3, #3
 8001b14:	490f      	ldr	r1, [pc, #60]	; (8001b54 <__aeabi_dsub+0x334>)
 8001b16:	458c      	cmp	ip, r1
 8001b18:	d040      	beq.n	8001b9c <__aeabi_dsub+0x37c>
 8001b1a:	4661      	mov	r1, ip
 8001b1c:	031b      	lsls	r3, r3, #12
 8001b1e:	0549      	lsls	r1, r1, #21
 8001b20:	0b1b      	lsrs	r3, r3, #12
 8001b22:	0d49      	lsrs	r1, r1, #21
 8001b24:	e720      	b.n	8001968 <__aeabi_dsub+0x148>
 8001b26:	4301      	orrs	r1, r0
 8001b28:	000c      	movs	r4, r1
 8001b2a:	1e61      	subs	r1, r4, #1
 8001b2c:	418c      	sbcs	r4, r1
 8001b2e:	444c      	add	r4, r9
 8001b30:	454c      	cmp	r4, r9
 8001b32:	4192      	sbcs	r2, r2
 8001b34:	4252      	negs	r2, r2
 8001b36:	4690      	mov	r8, r2
 8001b38:	4498      	add	r8, r3
 8001b3a:	4643      	mov	r3, r8
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	d5e0      	bpl.n	8001b02 <__aeabi_dsub+0x2e2>
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <__aeabi_dsub+0x334>)
 8001b42:	3601      	adds	r6, #1
 8001b44:	429e      	cmp	r6, r3
 8001b46:	d000      	beq.n	8001b4a <__aeabi_dsub+0x32a>
 8001b48:	e09f      	b.n	8001c8a <__aeabi_dsub+0x46a>
 8001b4a:	0031      	movs	r1, r6
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	e70a      	b.n	8001968 <__aeabi_dsub+0x148>
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	000007ff 	.word	0x000007ff
 8001b58:	ff7fffff 	.word	0xff7fffff
 8001b5c:	fffff801 	.word	0xfffff801
 8001b60:	000007fe 	.word	0x000007fe
 8001b64:	2a00      	cmp	r2, #0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dsub+0x34a>
 8001b68:	e160      	b.n	8001e2c <__aeabi_dsub+0x60c>
 8001b6a:	000a      	movs	r2, r1
 8001b6c:	4302      	orrs	r2, r0
 8001b6e:	d04d      	beq.n	8001c0c <__aeabi_dsub+0x3ec>
 8001b70:	464a      	mov	r2, r9
 8001b72:	075c      	lsls	r4, r3, #29
 8001b74:	08d2      	lsrs	r2, r2, #3
 8001b76:	4322      	orrs	r2, r4
 8001b78:	2480      	movs	r4, #128	; 0x80
 8001b7a:	08db      	lsrs	r3, r3, #3
 8001b7c:	0324      	lsls	r4, r4, #12
 8001b7e:	4223      	tst	r3, r4
 8001b80:	d007      	beq.n	8001b92 <__aeabi_dsub+0x372>
 8001b82:	08ce      	lsrs	r6, r1, #3
 8001b84:	4226      	tst	r6, r4
 8001b86:	d104      	bne.n	8001b92 <__aeabi_dsub+0x372>
 8001b88:	465d      	mov	r5, fp
 8001b8a:	0033      	movs	r3, r6
 8001b8c:	08c2      	lsrs	r2, r0, #3
 8001b8e:	0749      	lsls	r1, r1, #29
 8001b90:	430a      	orrs	r2, r1
 8001b92:	0f51      	lsrs	r1, r2, #29
 8001b94:	00d2      	lsls	r2, r2, #3
 8001b96:	08d2      	lsrs	r2, r2, #3
 8001b98:	0749      	lsls	r1, r1, #29
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	0011      	movs	r1, r2
 8001b9e:	4319      	orrs	r1, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x384>
 8001ba2:	e1c8      	b.n	8001f36 <__aeabi_dsub+0x716>
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	0309      	lsls	r1, r1, #12
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	031b      	lsls	r3, r3, #12
 8001bac:	49d5      	ldr	r1, [pc, #852]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001bae:	0b1b      	lsrs	r3, r3, #12
 8001bb0:	e6da      	b.n	8001968 <__aeabi_dsub+0x148>
 8001bb2:	49d5      	ldr	r1, [pc, #852]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001bb4:	1ab6      	subs	r6, r6, r2
 8001bb6:	400b      	ands	r3, r1
 8001bb8:	4698      	mov	r8, r3
 8001bba:	e6b5      	b.n	8001928 <__aeabi_dsub+0x108>
 8001bbc:	0020      	movs	r0, r4
 8001bbe:	f000 fa4d 	bl	800205c <__clzsi2>
 8001bc2:	0002      	movs	r2, r0
 8001bc4:	3218      	adds	r2, #24
 8001bc6:	2a1f      	cmp	r2, #31
 8001bc8:	dc00      	bgt.n	8001bcc <__aeabi_dsub+0x3ac>
 8001bca:	e68f      	b.n	80018ec <__aeabi_dsub+0xcc>
 8001bcc:	0023      	movs	r3, r4
 8001bce:	3808      	subs	r0, #8
 8001bd0:	4083      	lsls	r3, r0
 8001bd2:	2400      	movs	r4, #0
 8001bd4:	e692      	b.n	80018fc <__aeabi_dsub+0xdc>
 8001bd6:	4308      	orrs	r0, r1
 8001bd8:	0002      	movs	r2, r0
 8001bda:	1e50      	subs	r0, r2, #1
 8001bdc:	4182      	sbcs	r2, r0
 8001bde:	e66d      	b.n	80018bc <__aeabi_dsub+0x9c>
 8001be0:	4cca      	ldr	r4, [pc, #808]	; (8001f0c <__aeabi_dsub+0x6ec>)
 8001be2:	1c72      	adds	r2, r6, #1
 8001be4:	4222      	tst	r2, r4
 8001be6:	d000      	beq.n	8001bea <__aeabi_dsub+0x3ca>
 8001be8:	e0ad      	b.n	8001d46 <__aeabi_dsub+0x526>
 8001bea:	464a      	mov	r2, r9
 8001bec:	431a      	orrs	r2, r3
 8001bee:	2e00      	cmp	r6, #0
 8001bf0:	d1b8      	bne.n	8001b64 <__aeabi_dsub+0x344>
 8001bf2:	2a00      	cmp	r2, #0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x3d8>
 8001bf6:	e158      	b.n	8001eaa <__aeabi_dsub+0x68a>
 8001bf8:	000a      	movs	r2, r1
 8001bfa:	4302      	orrs	r2, r0
 8001bfc:	d000      	beq.n	8001c00 <__aeabi_dsub+0x3e0>
 8001bfe:	e159      	b.n	8001eb4 <__aeabi_dsub+0x694>
 8001c00:	464a      	mov	r2, r9
 8001c02:	0759      	lsls	r1, r3, #29
 8001c04:	08d2      	lsrs	r2, r2, #3
 8001c06:	430a      	orrs	r2, r1
 8001c08:	08db      	lsrs	r3, r3, #3
 8001c0a:	e786      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001c0c:	464a      	mov	r2, r9
 8001c0e:	0759      	lsls	r1, r3, #29
 8001c10:	08d2      	lsrs	r2, r2, #3
 8001c12:	430a      	orrs	r2, r1
 8001c14:	08db      	lsrs	r3, r3, #3
 8001c16:	e7c1      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001c18:	4dba      	ldr	r5, [pc, #744]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001c1a:	42aa      	cmp	r2, r5
 8001c1c:	d100      	bne.n	8001c20 <__aeabi_dsub+0x400>
 8001c1e:	e11e      	b.n	8001e5e <__aeabi_dsub+0x63e>
 8001c20:	2580      	movs	r5, #128	; 0x80
 8001c22:	042d      	lsls	r5, r5, #16
 8001c24:	432b      	orrs	r3, r5
 8001c26:	4664      	mov	r4, ip
 8001c28:	2c38      	cmp	r4, #56	; 0x38
 8001c2a:	dc5d      	bgt.n	8001ce8 <__aeabi_dsub+0x4c8>
 8001c2c:	2c1f      	cmp	r4, #31
 8001c2e:	dd00      	ble.n	8001c32 <__aeabi_dsub+0x412>
 8001c30:	e0d0      	b.n	8001dd4 <__aeabi_dsub+0x5b4>
 8001c32:	2520      	movs	r5, #32
 8001c34:	4667      	mov	r7, ip
 8001c36:	1b2d      	subs	r5, r5, r4
 8001c38:	464e      	mov	r6, r9
 8001c3a:	001c      	movs	r4, r3
 8001c3c:	40fe      	lsrs	r6, r7
 8001c3e:	40ac      	lsls	r4, r5
 8001c40:	4334      	orrs	r4, r6
 8001c42:	464e      	mov	r6, r9
 8001c44:	40ae      	lsls	r6, r5
 8001c46:	0035      	movs	r5, r6
 8001c48:	40fb      	lsrs	r3, r7
 8001c4a:	1e6e      	subs	r6, r5, #1
 8001c4c:	41b5      	sbcs	r5, r6
 8001c4e:	1ac9      	subs	r1, r1, r3
 8001c50:	432c      	orrs	r4, r5
 8001c52:	e04e      	b.n	8001cf2 <__aeabi_dsub+0x4d2>
 8001c54:	464a      	mov	r2, r9
 8001c56:	1a14      	subs	r4, r2, r0
 8001c58:	45a1      	cmp	r9, r4
 8001c5a:	4192      	sbcs	r2, r2
 8001c5c:	4252      	negs	r2, r2
 8001c5e:	4690      	mov	r8, r2
 8001c60:	1a5f      	subs	r7, r3, r1
 8001c62:	003a      	movs	r2, r7
 8001c64:	4647      	mov	r7, r8
 8001c66:	1bd2      	subs	r2, r2, r7
 8001c68:	4690      	mov	r8, r2
 8001c6a:	0212      	lsls	r2, r2, #8
 8001c6c:	d500      	bpl.n	8001c70 <__aeabi_dsub+0x450>
 8001c6e:	e08b      	b.n	8001d88 <__aeabi_dsub+0x568>
 8001c70:	4642      	mov	r2, r8
 8001c72:	4322      	orrs	r2, r4
 8001c74:	d000      	beq.n	8001c78 <__aeabi_dsub+0x458>
 8001c76:	e630      	b.n	80018da <__aeabi_dsub+0xba>
 8001c78:	2300      	movs	r3, #0
 8001c7a:	2500      	movs	r5, #0
 8001c7c:	e74d      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001c7e:	464a      	mov	r2, r9
 8001c80:	0759      	lsls	r1, r3, #29
 8001c82:	08d2      	lsrs	r2, r2, #3
 8001c84:	430a      	orrs	r2, r1
 8001c86:	08db      	lsrs	r3, r3, #3
 8001c88:	e744      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001c8a:	4642      	mov	r2, r8
 8001c8c:	4b9e      	ldr	r3, [pc, #632]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001c8e:	0861      	lsrs	r1, r4, #1
 8001c90:	401a      	ands	r2, r3
 8001c92:	0013      	movs	r3, r2
 8001c94:	2201      	movs	r2, #1
 8001c96:	4014      	ands	r4, r2
 8001c98:	430c      	orrs	r4, r1
 8001c9a:	07da      	lsls	r2, r3, #31
 8001c9c:	085b      	lsrs	r3, r3, #1
 8001c9e:	4698      	mov	r8, r3
 8001ca0:	4314      	orrs	r4, r2
 8001ca2:	e641      	b.n	8001928 <__aeabi_dsub+0x108>
 8001ca4:	001a      	movs	r2, r3
 8001ca6:	3e1f      	subs	r6, #31
 8001ca8:	40f2      	lsrs	r2, r6
 8001caa:	0016      	movs	r6, r2
 8001cac:	2920      	cmp	r1, #32
 8001cae:	d003      	beq.n	8001cb8 <__aeabi_dsub+0x498>
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	1a51      	subs	r1, r2, r1
 8001cb4:	408b      	lsls	r3, r1
 8001cb6:	431c      	orrs	r4, r3
 8001cb8:	1e62      	subs	r2, r4, #1
 8001cba:	4194      	sbcs	r4, r2
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	4334      	orrs	r4, r6
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	2600      	movs	r6, #0
 8001cc4:	e71d      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001cc6:	000c      	movs	r4, r1
 8001cc8:	3a20      	subs	r2, #32
 8001cca:	40d4      	lsrs	r4, r2
 8001ccc:	0022      	movs	r2, r4
 8001cce:	4664      	mov	r4, ip
 8001cd0:	2c20      	cmp	r4, #32
 8001cd2:	d004      	beq.n	8001cde <__aeabi_dsub+0x4be>
 8001cd4:	2740      	movs	r7, #64	; 0x40
 8001cd6:	1b3f      	subs	r7, r7, r4
 8001cd8:	40b9      	lsls	r1, r7
 8001cda:	4308      	orrs	r0, r1
 8001cdc:	4680      	mov	r8, r0
 8001cde:	4644      	mov	r4, r8
 8001ce0:	1e61      	subs	r1, r4, #1
 8001ce2:	418c      	sbcs	r4, r1
 8001ce4:	4322      	orrs	r2, r4
 8001ce6:	e5e9      	b.n	80018bc <__aeabi_dsub+0x9c>
 8001ce8:	464c      	mov	r4, r9
 8001cea:	4323      	orrs	r3, r4
 8001cec:	001c      	movs	r4, r3
 8001cee:	1e63      	subs	r3, r4, #1
 8001cf0:	419c      	sbcs	r4, r3
 8001cf2:	1b04      	subs	r4, r0, r4
 8001cf4:	42a0      	cmp	r0, r4
 8001cf6:	419b      	sbcs	r3, r3
 8001cf8:	425b      	negs	r3, r3
 8001cfa:	1acb      	subs	r3, r1, r3
 8001cfc:	4698      	mov	r8, r3
 8001cfe:	465d      	mov	r5, fp
 8001d00:	0016      	movs	r6, r2
 8001d02:	e5e2      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001d04:	464e      	mov	r6, r9
 8001d06:	431e      	orrs	r6, r3
 8001d08:	d100      	bne.n	8001d0c <__aeabi_dsub+0x4ec>
 8001d0a:	e0ae      	b.n	8001e6a <__aeabi_dsub+0x64a>
 8001d0c:	1e66      	subs	r6, r4, #1
 8001d0e:	2c01      	cmp	r4, #1
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x4f4>
 8001d12:	e0fd      	b.n	8001f10 <__aeabi_dsub+0x6f0>
 8001d14:	4f7b      	ldr	r7, [pc, #492]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001d16:	42bc      	cmp	r4, r7
 8001d18:	d100      	bne.n	8001d1c <__aeabi_dsub+0x4fc>
 8001d1a:	e107      	b.n	8001f2c <__aeabi_dsub+0x70c>
 8001d1c:	46b4      	mov	ip, r6
 8001d1e:	e69b      	b.n	8001a58 <__aeabi_dsub+0x238>
 8001d20:	4664      	mov	r4, ip
 8001d22:	2220      	movs	r2, #32
 8001d24:	1b12      	subs	r2, r2, r4
 8001d26:	000c      	movs	r4, r1
 8001d28:	4094      	lsls	r4, r2
 8001d2a:	0007      	movs	r7, r0
 8001d2c:	4090      	lsls	r0, r2
 8001d2e:	46a0      	mov	r8, r4
 8001d30:	4664      	mov	r4, ip
 8001d32:	1e42      	subs	r2, r0, #1
 8001d34:	4190      	sbcs	r0, r2
 8001d36:	4662      	mov	r2, ip
 8001d38:	40e7      	lsrs	r7, r4
 8001d3a:	4644      	mov	r4, r8
 8001d3c:	40d1      	lsrs	r1, r2
 8001d3e:	433c      	orrs	r4, r7
 8001d40:	4304      	orrs	r4, r0
 8001d42:	185b      	adds	r3, r3, r1
 8001d44:	e6f3      	b.n	8001b2e <__aeabi_dsub+0x30e>
 8001d46:	4c6f      	ldr	r4, [pc, #444]	; (8001f04 <__aeabi_dsub+0x6e4>)
 8001d48:	42a2      	cmp	r2, r4
 8001d4a:	d100      	bne.n	8001d4e <__aeabi_dsub+0x52e>
 8001d4c:	e0d5      	b.n	8001efa <__aeabi_dsub+0x6da>
 8001d4e:	4448      	add	r0, r9
 8001d50:	185b      	adds	r3, r3, r1
 8001d52:	4548      	cmp	r0, r9
 8001d54:	4189      	sbcs	r1, r1
 8001d56:	4249      	negs	r1, r1
 8001d58:	185b      	adds	r3, r3, r1
 8001d5a:	07dc      	lsls	r4, r3, #31
 8001d5c:	0840      	lsrs	r0, r0, #1
 8001d5e:	085b      	lsrs	r3, r3, #1
 8001d60:	4698      	mov	r8, r3
 8001d62:	0016      	movs	r6, r2
 8001d64:	4304      	orrs	r4, r0
 8001d66:	e6cc      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001d68:	2a00      	cmp	r2, #0
 8001d6a:	d000      	beq.n	8001d6e <__aeabi_dsub+0x54e>
 8001d6c:	e082      	b.n	8001e74 <__aeabi_dsub+0x654>
 8001d6e:	000a      	movs	r2, r1
 8001d70:	4302      	orrs	r2, r0
 8001d72:	d140      	bne.n	8001df6 <__aeabi_dsub+0x5d6>
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	2500      	movs	r5, #0
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	e713      	b.n	8001ba4 <__aeabi_dsub+0x384>
 8001d7c:	074b      	lsls	r3, r1, #29
 8001d7e:	08c2      	lsrs	r2, r0, #3
 8001d80:	431a      	orrs	r2, r3
 8001d82:	465d      	mov	r5, fp
 8001d84:	08cb      	lsrs	r3, r1, #3
 8001d86:	e6c5      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001d88:	464a      	mov	r2, r9
 8001d8a:	1a84      	subs	r4, r0, r2
 8001d8c:	42a0      	cmp	r0, r4
 8001d8e:	4192      	sbcs	r2, r2
 8001d90:	1acb      	subs	r3, r1, r3
 8001d92:	4252      	negs	r2, r2
 8001d94:	1a9b      	subs	r3, r3, r2
 8001d96:	4698      	mov	r8, r3
 8001d98:	465d      	mov	r5, fp
 8001d9a:	e59e      	b.n	80018da <__aeabi_dsub+0xba>
 8001d9c:	464a      	mov	r2, r9
 8001d9e:	0759      	lsls	r1, r3, #29
 8001da0:	08d2      	lsrs	r2, r2, #3
 8001da2:	430a      	orrs	r2, r1
 8001da4:	08db      	lsrs	r3, r3, #3
 8001da6:	e6f9      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001da8:	464a      	mov	r2, r9
 8001daa:	1a14      	subs	r4, r2, r0
 8001dac:	45a1      	cmp	r9, r4
 8001dae:	4192      	sbcs	r2, r2
 8001db0:	1a5b      	subs	r3, r3, r1
 8001db2:	4252      	negs	r2, r2
 8001db4:	1a9b      	subs	r3, r3, r2
 8001db6:	4698      	mov	r8, r3
 8001db8:	2601      	movs	r6, #1
 8001dba:	e586      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001dbc:	464a      	mov	r2, r9
 8001dbe:	0759      	lsls	r1, r3, #29
 8001dc0:	08d2      	lsrs	r2, r2, #3
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	e6a5      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001dc8:	464c      	mov	r4, r9
 8001dca:	4323      	orrs	r3, r4
 8001dcc:	001c      	movs	r4, r3
 8001dce:	1e63      	subs	r3, r4, #1
 8001dd0:	419c      	sbcs	r4, r3
 8001dd2:	e65b      	b.n	8001a8c <__aeabi_dsub+0x26c>
 8001dd4:	4665      	mov	r5, ip
 8001dd6:	001e      	movs	r6, r3
 8001dd8:	3d20      	subs	r5, #32
 8001dda:	40ee      	lsrs	r6, r5
 8001ddc:	2c20      	cmp	r4, #32
 8001dde:	d005      	beq.n	8001dec <__aeabi_dsub+0x5cc>
 8001de0:	2540      	movs	r5, #64	; 0x40
 8001de2:	1b2d      	subs	r5, r5, r4
 8001de4:	40ab      	lsls	r3, r5
 8001de6:	464c      	mov	r4, r9
 8001de8:	431c      	orrs	r4, r3
 8001dea:	46a2      	mov	sl, r4
 8001dec:	4654      	mov	r4, sl
 8001dee:	1e63      	subs	r3, r4, #1
 8001df0:	419c      	sbcs	r4, r3
 8001df2:	4334      	orrs	r4, r6
 8001df4:	e77d      	b.n	8001cf2 <__aeabi_dsub+0x4d2>
 8001df6:	074b      	lsls	r3, r1, #29
 8001df8:	08c2      	lsrs	r2, r0, #3
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	465d      	mov	r5, fp
 8001dfe:	08cb      	lsrs	r3, r1, #3
 8001e00:	e6cc      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e02:	000a      	movs	r2, r1
 8001e04:	4302      	orrs	r2, r0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x5ea>
 8001e08:	e736      	b.n	8001c78 <__aeabi_dsub+0x458>
 8001e0a:	074b      	lsls	r3, r1, #29
 8001e0c:	08c2      	lsrs	r2, r0, #3
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	465d      	mov	r5, fp
 8001e12:	08cb      	lsrs	r3, r1, #3
 8001e14:	e681      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001e16:	464a      	mov	r2, r9
 8001e18:	1a84      	subs	r4, r0, r2
 8001e1a:	42a0      	cmp	r0, r4
 8001e1c:	4192      	sbcs	r2, r2
 8001e1e:	1acb      	subs	r3, r1, r3
 8001e20:	4252      	negs	r2, r2
 8001e22:	1a9b      	subs	r3, r3, r2
 8001e24:	4698      	mov	r8, r3
 8001e26:	465d      	mov	r5, fp
 8001e28:	2601      	movs	r6, #1
 8001e2a:	e54e      	b.n	80018ca <__aeabi_dsub+0xaa>
 8001e2c:	074b      	lsls	r3, r1, #29
 8001e2e:	08c2      	lsrs	r2, r0, #3
 8001e30:	431a      	orrs	r2, r3
 8001e32:	08cb      	lsrs	r3, r1, #3
 8001e34:	e6b2      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e36:	464a      	mov	r2, r9
 8001e38:	1a14      	subs	r4, r2, r0
 8001e3a:	45a1      	cmp	r9, r4
 8001e3c:	4192      	sbcs	r2, r2
 8001e3e:	1a5f      	subs	r7, r3, r1
 8001e40:	4252      	negs	r2, r2
 8001e42:	1aba      	subs	r2, r7, r2
 8001e44:	4690      	mov	r8, r2
 8001e46:	0212      	lsls	r2, r2, #8
 8001e48:	d56b      	bpl.n	8001f22 <__aeabi_dsub+0x702>
 8001e4a:	464a      	mov	r2, r9
 8001e4c:	1a84      	subs	r4, r0, r2
 8001e4e:	42a0      	cmp	r0, r4
 8001e50:	4192      	sbcs	r2, r2
 8001e52:	1acb      	subs	r3, r1, r3
 8001e54:	4252      	negs	r2, r2
 8001e56:	1a9b      	subs	r3, r3, r2
 8001e58:	4698      	mov	r8, r3
 8001e5a:	465d      	mov	r5, fp
 8001e5c:	e564      	b.n	8001928 <__aeabi_dsub+0x108>
 8001e5e:	074b      	lsls	r3, r1, #29
 8001e60:	08c2      	lsrs	r2, r0, #3
 8001e62:	431a      	orrs	r2, r3
 8001e64:	465d      	mov	r5, fp
 8001e66:	08cb      	lsrs	r3, r1, #3
 8001e68:	e698      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001e6a:	074b      	lsls	r3, r1, #29
 8001e6c:	08c2      	lsrs	r2, r0, #3
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	08cb      	lsrs	r3, r1, #3
 8001e72:	e64f      	b.n	8001b14 <__aeabi_dsub+0x2f4>
 8001e74:	000a      	movs	r2, r1
 8001e76:	4302      	orrs	r2, r0
 8001e78:	d090      	beq.n	8001d9c <__aeabi_dsub+0x57c>
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	075c      	lsls	r4, r3, #29
 8001e7e:	08d2      	lsrs	r2, r2, #3
 8001e80:	4314      	orrs	r4, r2
 8001e82:	2280      	movs	r2, #128	; 0x80
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	0312      	lsls	r2, r2, #12
 8001e88:	4213      	tst	r3, r2
 8001e8a:	d008      	beq.n	8001e9e <__aeabi_dsub+0x67e>
 8001e8c:	08ce      	lsrs	r6, r1, #3
 8001e8e:	4216      	tst	r6, r2
 8001e90:	d105      	bne.n	8001e9e <__aeabi_dsub+0x67e>
 8001e92:	08c0      	lsrs	r0, r0, #3
 8001e94:	0749      	lsls	r1, r1, #29
 8001e96:	4308      	orrs	r0, r1
 8001e98:	0004      	movs	r4, r0
 8001e9a:	465d      	mov	r5, fp
 8001e9c:	0033      	movs	r3, r6
 8001e9e:	0f61      	lsrs	r1, r4, #29
 8001ea0:	00e2      	lsls	r2, r4, #3
 8001ea2:	0749      	lsls	r1, r1, #29
 8001ea4:	08d2      	lsrs	r2, r2, #3
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	e678      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001eaa:	074b      	lsls	r3, r1, #29
 8001eac:	08c2      	lsrs	r2, r0, #3
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	08cb      	lsrs	r3, r1, #3
 8001eb2:	e632      	b.n	8001b1a <__aeabi_dsub+0x2fa>
 8001eb4:	4448      	add	r0, r9
 8001eb6:	185b      	adds	r3, r3, r1
 8001eb8:	4548      	cmp	r0, r9
 8001eba:	4192      	sbcs	r2, r2
 8001ebc:	4698      	mov	r8, r3
 8001ebe:	4252      	negs	r2, r2
 8001ec0:	4490      	add	r8, r2
 8001ec2:	4643      	mov	r3, r8
 8001ec4:	0004      	movs	r4, r0
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	d400      	bmi.n	8001ecc <__aeabi_dsub+0x6ac>
 8001eca:	e61a      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001ecc:	4642      	mov	r2, r8
 8001ece:	4b0e      	ldr	r3, [pc, #56]	; (8001f08 <__aeabi_dsub+0x6e8>)
 8001ed0:	2601      	movs	r6, #1
 8001ed2:	401a      	ands	r2, r3
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	e614      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001ed8:	4666      	mov	r6, ip
 8001eda:	001f      	movs	r7, r3
 8001edc:	3e20      	subs	r6, #32
 8001ede:	40f7      	lsrs	r7, r6
 8001ee0:	2c20      	cmp	r4, #32
 8001ee2:	d005      	beq.n	8001ef0 <__aeabi_dsub+0x6d0>
 8001ee4:	2640      	movs	r6, #64	; 0x40
 8001ee6:	1b36      	subs	r6, r6, r4
 8001ee8:	40b3      	lsls	r3, r6
 8001eea:	464c      	mov	r4, r9
 8001eec:	431c      	orrs	r4, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	4654      	mov	r4, sl
 8001ef2:	1e63      	subs	r3, r4, #1
 8001ef4:	419c      	sbcs	r4, r3
 8001ef6:	433c      	orrs	r4, r7
 8001ef8:	e5c8      	b.n	8001a8c <__aeabi_dsub+0x26c>
 8001efa:	0011      	movs	r1, r2
 8001efc:	2300      	movs	r3, #0
 8001efe:	2200      	movs	r2, #0
 8001f00:	e532      	b.n	8001968 <__aeabi_dsub+0x148>
 8001f02:	46c0      	nop			; (mov r8, r8)
 8001f04:	000007ff 	.word	0x000007ff
 8001f08:	ff7fffff 	.word	0xff7fffff
 8001f0c:	000007fe 	.word	0x000007fe
 8001f10:	464a      	mov	r2, r9
 8001f12:	1814      	adds	r4, r2, r0
 8001f14:	4284      	cmp	r4, r0
 8001f16:	4192      	sbcs	r2, r2
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	4698      	mov	r8, r3
 8001f1c:	4252      	negs	r2, r2
 8001f1e:	4490      	add	r8, r2
 8001f20:	e5e9      	b.n	8001af6 <__aeabi_dsub+0x2d6>
 8001f22:	4642      	mov	r2, r8
 8001f24:	4322      	orrs	r2, r4
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x70a>
 8001f28:	e6a6      	b.n	8001c78 <__aeabi_dsub+0x458>
 8001f2a:	e5ea      	b.n	8001b02 <__aeabi_dsub+0x2e2>
 8001f2c:	074b      	lsls	r3, r1, #29
 8001f2e:	08c2      	lsrs	r2, r0, #3
 8001f30:	431a      	orrs	r2, r3
 8001f32:	08cb      	lsrs	r3, r1, #3
 8001f34:	e632      	b.n	8001b9c <__aeabi_dsub+0x37c>
 8001f36:	2200      	movs	r2, #0
 8001f38:	4901      	ldr	r1, [pc, #4]	; (8001f40 <__aeabi_dsub+0x720>)
 8001f3a:	0013      	movs	r3, r2
 8001f3c:	e514      	b.n	8001968 <__aeabi_dsub+0x148>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	000007ff 	.word	0x000007ff

08001f44 <__aeabi_d2iz>:
 8001f44:	000a      	movs	r2, r1
 8001f46:	b530      	push	{r4, r5, lr}
 8001f48:	4c13      	ldr	r4, [pc, #76]	; (8001f98 <__aeabi_d2iz+0x54>)
 8001f4a:	0053      	lsls	r3, r2, #1
 8001f4c:	0309      	lsls	r1, r1, #12
 8001f4e:	0005      	movs	r5, r0
 8001f50:	0b09      	lsrs	r1, r1, #12
 8001f52:	2000      	movs	r0, #0
 8001f54:	0d5b      	lsrs	r3, r3, #21
 8001f56:	0fd2      	lsrs	r2, r2, #31
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	dd04      	ble.n	8001f66 <__aeabi_d2iz+0x22>
 8001f5c:	480f      	ldr	r0, [pc, #60]	; (8001f9c <__aeabi_d2iz+0x58>)
 8001f5e:	4283      	cmp	r3, r0
 8001f60:	dd02      	ble.n	8001f68 <__aeabi_d2iz+0x24>
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <__aeabi_d2iz+0x5c>)
 8001f64:	18d0      	adds	r0, r2, r3
 8001f66:	bd30      	pop	{r4, r5, pc}
 8001f68:	2080      	movs	r0, #128	; 0x80
 8001f6a:	0340      	lsls	r0, r0, #13
 8001f6c:	4301      	orrs	r1, r0
 8001f6e:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <__aeabi_d2iz+0x60>)
 8001f70:	1ac0      	subs	r0, r0, r3
 8001f72:	281f      	cmp	r0, #31
 8001f74:	dd08      	ble.n	8001f88 <__aeabi_d2iz+0x44>
 8001f76:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <__aeabi_d2iz+0x64>)
 8001f78:	1ac3      	subs	r3, r0, r3
 8001f7a:	40d9      	lsrs	r1, r3
 8001f7c:	000b      	movs	r3, r1
 8001f7e:	4258      	negs	r0, r3
 8001f80:	2a00      	cmp	r2, #0
 8001f82:	d1f0      	bne.n	8001f66 <__aeabi_d2iz+0x22>
 8001f84:	0018      	movs	r0, r3
 8001f86:	e7ee      	b.n	8001f66 <__aeabi_d2iz+0x22>
 8001f88:	4c08      	ldr	r4, [pc, #32]	; (8001fac <__aeabi_d2iz+0x68>)
 8001f8a:	40c5      	lsrs	r5, r0
 8001f8c:	46a4      	mov	ip, r4
 8001f8e:	4463      	add	r3, ip
 8001f90:	4099      	lsls	r1, r3
 8001f92:	000b      	movs	r3, r1
 8001f94:	432b      	orrs	r3, r5
 8001f96:	e7f2      	b.n	8001f7e <__aeabi_d2iz+0x3a>
 8001f98:	000003fe 	.word	0x000003fe
 8001f9c:	0000041d 	.word	0x0000041d
 8001fa0:	7fffffff 	.word	0x7fffffff
 8001fa4:	00000433 	.word	0x00000433
 8001fa8:	00000413 	.word	0x00000413
 8001fac:	fffffbed 	.word	0xfffffbed

08001fb0 <__aeabi_i2d>:
 8001fb0:	b570      	push	{r4, r5, r6, lr}
 8001fb2:	2800      	cmp	r0, #0
 8001fb4:	d016      	beq.n	8001fe4 <__aeabi_i2d+0x34>
 8001fb6:	17c3      	asrs	r3, r0, #31
 8001fb8:	18c5      	adds	r5, r0, r3
 8001fba:	405d      	eors	r5, r3
 8001fbc:	0fc4      	lsrs	r4, r0, #31
 8001fbe:	0028      	movs	r0, r5
 8001fc0:	f000 f84c 	bl	800205c <__clzsi2>
 8001fc4:	4a11      	ldr	r2, [pc, #68]	; (800200c <__aeabi_i2d+0x5c>)
 8001fc6:	1a12      	subs	r2, r2, r0
 8001fc8:	280a      	cmp	r0, #10
 8001fca:	dc16      	bgt.n	8001ffa <__aeabi_i2d+0x4a>
 8001fcc:	0003      	movs	r3, r0
 8001fce:	002e      	movs	r6, r5
 8001fd0:	3315      	adds	r3, #21
 8001fd2:	409e      	lsls	r6, r3
 8001fd4:	230b      	movs	r3, #11
 8001fd6:	1a18      	subs	r0, r3, r0
 8001fd8:	40c5      	lsrs	r5, r0
 8001fda:	0553      	lsls	r3, r2, #21
 8001fdc:	032d      	lsls	r5, r5, #12
 8001fde:	0b2d      	lsrs	r5, r5, #12
 8001fe0:	0d5b      	lsrs	r3, r3, #21
 8001fe2:	e003      	b.n	8001fec <__aeabi_i2d+0x3c>
 8001fe4:	2400      	movs	r4, #0
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	2500      	movs	r5, #0
 8001fea:	2600      	movs	r6, #0
 8001fec:	051b      	lsls	r3, r3, #20
 8001fee:	432b      	orrs	r3, r5
 8001ff0:	07e4      	lsls	r4, r4, #31
 8001ff2:	4323      	orrs	r3, r4
 8001ff4:	0030      	movs	r0, r6
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	bd70      	pop	{r4, r5, r6, pc}
 8001ffa:	380b      	subs	r0, #11
 8001ffc:	4085      	lsls	r5, r0
 8001ffe:	0553      	lsls	r3, r2, #21
 8002000:	032d      	lsls	r5, r5, #12
 8002002:	2600      	movs	r6, #0
 8002004:	0b2d      	lsrs	r5, r5, #12
 8002006:	0d5b      	lsrs	r3, r3, #21
 8002008:	e7f0      	b.n	8001fec <__aeabi_i2d+0x3c>
 800200a:	46c0      	nop			; (mov r8, r8)
 800200c:	0000041e 	.word	0x0000041e

08002010 <__aeabi_ui2d>:
 8002010:	b510      	push	{r4, lr}
 8002012:	1e04      	subs	r4, r0, #0
 8002014:	d010      	beq.n	8002038 <__aeabi_ui2d+0x28>
 8002016:	f000 f821 	bl	800205c <__clzsi2>
 800201a:	4b0f      	ldr	r3, [pc, #60]	; (8002058 <__aeabi_ui2d+0x48>)
 800201c:	1a1b      	subs	r3, r3, r0
 800201e:	280a      	cmp	r0, #10
 8002020:	dc11      	bgt.n	8002046 <__aeabi_ui2d+0x36>
 8002022:	220b      	movs	r2, #11
 8002024:	0021      	movs	r1, r4
 8002026:	1a12      	subs	r2, r2, r0
 8002028:	40d1      	lsrs	r1, r2
 800202a:	3015      	adds	r0, #21
 800202c:	030a      	lsls	r2, r1, #12
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4084      	lsls	r4, r0
 8002032:	0b12      	lsrs	r2, r2, #12
 8002034:	0d5b      	lsrs	r3, r3, #21
 8002036:	e001      	b.n	800203c <__aeabi_ui2d+0x2c>
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	051b      	lsls	r3, r3, #20
 800203e:	4313      	orrs	r3, r2
 8002040:	0020      	movs	r0, r4
 8002042:	0019      	movs	r1, r3
 8002044:	bd10      	pop	{r4, pc}
 8002046:	0022      	movs	r2, r4
 8002048:	380b      	subs	r0, #11
 800204a:	4082      	lsls	r2, r0
 800204c:	055b      	lsls	r3, r3, #21
 800204e:	0312      	lsls	r2, r2, #12
 8002050:	2400      	movs	r4, #0
 8002052:	0b12      	lsrs	r2, r2, #12
 8002054:	0d5b      	lsrs	r3, r3, #21
 8002056:	e7f1      	b.n	800203c <__aeabi_ui2d+0x2c>
 8002058:	0000041e 	.word	0x0000041e

0800205c <__clzsi2>:
 800205c:	211c      	movs	r1, #28
 800205e:	2301      	movs	r3, #1
 8002060:	041b      	lsls	r3, r3, #16
 8002062:	4298      	cmp	r0, r3
 8002064:	d301      	bcc.n	800206a <__clzsi2+0xe>
 8002066:	0c00      	lsrs	r0, r0, #16
 8002068:	3910      	subs	r1, #16
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	4298      	cmp	r0, r3
 800206e:	d301      	bcc.n	8002074 <__clzsi2+0x18>
 8002070:	0a00      	lsrs	r0, r0, #8
 8002072:	3908      	subs	r1, #8
 8002074:	091b      	lsrs	r3, r3, #4
 8002076:	4298      	cmp	r0, r3
 8002078:	d301      	bcc.n	800207e <__clzsi2+0x22>
 800207a:	0900      	lsrs	r0, r0, #4
 800207c:	3904      	subs	r1, #4
 800207e:	a202      	add	r2, pc, #8	; (adr r2, 8002088 <__clzsi2+0x2c>)
 8002080:	5c10      	ldrb	r0, [r2, r0]
 8002082:	1840      	adds	r0, r0, r1
 8002084:	4770      	bx	lr
 8002086:	46c0      	nop			; (mov r8, r8)
 8002088:	02020304 	.word	0x02020304
 800208c:	01010101 	.word	0x01010101
	...

08002098 <display_on>:
#include "display.h"

static ticks = 0;

void display_on(bool on)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	0002      	movs	r2, r0
 80020a0:	1dfb      	adds	r3, r7, #7
 80020a2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_ON_Pin, on);
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781a      	ldrb	r2, [r3, #0]
 80020a8:	2380      	movs	r3, #128	; 0x80
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4812      	ldr	r0, [pc, #72]	; (80020f8 <display_on+0x60>)
 80020ae:	0019      	movs	r1, r3
 80020b0:	f004 fbb5 	bl	800681e <HAL_GPIO_WritePin>

	display_d1(on);
 80020b4:	1dfb      	adds	r3, r7, #7
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 f81f 	bl	80020fc <display_d1>
	display_d2(on);
 80020be:	1dfb      	adds	r3, r7, #7
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	0018      	movs	r0, r3
 80020c4:	f000 f82d 	bl	8002122 <display_d2>
	display_d3(on);
 80020c8:	1dfb      	adds	r3, r7, #7
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 f83b 	bl	8002148 <display_d3>
	display_d4(on);
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 f84a 	bl	8002170 <display_d4>
	display_d5(on);
 80020dc:	1dfb      	adds	r3, r7, #7
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	0018      	movs	r0, r3
 80020e2:	f000 f859 	bl	8002198 <display_d5>

	display_number(-1, false);
 80020e6:	2100      	movs	r1, #0
 80020e8:	20ff      	movs	r0, #255	; 0xff
 80020ea:	f000 f907 	bl	80022fc <display_number>
}
 80020ee:	46c0      	nop			; (mov r8, r8)
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b002      	add	sp, #8
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	50000800 	.word	0x50000800

080020fc <display_d1>:

void display_d1(bool on)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	0002      	movs	r2, r0
 8002104:	1dfb      	adds	r3, r7, #7
 8002106:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D1_Pin, on);
 8002108:	1dfb      	adds	r3, r7, #7
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	0119      	lsls	r1, r3, #4
 8002110:	23a0      	movs	r3, #160	; 0xa0
 8002112:	05db      	lsls	r3, r3, #23
 8002114:	0018      	movs	r0, r3
 8002116:	f004 fb82 	bl	800681e <HAL_GPIO_WritePin>
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b002      	add	sp, #8
 8002120:	bd80      	pop	{r7, pc}

08002122 <display_d2>:

void display_d2(bool on)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	0002      	movs	r2, r0
 800212a:	1dfb      	adds	r3, r7, #7
 800212c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_D2_Pin, on);
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781a      	ldrb	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	00d9      	lsls	r1, r3, #3
 8002136:	23a0      	movs	r3, #160	; 0xa0
 8002138:	05db      	lsls	r3, r3, #23
 800213a:	0018      	movs	r0, r3
 800213c:	f004 fb6f 	bl	800681e <HAL_GPIO_WritePin>
}
 8002140:	46c0      	nop			; (mov r8, r8)
 8002142:	46bd      	mov	sp, r7
 8002144:	b002      	add	sp, #8
 8002146:	bd80      	pop	{r7, pc}

08002148 <display_d3>:

void display_d3(bool on)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	0002      	movs	r2, r0
 8002150:	1dfb      	adds	r3, r7, #7
 8002152:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, DISPLAY_D3_Pin, on);
 8002154:	1dfb      	adds	r3, r7, #7
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4803      	ldr	r0, [pc, #12]	; (800216c <display_d3+0x24>)
 800215e:	0019      	movs	r1, r3
 8002160:	f004 fb5d 	bl	800681e <HAL_GPIO_WritePin>
}
 8002164:	46c0      	nop			; (mov r8, r8)
 8002166:	46bd      	mov	sp, r7
 8002168:	b002      	add	sp, #8
 800216a:	bd80      	pop	{r7, pc}
 800216c:	50000c00 	.word	0x50000c00

08002170 <display_d4>:

void display_d4(bool on)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
 8002176:	0002      	movs	r2, r0
 8002178:	1dfb      	adds	r3, r7, #7
 800217a:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, DISPLAY_D4_Pin, on);
 800217c:	1dfb      	adds	r3, r7, #7
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	005b      	lsls	r3, r3, #1
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <display_d4+0x24>)
 8002186:	0019      	movs	r1, r3
 8002188:	f004 fb49 	bl	800681e <HAL_GPIO_WritePin>
}
 800218c:	46c0      	nop			; (mov r8, r8)
 800218e:	46bd      	mov	sp, r7
 8002190:	b002      	add	sp, #8
 8002192:	bd80      	pop	{r7, pc}
 8002194:	50000c00 	.word	0x50000c00

08002198 <display_d5>:

void display_d5(bool on)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	0002      	movs	r2, r0
 80021a0:	1dfb      	adds	r3, r7, #7
 80021a2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_D5_Pin, on);
 80021a4:	1dfb      	adds	r3, r7, #7
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <display_d5+0x24>)
 80021aa:	001a      	movs	r2, r3
 80021ac:	2180      	movs	r1, #128	; 0x80
 80021ae:	f004 fb36 	bl	800681e <HAL_GPIO_WritePin>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b002      	add	sp, #8
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	46c0      	nop			; (mov r8, r8)
 80021bc:	50000800 	.word	0x50000800

080021c0 <display_a>:

void display_a(bool on)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	0002      	movs	r2, r0
 80021c8:	1dfb      	adds	r3, r7, #7
 80021ca:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISPLAY_A_Pin, on);
 80021cc:	1dfb      	adds	r3, r7, #7
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	4804      	ldr	r0, [pc, #16]	; (80021e4 <display_a+0x24>)
 80021d2:	001a      	movs	r2, r3
 80021d4:	2140      	movs	r1, #64	; 0x40
 80021d6:	f004 fb22 	bl	800681e <HAL_GPIO_WritePin>
}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b002      	add	sp, #8
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	50000800 	.word	0x50000800

080021e8 <display_b>:

void display_b(bool on)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	0002      	movs	r2, r0
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_B_Pin, on);
 80021f4:	1dfb      	adds	r3, r7, #7
 80021f6:	781a      	ldrb	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	0099      	lsls	r1, r3, #2
 80021fc:	23a0      	movs	r3, #160	; 0xa0
 80021fe:	05db      	lsls	r3, r3, #23
 8002200:	0018      	movs	r0, r3
 8002202:	f004 fb0c 	bl	800681e <HAL_GPIO_WritePin>
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b002      	add	sp, #8
 800220c:	bd80      	pop	{r7, pc}

0800220e <display_c>:

void display_c(bool on)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	0002      	movs	r2, r0
 8002216:	1dfb      	adds	r3, r7, #7
 8002218:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_C_Pin, on);
 800221a:	1dfb      	adds	r3, r7, #7
 800221c:	781a      	ldrb	r2, [r3, #0]
 800221e:	2380      	movs	r3, #128	; 0x80
 8002220:	0059      	lsls	r1, r3, #1
 8002222:	23a0      	movs	r3, #160	; 0xa0
 8002224:	05db      	lsls	r3, r3, #23
 8002226:	0018      	movs	r0, r3
 8002228:	f004 faf9 	bl	800681e <HAL_GPIO_WritePin>
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}

08002234 <display_d>:

void display_d(bool on)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	0002      	movs	r2, r0
 800223c:	1dfb      	adds	r3, r7, #7
 800223e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_D_Pin, on);
 8002240:	1dfb      	adds	r3, r7, #7
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	2380      	movs	r3, #128	; 0x80
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	4803      	ldr	r0, [pc, #12]	; (8002258 <display_d+0x24>)
 800224a:	0019      	movs	r1, r3
 800224c:	f004 fae7 	bl	800681e <HAL_GPIO_WritePin>
}
 8002250:	46c0      	nop			; (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}
 8002258:	50000400 	.word	0x50000400

0800225c <display_e>:

void display_e(bool on)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	0002      	movs	r2, r0
 8002264:	1dfb      	adds	r3, r7, #7
 8002266:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_E_Pin, on);
 8002268:	1dfb      	adds	r3, r7, #7
 800226a:	781a      	ldrb	r2, [r3, #0]
 800226c:	2380      	movs	r3, #128	; 0x80
 800226e:	01db      	lsls	r3, r3, #7
 8002270:	4803      	ldr	r0, [pc, #12]	; (8002280 <display_e+0x24>)
 8002272:	0019      	movs	r1, r3
 8002274:	f004 fad3 	bl	800681e <HAL_GPIO_WritePin>
}
 8002278:	46c0      	nop			; (mov r8, r8)
 800227a:	46bd      	mov	sp, r7
 800227c:	b002      	add	sp, #8
 800227e:	bd80      	pop	{r7, pc}
 8002280:	50000400 	.word	0x50000400

08002284 <display_f>:

void display_f(bool on)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	0002      	movs	r2, r0
 800228c:	1dfb      	adds	r3, r7, #7
 800228e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_F_Pin, on);
 8002290:	1dfb      	adds	r3, r7, #7
 8002292:	781a      	ldrb	r2, [r3, #0]
 8002294:	2380      	movs	r3, #128	; 0x80
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	4803      	ldr	r0, [pc, #12]	; (80022a8 <display_f+0x24>)
 800229a:	0019      	movs	r1, r3
 800229c:	f004 fabf 	bl	800681e <HAL_GPIO_WritePin>
}
 80022a0:	46c0      	nop			; (mov r8, r8)
 80022a2:	46bd      	mov	sp, r7
 80022a4:	b002      	add	sp, #8
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	50000400 	.word	0x50000400

080022ac <display_g>:

void display_g(bool on)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b082      	sub	sp, #8
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	0002      	movs	r2, r0
 80022b4:	1dfb      	adds	r3, r7, #7
 80022b6:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, DISPLAY_G_Pin, on);
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	015b      	lsls	r3, r3, #5
 80022c0:	4803      	ldr	r0, [pc, #12]	; (80022d0 <display_g+0x24>)
 80022c2:	0019      	movs	r1, r3
 80022c4:	f004 faab 	bl	800681e <HAL_GPIO_WritePin>
}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	b002      	add	sp, #8
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	50000400 	.word	0x50000400

080022d4 <display_dp>:

void display_dp(bool on)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	0002      	movs	r2, r0
 80022dc:	1dfb      	adds	r3, r7, #7
 80022de:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, DISPLAY_DP_Pin, on);
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	781a      	ldrb	r2, [r3, #0]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	0219      	lsls	r1, r3, #8
 80022e8:	23a0      	movs	r3, #160	; 0xa0
 80022ea:	05db      	lsls	r3, r3, #23
 80022ec:	0018      	movs	r0, r3
 80022ee:	f004 fa96 	bl	800681e <HAL_GPIO_WritePin>
}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	46bd      	mov	sp, r7
 80022f6:	b002      	add	sp, #8
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <display_number>:

void display_number(uint8_t number, bool dot)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	0002      	movs	r2, r0
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	1dbb      	adds	r3, r7, #6
 800230a:	1c0a      	adds	r2, r1, #0
 800230c:	701a      	strb	r2, [r3, #0]
	switch (number)
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b0f      	cmp	r3, #15
 8002314:	d900      	bls.n	8002318 <display_number+0x1c>
 8002316:	e164      	b.n	80025e2 <display_number+0x2e6>
 8002318:	009a      	lsls	r2, r3, #2
 800231a:	4bc1      	ldr	r3, [pc, #772]	; (8002620 <display_number+0x324>)
 800231c:	18d3      	adds	r3, r2, r3
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	469f      	mov	pc, r3
	{
		case 0:
			display_a(true);
 8002322:	2001      	movs	r0, #1
 8002324:	f7ff ff4c 	bl	80021c0 <display_a>
			display_b(true);
 8002328:	2001      	movs	r0, #1
 800232a:	f7ff ff5d 	bl	80021e8 <display_b>
			display_c(true);
 800232e:	2001      	movs	r0, #1
 8002330:	f7ff ff6d 	bl	800220e <display_c>
			display_d(true);
 8002334:	2001      	movs	r0, #1
 8002336:	f7ff ff7d 	bl	8002234 <display_d>
			display_e(true);
 800233a:	2001      	movs	r0, #1
 800233c:	f7ff ff8e 	bl	800225c <display_e>
			display_f(true);
 8002340:	2001      	movs	r0, #1
 8002342:	f7ff ff9f 	bl	8002284 <display_f>
			display_g(false);
 8002346:	2000      	movs	r0, #0
 8002348:	f7ff ffb0 	bl	80022ac <display_g>
			break;
 800234c:	e15f      	b.n	800260e <display_number+0x312>
		case 1:
			display_a(false);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff ff36 	bl	80021c0 <display_a>
			display_b(true);
 8002354:	2001      	movs	r0, #1
 8002356:	f7ff ff47 	bl	80021e8 <display_b>
			display_c(true);
 800235a:	2001      	movs	r0, #1
 800235c:	f7ff ff57 	bl	800220e <display_c>
			display_d(false);
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff ff67 	bl	8002234 <display_d>
			display_e(false);
 8002366:	2000      	movs	r0, #0
 8002368:	f7ff ff78 	bl	800225c <display_e>
			display_f(false);
 800236c:	2000      	movs	r0, #0
 800236e:	f7ff ff89 	bl	8002284 <display_f>
			display_g(false);
 8002372:	2000      	movs	r0, #0
 8002374:	f7ff ff9a 	bl	80022ac <display_g>
			break;
 8002378:	e149      	b.n	800260e <display_number+0x312>
		case 2:
			display_a(true);
 800237a:	2001      	movs	r0, #1
 800237c:	f7ff ff20 	bl	80021c0 <display_a>
			display_b(true);
 8002380:	2001      	movs	r0, #1
 8002382:	f7ff ff31 	bl	80021e8 <display_b>
			display_c(false);
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff ff41 	bl	800220e <display_c>
			display_d(true);
 800238c:	2001      	movs	r0, #1
 800238e:	f7ff ff51 	bl	8002234 <display_d>
			display_e(true);
 8002392:	2001      	movs	r0, #1
 8002394:	f7ff ff62 	bl	800225c <display_e>
			display_f(false);
 8002398:	2000      	movs	r0, #0
 800239a:	f7ff ff73 	bl	8002284 <display_f>
			display_g(true);
 800239e:	2001      	movs	r0, #1
 80023a0:	f7ff ff84 	bl	80022ac <display_g>
			break;
 80023a4:	e133      	b.n	800260e <display_number+0x312>
		case 3:
			display_a(true);
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff ff0a 	bl	80021c0 <display_a>
			display_b(true);
 80023ac:	2001      	movs	r0, #1
 80023ae:	f7ff ff1b 	bl	80021e8 <display_b>
			display_c(true);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7ff ff2b 	bl	800220e <display_c>
			display_d(true);
 80023b8:	2001      	movs	r0, #1
 80023ba:	f7ff ff3b 	bl	8002234 <display_d>
			display_e(false);
 80023be:	2000      	movs	r0, #0
 80023c0:	f7ff ff4c 	bl	800225c <display_e>
			display_f(false);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f7ff ff5d 	bl	8002284 <display_f>
			display_g(true);
 80023ca:	2001      	movs	r0, #1
 80023cc:	f7ff ff6e 	bl	80022ac <display_g>
			break;
 80023d0:	e11d      	b.n	800260e <display_number+0x312>
		case 4:
			display_a(false);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7ff fef4 	bl	80021c0 <display_a>
			display_b(true);
 80023d8:	2001      	movs	r0, #1
 80023da:	f7ff ff05 	bl	80021e8 <display_b>
			display_c(true);
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff ff15 	bl	800220e <display_c>
			display_d(false);
 80023e4:	2000      	movs	r0, #0
 80023e6:	f7ff ff25 	bl	8002234 <display_d>
			display_e(false);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7ff ff36 	bl	800225c <display_e>
			display_f(true);
 80023f0:	2001      	movs	r0, #1
 80023f2:	f7ff ff47 	bl	8002284 <display_f>
			display_g(true);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f7ff ff58 	bl	80022ac <display_g>
			break;
 80023fc:	e107      	b.n	800260e <display_number+0x312>
		case 5:
			display_a(true);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7ff fede 	bl	80021c0 <display_a>
			display_b(false);
 8002404:	2000      	movs	r0, #0
 8002406:	f7ff feef 	bl	80021e8 <display_b>
			display_c(true);
 800240a:	2001      	movs	r0, #1
 800240c:	f7ff feff 	bl	800220e <display_c>
			display_d(true);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff ff0f 	bl	8002234 <display_d>
			display_e(false);
 8002416:	2000      	movs	r0, #0
 8002418:	f7ff ff20 	bl	800225c <display_e>
			display_f(true);
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff ff31 	bl	8002284 <display_f>
			display_g(true);
 8002422:	2001      	movs	r0, #1
 8002424:	f7ff ff42 	bl	80022ac <display_g>
			break;
 8002428:	e0f1      	b.n	800260e <display_number+0x312>
		case 6:
			display_a(true);
 800242a:	2001      	movs	r0, #1
 800242c:	f7ff fec8 	bl	80021c0 <display_a>
			display_b(false);
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fed9 	bl	80021e8 <display_b>
			display_c(true);
 8002436:	2001      	movs	r0, #1
 8002438:	f7ff fee9 	bl	800220e <display_c>
			display_d(true);
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff fef9 	bl	8002234 <display_d>
			display_e(true);
 8002442:	2001      	movs	r0, #1
 8002444:	f7ff ff0a 	bl	800225c <display_e>
			display_f(true);
 8002448:	2001      	movs	r0, #1
 800244a:	f7ff ff1b 	bl	8002284 <display_f>
			display_g(true);
 800244e:	2001      	movs	r0, #1
 8002450:	f7ff ff2c 	bl	80022ac <display_g>
			break;
 8002454:	e0db      	b.n	800260e <display_number+0x312>
		case 7:
			display_a(true);
 8002456:	2001      	movs	r0, #1
 8002458:	f7ff feb2 	bl	80021c0 <display_a>
			display_b(true);
 800245c:	2001      	movs	r0, #1
 800245e:	f7ff fec3 	bl	80021e8 <display_b>
			display_c(true);
 8002462:	2001      	movs	r0, #1
 8002464:	f7ff fed3 	bl	800220e <display_c>
			display_d(false);
 8002468:	2000      	movs	r0, #0
 800246a:	f7ff fee3 	bl	8002234 <display_d>
			display_e(false);
 800246e:	2000      	movs	r0, #0
 8002470:	f7ff fef4 	bl	800225c <display_e>
			display_f(false);
 8002474:	2000      	movs	r0, #0
 8002476:	f7ff ff05 	bl	8002284 <display_f>
			display_g(false);
 800247a:	2000      	movs	r0, #0
 800247c:	f7ff ff16 	bl	80022ac <display_g>
			break;
 8002480:	e0c5      	b.n	800260e <display_number+0x312>
		case 8:
			display_a(true);
 8002482:	2001      	movs	r0, #1
 8002484:	f7ff fe9c 	bl	80021c0 <display_a>
			display_b(true);
 8002488:	2001      	movs	r0, #1
 800248a:	f7ff fead 	bl	80021e8 <display_b>
			display_c(true);
 800248e:	2001      	movs	r0, #1
 8002490:	f7ff febd 	bl	800220e <display_c>
			display_d(true);
 8002494:	2001      	movs	r0, #1
 8002496:	f7ff fecd 	bl	8002234 <display_d>
			display_e(true);
 800249a:	2001      	movs	r0, #1
 800249c:	f7ff fede 	bl	800225c <display_e>
			display_f(true);
 80024a0:	2001      	movs	r0, #1
 80024a2:	f7ff feef 	bl	8002284 <display_f>
			display_g(true);
 80024a6:	2001      	movs	r0, #1
 80024a8:	f7ff ff00 	bl	80022ac <display_g>
			break;
 80024ac:	e0af      	b.n	800260e <display_number+0x312>
		case 9:
			display_a(true);
 80024ae:	2001      	movs	r0, #1
 80024b0:	f7ff fe86 	bl	80021c0 <display_a>
			display_b(true);
 80024b4:	2001      	movs	r0, #1
 80024b6:	f7ff fe97 	bl	80021e8 <display_b>
			display_c(true);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f7ff fea7 	bl	800220e <display_c>
			display_d(true);
 80024c0:	2001      	movs	r0, #1
 80024c2:	f7ff feb7 	bl	8002234 <display_d>
			display_e(false);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7ff fec8 	bl	800225c <display_e>
			display_f(true);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7ff fed9 	bl	8002284 <display_f>
			display_g(true);
 80024d2:	2001      	movs	r0, #1
 80024d4:	f7ff feea 	bl	80022ac <display_g>
			break;
 80024d8:	e099      	b.n	800260e <display_number+0x312>
		case 10: // A
			display_a(true);
 80024da:	2001      	movs	r0, #1
 80024dc:	f7ff fe70 	bl	80021c0 <display_a>
			display_b(true);
 80024e0:	2001      	movs	r0, #1
 80024e2:	f7ff fe81 	bl	80021e8 <display_b>
			display_c(true);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff fe91 	bl	800220e <display_c>
			display_d(true);
 80024ec:	2001      	movs	r0, #1
 80024ee:	f7ff fea1 	bl	8002234 <display_d>
			display_e(false);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f7ff feb2 	bl	800225c <display_e>
			display_f(true);
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7ff fec3 	bl	8002284 <display_f>
			display_g(true);
 80024fe:	2001      	movs	r0, #1
 8002500:	f7ff fed4 	bl	80022ac <display_g>
			break;
 8002504:	e083      	b.n	800260e <display_number+0x312>
		case 11: // B
			display_a(true);
 8002506:	2001      	movs	r0, #1
 8002508:	f7ff fe5a 	bl	80021c0 <display_a>
			display_b(true);
 800250c:	2001      	movs	r0, #1
 800250e:	f7ff fe6b 	bl	80021e8 <display_b>
			display_c(true);
 8002512:	2001      	movs	r0, #1
 8002514:	f7ff fe7b 	bl	800220e <display_c>
			display_d(true);
 8002518:	2001      	movs	r0, #1
 800251a:	f7ff fe8b 	bl	8002234 <display_d>
			display_e(true);
 800251e:	2001      	movs	r0, #1
 8002520:	f7ff fe9c 	bl	800225c <display_e>
			display_f(true);
 8002524:	2001      	movs	r0, #1
 8002526:	f7ff fead 	bl	8002284 <display_f>
			display_g(true);
 800252a:	2001      	movs	r0, #1
 800252c:	f7ff febe 	bl	80022ac <display_g>
			break;
 8002530:	e06d      	b.n	800260e <display_number+0x312>
		case 12: // C
			display_a(true);
 8002532:	2001      	movs	r0, #1
 8002534:	f7ff fe44 	bl	80021c0 <display_a>
			display_b(false);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff fe55 	bl	80021e8 <display_b>
			display_c(false);
 800253e:	2000      	movs	r0, #0
 8002540:	f7ff fe65 	bl	800220e <display_c>
			display_d(true);
 8002544:	2001      	movs	r0, #1
 8002546:	f7ff fe75 	bl	8002234 <display_d>
			display_e(true);
 800254a:	2001      	movs	r0, #1
 800254c:	f7ff fe86 	bl	800225c <display_e>
			display_f(true);
 8002550:	2001      	movs	r0, #1
 8002552:	f7ff fe97 	bl	8002284 <display_f>
			display_g(true);
 8002556:	2001      	movs	r0, #1
 8002558:	f7ff fea8 	bl	80022ac <display_g>
			break;
 800255c:	e057      	b.n	800260e <display_number+0x312>
		case 13: // D
			display_a(true);
 800255e:	2001      	movs	r0, #1
 8002560:	f7ff fe2e 	bl	80021c0 <display_a>
			display_b(true);
 8002564:	2001      	movs	r0, #1
 8002566:	f7ff fe3f 	bl	80021e8 <display_b>
			display_c(true);
 800256a:	2001      	movs	r0, #1
 800256c:	f7ff fe4f 	bl	800220e <display_c>
			display_d(true);
 8002570:	2001      	movs	r0, #1
 8002572:	f7ff fe5f 	bl	8002234 <display_d>
			display_e(true);
 8002576:	2001      	movs	r0, #1
 8002578:	f7ff fe70 	bl	800225c <display_e>
			display_f(true);
 800257c:	2001      	movs	r0, #1
 800257e:	f7ff fe81 	bl	8002284 <display_f>
			display_g(false);
 8002582:	2000      	movs	r0, #0
 8002584:	f7ff fe92 	bl	80022ac <display_g>
			break;
 8002588:	e041      	b.n	800260e <display_number+0x312>
		case 14: // E
			display_a(true);
 800258a:	2001      	movs	r0, #1
 800258c:	f7ff fe18 	bl	80021c0 <display_a>
			display_b(false);
 8002590:	2000      	movs	r0, #0
 8002592:	f7ff fe29 	bl	80021e8 <display_b>
			display_c(false);
 8002596:	2000      	movs	r0, #0
 8002598:	f7ff fe39 	bl	800220e <display_c>
			display_d(true);
 800259c:	2001      	movs	r0, #1
 800259e:	f7ff fe49 	bl	8002234 <display_d>
			display_e(true);
 80025a2:	2001      	movs	r0, #1
 80025a4:	f7ff fe5a 	bl	800225c <display_e>
			display_f(true);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fe6b 	bl	8002284 <display_f>
			display_g(true);
 80025ae:	2001      	movs	r0, #1
 80025b0:	f7ff fe7c 	bl	80022ac <display_g>
			break;
 80025b4:	e02b      	b.n	800260e <display_number+0x312>
		case 15: // F
			display_a(true);
 80025b6:	2001      	movs	r0, #1
 80025b8:	f7ff fe02 	bl	80021c0 <display_a>
			display_b(false);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fe13 	bl	80021e8 <display_b>
			display_c(false);
 80025c2:	2000      	movs	r0, #0
 80025c4:	f7ff fe23 	bl	800220e <display_c>
			display_d(false);
 80025c8:	2000      	movs	r0, #0
 80025ca:	f7ff fe33 	bl	8002234 <display_d>
			display_e(true);
 80025ce:	2001      	movs	r0, #1
 80025d0:	f7ff fe44 	bl	800225c <display_e>
			display_f(true);
 80025d4:	2001      	movs	r0, #1
 80025d6:	f7ff fe55 	bl	8002284 <display_f>
			display_g(true);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7ff fe66 	bl	80022ac <display_g>
			break;
 80025e0:	e015      	b.n	800260e <display_number+0x312>
		default:
			display_a(false);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7ff fdec 	bl	80021c0 <display_a>
			display_b(false);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff fdfd 	bl	80021e8 <display_b>
			display_c(false);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7ff fe0d 	bl	800220e <display_c>
			display_d(false);
 80025f4:	2000      	movs	r0, #0
 80025f6:	f7ff fe1d 	bl	8002234 <display_d>
			display_e(false);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7ff fe2e 	bl	800225c <display_e>
			display_f(false);
 8002600:	2000      	movs	r0, #0
 8002602:	f7ff fe3f 	bl	8002284 <display_f>
			display_g(false);
 8002606:	2000      	movs	r0, #0
 8002608:	f7ff fe50 	bl	80022ac <display_g>
			break;
 800260c:	46c0      	nop			; (mov r8, r8)
	}

	display_dp(dot);
 800260e:	1dbb      	adds	r3, r7, #6
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	0018      	movs	r0, r3
 8002614:	f7ff fe5e 	bl	80022d4 <display_dp>
}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	b002      	add	sp, #8
 800261e:	bd80      	pop	{r7, pc}
 8002620:	08009490 	.word	0x08009490

08002624 <display>:

void display(int value, bool dot)
{
 8002624:	b590      	push	{r4, r7, lr}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	000a      	movs	r2, r1
 800262e:	1cfb      	adds	r3, r7, #3
 8002630:	701a      	strb	r2, [r3, #0]
	uint8_t n = 0;
 8002632:	240f      	movs	r4, #15
 8002634:	193b      	adds	r3, r7, r4
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
	if (ticks == 1)
 800263a:	4b6e      	ldr	r3, [pc, #440]	; (80027f4 <display+0x1d0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d127      	bne.n	8002692 <display+0x6e>
	{
		n = (value % 100000 - value % value % 10000) / 10000;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	496c      	ldr	r1, [pc, #432]	; (80027f8 <display+0x1d4>)
 8002646:	0018      	movs	r0, r3
 8002648:	f7fd feca 	bl	80003e0 <__aeabi_idivmod>
 800264c:	000b      	movs	r3, r1
 800264e:	496b      	ldr	r1, [pc, #428]	; (80027fc <display+0x1d8>)
 8002650:	0018      	movs	r0, r3
 8002652:	f7fd fddf 	bl	8000214 <__divsi3>
 8002656:	0003      	movs	r3, r0
 8002658:	001a      	movs	r2, r3
 800265a:	193b      	adds	r3, r7, r4
 800265c:	701a      	strb	r2, [r3, #0]
		display_d1(n != 0);
 800265e:	193b      	adds	r3, r7, r4
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	1e5a      	subs	r2, r3, #1
 8002664:	4193      	sbcs	r3, r2
 8002666:	b2db      	uxtb	r3, r3
 8002668:	0018      	movs	r0, r3
 800266a:	f7ff fd47 	bl	80020fc <display_d1>
		display_d2(false);
 800266e:	2000      	movs	r0, #0
 8002670:	f7ff fd57 	bl	8002122 <display_d2>
		display_d3(false);
 8002674:	2000      	movs	r0, #0
 8002676:	f7ff fd67 	bl	8002148 <display_d3>
		display_d4(false);
 800267a:	2000      	movs	r0, #0
 800267c:	f7ff fd78 	bl	8002170 <display_d4>
		display_d5(false);
 8002680:	2000      	movs	r0, #0
 8002682:	f7ff fd89 	bl	8002198 <display_d5>
		display_number(n, false);
 8002686:	193b      	adds	r3, r7, r4
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2100      	movs	r1, #0
 800268c:	0018      	movs	r0, r3
 800268e:	f7ff fe35 	bl	80022fc <display_number>
	}
	if (ticks == 2)
 8002692:	4b58      	ldr	r3, [pc, #352]	; (80027f4 <display+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b02      	cmp	r3, #2
 8002698:	d125      	bne.n	80026e6 <display+0xc2>
	{
		n = (value % 10000 - value % value % 1000) / 1000;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4957      	ldr	r1, [pc, #348]	; (80027fc <display+0x1d8>)
 800269e:	0018      	movs	r0, r3
 80026a0:	f7fd fe9e 	bl	80003e0 <__aeabi_idivmod>
 80026a4:	000b      	movs	r3, r1
 80026a6:	001a      	movs	r2, r3
 80026a8:	23fa      	movs	r3, #250	; 0xfa
 80026aa:	0099      	lsls	r1, r3, #2
 80026ac:	0010      	movs	r0, r2
 80026ae:	f7fd fdb1 	bl	8000214 <__divsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	001a      	movs	r2, r3
 80026b6:	240f      	movs	r4, #15
 80026b8:	193b      	adds	r3, r7, r4
 80026ba:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7ff fd1d 	bl	80020fc <display_d1>
		display_d2(true);
 80026c2:	2001      	movs	r0, #1
 80026c4:	f7ff fd2d 	bl	8002122 <display_d2>
		display_d3(false);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7ff fd3d 	bl	8002148 <display_d3>
		display_d4(false);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7ff fd4e 	bl	8002170 <display_d4>
		display_d5(false);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7ff fd5f 	bl	8002198 <display_d5>
		display_number(n, false);
 80026da:	193b      	adds	r3, r7, r4
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2100      	movs	r1, #0
 80026e0:	0018      	movs	r0, r3
 80026e2:	f7ff fe0b 	bl	80022fc <display_number>
	}
	if (ticks == 3)
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <display+0x1d0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d126      	bne.n	800273c <display+0x118>
	{
		n = (value % 1000 - value % value % 100) / 100;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	22fa      	movs	r2, #250	; 0xfa
 80026f2:	0091      	lsls	r1, r2, #2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f7fd fe73 	bl	80003e0 <__aeabi_idivmod>
 80026fa:	000b      	movs	r3, r1
 80026fc:	2164      	movs	r1, #100	; 0x64
 80026fe:	0018      	movs	r0, r3
 8002700:	f7fd fd88 	bl	8000214 <__divsi3>
 8002704:	0003      	movs	r3, r0
 8002706:	001a      	movs	r2, r3
 8002708:	240f      	movs	r4, #15
 800270a:	193b      	adds	r3, r7, r4
 800270c:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 800270e:	2000      	movs	r0, #0
 8002710:	f7ff fcf4 	bl	80020fc <display_d1>
		display_d2(false);
 8002714:	2000      	movs	r0, #0
 8002716:	f7ff fd04 	bl	8002122 <display_d2>
		display_d3(true);
 800271a:	2001      	movs	r0, #1
 800271c:	f7ff fd14 	bl	8002148 <display_d3>
		display_d4(false);
 8002720:	2000      	movs	r0, #0
 8002722:	f7ff fd25 	bl	8002170 <display_d4>
		display_d5(false);
 8002726:	2000      	movs	r0, #0
 8002728:	f7ff fd36 	bl	8002198 <display_d5>
		display_number(n, dot);
 800272c:	1cfb      	adds	r3, r7, #3
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	193b      	adds	r3, r7, r4
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f7ff fde0 	bl	80022fc <display_number>
	}
	if (ticks == 4)
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <display+0x1d0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d123      	bne.n	800278c <display+0x168>
	{
		n = (value % 100 - value % value % 10) / 10;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2164      	movs	r1, #100	; 0x64
 8002748:	0018      	movs	r0, r3
 800274a:	f7fd fe49 	bl	80003e0 <__aeabi_idivmod>
 800274e:	000b      	movs	r3, r1
 8002750:	210a      	movs	r1, #10
 8002752:	0018      	movs	r0, r3
 8002754:	f7fd fd5e 	bl	8000214 <__divsi3>
 8002758:	0003      	movs	r3, r0
 800275a:	001a      	movs	r2, r3
 800275c:	240f      	movs	r4, #15
 800275e:	193b      	adds	r3, r7, r4
 8002760:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 8002762:	2000      	movs	r0, #0
 8002764:	f7ff fcca 	bl	80020fc <display_d1>
		display_d2(false);
 8002768:	2000      	movs	r0, #0
 800276a:	f7ff fcda 	bl	8002122 <display_d2>
		display_d3(false);
 800276e:	2000      	movs	r0, #0
 8002770:	f7ff fcea 	bl	8002148 <display_d3>
		display_d4(true);
 8002774:	2001      	movs	r0, #1
 8002776:	f7ff fcfb 	bl	8002170 <display_d4>
		display_d5(false);
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fd0c 	bl	8002198 <display_d5>
		display_number(n, false);
 8002780:	193b      	adds	r3, r7, r4
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2100      	movs	r1, #0
 8002786:	0018      	movs	r0, r3
 8002788:	f7ff fdb8 	bl	80022fc <display_number>
	}
	if (ticks == 5)
 800278c:	4b19      	ldr	r3, [pc, #100]	; (80027f4 <display+0x1d0>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d11e      	bne.n	80027d2 <display+0x1ae>
	{
		n = (value % 10 - value % value % 1) / 1;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	210a      	movs	r1, #10
 8002798:	0018      	movs	r0, r3
 800279a:	f7fd fe21 	bl	80003e0 <__aeabi_idivmod>
 800279e:	000b      	movs	r3, r1
 80027a0:	001a      	movs	r2, r3
 80027a2:	240f      	movs	r4, #15
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	701a      	strb	r2, [r3, #0]
		display_d1(false);
 80027a8:	2000      	movs	r0, #0
 80027aa:	f7ff fca7 	bl	80020fc <display_d1>
		display_d2(false);
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7ff fcb7 	bl	8002122 <display_d2>
		display_d3(false);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff fcc7 	bl	8002148 <display_d3>
		display_d4(false);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7ff fcd8 	bl	8002170 <display_d4>
		display_d5(true);
 80027c0:	2001      	movs	r0, #1
 80027c2:	f7ff fce9 	bl	8002198 <display_d5>
		display_number(n, false);
 80027c6:	193b      	adds	r3, r7, r4
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2100      	movs	r1, #0
 80027cc:	0018      	movs	r0, r3
 80027ce:	f7ff fd95 	bl	80022fc <display_number>
	}

	if (ticks == 5)
 80027d2:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <display+0x1d0>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d102      	bne.n	80027e0 <display+0x1bc>
	{
		ticks = 0;
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <display+0x1d0>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 80027e0:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <display+0x1d0>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	4b03      	ldr	r3, [pc, #12]	; (80027f4 <display+0x1d0>)
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	46bd      	mov	sp, r7
 80027ee:	b005      	add	sp, #20
 80027f0:	bd90      	pop	{r4, r7, pc}
 80027f2:	46c0      	nop			; (mov r8, r8)
 80027f4:	20000138 	.word	0x20000138
 80027f8:	000186a0 	.word	0x000186a0
 80027fc:	00002710 	.word	0x00002710

08002800 <display_show_off>:

void display_show_off()
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
	if (ticks == 1)
 8002804:	4b3c      	ldr	r3, [pc, #240]	; (80028f8 <display_show_off+0xf8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d10e      	bne.n	800282a <display_show_off+0x2a>
	{
		display_d1(false);
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff fc75 	bl	80020fc <display_d1>
		display_d2(false);
 8002812:	2000      	movs	r0, #0
 8002814:	f7ff fc85 	bl	8002122 <display_d2>
		display_d3(false);
 8002818:	2000      	movs	r0, #0
 800281a:	f7ff fc95 	bl	8002148 <display_d3>
		display_d4(false);
 800281e:	2000      	movs	r0, #0
 8002820:	f7ff fca6 	bl	8002170 <display_d4>
		display_d5(false);
 8002824:	2000      	movs	r0, #0
 8002826:	f7ff fcb7 	bl	8002198 <display_d5>
	}
	if (ticks == 2)
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <display_show_off+0xf8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d10e      	bne.n	8002850 <display_show_off+0x50>
	{
		display_d1(false);
 8002832:	2000      	movs	r0, #0
 8002834:	f7ff fc62 	bl	80020fc <display_d1>
		display_d2(false);
 8002838:	2000      	movs	r0, #0
 800283a:	f7ff fc72 	bl	8002122 <display_d2>
		display_d3(false);
 800283e:	2000      	movs	r0, #0
 8002840:	f7ff fc82 	bl	8002148 <display_d3>
		display_d4(false);
 8002844:	2000      	movs	r0, #0
 8002846:	f7ff fc93 	bl	8002170 <display_d4>
		display_d5(false);
 800284a:	2000      	movs	r0, #0
 800284c:	f7ff fca4 	bl	8002198 <display_d5>
	}
	if (ticks == 3)
 8002850:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <display_show_off+0xf8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b03      	cmp	r3, #3
 8002856:	d112      	bne.n	800287e <display_show_off+0x7e>
	{
		display_d1(false);
 8002858:	2000      	movs	r0, #0
 800285a:	f7ff fc4f 	bl	80020fc <display_d1>
		display_d2(false);
 800285e:	2000      	movs	r0, #0
 8002860:	f7ff fc5f 	bl	8002122 <display_d2>
		display_d3(true);
 8002864:	2001      	movs	r0, #1
 8002866:	f7ff fc6f 	bl	8002148 <display_d3>
		display_d4(false);
 800286a:	2000      	movs	r0, #0
 800286c:	f7ff fc80 	bl	8002170 <display_d4>
		display_d5(false);
 8002870:	2000      	movs	r0, #0
 8002872:	f7ff fc91 	bl	8002198 <display_d5>
		display_number(0, false);
 8002876:	2100      	movs	r1, #0
 8002878:	2000      	movs	r0, #0
 800287a:	f7ff fd3f 	bl	80022fc <display_number>
	}
	if (ticks == 4)
 800287e:	4b1e      	ldr	r3, [pc, #120]	; (80028f8 <display_show_off+0xf8>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b04      	cmp	r3, #4
 8002884:	d112      	bne.n	80028ac <display_show_off+0xac>
	{
		display_d1(false);
 8002886:	2000      	movs	r0, #0
 8002888:	f7ff fc38 	bl	80020fc <display_d1>
		display_d2(false);
 800288c:	2000      	movs	r0, #0
 800288e:	f7ff fc48 	bl	8002122 <display_d2>
		display_d3(false);
 8002892:	2000      	movs	r0, #0
 8002894:	f7ff fc58 	bl	8002148 <display_d3>
		display_d4(true);
 8002898:	2001      	movs	r0, #1
 800289a:	f7ff fc69 	bl	8002170 <display_d4>
		display_d5(false);
 800289e:	2000      	movs	r0, #0
 80028a0:	f7ff fc7a 	bl	8002198 <display_d5>
		display_number(15, false);
 80028a4:	2100      	movs	r1, #0
 80028a6:	200f      	movs	r0, #15
 80028a8:	f7ff fd28 	bl	80022fc <display_number>
	}
	if (ticks == 5)
 80028ac:	4b12      	ldr	r3, [pc, #72]	; (80028f8 <display_show_off+0xf8>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d112      	bne.n	80028da <display_show_off+0xda>
	{
		display_d1(false);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7ff fc21 	bl	80020fc <display_d1>
		display_d2(false);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7ff fc31 	bl	8002122 <display_d2>
		display_d3(false);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7ff fc41 	bl	8002148 <display_d3>
		display_d4(false);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7ff fc52 	bl	8002170 <display_d4>
		display_d5(true);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7ff fc63 	bl	8002198 <display_d5>
		display_number(15, false);
 80028d2:	2100      	movs	r1, #0
 80028d4:	200f      	movs	r0, #15
 80028d6:	f7ff fd11 	bl	80022fc <display_number>
	}

	if (ticks == 5)
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <display_show_off+0xf8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d102      	bne.n	80028e8 <display_show_off+0xe8>
	{
		ticks = 0;
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <display_show_off+0xf8>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	601a      	str	r2, [r3, #0]
	}
	ticks++;
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <display_show_off+0xf8>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	4b02      	ldr	r3, [pc, #8]	; (80028f8 <display_show_off+0xf8>)
 80028f0:	601a      	str	r2, [r3, #0]
}
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	20000138 	.word	0x20000138

080028fc <keydecoder_out>:
#include "keydecoder.h"

void keydecoder_out(uint8_t number)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	0002      	movs	r2, r0
 8002904:	1dfb      	adds	r3, r7, #7
 8002906:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, KD_OUT_1_Pin, number != 1);
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	1e5a      	subs	r2, r3, #1
 8002910:	4193      	sbcs	r3, r2
 8002912:	b2db      	uxtb	r3, r3
 8002914:	001a      	movs	r2, r3
 8002916:	4b1e      	ldr	r3, [pc, #120]	; (8002990 <keydecoder_out+0x94>)
 8002918:	2110      	movs	r1, #16
 800291a:	0018      	movs	r0, r3
 800291c:	f003 ff7f 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KD_OUT_2_Pin, number != 2);
 8002920:	1dfb      	adds	r3, r7, #7
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	3b02      	subs	r3, #2
 8002926:	1e5a      	subs	r2, r3, #1
 8002928:	4193      	sbcs	r3, r2
 800292a:	b2db      	uxtb	r3, r3
 800292c:	001a      	movs	r2, r3
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <keydecoder_out+0x94>)
 8002930:	2120      	movs	r1, #32
 8002932:	0018      	movs	r0, r3
 8002934:	f003 ff73 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, KD_OUT_3_Pin, number != 3);
 8002938:	1dfb      	adds	r3, r7, #7
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	3b03      	subs	r3, #3
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	4193      	sbcs	r3, r2
 8002942:	b2db      	uxtb	r3, r3
 8002944:	001a      	movs	r2, r3
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <keydecoder_out+0x94>)
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	0018      	movs	r0, r3
 800294c:	f003 ff67 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KD_OUT_4_Pin, number != 4);
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	3b04      	subs	r3, #4
 8002956:	1e5a      	subs	r2, r3, #1
 8002958:	4193      	sbcs	r3, r2
 800295a:	b2db      	uxtb	r3, r3
 800295c:	001a      	movs	r2, r3
 800295e:	4b0d      	ldr	r3, [pc, #52]	; (8002994 <keydecoder_out+0x98>)
 8002960:	2108      	movs	r1, #8
 8002962:	0018      	movs	r0, r3
 8002964:	f003 ff5b 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, KD_OUT_5_Pin, number != 5);
 8002968:	1dfb      	adds	r3, r7, #7
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	3b05      	subs	r3, #5
 800296e:	1e5a      	subs	r2, r3, #1
 8002970:	4193      	sbcs	r3, r2
 8002972:	b2db      	uxtb	r3, r3
 8002974:	001a      	movs	r2, r3
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <keydecoder_out+0x98>)
 8002978:	2110      	movs	r1, #16
 800297a:	0018      	movs	r0, r3
 800297c:	f003 ff4f 	bl	800681e <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002980:	2001      	movs	r0, #1
 8002982:	f002 fcdd 	bl	8005340 <HAL_Delay>
}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	46bd      	mov	sp, r7
 800298a:	b002      	add	sp, #8
 800298c:	bd80      	pop	{r7, pc}
 800298e:	46c0      	nop			; (mov r8, r8)
 8002990:	50000c00 	.word	0x50000c00
 8002994:	50000400 	.word	0x50000400

08002998 <keydecoder_in>:

bool keydecoder_in(uint8_t number)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	0002      	movs	r2, r0
 80029a0:	1dfb      	adds	r3, r7, #7
 80029a2:	701a      	strb	r2, [r3, #0]
	switch (number)
 80029a4:	1dfb      	adds	r3, r7, #7
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	2b04      	cmp	r3, #4
 80029aa:	d028      	beq.n	80029fe <keydecoder_in+0x66>
 80029ac:	dc31      	bgt.n	8002a12 <keydecoder_in+0x7a>
 80029ae:	2b03      	cmp	r3, #3
 80029b0:	d01b      	beq.n	80029ea <keydecoder_in+0x52>
 80029b2:	dc2e      	bgt.n	8002a12 <keydecoder_in+0x7a>
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d002      	beq.n	80029be <keydecoder_in+0x26>
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d00c      	beq.n	80029d6 <keydecoder_in+0x3e>
 80029bc:	e029      	b.n	8002a12 <keydecoder_in+0x7a>
	{
		case 1:
			return HAL_GPIO_ReadPin(GPIOC, KD_IN_1_Pin);
 80029be:	2380      	movs	r3, #128	; 0x80
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <keydecoder_in+0x84>)
 80029c4:	0019      	movs	r1, r3
 80029c6:	0010      	movs	r0, r2
 80029c8:	f003 ff0c 	bl	80067e4 <HAL_GPIO_ReadPin>
 80029cc:	0003      	movs	r3, r0
 80029ce:	1e5a      	subs	r2, r3, #1
 80029d0:	4193      	sbcs	r3, r2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	e01e      	b.n	8002a14 <keydecoder_in+0x7c>
		case 2:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_2_Pin);
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <keydecoder_in+0x88>)
 80029d8:	2101      	movs	r1, #1
 80029da:	0018      	movs	r0, r3
 80029dc:	f003 ff02 	bl	80067e4 <HAL_GPIO_ReadPin>
 80029e0:	0003      	movs	r3, r0
 80029e2:	1e5a      	subs	r2, r3, #1
 80029e4:	4193      	sbcs	r3, r2
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	e014      	b.n	8002a14 <keydecoder_in+0x7c>
		case 3:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_3_Pin);
 80029ea:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <keydecoder_in+0x88>)
 80029ec:	2102      	movs	r1, #2
 80029ee:	0018      	movs	r0, r3
 80029f0:	f003 fef8 	bl	80067e4 <HAL_GPIO_ReadPin>
 80029f4:	0003      	movs	r3, r0
 80029f6:	1e5a      	subs	r2, r3, #1
 80029f8:	4193      	sbcs	r3, r2
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e00a      	b.n	8002a14 <keydecoder_in+0x7c>
		case 4:
			return HAL_GPIO_ReadPin(GPIOD, KD_IN_4_Pin);
 80029fe:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <keydecoder_in+0x88>)
 8002a00:	2108      	movs	r1, #8
 8002a02:	0018      	movs	r0, r3
 8002a04:	f003 feee 	bl	80067e4 <HAL_GPIO_ReadPin>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	1e5a      	subs	r2, r3, #1
 8002a0c:	4193      	sbcs	r3, r2
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	e000      	b.n	8002a14 <keydecoder_in+0x7c>
		default:
			return false;
 8002a12:	2300      	movs	r3, #0
	}
}
 8002a14:	0018      	movs	r0, r3
 8002a16:	46bd      	mov	sp, r7
 8002a18:	b002      	add	sp, #8
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	50000800 	.word	0x50000800
 8002a20:	50000c00 	.word	0x50000c00

08002a24 <calculateFMFrequencyControlCounterPeriod>:
int OFF_COUNTER = 0;
bool COLD_START = true;


int calculateFMFrequencyControlCounterPeriod(bool fastMode)
{
 8002a24:	b5b0      	push	{r4, r5, r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	0002      	movs	r2, r0
 8002a2c:	1dfb      	adds	r3, r7, #7
 8002a2e:	701a      	strb	r2, [r3, #0]
	// PFUI!
	int fm_difference = abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER);
 8002a30:	4b2f      	ldr	r3, [pc, #188]	; (8002af0 <calculateFMFrequencyControlCounterPeriod+0xcc>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b2f      	ldr	r3, [pc, #188]	; (8002af4 <calculateFMFrequencyControlCounterPeriod+0xd0>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	17da      	asrs	r2, r3, #31
 8002a3c:	189b      	adds	r3, r3, r2
 8002a3e:	4053      	eors	r3, r2
 8002a40:	60bb      	str	r3, [r7, #8]

	int arr = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
	if (fastMode)
 8002a46:	1dfb      	adds	r3, r7, #7
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d012      	beq.n	8002a74 <calculateFMFrequencyControlCounterPeriod+0x50>
	{
		arr = 2500 - 500 * fm_difference;
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	0013      	movs	r3, r2
 8002a52:	05db      	lsls	r3, r3, #23
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	019b      	lsls	r3, r3, #6
 8002a58:	189b      	adds	r3, r3, r2
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	189b      	adds	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4a25      	ldr	r2, [pc, #148]	; (8002af8 <calculateFMFrequencyControlCounterPeriod+0xd4>)
 8002a62:	4694      	mov	ip, r2
 8002a64:	4463      	add	r3, ip
 8002a66:	60fb      	str	r3, [r7, #12]
		arr = arr < 250 ? 250 : arr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2bfa      	cmp	r3, #250	; 0xfa
 8002a6c:	da00      	bge.n	8002a70 <calculateFMFrequencyControlCounterPeriod+0x4c>
 8002a6e:	23fa      	movs	r3, #250	; 0xfa
 8002a70:	60fb      	str	r3, [r7, #12]
 8002a72:	e037      	b.n	8002ae4 <calculateFMFrequencyControlCounterPeriod+0xc0>
	}
	else
	{
		arr = 3500 - abs(1.05 + 0.05 * fm_difference + 0.75 * exp(fm_difference));
 8002a74:	68b8      	ldr	r0, [r7, #8]
 8002a76:	f7ff fa9b 	bl	8001fb0 <__aeabi_i2d>
 8002a7a:	4a20      	ldr	r2, [pc, #128]	; (8002afc <calculateFMFrequencyControlCounterPeriod+0xd8>)
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <calculateFMFrequencyControlCounterPeriod+0xdc>)
 8002a7e:	f7fe fc63 	bl	8001348 <__aeabi_dmul>
 8002a82:	0002      	movs	r2, r0
 8002a84:	000b      	movs	r3, r1
 8002a86:	0010      	movs	r0, r2
 8002a88:	0019      	movs	r1, r3
 8002a8a:	4a1e      	ldr	r2, [pc, #120]	; (8002b04 <calculateFMFrequencyControlCounterPeriod+0xe0>)
 8002a8c:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <calculateFMFrequencyControlCounterPeriod+0xe4>)
 8002a8e:	f7fd fceb 	bl	8000468 <__aeabi_dadd>
 8002a92:	0002      	movs	r2, r0
 8002a94:	000b      	movs	r3, r1
 8002a96:	0014      	movs	r4, r2
 8002a98:	001d      	movs	r5, r3
 8002a9a:	68b8      	ldr	r0, [r7, #8]
 8002a9c:	f7ff fa88 	bl	8001fb0 <__aeabi_i2d>
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	000b      	movs	r3, r1
 8002aa4:	0010      	movs	r0, r2
 8002aa6:	0019      	movs	r1, r3
 8002aa8:	f006 fade 	bl	8009068 <exp>
 8002aac:	2200      	movs	r2, #0
 8002aae:	4b17      	ldr	r3, [pc, #92]	; (8002b0c <calculateFMFrequencyControlCounterPeriod+0xe8>)
 8002ab0:	f7fe fc4a 	bl	8001348 <__aeabi_dmul>
 8002ab4:	0002      	movs	r2, r0
 8002ab6:	000b      	movs	r3, r1
 8002ab8:	0020      	movs	r0, r4
 8002aba:	0029      	movs	r1, r5
 8002abc:	f7fd fcd4 	bl	8000468 <__aeabi_dadd>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	f7ff fa3c 	bl	8001f44 <__aeabi_d2iz>
 8002acc:	0003      	movs	r3, r0
 8002ace:	17da      	asrs	r2, r3, #31
 8002ad0:	189b      	adds	r3, r3, r2
 8002ad2:	4053      	eors	r3, r2
 8002ad4:	4a0e      	ldr	r2, [pc, #56]	; (8002b10 <calculateFMFrequencyControlCounterPeriod+0xec>)
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	60fb      	str	r3, [r7, #12]
		arr = arr < 250 ? 250 : arr;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2bfa      	cmp	r3, #250	; 0xfa
 8002ade:	da00      	bge.n	8002ae2 <calculateFMFrequencyControlCounterPeriod+0xbe>
 8002ae0:	23fa      	movs	r3, #250	; 0xfa
 8002ae2:	60fb      	str	r3, [r7, #12]
	}

	return arr;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
}
 8002ae6:	0018      	movs	r0, r3
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	b004      	add	sp, #16
 8002aec:	bdb0      	pop	{r4, r5, r7, pc}
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	20000008 	.word	0x20000008
 8002af4:	20000154 	.word	0x20000154
 8002af8:	000009c4 	.word	0x000009c4
 8002afc:	9999999a 	.word	0x9999999a
 8002b00:	3fa99999 	.word	0x3fa99999
 8002b04:	cccccccd 	.word	0xcccccccd
 8002b08:	3ff0cccc 	.word	0x3ff0cccc
 8002b0c:	3fe80000 	.word	0x3fe80000
 8002b10:	00000dac 	.word	0x00000dac

08002b14 <calculateFMFrequencyControlCounterPrescaler>:

int calculateFMFrequencyControlCounterPrescaler(bool fastMode)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	0002      	movs	r2, r0
 8002b1c:	1dfb      	adds	r3, r7, #7
 8002b1e:	701a      	strb	r2, [r3, #0]
	// PFUI!
	double psc = 5000 - ((4 * FM_FREQUENCY_COUNTER) / 9);//4200 - 0.3675 * FM_FREQUENCY_COUNTER;
 8002b20:	4b22      	ldr	r3, [pc, #136]	; (8002bac <calculateFMFrequencyControlCounterPrescaler+0x98>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	009b      	lsls	r3, r3, #2
 8002b26:	2209      	movs	r2, #9
 8002b28:	4251      	negs	r1, r2
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f7fd fb72 	bl	8000214 <__divsi3>
 8002b30:	0003      	movs	r3, r0
 8002b32:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <calculateFMFrequencyControlCounterPrescaler+0x9c>)
 8002b34:	4694      	mov	ip, r2
 8002b36:	4463      	add	r3, ip
 8002b38:	0018      	movs	r0, r3
 8002b3a:	f7ff fa39 	bl	8001fb0 <__aeabi_i2d>
 8002b3e:	0002      	movs	r2, r0
 8002b40:	000b      	movs	r3, r1
 8002b42:	60ba      	str	r2, [r7, #8]
 8002b44:	60fb      	str	r3, [r7, #12]
	if (fastMode)
 8002b46:	1dfb      	adds	r3, r7, #7
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01a      	beq.n	8002b84 <calculateFMFrequencyControlCounterPrescaler+0x70>
	{
		psc = psc / 2;
 8002b4e:	2200      	movs	r2, #0
 8002b50:	2380      	movs	r3, #128	; 0x80
 8002b52:	05db      	lsls	r3, r3, #23
 8002b54:	68b8      	ldr	r0, [r7, #8]
 8002b56:	68f9      	ldr	r1, [r7, #12]
 8002b58:	f7fd fff0 	bl	8000b3c <__aeabi_ddiv>
 8002b5c:	0002      	movs	r2, r0
 8002b5e:	000b      	movs	r3, r1
 8002b60:	60ba      	str	r2, [r7, #8]
 8002b62:	60fb      	str	r3, [r7, #12]
		psc = psc < 110 ? 110 : psc;
 8002b64:	2200      	movs	r2, #0
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <calculateFMFrequencyControlCounterPrescaler+0xa0>)
 8002b68:	68b8      	ldr	r0, [r7, #8]
 8002b6a:	68f9      	ldr	r1, [r7, #12]
 8002b6c:	f7fd fc54 	bl	8000418 <__aeabi_dcmplt>
 8002b70:	1e03      	subs	r3, r0, #0
 8002b72:	d002      	beq.n	8002b7a <calculateFMFrequencyControlCounterPrescaler+0x66>
 8002b74:	2200      	movs	r2, #0
 8002b76:	4b0f      	ldr	r3, [pc, #60]	; (8002bb4 <calculateFMFrequencyControlCounterPrescaler+0xa0>)
 8002b78:	e001      	b.n	8002b7e <calculateFMFrequencyControlCounterPrescaler+0x6a>
 8002b7a:	68ba      	ldr	r2, [r7, #8]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	60ba      	str	r2, [r7, #8]
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e009      	b.n	8002b98 <calculateFMFrequencyControlCounterPrescaler+0x84>
	}
	else
	{
		psc = psc * 2.75;
 8002b84:	2200      	movs	r2, #0
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <calculateFMFrequencyControlCounterPrescaler+0xa4>)
 8002b88:	68b8      	ldr	r0, [r7, #8]
 8002b8a:	68f9      	ldr	r1, [r7, #12]
 8002b8c:	f7fe fbdc 	bl	8001348 <__aeabi_dmul>
 8002b90:	0002      	movs	r2, r0
 8002b92:	000b      	movs	r3, r1
 8002b94:	60ba      	str	r2, [r7, #8]
 8002b96:	60fb      	str	r3, [r7, #12]
	}

	return psc;
 8002b98:	68b8      	ldr	r0, [r7, #8]
 8002b9a:	68f9      	ldr	r1, [r7, #12]
 8002b9c:	f7ff f9d2 	bl	8001f44 <__aeabi_d2iz>
 8002ba0:	0003      	movs	r3, r0
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b004      	add	sp, #16
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	20000154 	.word	0x20000154
 8002bb0:	00001388 	.word	0x00001388
 8002bb4:	405b8000 	.word	0x405b8000
 8002bb8:	40060000 	.word	0x40060000

08002bbc <stopFrequencyControl>:

void stopFrequencyControl()
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim14);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <stopFrequencyControl+0x14>)
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f005 f878 	bl	8007cb8 <HAL_TIM_Base_Stop_IT>
}
 8002bc8:	46c0      	nop			; (mov r8, r8)
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	46c0      	nop			; (mov r8, r8)
 8002bd0:	20000344 	.word	0x20000344

08002bd4 <startFrequencyControl>:

void startFrequencyControl()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim14);
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <startFrequencyControl+0x14>)
 8002bda:	0018      	movs	r0, r3
 8002bdc:	f005 f816 	bl	8007c0c <HAL_TIM_Base_Start_IT>
}
 8002be0:	46c0      	nop			; (mov r8, r8)
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
 8002be6:	46c0      	nop			; (mov r8, r8)
 8002be8:	20000344 	.word	0x20000344

08002bec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM6)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4ad3      	ldr	r2, [pc, #844]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d12f      	bne.n	8002c5e <HAL_TIM_PeriodElapsedCallback+0x72>
	{
		// 64 = PRESCALER / 7 = DEPENDING ON CPU-FREQUENCY / 10.7 MHz = IF
		FM_FREQUENCY_COUNTER = (((TIM3->CNT * 64 * 7 * FREQUENCY_CALIBRATION) - 1070000) / 1000.0);
 8002bfe:	4bd3      	ldr	r3, [pc, #844]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c02:	0013      	movs	r3, r2
 8002c04:	00db      	lsls	r3, r3, #3
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	019b      	lsls	r3, r3, #6
 8002c0a:	0018      	movs	r0, r3
 8002c0c:	f7ff fa00 	bl	8002010 <__aeabi_ui2d>
 8002c10:	4bcf      	ldr	r3, [pc, #828]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f7fe fb97 	bl	8001348 <__aeabi_dmul>
 8002c1a:	0002      	movs	r2, r0
 8002c1c:	000b      	movs	r3, r1
 8002c1e:	0010      	movs	r0, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	2200      	movs	r2, #0
 8002c24:	4bcb      	ldr	r3, [pc, #812]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8002c26:	f7fe fdfb 	bl	8001820 <__aeabi_dsub>
 8002c2a:	0002      	movs	r2, r0
 8002c2c:	000b      	movs	r3, r1
 8002c2e:	0010      	movs	r0, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	2200      	movs	r2, #0
 8002c34:	4bc8      	ldr	r3, [pc, #800]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8002c36:	f7fd ff81 	bl	8000b3c <__aeabi_ddiv>
 8002c3a:	0002      	movs	r2, r0
 8002c3c:	000b      	movs	r3, r1
 8002c3e:	0010      	movs	r0, r2
 8002c40:	0019      	movs	r1, r3
 8002c42:	f7ff f97f 	bl	8001f44 <__aeabi_d2iz>
 8002c46:	0002      	movs	r2, r0
 8002c48:	4bc4      	ldr	r3, [pc, #784]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002c4a:	601a      	str	r2, [r3, #0]
		FM_FREQUENCY_COUNTER_UPDATED = true;
 8002c4c:	4bc4      	ldr	r3, [pc, #784]	; (8002f60 <HAL_TIM_PeriodElapsedCallback+0x374>)
 8002c4e:	2201      	movs	r2, #1
 8002c50:	701a      	strb	r2, [r3, #0]

		TIM3->CNT = 0;
 8002c52:	4bbe      	ldr	r3, [pc, #760]	; (8002f4c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	625a      	str	r2, [r3, #36]	; 0x24
		TIM6->CNT = 0;
 8002c58:	4bbb      	ldr	r3, [pc, #748]	; (8002f48 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (htim->Instance == TIM16)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4ac0      	ldr	r2, [pc, #768]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d12c      	bne.n	8002cc2 <HAL_TIM_PeriodElapsedCallback+0xd6>
	{
		// 7 = DEPENDING ON CPU-FREQUENCY / 455 kHz = IF
		AM_FREQUENCY_COUNTER = ((TIM1->CNT * 7 * FREQUENCY_CALIBRATION) / 100.0) - 455;
 8002c68:	4bbf      	ldr	r3, [pc, #764]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8002c6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c6c:	0013      	movs	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff f9cc 	bl	8002010 <__aeabi_ui2d>
 8002c78:	4bb5      	ldr	r3, [pc, #724]	; (8002f50 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f7fe fb63 	bl	8001348 <__aeabi_dmul>
 8002c82:	0002      	movs	r2, r0
 8002c84:	000b      	movs	r3, r1
 8002c86:	0010      	movs	r0, r2
 8002c88:	0019      	movs	r1, r3
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	4bb7      	ldr	r3, [pc, #732]	; (8002f6c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8002c8e:	f7fd ff55 	bl	8000b3c <__aeabi_ddiv>
 8002c92:	0002      	movs	r2, r0
 8002c94:	000b      	movs	r3, r1
 8002c96:	0010      	movs	r0, r2
 8002c98:	0019      	movs	r1, r3
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	4bb4      	ldr	r3, [pc, #720]	; (8002f70 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8002c9e:	f7fe fdbf 	bl	8001820 <__aeabi_dsub>
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	000b      	movs	r3, r1
 8002ca6:	0010      	movs	r0, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	f7ff f94b 	bl	8001f44 <__aeabi_d2iz>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	4bb0      	ldr	r3, [pc, #704]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002cb2:	601a      	str	r2, [r3, #0]

		TIM1->CNT = 0;
 8002cb4:	4bac      	ldr	r3, [pc, #688]	; (8002f68 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	625a      	str	r2, [r3, #36]	; 0x24
		TIM16->CNT = 0;
 8002cba:	4baa      	ldr	r3, [pc, #680]	; (8002f64 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	625a      	str	r2, [r3, #36]	; 0x24
			{
				TIM15->CCR2--;
			}
		}
	}
}
 8002cc0:	e18c      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
	else if (htim->Instance == TIM7)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4aac      	ldr	r2, [pc, #688]	; (8002f78 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d000      	beq.n	8002cce <HAL_TIM_PeriodElapsedCallback+0xe2>
 8002ccc:	e078      	b.n	8002dc0 <HAL_TIM_PeriodElapsedCallback+0x1d4>
		int display_value = 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	617b      	str	r3, [r7, #20]
		if (CLOCK)
 8002cd2:	4baa      	ldr	r3, [pc, #680]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d01c      	beq.n	8002d14 <HAL_TIM_PeriodElapsedCallback+0x128>
			if (!SET_BUTTON)
 8002cda:	4ba9      	ldr	r3, [pc, #676]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	4053      	eors	r3, r2
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00b      	beq.n	8002d00 <HAL_TIM_PeriodElapsedCallback+0x114>
				HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8002ce8:	49a6      	ldr	r1, [pc, #664]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002cea:	4ba7      	ldr	r3, [pc, #668]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f004 fd48 	bl	8007784 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 8002cf4:	49a5      	ldr	r1, [pc, #660]	; (8002f8c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8002cf6:	4ba4      	ldr	r3, [pc, #656]	; (8002f88 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f004 fd9e 	bl	800783c <HAL_RTC_GetDate>
			display_value = TIME.Hours*100 + TIME.Minutes;
 8002d00:	4ba0      	ldr	r3, [pc, #640]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	001a      	movs	r2, r3
 8002d06:	2364      	movs	r3, #100	; 0x64
 8002d08:	4353      	muls	r3, r2
 8002d0a:	4a9e      	ldr	r2, [pc, #632]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002d0c:	7852      	ldrb	r2, [r2, #1]
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	617b      	str	r3, [r7, #20]
 8002d12:	e026      	b.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x176>
		else if (MODE == FM)
 8002d14:	4b9e      	ldr	r3, [pc, #632]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d111      	bne.n	8002d40 <HAL_TIM_PeriodElapsedCallback+0x154>
			display_value = SET_BUTTON && !CLOCK ? FM_FREQUENCY_COUNTER : FM_FREQUENCY;
 8002d1c:	4b98      	ldr	r3, [pc, #608]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d009      	beq.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8002d24:	4b95      	ldr	r3, [pc, #596]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4053      	eors	r3, r2
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_TIM_PeriodElapsedCallback+0x14c>
 8002d32:	4b8a      	ldr	r3, [pc, #552]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	e001      	b.n	8002d3c <HAL_TIM_PeriodElapsedCallback+0x150>
 8002d38:	4b96      	ldr	r3, [pc, #600]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e010      	b.n	8002d62 <HAL_TIM_PeriodElapsedCallback+0x176>
			display_value = SET_BUTTON && !CLOCK ? AM_FREQUENCY_COUNTER : AM_FREQUENCY;
 8002d40:	4b8f      	ldr	r3, [pc, #572]	; (8002f80 <HAL_TIM_PeriodElapsedCallback+0x394>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x170>
 8002d48:	4b8c      	ldr	r3, [pc, #560]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	4053      	eors	r3, r2
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_TIM_PeriodElapsedCallback+0x170>
 8002d56:	4b87      	ldr	r3, [pc, #540]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	e001      	b.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0x174>
 8002d5c:	4b8e      	ldr	r3, [pc, #568]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	617b      	str	r3, [r7, #20]
		if (OFF_COUNTER > 0)
 8002d62:	4b8e      	ldr	r3, [pc, #568]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	dd07      	ble.n	8002d7a <HAL_TIM_PeriodElapsedCallback+0x18e>
			display_show_off();
 8002d6a:	f7ff fd49 	bl	8002800 <display_show_off>
			OFF_COUNTER -= 1;
 8002d6e:	4b8b      	ldr	r3, [pc, #556]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	1e5a      	subs	r2, r3, #1
 8002d74:	4b89      	ldr	r3, [pc, #548]	; (8002f9c <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	e130      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
			display(display_value, (CLOCK && TIME.Seconds %2 == 1) || (!CLOCK && MODE == FM));
 8002d7a:	4b80      	ldr	r3, [pc, #512]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <HAL_TIM_PeriodElapsedCallback+0x1a4>
 8002d82:	4b80      	ldr	r3, [pc, #512]	; (8002f84 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8002d84:	789b      	ldrb	r3, [r3, #2]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d10a      	bne.n	8002da6 <HAL_TIM_PeriodElapsedCallback+0x1ba>
 8002d90:	4b7a      	ldr	r3, [pc, #488]	; (8002f7c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2201      	movs	r2, #1
 8002d96:	4053      	eors	r3, r2
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d005      	beq.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x1be>
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x1be>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e000      	b.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8002daa:	2300      	movs	r3, #0
 8002dac:	1c1a      	adds	r2, r3, #0
 8002dae:	2301      	movs	r3, #1
 8002db0:	4013      	ands	r3, r2
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	0011      	movs	r1, r2
 8002db8:	0018      	movs	r0, r3
 8002dba:	f7ff fc33 	bl	8002624 <display>
}
 8002dbe:	e10d      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
	else if (htim->Instance == TIM14)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a76      	ldr	r2, [pc, #472]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d000      	beq.n	8002dcc <HAL_TIM_PeriodElapsedCallback+0x1e0>
 8002dca:	e107      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
		if (MODE == FM)
 8002dcc:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d168      	bne.n	8002ea6 <HAL_TIM_PeriodElapsedCallback+0x2ba>
			TIM14->PSC = calculateFMFrequencyControlCounterPrescaler(!LOCK_FREQUENCY);
 8002dd4:	4b73      	ldr	r3, [pc, #460]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	1e5a      	subs	r2, r3, #1
 8002dda:	4193      	sbcs	r3, r2
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2201      	movs	r2, #1
 8002de0:	4053      	eors	r3, r2
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	1c1a      	adds	r2, r3, #0
 8002de6:	2301      	movs	r3, #1
 8002de8:	4013      	ands	r3, r2
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	0018      	movs	r0, r3
 8002dee:	f7ff fe91 	bl	8002b14 <calculateFMFrequencyControlCounterPrescaler>
 8002df2:	0002      	movs	r2, r0
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28
			TIM14->ARR = calculateFMFrequencyControlCounterPeriod(true);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7ff fe13 	bl	8002a24 <calculateFMFrequencyControlCounterPeriod>
 8002dfe:	0002      	movs	r2, r0
 8002e00:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002e02:	62da      	str	r2, [r3, #44]	; 0x2c
			SCAN_STOP = !SCAN_STOP ? HAL_GPIO_ReadPin(GPIOC, SCAN_STOP_Pin) : true;
 8002e04:	4b68      	ldr	r3, [pc, #416]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <HAL_TIM_PeriodElapsedCallback+0x23a>
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	0018      	movs	r0, r3
 8002e18:	f003 fce4 	bl	80067e4 <HAL_GPIO_ReadPin>
 8002e1c:	0003      	movs	r3, r0
 8002e1e:	1e5a      	subs	r2, r3, #1
 8002e20:	4193      	sbcs	r3, r2
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	e000      	b.n	8002e28 <HAL_TIM_PeriodElapsedCallback+0x23c>
 8002e26:	2201      	movs	r2, #1
 8002e28:	4b5f      	ldr	r3, [pc, #380]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002e2a:	701a      	strb	r2, [r3, #0]
			if (TIM15->CCR2 < TIM15->ARR && FM_FREQUENCY < FM_FREQUENCY_COUNTER)
 8002e2c:	4b60      	ldr	r3, [pc, #384]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e30:	4b5f      	ldr	r3, [pc, #380]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d20a      	bcs.n	8002e4e <HAL_TIM_PeriodElapsedCallback+0x262>
 8002e38:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	da04      	bge.n	8002e4e <HAL_TIM_PeriodElapsedCallback+0x262>
				TIM15->CCR2++;
 8002e44:	4b5a      	ldr	r3, [pc, #360]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e48:	3201      	adds	r2, #1
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e4c:	e00d      	b.n	8002e6a <HAL_TIM_PeriodElapsedCallback+0x27e>
			else if (TIM15->CCR2 > 0 && FM_FREQUENCY > FM_FREQUENCY_COUNTER)
 8002e4e:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d009      	beq.n	8002e6a <HAL_TIM_PeriodElapsedCallback+0x27e>
 8002e56:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	4b40      	ldr	r3, [pc, #256]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	dd03      	ble.n	8002e6a <HAL_TIM_PeriodElapsedCallback+0x27e>
				TIM15->CCR2--;
 8002e62:	4b53      	ldr	r3, [pc, #332]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e66:	3a01      	subs	r2, #1
 8002e68:	639a      	str	r2, [r3, #56]	; 0x38
			if ((TIM15->CCR2 == 0) || (TIM15->CCR2 == TIM15->ARR))
 8002e6a:	4b51      	ldr	r3, [pc, #324]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d006      	beq.n	8002e80 <HAL_TIM_PeriodElapsedCallback+0x294>
 8002e72:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e76:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d000      	beq.n	8002e80 <HAL_TIM_PeriodElapsedCallback+0x294>
 8002e7e:	e0ad      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
				FM_FREQUENCY = ((int)(FM_FREQUENCY_COUNTER / 10)) * 10;
 8002e80:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	210a      	movs	r1, #10
 8002e86:	0018      	movs	r0, r3
 8002e88:	f7fd f9c4 	bl	8000214 <__divsi3>
 8002e8c:	0003      	movs	r3, r0
 8002e8e:	001a      	movs	r2, r3
 8002e90:	0013      	movs	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	189b      	adds	r3, r3, r2
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	001a      	movs	r2, r3
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8002e9c:	601a      	str	r2, [r3, #0]
				SCAN_STOP = true;
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	701a      	strb	r2, [r3, #0]
}
 8002ea4:	e09a      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
		else if (MODE == AM)
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d000      	beq.n	8002eb0 <HAL_TIM_PeriodElapsedCallback+0x2c4>
 8002eae:	e095      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
			int am_difference = abs(AM_FREQUENCY - AM_FREQUENCY_COUNTER);
 8002eb0:	4b39      	ldr	r3, [pc, #228]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b2f      	ldr	r3, [pc, #188]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	17da      	asrs	r2, r3, #31
 8002ebc:	189b      	adds	r3, r3, r2
 8002ebe:	4053      	eors	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
			int arr = 1500 - 175 * am_difference;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	0013      	movs	r3, r2
 8002ec6:	061b      	lsls	r3, r3, #24
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	189b      	adds	r3, r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	189b      	adds	r3, r3, r2
 8002ed6:	4a37      	ldr	r2, [pc, #220]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 8002ed8:	4694      	mov	ip, r2
 8002eda:	4463      	add	r3, ip
 8002edc:	60fb      	str	r3, [r7, #12]
			int psc = 3500 - 0.5 * AM_FREQUENCY_COUNTER;
 8002ede:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	0018      	movs	r0, r3
 8002ee4:	f7ff f864 	bl	8001fb0 <__aeabi_i2d>
 8002ee8:	2200      	movs	r2, #0
 8002eea:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0x3cc>)
 8002eec:	f7fe fa2c 	bl	8001348 <__aeabi_dmul>
 8002ef0:	0002      	movs	r2, r0
 8002ef2:	000b      	movs	r3, r1
 8002ef4:	2000      	movs	r0, #0
 8002ef6:	4931      	ldr	r1, [pc, #196]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 8002ef8:	f7fe fc92 	bl	8001820 <__aeabi_dsub>
 8002efc:	0002      	movs	r2, r0
 8002efe:	000b      	movs	r3, r1
 8002f00:	0010      	movs	r0, r2
 8002f02:	0019      	movs	r1, r3
 8002f04:	f7ff f81e 	bl	8001f44 <__aeabi_d2iz>
 8002f08:	0003      	movs	r3, r0
 8002f0a:	60bb      	str	r3, [r7, #8]
			TIM14->PSC = psc < 150 ? 150 : psc;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b96      	cmp	r3, #150	; 0x96
 8002f10:	da00      	bge.n	8002f14 <HAL_TIM_PeriodElapsedCallback+0x328>
 8002f12:	2396      	movs	r3, #150	; 0x96
 8002f14:	4a22      	ldr	r2, [pc, #136]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002f16:	6293      	str	r3, [r2, #40]	; 0x28
			TIM14->ARR = arr < 50 ? 50 : arr;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b32      	cmp	r3, #50	; 0x32
 8002f1c:	da00      	bge.n	8002f20 <HAL_TIM_PeriodElapsedCallback+0x334>
 8002f1e:	2332      	movs	r3, #50	; 0x32
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8002f22:	62d3      	str	r3, [r2, #44]	; 0x2c
			if (TIM15->CCR2 < TIM15->ARR && AM_FREQUENCY < AM_FREQUENCY_COUNTER)
 8002f24:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f28:	4b21      	ldr	r3, [pc, #132]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d247      	bcs.n	8002fc0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
 8002f30:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	4b0f      	ldr	r3, [pc, #60]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	da41      	bge.n	8002fc0 <HAL_TIM_PeriodElapsedCallback+0x3d4>
				TIM15->CCR2++;
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8002f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f40:	3201      	adds	r2, #1
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002f44:	e04a      	b.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
 8002f46:	46c0      	nop			; (mov r8, r8)
 8002f48:	40001000 	.word	0x40001000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	20000000 	.word	0x20000000
 8002f54:	413053b0 	.word	0x413053b0
 8002f58:	408f4000 	.word	0x408f4000
 8002f5c:	20000154 	.word	0x20000154
 8002f60:	20000158 	.word	0x20000158
 8002f64:	40014400 	.word	0x40014400
 8002f68:	40012c00 	.word	0x40012c00
 8002f6c:	40590000 	.word	0x40590000
 8002f70:	407c7000 	.word	0x407c7000
 8002f74:	20000160 	.word	0x20000160
 8002f78:	40001400 	.word	0x40001400
 8002f7c:	20000159 	.word	0x20000159
 8002f80:	2000015b 	.word	0x2000015b
 8002f84:	2000013c 	.word	0x2000013c
 8002f88:	20000280 	.word	0x20000280
 8002f8c:	20000150 	.word	0x20000150
 8002f90:	2000000c 	.word	0x2000000c
 8002f94:	20000008 	.word	0x20000008
 8002f98:	20000018 	.word	0x20000018
 8002f9c:	20000164 	.word	0x20000164
 8002fa0:	40002000 	.word	0x40002000
 8002fa4:	20000015 	.word	0x20000015
 8002fa8:	2000015d 	.word	0x2000015d
 8002fac:	50000800 	.word	0x50000800
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	000005dc 	.word	0x000005dc
 8002fb8:	3fe00000 	.word	0x3fe00000
 8002fbc:	40ab5800 	.word	0x40ab5800
			else if (TIM15->CCR2 > 0 && AM_FREQUENCY > AM_FREQUENCY_COUNTER)
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d009      	beq.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
 8002fc8:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	4b07      	ldr	r3, [pc, #28]	; (8002fec <HAL_TIM_PeriodElapsedCallback+0x400>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	dd03      	ble.n	8002fdc <HAL_TIM_PeriodElapsedCallback+0x3f0>
				TIM15->CCR2--;
 8002fd4:	4b03      	ldr	r3, [pc, #12]	; (8002fe4 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8002fd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fd8:	3a01      	subs	r2, #1
 8002fda:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002fdc:	46c0      	nop			; (mov r8, r8)
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	b006      	add	sp, #24
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40014000 	.word	0x40014000
 8002fe8:	20000018 	.word	0x20000018
 8002fec:	20000160 	.word	0x20000160

08002ff0 <saveFMStation>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void saveFMStation()
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
	uint32_t dc = TIM15->CCR2;
 8002ff6:	4b0a      	ldr	r3, [pc, #40]	; (8003020 <saveFMStation+0x30>)
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	607b      	str	r3, [r7, #4]
	HAL_Delay(100);
 8002ffc:	2064      	movs	r0, #100	; 0x64
 8002ffe:	f002 f99f 	bl	8005340 <HAL_Delay>
	station_fm_set(STATION, FM_FREQUENCY, dc);
 8003002:	4b08      	ldr	r3, [pc, #32]	; (8003024 <saveFMStation+0x34>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	b2d8      	uxtb	r0, r3
 8003008:	4b07      	ldr	r3, [pc, #28]	; (8003028 <saveFMStation+0x38>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	001a      	movs	r2, r3
 8003012:	f001 fb97 	bl	8004744 <station_fm_set>
}
 8003016:	46c0      	nop			; (mov r8, r8)
 8003018:	46bd      	mov	sp, r7
 800301a:	b002      	add	sp, #8
 800301c:	bd80      	pop	{r7, pc}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	40014000 	.word	0x40014000
 8003024:	20000010 	.word	0x20000010
 8003028:	20000008 	.word	0x20000008

0800302c <saveAMStation>:

void saveAMStation()
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
	station_am_set(STATION, AM_FREQUENCY, TIM15->CCR2);
 8003030:	4b06      	ldr	r3, [pc, #24]	; (800304c <saveAMStation+0x20>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	b2d8      	uxtb	r0, r3
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <saveAMStation+0x24>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	0019      	movs	r1, r3
 800303c:	4b05      	ldr	r3, [pc, #20]	; (8003054 <saveAMStation+0x28>)
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	001a      	movs	r2, r3
 8003042:	f001 fcdf 	bl	8004a04 <station_am_set>
}
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000010 	.word	0x20000010
 8003050:	20000018 	.word	0x20000018
 8003054:	40014000 	.word	0x40014000

08003058 <setStation>:

void setStation(int number, bool force)
{
 8003058:	b5b0      	push	{r4, r5, r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	000a      	movs	r2, r1
 8003062:	1cfb      	adds	r3, r7, #3
 8003064:	701a      	strb	r2, [r3, #0]
	station_led(number);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	0018      	movs	r0, r3
 800306a:	f001 fddb 	bl	8004c24 <station_led>

	Mode mode = misc_get_mode(AM_FREQUENCY_COUNTER);
 800306e:	4b30      	ldr	r3, [pc, #192]	; (8003130 <setStation+0xd8>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	250f      	movs	r5, #15
 8003074:	197c      	adds	r4, r7, r5
 8003076:	0018      	movs	r0, r3
 8003078:	f001 faf4 	bl	8004664 <misc_get_mode>
 800307c:	0003      	movs	r3, r0
 800307e:	7023      	strb	r3, [r4, #0]
	bool modeChangedToFM = mode == FM && MODE != FM;
 8003080:	197b      	adds	r3, r7, r5
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d105      	bne.n	8003094 <setStation+0x3c>
 8003088:	4b2a      	ldr	r3, [pc, #168]	; (8003134 <setStation+0xdc>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <setStation+0x3c>
 8003090:	2201      	movs	r2, #1
 8003092:	e000      	b.n	8003096 <setStation+0x3e>
 8003094:	2200      	movs	r2, #0
 8003096:	230e      	movs	r3, #14
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	781a      	ldrb	r2, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	400a      	ands	r2, r1
 80030a2:	701a      	strb	r2, [r3, #0]
	bool modeChangedToAM = mode == AM && MODE != AM;
 80030a4:	230f      	movs	r3, #15
 80030a6:	18fb      	adds	r3, r7, r3
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <setStation+0x62>
 80030ae:	4b21      	ldr	r3, [pc, #132]	; (8003134 <setStation+0xdc>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <setStation+0x62>
 80030b6:	2201      	movs	r2, #1
 80030b8:	e000      	b.n	80030bc <setStation+0x64>
 80030ba:	2200      	movs	r2, #0
 80030bc:	230d      	movs	r3, #13
 80030be:	18fb      	adds	r3, r7, r3
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	781a      	ldrb	r2, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	400a      	ands	r2, r1
 80030c8:	701a      	strb	r2, [r3, #0]

	if (modeChangedToFM || MODE == FM && (STATION != number || force))
 80030ca:	230e      	movs	r3, #14
 80030cc:	18fb      	adds	r3, r7, r3
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d10c      	bne.n	80030ee <setStation+0x96>
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <setStation+0xdc>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10e      	bne.n	80030fa <setStation+0xa2>
 80030dc:	4b16      	ldr	r3, [pc, #88]	; (8003138 <setStation+0xe0>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d103      	bne.n	80030ee <setStation+0x96>
 80030e6:	1cfb      	adds	r3, r7, #3
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d005      	beq.n	80030fa <setStation+0xa2>
	{
		setFMStation(number);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f000 f823 	bl	800313c <setFMStation>
	{
 80030f6:	46c0      	nop			; (mov r8, r8)
	}
	else if (modeChangedToAM || MODE == AM && (STATION != number || force))
	{
		setAMStation(number);
	}
}
 80030f8:	e015      	b.n	8003126 <setStation+0xce>
	else if (modeChangedToAM || MODE == AM && (STATION != number || force))
 80030fa:	230d      	movs	r3, #13
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10c      	bne.n	800311e <setStation+0xc6>
 8003104:	4b0b      	ldr	r3, [pc, #44]	; (8003134 <setStation+0xdc>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d10c      	bne.n	8003126 <setStation+0xce>
 800310c:	4b0a      	ldr	r3, [pc, #40]	; (8003138 <setStation+0xe0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	429a      	cmp	r2, r3
 8003114:	d103      	bne.n	800311e <setStation+0xc6>
 8003116:	1cfb      	adds	r3, r7, #3
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <setStation+0xce>
		setAMStation(number);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	f000 f87f 	bl	8003224 <setAMStation>
}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	46bd      	mov	sp, r7
 800312a:	b004      	add	sp, #16
 800312c:	bdb0      	pop	{r4, r5, r7, pc}
 800312e:	46c0      	nop			; (mov r8, r8)
 8003130:	20000160 	.word	0x20000160
 8003134:	2000000c 	.word	0x2000000c
 8003138:	20000010 	.word	0x20000010

0800313c <setFMStation>:

void setFMStation(int number)
{
 800313c:	b590      	push	{r4, r7, lr}
 800313e:	b087      	sub	sp, #28
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
	STATION = number;
 8003144:	4b30      	ldr	r3, [pc, #192]	; (8003208 <setFMStation+0xcc>)
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
	misc_mute(true);
 800314a:	2001      	movs	r0, #1
 800314c:	f001 fa52 	bl	80045f4 <misc_mute>

	stopFrequencyControl();
 8003150:	f7ff fd34 	bl	8002bbc <stopFrequencyControl>
	struct Station station = station_fm_get(number);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	240c      	movs	r4, #12
 800315a:	193b      	adds	r3, r7, r4
 800315c:	0011      	movs	r1, r2
 800315e:	0018      	movs	r0, r3
 8003160:	f001 faa0 	bl	80046a4 <station_fm_get>
	FM_FREQUENCY = station.Frequency;
 8003164:	0021      	movs	r1, r4
 8003166:	187b      	adds	r3, r7, r1
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	001a      	movs	r2, r3
 800316c:	4b27      	ldr	r3, [pc, #156]	; (800320c <setFMStation+0xd0>)
 800316e:	601a      	str	r2, [r3, #0]
	TIM15->CCR2 = station.DutyCycle;
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <setFMStation+0xd4>)
 8003172:	187b      	adds	r3, r7, r1
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_GPIO_WritePin(GPIOB, CENTER_LED_Pin, GPIO_PIN_SET);
 8003178:	4b26      	ldr	r3, [pc, #152]	; (8003214 <setFMStation+0xd8>)
 800317a:	2201      	movs	r2, #1
 800317c:	2180      	movs	r1, #128	; 0x80
 800317e:	0018      	movs	r0, r3
 8003180:	f003 fb4d 	bl	800681e <HAL_GPIO_WritePin>

	FM_FREQUENCY_COUNTER_UPDATED = false;
 8003184:	4b24      	ldr	r3, [pc, #144]	; (8003218 <setFMStation+0xdc>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
	while (!FM_FREQUENCY_COUNTER_UPDATED);
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	4b22      	ldr	r3, [pc, #136]	; (8003218 <setFMStation+0xdc>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	4053      	eors	r3, r2
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f8      	bne.n	800318c <setFMStation+0x50>
	FM_FREQUENCY_COUNTER_UPDATED = false;
 800319a:	4b1f      	ldr	r3, [pc, #124]	; (8003218 <setFMStation+0xdc>)
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]

	startFrequencyControl();
 80031a0:	f7ff fd18 	bl	8002bd4 <startFrequencyControl>

	int i = 0;
 80031a4:	2300      	movs	r3, #0
 80031a6:	617b      	str	r3, [r7, #20]
	LOCK_FREQUENCY = false;
 80031a8:	4b1c      	ldr	r3, [pc, #112]	; (800321c <setFMStation+0xe0>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	for(; i < 500 && abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER) > 2; i++)
 80031ae:	e005      	b.n	80031bc <setFMStation+0x80>
	{
		HAL_Delay(1);
 80031b0:	2001      	movs	r0, #1
 80031b2:	f002 f8c5 	bl	8005340 <HAL_Delay>
	for(; i < 500 && abs(FM_FREQUENCY - FM_FREQUENCY_COUNTER) > 2; i++)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	3301      	adds	r3, #1
 80031ba:	617b      	str	r3, [r7, #20]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	23fa      	movs	r3, #250	; 0xfa
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	429a      	cmp	r2, r3
 80031c4:	da09      	bge.n	80031da <setFMStation+0x9e>
 80031c6:	4b11      	ldr	r3, [pc, #68]	; (800320c <setFMStation+0xd0>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	4b15      	ldr	r3, [pc, #84]	; (8003220 <setFMStation+0xe4>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	17da      	asrs	r2, r3, #31
 80031d2:	189b      	adds	r3, r3, r2
 80031d4:	4053      	eors	r3, r2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	dcea      	bgt.n	80031b0 <setFMStation+0x74>
	}
	LOCK_FREQUENCY = true;
 80031da:	4b10      	ldr	r3, [pc, #64]	; (800321c <setFMStation+0xe0>)
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]


	HAL_Delay(500 - i);
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	22fa      	movs	r2, #250	; 0xfa
 80031e4:	0052      	lsls	r2, r2, #1
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	0018      	movs	r0, r3
 80031ea:	f002 f8a9 	bl	8005340 <HAL_Delay>
	misc_mute(false);
 80031ee:	2000      	movs	r0, #0
 80031f0:	f001 fa00 	bl	80045f4 <misc_mute>
	HAL_GPIO_WritePin(GPIOB, CENTER_LED_Pin, GPIO_PIN_RESET);
 80031f4:	4b07      	ldr	r3, [pc, #28]	; (8003214 <setFMStation+0xd8>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	2180      	movs	r1, #128	; 0x80
 80031fa:	0018      	movs	r0, r3
 80031fc:	f003 fb0f 	bl	800681e <HAL_GPIO_WritePin>
}
 8003200:	46c0      	nop			; (mov r8, r8)
 8003202:	46bd      	mov	sp, r7
 8003204:	b007      	add	sp, #28
 8003206:	bd90      	pop	{r4, r7, pc}
 8003208:	20000010 	.word	0x20000010
 800320c:	20000008 	.word	0x20000008
 8003210:	40014000 	.word	0x40014000
 8003214:	50000400 	.word	0x50000400
 8003218:	20000158 	.word	0x20000158
 800321c:	20000015 	.word	0x20000015
 8003220:	20000154 	.word	0x20000154

08003224 <setAMStation>:

void setAMStation(int number)
{
 8003224:	b590      	push	{r4, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
	STATION = number;
 800322c:	4b11      	ldr	r3, [pc, #68]	; (8003274 <setAMStation+0x50>)
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	601a      	str	r2, [r3, #0]
	misc_mute(true);
 8003232:	2001      	movs	r0, #1
 8003234:	f001 f9de 	bl	80045f4 <misc_mute>

	struct Station station = station_am_get(number);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	2408      	movs	r4, #8
 800323e:	193b      	adds	r3, r7, r4
 8003240:	0011      	movs	r1, r2
 8003242:	0018      	movs	r0, r3
 8003244:	f001 fb8e 	bl	8004964 <station_am_get>
	AM_FREQUENCY = station.Frequency;
 8003248:	0021      	movs	r1, r4
 800324a:	187b      	adds	r3, r7, r1
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	001a      	movs	r2, r3
 8003250:	4b09      	ldr	r3, [pc, #36]	; (8003278 <setAMStation+0x54>)
 8003252:	601a      	str	r2, [r3, #0]
	TIM15->CCR2 = station.DutyCycle;
 8003254:	4a09      	ldr	r2, [pc, #36]	; (800327c <setAMStation+0x58>)
 8003256:	187b      	adds	r3, r7, r1
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	6393      	str	r3, [r2, #56]	; 0x38

	HAL_Delay(500);
 800325c:	23fa      	movs	r3, #250	; 0xfa
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	0018      	movs	r0, r3
 8003262:	f002 f86d 	bl	8005340 <HAL_Delay>
	misc_mute(false);
 8003266:	2000      	movs	r0, #0
 8003268:	f001 f9c4 	bl	80045f4 <misc_mute>
}
 800326c:	46c0      	nop			; (mov r8, r8)
 800326e:	46bd      	mov	sp, r7
 8003270:	b005      	add	sp, #20
 8003272:	bd90      	pop	{r4, r7, pc}
 8003274:	20000010 	.word	0x20000010
 8003278:	20000018 	.word	0x20000018
 800327c:	40014000 	.word	0x40014000

08003280 <getCalibrationValue>:

double getCalibrationValue()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
	uint32_t y = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	617b      	str	r3, [r7, #20]

	for (int i = 0; i < 5; i++)
 800328a:	2300      	movs	r3, #0
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	e01d      	b.n	80032cc <getCalibrationValue+0x4c>
	{
		HAL_ADC_Start(&hadc1);
 8003290:	4b1d      	ldr	r3, [pc, #116]	; (8003308 <getCalibrationValue+0x88>)
 8003292:	0018      	movs	r0, r3
 8003294:	f002 fb84 	bl	80059a0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8003298:	2301      	movs	r3, #1
 800329a:	425a      	negs	r2, r3
 800329c:	4b1a      	ldr	r3, [pc, #104]	; (8003308 <getCalibrationValue+0x88>)
 800329e:	0011      	movs	r1, r2
 80032a0:	0018      	movs	r0, r3
 80032a2:	f002 fbcb 	bl	8005a3c <HAL_ADC_PollForConversion>
		int x = HAL_ADC_GetValue(&hadc1);
 80032a6:	4b18      	ldr	r3, [pc, #96]	; (8003308 <getCalibrationValue+0x88>)
 80032a8:	0018      	movs	r0, r3
 80032aa:	f002 fc55 	bl	8005b58 <HAL_ADC_GetValue>
 80032ae:	0003      	movs	r3, r0
 80032b0:	607b      	str	r3, [r7, #4]

		y += x / 5;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2105      	movs	r1, #5
 80032b6:	0018      	movs	r0, r3
 80032b8:	f7fc ffac 	bl	8000214 <__divsi3>
 80032bc:	0003      	movs	r3, r0
 80032be:	001a      	movs	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 5; i++)
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	3301      	adds	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	ddde      	ble.n	8003290 <getCalibrationValue+0x10>
	}

	// +/- 0.5%
	double value = 0.995 + 0.000002442 * y;
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7fe fe9c 	bl	8002010 <__aeabi_ui2d>
 80032d8:	4a0c      	ldr	r2, [pc, #48]	; (800330c <getCalibrationValue+0x8c>)
 80032da:	4b0d      	ldr	r3, [pc, #52]	; (8003310 <getCalibrationValue+0x90>)
 80032dc:	f7fe f834 	bl	8001348 <__aeabi_dmul>
 80032e0:	0002      	movs	r2, r0
 80032e2:	000b      	movs	r3, r1
 80032e4:	0010      	movs	r0, r2
 80032e6:	0019      	movs	r1, r3
 80032e8:	4a0a      	ldr	r2, [pc, #40]	; (8003314 <getCalibrationValue+0x94>)
 80032ea:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <getCalibrationValue+0x98>)
 80032ec:	f7fd f8bc 	bl	8000468 <__aeabi_dadd>
 80032f0:	0002      	movs	r2, r0
 80032f2:	000b      	movs	r3, r1
 80032f4:	60ba      	str	r2, [r7, #8]
 80032f6:	60fb      	str	r3, [r7, #12]

	return value;
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
}
 80032fc:	0010      	movs	r0, r2
 80032fe:	0019      	movs	r1, r3
 8003300:	46bd      	mov	sp, r7
 8003302:	b006      	add	sp, #24
 8003304:	bd80      	pop	{r7, pc}
 8003306:	46c0      	nop			; (mov r8, r8)
 8003308:	2000021c 	.word	0x2000021c
 800330c:	b2904f5d 	.word	0xb2904f5d
 8003310:	3ec47c27 	.word	0x3ec47c27
 8003314:	3d70a3d7 	.word	0x3d70a3d7
 8003318:	3fefd70a 	.word	0x3fefd70a

0800331c <enable_5volt>:

void enable_5volt(bool on)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	0002      	movs	r2, r0
 8003324:	1dfb      	adds	r3, r7, #7
 8003326:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOC, DISABLE_5V_Pin, on);
 8003328:	1dfb      	adds	r3, r7, #7
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4803      	ldr	r0, [pc, #12]	; (8003340 <enable_5volt+0x24>)
 8003332:	0019      	movs	r1, r3
 8003334:	f003 fa73 	bl	800681e <HAL_GPIO_WritePin>
}
 8003338:	46c0      	nop			; (mov r8, r8)
 800333a:	46bd      	mov	sp, r7
 800333c:	b002      	add	sp, #8
 800333e:	bd80      	pop	{r7, pc}
 8003340:	50000800 	.word	0x50000800

08003344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800334a:	f001 ff73 	bl	8005234 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800334e:	f000 fc5f 	bl	8003c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003352:	f000 ffb3 	bl	80042bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8003356:	f000 fcdb 	bl	8003d10 <MX_ADC1_Init>
  MX_TIM1_Init();
 800335a:	f000 fd71 	bl	8003e40 <MX_TIM1_Init>
  MX_TIM3_Init();
 800335e:	f000 fdd3 	bl	8003f08 <MX_TIM3_Init>
  MX_TIM6_Init();
 8003362:	f000 fe2f 	bl	8003fc4 <MX_TIM6_Init>
  MX_TIM14_Init();
 8003366:	f000 fea3 	bl	80040b0 <MX_TIM14_Init>
  MX_TIM7_Init();
 800336a:	f000 fe67 	bl	800403c <MX_TIM7_Init>
  MX_RTC_Init();
 800336e:	f000 fd39 	bl	8003de4 <MX_RTC_Init>
  MX_TIM15_Init();
 8003372:	f000 fec3 	bl	80040fc <MX_TIM15_Init>
  MX_TIM16_Init();
 8003376:	f000 ff79 	bl	800426c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  misc_mute(true);
 800337a:	2001      	movs	r0, #1
 800337c:	f001 f93a 	bl	80045f4 <misc_mute>

  HAL_TIM_Base_Start(&htim1); 					// AM FRECQUENCY ETR
 8003380:	4bc2      	ldr	r3, [pc, #776]	; (800368c <main+0x348>)
 8003382:	0018      	movs	r0, r3
 8003384:	f004 fbf4 	bl	8007b70 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3); 					// FM FRECQUENCY ETR
 8003388:	4bc1      	ldr	r3, [pc, #772]	; (8003690 <main+0x34c>)
 800338a:	0018      	movs	r0, r3
 800338c:	f004 fbf0 	bl	8007b70 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim6); 				// FM FRECQUENCY COUNT PERIOD
 8003390:	4bc0      	ldr	r3, [pc, #768]	; (8003694 <main+0x350>)
 8003392:	0018      	movs	r0, r3
 8003394:	f004 fc3a 	bl	8007c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim16); 				// AM FRECQUENCY COUNT PERIOD
 8003398:	4bbf      	ldr	r3, [pc, #764]	; (8003698 <main+0x354>)
 800339a:	0018      	movs	r0, r3
 800339c:	f004 fc36 	bl	8007c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);				// DISPLAY MULTIPLEXING
 80033a0:	4bbe      	ldr	r3, [pc, #760]	; (800369c <main+0x358>)
 80033a2:	0018      	movs	r0, r3
 80033a4:	f004 fc32 	bl	8007c0c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2); 	// TUNING VOLTAGE PWM
 80033a8:	4bbd      	ldr	r3, [pc, #756]	; (80036a0 <main+0x35c>)
 80033aa:	2104      	movs	r1, #4
 80033ac:	0018      	movs	r0, r3
 80033ae:	f004 fd11 	bl	8007dd4 <HAL_TIM_PWM_Start>
  startFrequencyControl();
 80033b2:	f7ff fc0f 	bl	8002bd4 <startFrequencyControl>

  display_on(true);
 80033b6:	2001      	movs	r0, #1
 80033b8:	f7fe fe6e 	bl	8002098 <display_on>
  enable_5volt(true);
 80033bc:	2001      	movs	r0, #1
 80033be:	f7ff ffad 	bl	800331c <enable_5volt>
  MODE = misc_get_mode(AM_FREQUENCY_COUNTER);
 80033c2:	4bb8      	ldr	r3, [pc, #736]	; (80036a4 <main+0x360>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	0018      	movs	r0, r3
 80033c8:	f001 f94c 	bl	8004664 <misc_get_mode>
 80033cc:	0003      	movs	r3, r0
 80033ce:	001a      	movs	r2, r3
 80033d0:	4bb5      	ldr	r3, [pc, #724]	; (80036a8 <main+0x364>)
 80033d2:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  FREQUENCY_CALIBRATION = getCalibrationValue();
 80033d4:	f7ff ff54 	bl	8003280 <getCalibrationValue>
 80033d8:	0002      	movs	r2, r0
 80033da:	000b      	movs	r3, r1
 80033dc:	49b3      	ldr	r1, [pc, #716]	; (80036ac <main+0x368>)
 80033de:	600a      	str	r2, [r1, #0]
 80033e0:	604b      	str	r3, [r1, #4]

	  bool standby = misc_is_standby();
 80033e2:	1dfc      	adds	r4, r7, #7
 80033e4:	f001 f8bc 	bl	8004560 <misc_is_standby>
 80033e8:	0003      	movs	r3, r0
 80033ea:	7023      	strb	r3, [r4, #0]
	  bool poweredOn = STANDBY && !standby;
 80033ec:	4bb0      	ldr	r3, [pc, #704]	; (80036b0 <main+0x36c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <main+0xc2>
 80033f4:	1dfb      	adds	r3, r7, #7
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2201      	movs	r2, #1
 80033fa:	4053      	eors	r3, r2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <main+0xc2>
 8003402:	2201      	movs	r2, #1
 8003404:	e000      	b.n	8003408 <main+0xc4>
 8003406:	2200      	movs	r2, #0
 8003408:	1dbb      	adds	r3, r7, #6
 800340a:	701a      	strb	r2, [r3, #0]
 800340c:	781a      	ldrb	r2, [r3, #0]
 800340e:	2101      	movs	r1, #1
 8003410:	400a      	ands	r2, r1
 8003412:	701a      	strb	r2, [r3, #0]
	  bool poweredOff = !STANDBY && standby;
 8003414:	4ba6      	ldr	r3, [pc, #664]	; (80036b0 <main+0x36c>)
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	2201      	movs	r2, #1
 800341a:	4053      	eors	r3, r2
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <main+0xea>
 8003422:	1dfb      	adds	r3, r7, #7
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <main+0xea>
 800342a:	2201      	movs	r2, #1
 800342c:	e000      	b.n	8003430 <main+0xec>
 800342e:	2200      	movs	r2, #0
 8003430:	1d7b      	adds	r3, r7, #5
 8003432:	701a      	strb	r2, [r3, #0]
 8003434:	781a      	ldrb	r2, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	400a      	ands	r2, r1
 800343a:	701a      	strb	r2, [r3, #0]
	  if (poweredOn)
 800343c:	1dbb      	adds	r3, r7, #6
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d014      	beq.n	800346e <main+0x12a>
	  {
		  STANDBY = false;
 8003444:	4b9a      	ldr	r3, [pc, #616]	; (80036b0 <main+0x36c>)
 8003446:	2200      	movs	r2, #0
 8003448:	701a      	strb	r2, [r3, #0]
		  OFF_COUNTER = 0;
 800344a:	4b9a      	ldr	r3, [pc, #616]	; (80036b4 <main+0x370>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]
		  enable_5volt(true);
 8003450:	2001      	movs	r0, #1
 8003452:	f7ff ff63 	bl	800331c <enable_5volt>
		  display_on(true);
 8003456:	2001      	movs	r0, #1
 8003458:	f7fe fe1e 	bl	8002098 <display_on>
		  startFrequencyControl();
 800345c:	f7ff fbba 	bl	8002bd4 <startFrequencyControl>

		  // Standby detection is delayed, set station again to prevent timer duty cycle drift.
		  setStation(STATION, true);
 8003460:	4b95      	ldr	r3, [pc, #596]	; (80036b8 <main+0x374>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2101      	movs	r1, #1
 8003466:	0018      	movs	r0, r3
 8003468:	f7ff fdf6 	bl	8003058 <setStation>
 800346c:	e01b      	b.n	80034a6 <main+0x162>
	  }
	  else if (poweredOff)
 800346e:	1d7b      	adds	r3, r7, #5
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d017      	beq.n	80034a6 <main+0x162>
	  {
		  STANDBY = true;
 8003476:	4b8e      	ldr	r3, [pc, #568]	; (80036b0 <main+0x36c>)
 8003478:	2201      	movs	r2, #1
 800347a:	701a      	strb	r2, [r3, #0]

		  if (COLD_START)
 800347c:	4b8f      	ldr	r3, [pc, #572]	; (80036bc <main+0x378>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d006      	beq.n	8003492 <main+0x14e>
		  {
			  OFF_COUNTER = 1000;
 8003484:	4b8b      	ldr	r3, [pc, #556]	; (80036b4 <main+0x370>)
 8003486:	22fa      	movs	r2, #250	; 0xfa
 8003488:	0092      	lsls	r2, r2, #2
 800348a:	601a      	str	r2, [r3, #0]
			  COLD_START = false;
 800348c:	4b8b      	ldr	r3, [pc, #556]	; (80036bc <main+0x378>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
		  }

		  enable_5volt(false);
 8003492:	2000      	movs	r0, #0
 8003494:	f7ff ff42 	bl	800331c <enable_5volt>
		  display_on(STANDBY_DISPLAY_ON);
 8003498:	4b89      	ldr	r3, [pc, #548]	; (80036c0 <main+0x37c>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	0018      	movs	r0, r3
 800349e:	f7fe fdfb 	bl	8002098 <display_on>
		  stopFrequencyControl();
 80034a2:	f7ff fb8b 	bl	8002bbc <stopFrequencyControl>
	  }

	  Mode mode = misc_get_mode(AM_FREQUENCY_COUNTER);
 80034a6:	4b7f      	ldr	r3, [pc, #508]	; (80036a4 <main+0x360>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	1d3c      	adds	r4, r7, #4
 80034ac:	0018      	movs	r0, r3
 80034ae:	f001 f8d9 	bl	8004664 <misc_get_mode>
 80034b2:	0003      	movs	r3, r0
 80034b4:	7023      	strb	r3, [r4, #0]
	  bool modeChangedToOther = mode == OTHER && MODE != OTHER;
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d105      	bne.n	80034ca <main+0x186>
 80034be:	4b7a      	ldr	r3, [pc, #488]	; (80036a8 <main+0x364>)
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d001      	beq.n	80034ca <main+0x186>
 80034c6:	2201      	movs	r2, #1
 80034c8:	e000      	b.n	80034cc <main+0x188>
 80034ca:	2200      	movs	r2, #0
 80034cc:	1cfb      	adds	r3, r7, #3
 80034ce:	701a      	strb	r2, [r3, #0]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	2101      	movs	r1, #1
 80034d4:	400a      	ands	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
	  bool modeChangedToFMorAM = (mode == FM && MODE != FM) || (mode == AM && MODE != AM);
 80034d8:	1d3b      	adds	r3, r7, #4
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d103      	bne.n	80034e8 <main+0x1a4>
 80034e0:	4b71      	ldr	r3, [pc, #452]	; (80036a8 <main+0x364>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d107      	bne.n	80034f8 <main+0x1b4>
 80034e8:	1d3b      	adds	r3, r7, #4
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d105      	bne.n	80034fc <main+0x1b8>
 80034f0:	4b6d      	ldr	r3, [pc, #436]	; (80036a8 <main+0x364>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <main+0x1b8>
 80034f8:	2201      	movs	r2, #1
 80034fa:	e000      	b.n	80034fe <main+0x1ba>
 80034fc:	2200      	movs	r2, #0
 80034fe:	1cbb      	adds	r3, r7, #2
 8003500:	701a      	strb	r2, [r3, #0]
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	2101      	movs	r1, #1
 8003506:	400a      	ands	r2, r1
 8003508:	701a      	strb	r2, [r3, #0]
	  MODE = mode;
 800350a:	4b67      	ldr	r3, [pc, #412]	; (80036a8 <main+0x364>)
 800350c:	1d3a      	adds	r2, r7, #4
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	701a      	strb	r2, [r3, #0]

	  if (modeChangedToOther)
 8003512:	1cfb      	adds	r3, r7, #3
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <main+0x1dc>
	  {
		  stopFrequencyControl();
 800351a:	f7ff fb4f 	bl	8002bbc <stopFrequencyControl>
 800351e:	e00b      	b.n	8003538 <main+0x1f4>
	  }
	  else if (modeChangedToFMorAM)
 8003520:	1cbb      	adds	r3, r7, #2
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <main+0x1f4>
	  {
		  // Mode detection is delayed, set station again to prevent timer duty cycle drift.
		  setStation(STATION, true);
 8003528:	4b63      	ldr	r3, [pc, #396]	; (80036b8 <main+0x374>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	2101      	movs	r1, #1
 800352e:	0018      	movs	r0, r3
 8003530:	f7ff fd92 	bl	8003058 <setStation>
		  startFrequencyControl();
 8003534:	f7ff fb4e 	bl	8002bd4 <startFrequencyControl>
	  }

	  keydecoder_out(1);
 8003538:	2001      	movs	r0, #1
 800353a:	f7ff f9df 	bl	80028fc <keydecoder_out>
	  CLOCK = keydecoder_in(1);
 800353e:	2001      	movs	r0, #1
 8003540:	f7ff fa2a 	bl	8002998 <keydecoder_in>
 8003544:	0003      	movs	r3, r0
 8003546:	001a      	movs	r2, r3
 8003548:	4b5e      	ldr	r3, [pc, #376]	; (80036c4 <main+0x380>)
 800354a:	701a      	strb	r2, [r3, #0]
	  SET_BUTTON = keydecoder_in(2);
 800354c:	2002      	movs	r0, #2
 800354e:	f7ff fa23 	bl	8002998 <keydecoder_in>
 8003552:	0003      	movs	r3, r0
 8003554:	001a      	movs	r2, r3
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <main+0x384>)
 8003558:	701a      	strb	r2, [r3, #0]

	  keydecoder_out(2);
 800355a:	2002      	movs	r0, #2
 800355c:	f7ff f9ce 	bl	80028fc <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2) && keydecoder_in(3))
 8003560:	4b53      	ldr	r3, [pc, #332]	; (80036b0 <main+0x36c>)
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2201      	movs	r2, #1
 8003566:	4053      	eors	r3, r2
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d034      	beq.n	80035d8 <main+0x294>
 800356e:	2002      	movs	r0, #2
 8003570:	f7ff fa12 	bl	8002998 <keydecoder_in>
 8003574:	1e03      	subs	r3, r0, #0
 8003576:	d02f      	beq.n	80035d8 <main+0x294>
 8003578:	2003      	movs	r0, #3
 800357a:	f7ff fa0d 	bl	8002998 <keydecoder_in>
 800357e:	1e03      	subs	r3, r0, #0
 8003580:	d02a      	beq.n	80035d8 <main+0x294>
	  {
		  // TUNING UP QUICK
		  LOCK_FREQUENCY = false;
 8003582:	4b52      	ldr	r3, [pc, #328]	; (80036cc <main+0x388>)
 8003584:	2200      	movs	r2, #0
 8003586:	701a      	strb	r2, [r3, #0]
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003588:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <main+0x364>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <main+0x268>
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <main+0x38c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a4f      	ldr	r2, [pc, #316]	; (80036d4 <main+0x390>)
 8003596:	4293      	cmp	r3, r2
 8003598:	dc08      	bgt.n	80035ac <main+0x268>
		  {
			  FM_FREQUENCY += 5;
 800359a:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <main+0x38c>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1d5a      	adds	r2, r3, #5
 80035a0:	4b4b      	ldr	r3, [pc, #300]	; (80036d0 <main+0x38c>)
 80035a2:	601a      	str	r2, [r3, #0]
			  HAL_Delay(30);
 80035a4:	201e      	movs	r0, #30
 80035a6:	f001 fecb 	bl	8005340 <HAL_Delay>
 80035aa:	e011      	b.n	80035d0 <main+0x28c>
		  }
		  else if (MODE == AM && AM_FREQUENCY < 1602)
 80035ac:	4b3e      	ldr	r3, [pc, #248]	; (80036a8 <main+0x364>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10d      	bne.n	80035d0 <main+0x28c>
 80035b4:	4b48      	ldr	r3, [pc, #288]	; (80036d8 <main+0x394>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <main+0x398>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	dc08      	bgt.n	80035d0 <main+0x28c>
		  {
			  AM_FREQUENCY += 9;
 80035be:	4b46      	ldr	r3, [pc, #280]	; (80036d8 <main+0x394>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	3309      	adds	r3, #9
 80035c4:	001a      	movs	r2, r3
 80035c6:	4b44      	ldr	r3, [pc, #272]	; (80036d8 <main+0x394>)
 80035c8:	601a      	str	r2, [r3, #0]
			  HAL_Delay(50);
 80035ca:	2032      	movs	r0, #50	; 0x32
 80035cc:	f001 feb8 	bl	8005340 <HAL_Delay>
		  }
		  LOCK_FREQUENCY = true;
 80035d0:	4b3e      	ldr	r3, [pc, #248]	; (80036cc <main+0x388>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e1b3      	b.n	8003940 <main+0x5fc>
	  }
	  else if (!STANDBY && keydecoder_in(2) && keydecoder_in(4))
 80035d8:	4b35      	ldr	r3, [pc, #212]	; (80036b0 <main+0x36c>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	2201      	movs	r2, #1
 80035de:	4053      	eors	r3, r2
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d035      	beq.n	8003652 <main+0x30e>
 80035e6:	2002      	movs	r0, #2
 80035e8:	f7ff f9d6 	bl	8002998 <keydecoder_in>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d030      	beq.n	8003652 <main+0x30e>
 80035f0:	2004      	movs	r0, #4
 80035f2:	f7ff f9d1 	bl	8002998 <keydecoder_in>
 80035f6:	1e03      	subs	r3, r0, #0
 80035f8:	d02b      	beq.n	8003652 <main+0x30e>
	  {
		  // TUNING DOWN QUICK
		  LOCK_FREQUENCY = false;
 80035fa:	4b34      	ldr	r3, [pc, #208]	; (80036cc <main+0x388>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
		  if (MODE == FM && FM_FREQUENCY > 8750)
 8003600:	4b29      	ldr	r3, [pc, #164]	; (80036a8 <main+0x364>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10d      	bne.n	8003624 <main+0x2e0>
 8003608:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <main+0x38c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a34      	ldr	r2, [pc, #208]	; (80036e0 <main+0x39c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	dd08      	ble.n	8003624 <main+0x2e0>
		  {
			  FM_FREQUENCY -= 5;
 8003612:	4b2f      	ldr	r3, [pc, #188]	; (80036d0 <main+0x38c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	1f5a      	subs	r2, r3, #5
 8003618:	4b2d      	ldr	r3, [pc, #180]	; (80036d0 <main+0x38c>)
 800361a:	601a      	str	r2, [r3, #0]
			  HAL_Delay(30);
 800361c:	201e      	movs	r0, #30
 800361e:	f001 fe8f 	bl	8005340 <HAL_Delay>
 8003622:	e012      	b.n	800364a <main+0x306>
		  }
		  else if (MODE == AM && AM_FREQUENCY > 531)
 8003624:	4b20      	ldr	r3, [pc, #128]	; (80036a8 <main+0x364>)
 8003626:	781b      	ldrb	r3, [r3, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10e      	bne.n	800364a <main+0x306>
 800362c:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <main+0x394>)
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2385      	movs	r3, #133	; 0x85
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	429a      	cmp	r2, r3
 8003636:	db08      	blt.n	800364a <main+0x306>
		  {
			  AM_FREQUENCY -= 9;
 8003638:	4b27      	ldr	r3, [pc, #156]	; (80036d8 <main+0x394>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	3b09      	subs	r3, #9
 800363e:	001a      	movs	r2, r3
 8003640:	4b25      	ldr	r3, [pc, #148]	; (80036d8 <main+0x394>)
 8003642:	601a      	str	r2, [r3, #0]
			  HAL_Delay(50);
 8003644:	2032      	movs	r0, #50	; 0x32
 8003646:	f001 fe7b 	bl	8005340 <HAL_Delay>
		  }
		  LOCK_FREQUENCY = true;
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <main+0x388>)
 800364c:	2201      	movs	r2, #1
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e176      	b.n	8003940 <main+0x5fc>
	  }
	  else if (!STANDBY && keydecoder_in(1))
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <main+0x36c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2201      	movs	r2, #1
 8003658:	4053      	eors	r3, r2
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d100      	bne.n	8003662 <main+0x31e>
 8003660:	e098      	b.n	8003794 <main+0x450>
 8003662:	2001      	movs	r0, #1
 8003664:	f7ff f998 	bl	8002998 <keydecoder_in>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d100      	bne.n	800366e <main+0x32a>
 800366c:	e092      	b.n	8003794 <main+0x450>
	  {
		  // SCAN DOWN
		  if (MODE == FM)
 800366e:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <main+0x364>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d000      	beq.n	8003678 <main+0x334>
 8003676:	e163      	b.n	8003940 <main+0x5fc>
		  {
			  misc_mute(true);
 8003678:	2001      	movs	r0, #1
 800367a:	f000 ffbb 	bl	80045f4 <misc_mute>
			  LOCK_FREQUENCY = false;
 800367e:	4b13      	ldr	r3, [pc, #76]	; (80036cc <main+0x388>)
 8003680:	2200      	movs	r2, #0
 8003682:	701a      	strb	r2, [r3, #0]

			  for (int i = 0; i < 2 && FM_FREQUENCY > 8750; i++)
 8003684:	2300      	movs	r3, #0
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e042      	b.n	8003710 <main+0x3cc>
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	200002f8 	.word	0x200002f8
 8003690:	200001d0 	.word	0x200001d0
 8003694:	200002ac 	.word	0x200002ac
 8003698:	20000390 	.word	0x20000390
 800369c:	200003dc 	.word	0x200003dc
 80036a0:	20000184 	.word	0x20000184
 80036a4:	20000160 	.word	0x20000160
 80036a8:	2000000c 	.word	0x2000000c
 80036ac:	20000000 	.word	0x20000000
 80036b0:	2000015a 	.word	0x2000015a
 80036b4:	20000164 	.word	0x20000164
 80036b8:	20000010 	.word	0x20000010
 80036bc:	2000001c 	.word	0x2000001c
 80036c0:	20000014 	.word	0x20000014
 80036c4:	20000159 	.word	0x20000159
 80036c8:	2000015b 	.word	0x2000015b
 80036cc:	20000015 	.word	0x20000015
 80036d0:	20000008 	.word	0x20000008
 80036d4:	00002a2f 	.word	0x00002a2f
 80036d8:	20000018 	.word	0x20000018
 80036dc:	00000641 	.word	0x00000641
 80036e0:	0000222e 	.word	0x0000222e
			  {
				  FM_FREQUENCY -= 5;
 80036e4:	4bc9      	ldr	r3, [pc, #804]	; (8003a0c <main+0x6c8>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1f5a      	subs	r2, r3, #5
 80036ea:	4bc8      	ldr	r3, [pc, #800]	; (8003a0c <main+0x6c8>)
 80036ec:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 80036ee:	2014      	movs	r0, #20
 80036f0:	f001 fe26 	bl	8005340 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 80036f4:	46c0      	nop			; (mov r8, r8)
 80036f6:	4bc6      	ldr	r3, [pc, #792]	; (8003a10 <main+0x6cc>)
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	4bc4      	ldr	r3, [pc, #784]	; (8003a0c <main+0x6c8>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	17da      	asrs	r2, r3, #31
 8003702:	189b      	adds	r3, r3, r2
 8003704:	4053      	eors	r3, r2
 8003706:	2b04      	cmp	r3, #4
 8003708:	dcf5      	bgt.n	80036f6 <main+0x3b2>
			  for (int i = 0; i < 2 && FM_FREQUENCY > 8750; i++)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	dc04      	bgt.n	8003720 <main+0x3dc>
 8003716:	4bbd      	ldr	r3, [pc, #756]	; (8003a0c <main+0x6c8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4abe      	ldr	r2, [pc, #760]	; (8003a14 <main+0x6d0>)
 800371c:	4293      	cmp	r3, r2
 800371e:	dce1      	bgt.n	80036e4 <main+0x3a0>
			  }

			  SCAN_STOP = false;
 8003720:	4bbd      	ldr	r3, [pc, #756]	; (8003a18 <main+0x6d4>)
 8003722:	2200      	movs	r2, #0
 8003724:	701a      	strb	r2, [r3, #0]

			  do
			  {
				  FM_FREQUENCY -= 5;
 8003726:	4bb9      	ldr	r3, [pc, #740]	; (8003a0c <main+0x6c8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	1f5a      	subs	r2, r3, #5
 800372c:	4bb7      	ldr	r3, [pc, #732]	; (8003a0c <main+0x6c8>)
 800372e:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003730:	2014      	movs	r0, #20
 8003732:	f001 fe05 	bl	8005340 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 8003736:	46c0      	nop			; (mov r8, r8)
 8003738:	4bb5      	ldr	r3, [pc, #724]	; (8003a10 <main+0x6cc>)
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4bb3      	ldr	r3, [pc, #716]	; (8003a0c <main+0x6c8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	17da      	asrs	r2, r3, #31
 8003744:	189b      	adds	r3, r3, r2
 8003746:	4053      	eors	r3, r2
 8003748:	2b04      	cmp	r3, #4
 800374a:	dcf5      	bgt.n	8003738 <main+0x3f4>
			  } while (!SCAN_STOP && FM_FREQUENCY > 8750);
 800374c:	4bb2      	ldr	r3, [pc, #712]	; (8003a18 <main+0x6d4>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	2201      	movs	r2, #1
 8003752:	4053      	eors	r3, r2
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <main+0x420>
 800375a:	4bac      	ldr	r3, [pc, #688]	; (8003a0c <main+0x6c8>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4aad      	ldr	r2, [pc, #692]	; (8003a14 <main+0x6d0>)
 8003760:	4293      	cmp	r3, r2
 8003762:	dce0      	bgt.n	8003726 <main+0x3e2>

			  if (FM_FREQUENCY % 10 == 5)
 8003764:	4ba9      	ldr	r3, [pc, #676]	; (8003a0c <main+0x6c8>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	210a      	movs	r1, #10
 800376a:	0018      	movs	r0, r3
 800376c:	f7fc fe38 	bl	80003e0 <__aeabi_idivmod>
 8003770:	000b      	movs	r3, r1
 8003772:	2b05      	cmp	r3, #5
 8003774:	d104      	bne.n	8003780 <main+0x43c>
			  {
				  FM_FREQUENCY += 5;
 8003776:	4ba5      	ldr	r3, [pc, #660]	; (8003a0c <main+0x6c8>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1d5a      	adds	r2, r3, #5
 800377c:	4ba3      	ldr	r3, [pc, #652]	; (8003a0c <main+0x6c8>)
 800377e:	601a      	str	r2, [r3, #0]
			  }

			  HAL_Delay(250);
 8003780:	20fa      	movs	r0, #250	; 0xfa
 8003782:	f001 fddd 	bl	8005340 <HAL_Delay>
			  LOCK_FREQUENCY = true;
 8003786:	4ba5      	ldr	r3, [pc, #660]	; (8003a1c <main+0x6d8>)
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
			  misc_mute(false);
 800378c:	2000      	movs	r0, #0
 800378e:	f000 ff31 	bl	80045f4 <misc_mute>
		  if (MODE == FM)
 8003792:	e0d5      	b.n	8003940 <main+0x5fc>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(2))
 8003794:	4ba2      	ldr	r3, [pc, #648]	; (8003a20 <main+0x6dc>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	2201      	movs	r2, #1
 800379a:	4053      	eors	r3, r2
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d06a      	beq.n	8003878 <main+0x534>
 80037a2:	2002      	movs	r0, #2
 80037a4:	f7ff f8f8 	bl	8002998 <keydecoder_in>
 80037a8:	1e03      	subs	r3, r0, #0
 80037aa:	d065      	beq.n	8003878 <main+0x534>
	  {
		  // SCAN UP
		  if (MODE == FM)
 80037ac:	4b9d      	ldr	r3, [pc, #628]	; (8003a24 <main+0x6e0>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d000      	beq.n	80037b6 <main+0x472>
 80037b4:	e0c4      	b.n	8003940 <main+0x5fc>
		  {
			  misc_mute(true);
 80037b6:	2001      	movs	r0, #1
 80037b8:	f000 ff1c 	bl	80045f4 <misc_mute>
			  LOCK_FREQUENCY = false;
 80037bc:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <main+0x6d8>)
 80037be:	2200      	movs	r2, #0
 80037c0:	701a      	strb	r2, [r3, #0]

			  for (int i = 0; i < 2 && FM_FREQUENCY < 10800; i++)
 80037c2:	2300      	movs	r3, #0
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	e015      	b.n	80037f4 <main+0x4b0>
			  {
				  FM_FREQUENCY += 5;
 80037c8:	4b90      	ldr	r3, [pc, #576]	; (8003a0c <main+0x6c8>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	1d5a      	adds	r2, r3, #5
 80037ce:	4b8f      	ldr	r3, [pc, #572]	; (8003a0c <main+0x6c8>)
 80037d0:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 80037d2:	2014      	movs	r0, #20
 80037d4:	f001 fdb4 	bl	8005340 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 80037d8:	46c0      	nop			; (mov r8, r8)
 80037da:	4b8d      	ldr	r3, [pc, #564]	; (8003a10 <main+0x6cc>)
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b8b      	ldr	r3, [pc, #556]	; (8003a0c <main+0x6c8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	17da      	asrs	r2, r3, #31
 80037e6:	189b      	adds	r3, r3, r2
 80037e8:	4053      	eors	r3, r2
 80037ea:	2b04      	cmp	r3, #4
 80037ec:	dcf5      	bgt.n	80037da <main+0x496>
			  for (int i = 0; i < 2 && FM_FREQUENCY < 10800; i++)
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60bb      	str	r3, [r7, #8]
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	dc04      	bgt.n	8003804 <main+0x4c0>
 80037fa:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <main+0x6c8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a8a      	ldr	r2, [pc, #552]	; (8003a28 <main+0x6e4>)
 8003800:	4293      	cmp	r3, r2
 8003802:	dde1      	ble.n	80037c8 <main+0x484>
			  }

			  SCAN_STOP = false;
 8003804:	4b84      	ldr	r3, [pc, #528]	; (8003a18 <main+0x6d4>)
 8003806:	2200      	movs	r2, #0
 8003808:	701a      	strb	r2, [r3, #0]

			  do
			  {
				  FM_FREQUENCY += 5;
 800380a:	4b80      	ldr	r3, [pc, #512]	; (8003a0c <main+0x6c8>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	1d5a      	adds	r2, r3, #5
 8003810:	4b7e      	ldr	r3, [pc, #504]	; (8003a0c <main+0x6c8>)
 8003812:	601a      	str	r2, [r3, #0]
				  HAL_Delay(20);
 8003814:	2014      	movs	r0, #20
 8003816:	f001 fd93 	bl	8005340 <HAL_Delay>
				  while ((abs(FM_FREQUENCY_COUNTER - FM_FREQUENCY)) > 4);
 800381a:	46c0      	nop			; (mov r8, r8)
 800381c:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <main+0x6cc>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4b7a      	ldr	r3, [pc, #488]	; (8003a0c <main+0x6c8>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	17da      	asrs	r2, r3, #31
 8003828:	189b      	adds	r3, r3, r2
 800382a:	4053      	eors	r3, r2
 800382c:	2b04      	cmp	r3, #4
 800382e:	dcf5      	bgt.n	800381c <main+0x4d8>
			  } while (!SCAN_STOP && FM_FREQUENCY < 10800);
 8003830:	4b79      	ldr	r3, [pc, #484]	; (8003a18 <main+0x6d4>)
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	2201      	movs	r2, #1
 8003836:	4053      	eors	r3, r2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d004      	beq.n	8003848 <main+0x504>
 800383e:	4b73      	ldr	r3, [pc, #460]	; (8003a0c <main+0x6c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a79      	ldr	r2, [pc, #484]	; (8003a28 <main+0x6e4>)
 8003844:	4293      	cmp	r3, r2
 8003846:	dde0      	ble.n	800380a <main+0x4c6>

			  if (FM_FREQUENCY % 10 == 5)
 8003848:	4b70      	ldr	r3, [pc, #448]	; (8003a0c <main+0x6c8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	210a      	movs	r1, #10
 800384e:	0018      	movs	r0, r3
 8003850:	f7fc fdc6 	bl	80003e0 <__aeabi_idivmod>
 8003854:	000b      	movs	r3, r1
 8003856:	2b05      	cmp	r3, #5
 8003858:	d104      	bne.n	8003864 <main+0x520>
			  {
				  FM_FREQUENCY -= 5;
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <main+0x6c8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	1f5a      	subs	r2, r3, #5
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <main+0x6c8>)
 8003862:	601a      	str	r2, [r3, #0]
			  }

			  HAL_Delay(250);
 8003864:	20fa      	movs	r0, #250	; 0xfa
 8003866:	f001 fd6b 	bl	8005340 <HAL_Delay>
			  LOCK_FREQUENCY = true;
 800386a:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <main+0x6d8>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
			  misc_mute(false);
 8003870:	2000      	movs	r0, #0
 8003872:	f000 febf 	bl	80045f4 <misc_mute>
		  if (MODE == FM)
 8003876:	e063      	b.n	8003940 <main+0x5fc>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003878:	4b69      	ldr	r3, [pc, #420]	; (8003a20 <main+0x6dc>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2201      	movs	r2, #1
 800387e:	4053      	eors	r3, r2
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d029      	beq.n	80038da <main+0x596>
 8003886:	2003      	movs	r0, #3
 8003888:	f7ff f886 	bl	8002998 <keydecoder_in>
 800388c:	1e03      	subs	r3, r0, #0
 800388e:	d024      	beq.n	80038da <main+0x596>
	  {
		  // TUNING UP
		  if (MODE == FM && FM_FREQUENCY < 10800)
 8003890:	4b64      	ldr	r3, [pc, #400]	; (8003a24 <main+0x6e0>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10d      	bne.n	80038b4 <main+0x570>
 8003898:	4b5c      	ldr	r3, [pc, #368]	; (8003a0c <main+0x6c8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a62      	ldr	r2, [pc, #392]	; (8003a28 <main+0x6e4>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	dc08      	bgt.n	80038b4 <main+0x570>
		  {
			  FM_FREQUENCY += 5;
 80038a2:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <main+0x6c8>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	1d5a      	adds	r2, r3, #5
 80038a8:	4b58      	ldr	r3, [pc, #352]	; (8003a0c <main+0x6c8>)
 80038aa:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 80038ac:	20c8      	movs	r0, #200	; 0xc8
 80038ae:	f001 fd47 	bl	8005340 <HAL_Delay>
		  if (MODE == FM && FM_FREQUENCY < 10800)
 80038b2:	e044      	b.n	800393e <main+0x5fa>
		  }
		  else if (MODE == AM && AM_FREQUENCY < 1602)
 80038b4:	4b5b      	ldr	r3, [pc, #364]	; (8003a24 <main+0x6e0>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d140      	bne.n	800393e <main+0x5fa>
 80038bc:	4b5b      	ldr	r3, [pc, #364]	; (8003a2c <main+0x6e8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a5b      	ldr	r2, [pc, #364]	; (8003a30 <main+0x6ec>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	dc3b      	bgt.n	800393e <main+0x5fa>
		  {
			  AM_FREQUENCY += 9;
 80038c6:	4b59      	ldr	r3, [pc, #356]	; (8003a2c <main+0x6e8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3309      	adds	r3, #9
 80038cc:	001a      	movs	r2, r3
 80038ce:	4b57      	ldr	r3, [pc, #348]	; (8003a2c <main+0x6e8>)
 80038d0:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 80038d2:	20c8      	movs	r0, #200	; 0xc8
 80038d4:	f001 fd34 	bl	8005340 <HAL_Delay>
		  if (MODE == FM && FM_FREQUENCY < 10800)
 80038d8:	e031      	b.n	800393e <main+0x5fa>
		  }
	  }
	  else if (!STANDBY && keydecoder_in(4))
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <main+0x6dc>)
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2201      	movs	r2, #1
 80038e0:	4053      	eors	r3, r2
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d02b      	beq.n	8003940 <main+0x5fc>
 80038e8:	2004      	movs	r0, #4
 80038ea:	f7ff f855 	bl	8002998 <keydecoder_in>
 80038ee:	1e03      	subs	r3, r0, #0
 80038f0:	d026      	beq.n	8003940 <main+0x5fc>
	  {
		  // TUNING DOWN
		  if (MODE == FM && FM_FREQUENCY > 8750)
 80038f2:	4b4c      	ldr	r3, [pc, #304]	; (8003a24 <main+0x6e0>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <main+0x5d2>
 80038fa:	4b44      	ldr	r3, [pc, #272]	; (8003a0c <main+0x6c8>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a45      	ldr	r2, [pc, #276]	; (8003a14 <main+0x6d0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	dd08      	ble.n	8003916 <main+0x5d2>
		  {
			  FM_FREQUENCY -= 5;
 8003904:	4b41      	ldr	r3, [pc, #260]	; (8003a0c <main+0x6c8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1f5a      	subs	r2, r3, #5
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <main+0x6c8>)
 800390c:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 800390e:	20c8      	movs	r0, #200	; 0xc8
 8003910:	f001 fd16 	bl	8005340 <HAL_Delay>
 8003914:	e014      	b.n	8003940 <main+0x5fc>
		  }
		  else if (MODE == AM && AM_FREQUENCY > 531)
 8003916:	4b43      	ldr	r3, [pc, #268]	; (8003a24 <main+0x6e0>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d110      	bne.n	8003940 <main+0x5fc>
 800391e:	4b43      	ldr	r3, [pc, #268]	; (8003a2c <main+0x6e8>)
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2385      	movs	r3, #133	; 0x85
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	429a      	cmp	r2, r3
 8003928:	db0a      	blt.n	8003940 <main+0x5fc>
		  {
			  AM_FREQUENCY -= 9;
 800392a:	4b40      	ldr	r3, [pc, #256]	; (8003a2c <main+0x6e8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3b09      	subs	r3, #9
 8003930:	001a      	movs	r2, r3
 8003932:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <main+0x6e8>)
 8003934:	601a      	str	r2, [r3, #0]
			  HAL_Delay(200);
 8003936:	20c8      	movs	r0, #200	; 0xc8
 8003938:	f001 fd02 	bl	8005340 <HAL_Delay>
 800393c:	e000      	b.n	8003940 <main+0x5fc>
		  if (MODE == FM && FM_FREQUENCY < 10800)
 800393e:	46c0      	nop			; (mov r8, r8)
		  }
	  }

	  keydecoder_out(3);
 8003940:	2003      	movs	r0, #3
 8003942:	f7fe ffdb 	bl	80028fc <keydecoder_out>
	  if (CLOCK && SET_BUTTON && keydecoder_in(1))
 8003946:	4b3b      	ldr	r3, [pc, #236]	; (8003a34 <main+0x6f0>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d02c      	beq.n	80039a8 <main+0x664>
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <main+0x6f4>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d028      	beq.n	80039a8 <main+0x664>
 8003956:	2001      	movs	r0, #1
 8003958:	f7ff f81e 	bl	8002998 <keydecoder_in>
 800395c:	1e03      	subs	r3, r0, #0
 800395e:	d023      	beq.n	80039a8 <main+0x664>
	  {
		  // MIN
		  HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 8003960:	4936      	ldr	r1, [pc, #216]	; (8003a3c <main+0x6f8>)
 8003962:	4b37      	ldr	r3, [pc, #220]	; (8003a40 <main+0x6fc>)
 8003964:	2200      	movs	r2, #0
 8003966:	0018      	movs	r0, r3
 8003968:	f003 ff0c 	bl	8007784 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 800396c:	4935      	ldr	r1, [pc, #212]	; (8003a44 <main+0x700>)
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <main+0x6fc>)
 8003970:	2200      	movs	r2, #0
 8003972:	0018      	movs	r0, r3
 8003974:	f003 ff62 	bl	800783c <HAL_RTC_GetDate>

		  if (TIME.Minutes == 59)
 8003978:	4b30      	ldr	r3, [pc, #192]	; (8003a3c <main+0x6f8>)
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	2b3b      	cmp	r3, #59	; 0x3b
 800397e:	d103      	bne.n	8003988 <main+0x644>
		  {
			  TIME.Minutes = 0;
 8003980:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <main+0x6f8>)
 8003982:	2200      	movs	r2, #0
 8003984:	705a      	strb	r2, [r3, #1]
 8003986:	e005      	b.n	8003994 <main+0x650>
		  }
		  else
		  {
			  TIME.Minutes++;
 8003988:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <main+0x6f8>)
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	3301      	adds	r3, #1
 800398e:	b2da      	uxtb	r2, r3
 8003990:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <main+0x6f8>)
 8003992:	705a      	strb	r2, [r3, #1]
		  }

		  HAL_Delay(200);
 8003994:	20c8      	movs	r0, #200	; 0xc8
 8003996:	f001 fcd3 	bl	8005340 <HAL_Delay>
		  HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 800399a:	4928      	ldr	r1, [pc, #160]	; (8003a3c <main+0x6f8>)
 800399c:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <main+0x6fc>)
 800399e:	2200      	movs	r2, #0
 80039a0:	0018      	movs	r0, r3
 80039a2:	f003 fe47 	bl	8007634 <HAL_RTC_SetTime>
 80039a6:	e0ae      	b.n	8003b06 <main+0x7c2>
	  }
	  else if (CLOCK && SET_BUTTON && keydecoder_in(2))
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <main+0x6f0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d04b      	beq.n	8003a48 <main+0x704>
 80039b0:	4b21      	ldr	r3, [pc, #132]	; (8003a38 <main+0x6f4>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d047      	beq.n	8003a48 <main+0x704>
 80039b8:	2002      	movs	r0, #2
 80039ba:	f7fe ffed 	bl	8002998 <keydecoder_in>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d042      	beq.n	8003a48 <main+0x704>
	  {
		  // HOURS
		  HAL_RTC_GetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 80039c2:	491e      	ldr	r1, [pc, #120]	; (8003a3c <main+0x6f8>)
 80039c4:	4b1e      	ldr	r3, [pc, #120]	; (8003a40 <main+0x6fc>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	0018      	movs	r0, r3
 80039ca:	f003 fedb 	bl	8007784 <HAL_RTC_GetTime>
		  HAL_RTC_GetDate(&hrtc, &DATE, RTC_FORMAT_BIN);
 80039ce:	491d      	ldr	r1, [pc, #116]	; (8003a44 <main+0x700>)
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <main+0x6fc>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	0018      	movs	r0, r3
 80039d6:	f003 ff31 	bl	800783c <HAL_RTC_GetDate>

		  if (TIME.Hours == 23)
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <main+0x6f8>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b17      	cmp	r3, #23
 80039e0:	d103      	bne.n	80039ea <main+0x6a6>
		  {
			  TIME.Hours = 0;
 80039e2:	4b16      	ldr	r3, [pc, #88]	; (8003a3c <main+0x6f8>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e005      	b.n	80039f6 <main+0x6b2>
		  }
		  else
		  {
			  TIME.Hours++;
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <main+0x6f8>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	3301      	adds	r3, #1
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <main+0x6f8>)
 80039f4:	701a      	strb	r2, [r3, #0]
		  }

		  HAL_Delay(200);
 80039f6:	20c8      	movs	r0, #200	; 0xc8
 80039f8:	f001 fca2 	bl	8005340 <HAL_Delay>
		  HAL_RTC_SetTime(&hrtc, &TIME, RTC_FORMAT_BIN);
 80039fc:	490f      	ldr	r1, [pc, #60]	; (8003a3c <main+0x6f8>)
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <main+0x6fc>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	0018      	movs	r0, r3
 8003a04:	f003 fe16 	bl	8007634 <HAL_RTC_SetTime>
 8003a08:	e07d      	b.n	8003b06 <main+0x7c2>
 8003a0a:	46c0      	nop			; (mov r8, r8)
 8003a0c:	20000008 	.word	0x20000008
 8003a10:	20000154 	.word	0x20000154
 8003a14:	0000222e 	.word	0x0000222e
 8003a18:	2000015d 	.word	0x2000015d
 8003a1c:	20000015 	.word	0x20000015
 8003a20:	2000015a 	.word	0x2000015a
 8003a24:	2000000c 	.word	0x2000000c
 8003a28:	00002a2f 	.word	0x00002a2f
 8003a2c:	20000018 	.word	0x20000018
 8003a30:	00000641 	.word	0x00000641
 8003a34:	20000159 	.word	0x20000159
 8003a38:	2000015b 	.word	0x2000015b
 8003a3c:	2000013c 	.word	0x2000013c
 8003a40:	20000280 	.word	0x20000280
 8003a44:	20000150 	.word	0x20000150
	  }
	  else if (keydecoder_in(3))
 8003a48:	2003      	movs	r0, #3
 8003a4a:	f7fe ffa5 	bl	8002998 <keydecoder_in>
 8003a4e:	1e03      	subs	r3, r0, #0
 8003a50:	d04c      	beq.n	8003aec <main+0x7a8>
	  {
		  // MEMORY
		  if (!STANDBY && !MEMORY_BUTTON && MODE == FM)
 8003a52:	4b6a      	ldr	r3, [pc, #424]	; (8003bfc <main+0x8b8>)
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	4053      	eors	r3, r2
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d010      	beq.n	8003a82 <main+0x73e>
 8003a60:	4b67      	ldr	r3, [pc, #412]	; (8003c00 <main+0x8bc>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2201      	movs	r2, #1
 8003a66:	4053      	eors	r3, r2
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <main+0x73e>
 8003a6e:	4b65      	ldr	r3, [pc, #404]	; (8003c04 <main+0x8c0>)
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d105      	bne.n	8003a82 <main+0x73e>
		  {
			  saveFMStation();
 8003a76:	f7ff fabb 	bl	8002ff0 <saveFMStation>
			  MEMORY_BUTTON = true;
 8003a7a:	4b61      	ldr	r3, [pc, #388]	; (8003c00 <main+0x8bc>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	e041      	b.n	8003b06 <main+0x7c2>
		  }
		  else if (!STANDBY && !MEMORY_BUTTON && MODE == AM)
 8003a82:	4b5e      	ldr	r3, [pc, #376]	; (8003bfc <main+0x8b8>)
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2201      	movs	r2, #1
 8003a88:	4053      	eors	r3, r2
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <main+0x76e>
 8003a90:	4b5b      	ldr	r3, [pc, #364]	; (8003c00 <main+0x8bc>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2201      	movs	r2, #1
 8003a96:	4053      	eors	r3, r2
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <main+0x76e>
 8003a9e:	4b59      	ldr	r3, [pc, #356]	; (8003c04 <main+0x8c0>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d105      	bne.n	8003ab2 <main+0x76e>
		  {
			  saveAMStation();
 8003aa6:	f7ff fac1 	bl	800302c <saveAMStation>
			  MEMORY_BUTTON = true;
 8003aaa:	4b55      	ldr	r3, [pc, #340]	; (8003c00 <main+0x8bc>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e029      	b.n	8003b06 <main+0x7c2>
		  }
		  else if (STANDBY)
 8003ab2:	4b52      	ldr	r3, [pc, #328]	; (8003bfc <main+0x8b8>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d025      	beq.n	8003b06 <main+0x7c2>
		  {
			  STANDBY_DISPLAY_ON = !STANDBY_DISPLAY_ON;
 8003aba:	4b53      	ldr	r3, [pc, #332]	; (8003c08 <main+0x8c4>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	1e5a      	subs	r2, r3, #1
 8003ac0:	4193      	sbcs	r3, r2
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4053      	eors	r3, r2
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	1c1a      	adds	r2, r3, #0
 8003acc:	2301      	movs	r3, #1
 8003ace:	4013      	ands	r3, r2
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b4d      	ldr	r3, [pc, #308]	; (8003c08 <main+0x8c4>)
 8003ad4:	701a      	strb	r2, [r3, #0]
			  display_on(STANDBY_DISPLAY_ON);
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	; (8003c08 <main+0x8c4>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7fe fadc 	bl	8002098 <display_on>
			  HAL_Delay(500);
 8003ae0:	23fa      	movs	r3, #250	; 0xfa
 8003ae2:	005b      	lsls	r3, r3, #1
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f001 fc2b 	bl	8005340 <HAL_Delay>
 8003aea:	e00c      	b.n	8003b06 <main+0x7c2>
		  }
	  }
	  else if (!keydecoder_in(3))
 8003aec:	2003      	movs	r0, #3
 8003aee:	f7fe ff53 	bl	8002998 <keydecoder_in>
 8003af2:	0003      	movs	r3, r0
 8003af4:	001a      	movs	r2, r3
 8003af6:	2301      	movs	r3, #1
 8003af8:	4053      	eors	r3, r2
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <main+0x7c2>
	  {
		  MEMORY_BUTTON = false;
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <main+0x8bc>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
	  }

	  keydecoder_out(4);
 8003b06:	2004      	movs	r0, #4
 8003b08:	f7fe fef8 	bl	80028fc <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2))
 8003b0c:	4b3b      	ldr	r3, [pc, #236]	; (8003bfc <main+0x8b8>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2201      	movs	r2, #1
 8003b12:	4053      	eors	r3, r2
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <main+0x7ea>
 8003b1a:	2002      	movs	r0, #2
 8003b1c:	f7fe ff3c 	bl	8002998 <keydecoder_in>
 8003b20:	1e03      	subs	r3, r0, #0
 8003b22:	d004      	beq.n	8003b2e <main+0x7ea>
	  {
		  // S3
		  setStation(3, false);
 8003b24:	2100      	movs	r1, #0
 8003b26:	2003      	movs	r0, #3
 8003b28:	f7ff fa96 	bl	8003058 <setStation>
 8003b2c:	e020      	b.n	8003b70 <main+0x82c>
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003b2e:	4b33      	ldr	r3, [pc, #204]	; (8003bfc <main+0x8b8>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2201      	movs	r2, #1
 8003b34:	4053      	eors	r3, r2
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <main+0x80c>
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f7fe ff2b 	bl	8002998 <keydecoder_in>
 8003b42:	1e03      	subs	r3, r0, #0
 8003b44:	d004      	beq.n	8003b50 <main+0x80c>
	  {
		  // S2
		  setStation(2, false);
 8003b46:	2100      	movs	r1, #0
 8003b48:	2002      	movs	r0, #2
 8003b4a:	f7ff fa85 	bl	8003058 <setStation>
 8003b4e:	e00f      	b.n	8003b70 <main+0x82c>
	  }
	  else if (!STANDBY && keydecoder_in(4))
 8003b50:	4b2a      	ldr	r3, [pc, #168]	; (8003bfc <main+0x8b8>)
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	2201      	movs	r2, #1
 8003b56:	4053      	eors	r3, r2
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <main+0x82c>
 8003b5e:	2004      	movs	r0, #4
 8003b60:	f7fe ff1a 	bl	8002998 <keydecoder_in>
 8003b64:	1e03      	subs	r3, r0, #0
 8003b66:	d003      	beq.n	8003b70 <main+0x82c>
	  {
		  // S1
		  setStation(1, false);
 8003b68:	2100      	movs	r1, #0
 8003b6a:	2001      	movs	r0, #1
 8003b6c:	f7ff fa74 	bl	8003058 <setStation>
	  }

	  keydecoder_out(5);
 8003b70:	2005      	movs	r0, #5
 8003b72:	f7fe fec3 	bl	80028fc <keydecoder_out>
	  if (!STANDBY && keydecoder_in(2))
 8003b76:	4b21      	ldr	r3, [pc, #132]	; (8003bfc <main+0x8b8>)
 8003b78:	781b      	ldrb	r3, [r3, #0]
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	4053      	eors	r3, r2
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <main+0x854>
 8003b84:	2002      	movs	r0, #2
 8003b86:	f7fe ff07 	bl	8002998 <keydecoder_in>
 8003b8a:	1e03      	subs	r3, r0, #0
 8003b8c:	d004      	beq.n	8003b98 <main+0x854>
	  {
		  // S6
		  setStation(6, false);
 8003b8e:	2100      	movs	r1, #0
 8003b90:	2006      	movs	r0, #6
 8003b92:	f7ff fa61 	bl	8003058 <setStation>
 8003b96:	e020      	b.n	8003bda <main+0x896>
	  }
	  else if (!STANDBY && keydecoder_in(3))
 8003b98:	4b18      	ldr	r3, [pc, #96]	; (8003bfc <main+0x8b8>)
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4053      	eors	r3, r2
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <main+0x876>
 8003ba6:	2003      	movs	r0, #3
 8003ba8:	f7fe fef6 	bl	8002998 <keydecoder_in>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d004      	beq.n	8003bba <main+0x876>
	  {
		  // S5
		  setStation(5, false);
 8003bb0:	2100      	movs	r1, #0
 8003bb2:	2005      	movs	r0, #5
 8003bb4:	f7ff fa50 	bl	8003058 <setStation>
 8003bb8:	e00f      	b.n	8003bda <main+0x896>
	  }
	  else if (!STANDBY && keydecoder_in(4))
 8003bba:	4b10      	ldr	r3, [pc, #64]	; (8003bfc <main+0x8b8>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	4053      	eors	r3, r2
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d008      	beq.n	8003bda <main+0x896>
 8003bc8:	2004      	movs	r0, #4
 8003bca:	f7fe fee5 	bl	8002998 <keydecoder_in>
 8003bce:	1e03      	subs	r3, r0, #0
 8003bd0:	d003      	beq.n	8003bda <main+0x896>
	  {
		  // S4
		  setStation(4, false);
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	2004      	movs	r0, #4
 8003bd6:	f7ff fa3f 	bl	8003058 <setStation>
	  }

	  // If station buttons are broken and do not lock properly set MAN as default.
	  if (misc_is_manual() || STATION == -1)
 8003bda:	f000 fcfb 	bl	80045d4 <misc_is_manual>
 8003bde:	1e03      	subs	r3, r0, #0
 8003be0:	d105      	bne.n	8003bee <main+0x8aa>
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <main+0x8c8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	d001      	beq.n	8003bee <main+0x8aa>
 8003bea:	f7ff fbf3 	bl	80033d4 <main+0x90>
	  {
		  setStation(0, false);
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	f7ff fa31 	bl	8003058 <setStation>
  {
 8003bf6:	f7ff fbed 	bl	80033d4 <main+0x90>
 8003bfa:	46c0      	nop			; (mov r8, r8)
 8003bfc:	2000015a 	.word	0x2000015a
 8003c00:	2000015c 	.word	0x2000015c
 8003c04:	2000000c 	.word	0x2000000c
 8003c08:	20000014 	.word	0x20000014
 8003c0c:	20000010 	.word	0x20000010

08003c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b099      	sub	sp, #100	; 0x64
 8003c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003c16:	242c      	movs	r4, #44	; 0x2c
 8003c18:	193b      	adds	r3, r7, r4
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	2334      	movs	r3, #52	; 0x34
 8003c1e:	001a      	movs	r2, r3
 8003c20:	2100      	movs	r1, #0
 8003c22:	f005 fa19 	bl	8009058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003c26:	231c      	movs	r3, #28
 8003c28:	18fb      	adds	r3, r7, r3
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	2310      	movs	r3, #16
 8003c2e:	001a      	movs	r2, r3
 8003c30:	2100      	movs	r1, #0
 8003c32:	f005 fa11 	bl	8009058 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003c36:	003b      	movs	r3, r7
 8003c38:	0018      	movs	r0, r3
 8003c3a:	231c      	movs	r3, #28
 8003c3c:	001a      	movs	r2, r3
 8003c3e:	2100      	movs	r1, #0
 8003c40:	f005 fa0a 	bl	8009058 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c44:	2380      	movs	r3, #128	; 0x80
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	0018      	movs	r0, r3
 8003c4a:	f002 fe13 	bl	8006874 <HAL_PWREx_ControlVoltageScaling>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003c4e:	f002 fe03 	bl	8006858 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003c52:	4b2e      	ldr	r3, [pc, #184]	; (8003d0c <SystemClock_Config+0xfc>)
 8003c54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c56:	4b2d      	ldr	r3, [pc, #180]	; (8003d0c <SystemClock_Config+0xfc>)
 8003c58:	2118      	movs	r1, #24
 8003c5a:	438a      	bics	r2, r1
 8003c5c:	65da      	str	r2, [r3, #92]	; 0x5c
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2205      	movs	r2, #5
 8003c62:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003c64:	193b      	adds	r3, r7, r4
 8003c66:	2280      	movs	r2, #128	; 0x80
 8003c68:	0252      	lsls	r2, r2, #9
 8003c6a:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c6c:	0021      	movs	r1, r4
 8003c6e:	187b      	adds	r3, r7, r1
 8003c70:	2201      	movs	r2, #1
 8003c72:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c74:	187b      	adds	r3, r7, r1
 8003c76:	2202      	movs	r2, #2
 8003c78:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c7a:	187b      	adds	r3, r7, r1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8003c80:	187b      	adds	r3, r7, r1
 8003c82:	2230      	movs	r2, #48	; 0x30
 8003c84:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 63;
 8003c86:	187b      	adds	r3, r7, r1
 8003c88:	223f      	movs	r2, #63	; 0x3f
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003c8c:	187b      	adds	r3, r7, r1
 8003c8e:	2280      	movs	r2, #128	; 0x80
 8003c90:	0292      	lsls	r2, r2, #10
 8003c92:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8003c94:	187b      	adds	r3, r7, r1
 8003c96:	22c0      	movs	r2, #192	; 0xc0
 8003c98:	05d2      	lsls	r2, r2, #23
 8003c9a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c9c:	187b      	adds	r3, r7, r1
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f002 fe28 	bl	80068f4 <HAL_RCC_OscConfig>
 8003ca4:	1e03      	subs	r3, r0, #0
 8003ca6:	d001      	beq.n	8003cac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003ca8:	f000 fc44 	bl	8004534 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003cac:	211c      	movs	r1, #28
 8003cae:	187b      	adds	r3, r7, r1
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003cb4:	187b      	adds	r3, r7, r1
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003cba:	187b      	adds	r3, r7, r1
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003cc0:	187b      	adds	r3, r7, r1
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003cc6:	187b      	adds	r3, r7, r1
 8003cc8:	2102      	movs	r1, #2
 8003cca:	0018      	movs	r0, r3
 8003ccc:	f003 f928 	bl	8006f20 <HAL_RCC_ClockConfig>
 8003cd0:	1e03      	subs	r3, r0, #0
 8003cd2:	d001      	beq.n	8003cd8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003cd4:	f000 fc2e 	bl	8004534 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8003cd8:	003b      	movs	r3, r7
 8003cda:	2290      	movs	r2, #144	; 0x90
 8003cdc:	0292      	lsls	r2, r2, #10
 8003cde:	601a      	str	r2, [r3, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8003ce0:	003b      	movs	r3, r7
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003ce6:	003b      	movs	r3, r7
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	0052      	lsls	r2, r2, #1
 8003cec:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cee:	003b      	movs	r3, r7
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f003 fad5 	bl	80072a0 <HAL_RCCEx_PeriphCLKConfig>
 8003cf6:	1e03      	subs	r3, r0, #0
 8003cf8:	d001      	beq.n	8003cfe <SystemClock_Config+0xee>
  {
    Error_Handler();
 8003cfa:	f000 fc1b 	bl	8004534 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003cfe:	f003 fa97 	bl	8007230 <HAL_RCC_EnableCSS>
}
 8003d02:	46c0      	nop			; (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b019      	add	sp, #100	; 0x64
 8003d08:	bd90      	pop	{r4, r7, pc}
 8003d0a:	46c0      	nop			; (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000

08003d10 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	0018      	movs	r0, r3
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	001a      	movs	r2, r3
 8003d1e:	2100      	movs	r1, #0
 8003d20:	f005 f99a 	bl	8009058 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003d24:	4b2d      	ldr	r3, [pc, #180]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d26:	4a2e      	ldr	r2, [pc, #184]	; (8003de0 <MX_ADC1_Init+0xd0>)
 8003d28:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003d2a:	4b2c      	ldr	r3, [pc, #176]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d2c:	2280      	movs	r2, #128	; 0x80
 8003d2e:	0612      	lsls	r2, r2, #24
 8003d30:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003d32:	4b2a      	ldr	r3, [pc, #168]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d34:	2200      	movs	r2, #0
 8003d36:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003d38:	4b28      	ldr	r3, [pc, #160]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003d3e:	4b27      	ldr	r3, [pc, #156]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003d44:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d46:	2204      	movs	r2, #4
 8003d48:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003d4a:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8003d50:	4b22      	ldr	r3, [pc, #136]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8003d5c:	4b1f      	ldr	r3, [pc, #124]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d5e:	2201      	movs	r2, #1
 8003d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d64:	2220      	movs	r2, #32
 8003d66:	2100      	movs	r1, #0
 8003d68:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003d70:	4b1a      	ldr	r3, [pc, #104]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003d76:	4b19      	ldr	r3, [pc, #100]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d78:	222c      	movs	r2, #44	; 0x2c
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003d7e:	4b17      	ldr	r3, [pc, #92]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8003d84:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8003d90:	4b12      	ldr	r3, [pc, #72]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d92:	223c      	movs	r2, #60	; 0x3c
 8003d94:	2100      	movs	r1, #0
 8003d96:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8003d98:	4b10      	ldr	r3, [pc, #64]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003d9e:	4b0f      	ldr	r3, [pc, #60]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f001 fc25 	bl	80055f0 <HAL_ADC_Init>
 8003da6:	1e03      	subs	r3, r0, #0
 8003da8:	d001      	beq.n	8003dae <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8003daa:	f000 fbc3 	bl	8004534 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003dae:	1d3b      	adds	r3, r7, #4
 8003db0:	2201      	movs	r2, #1
 8003db2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003db4:	1d3b      	adds	r3, r7, #4
 8003db6:	2200      	movs	r2, #0
 8003db8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8003dba:	1d3b      	adds	r3, r7, #4
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003dc0:	1d3a      	adds	r2, r7, #4
 8003dc2:	4b06      	ldr	r3, [pc, #24]	; (8003ddc <MX_ADC1_Init+0xcc>)
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f001 fed2 	bl	8005b70 <HAL_ADC_ConfigChannel>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8003dd0:	f000 fbb0 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003dd4:	46c0      	nop			; (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b004      	add	sp, #16
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	2000021c 	.word	0x2000021c
 8003de0:	40012400 	.word	0x40012400

08003de4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003de8:	4b13      	ldr	r3, [pc, #76]	; (8003e38 <MX_RTC_Init+0x54>)
 8003dea:	4a14      	ldr	r2, [pc, #80]	; (8003e3c <MX_RTC_Init+0x58>)
 8003dec:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <MX_RTC_Init+0x54>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <MX_RTC_Init+0x54>)
 8003df6:	227f      	movs	r2, #127	; 0x7f
 8003df8:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <MX_RTC_Init+0x54>)
 8003dfc:	22ff      	movs	r2, #255	; 0xff
 8003dfe:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003e00:	4b0d      	ldr	r3, [pc, #52]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003e06:	4b0c      	ldr	r3, [pc, #48]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e0e:	2200      	movs	r2, #0
 8003e10:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003e12:	4b09      	ldr	r3, [pc, #36]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e14:	2280      	movs	r2, #128	; 0x80
 8003e16:	05d2      	lsls	r2, r2, #23
 8003e18:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8003e1a:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <MX_RTC_Init+0x54>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f003 fb70 	bl	8007508 <HAL_RTC_Init>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d001      	beq.n	8003e30 <MX_RTC_Init+0x4c>
  {
    Error_Handler();
 8003e2c:	f000 fb82 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	20000280 	.word	0x20000280
 8003e3c:	40002800 	.word	0x40002800

08003e40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b088      	sub	sp, #32
 8003e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e46:	2310      	movs	r3, #16
 8003e48:	18fb      	adds	r3, r7, r3
 8003e4a:	0018      	movs	r0, r3
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	001a      	movs	r2, r3
 8003e50:	2100      	movs	r1, #0
 8003e52:	f005 f901 	bl	8009058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e56:	1d3b      	adds	r3, r7, #4
 8003e58:	0018      	movs	r0, r3
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	001a      	movs	r2, r3
 8003e5e:	2100      	movs	r1, #0
 8003e60:	f005 f8fa 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003e64:	4b25      	ldr	r3, [pc, #148]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e66:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <MX_TIM1_Init+0xc0>)
 8003e68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003e6a:	4b24      	ldr	r3, [pc, #144]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e70:	4b22      	ldr	r3, [pc, #136]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003e76:	4b21      	ldr	r3, [pc, #132]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e78:	4a22      	ldr	r2, [pc, #136]	; (8003f04 <MX_TIM1_Init+0xc4>)
 8003e7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e7c:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e7e:	2200      	movs	r2, #0
 8003e80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003e82:	4b1e      	ldr	r3, [pc, #120]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e8a:	2280      	movs	r2, #128	; 0x80
 8003e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003e90:	0018      	movs	r0, r3
 8003e92:	f003 fe14 	bl	8007abe <HAL_TIM_Base_Init>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8003e9a:	f000 fb4b 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003e9e:	2110      	movs	r1, #16
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2280      	movs	r2, #128	; 0x80
 8003ea4:	0192      	lsls	r2, r2, #6
 8003ea6:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2200      	movs	r2, #0
 8003eac:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003eba:	187a      	adds	r2, r7, r1
 8003ebc:	4b0f      	ldr	r3, [pc, #60]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f004 fa93 	bl	80083ec <HAL_TIM_ConfigClockSource>
 8003ec6:	1e03      	subs	r3, r0, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8003eca:	f000 fb33 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ece:	1d3b      	adds	r3, r7, #4
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003ed4:	1d3b      	adds	r3, r7, #4
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	2200      	movs	r2, #0
 8003ede:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ee0:	1d3a      	adds	r2, r7, #4
 8003ee2:	4b06      	ldr	r3, [pc, #24]	; (8003efc <MX_TIM1_Init+0xbc>)
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f004 ff66 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003ef0:	f000 fb20 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003ef4:	46c0      	nop			; (mov r8, r8)
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	b008      	add	sp, #32
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	200002f8 	.word	0x200002f8
 8003f00:	40012c00 	.word	0x40012c00
 8003f04:	0000ffff 	.word	0x0000ffff

08003f08 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b088      	sub	sp, #32
 8003f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f0e:	2310      	movs	r3, #16
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	0018      	movs	r0, r3
 8003f14:	2310      	movs	r3, #16
 8003f16:	001a      	movs	r2, r3
 8003f18:	2100      	movs	r1, #0
 8003f1a:	f005 f89d 	bl	8009058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f1e:	1d3b      	adds	r3, r7, #4
 8003f20:	0018      	movs	r0, r3
 8003f22:	230c      	movs	r3, #12
 8003f24:	001a      	movs	r2, r3
 8003f26:	2100      	movs	r1, #0
 8003f28:	f005 f896 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003f2c:	4b22      	ldr	r3, [pc, #136]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f2e:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <MX_TIM3_Init+0xb4>)
 8003f30:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003f32:	4b21      	ldr	r3, [pc, #132]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f38:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003f3e:	4b1e      	ldr	r3, [pc, #120]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f40:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <MX_TIM3_Init+0xb8>)
 8003f42:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f44:	4b1c      	ldr	r3, [pc, #112]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f46:	2200      	movs	r2, #0
 8003f48:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f4a:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f4c:	2280      	movs	r2, #128	; 0x80
 8003f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003f50:	4b19      	ldr	r3, [pc, #100]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f52:	0018      	movs	r0, r3
 8003f54:	f003 fdb3 	bl	8007abe <HAL_TIM_Base_Init>
 8003f58:	1e03      	subs	r3, r0, #0
 8003f5a:	d001      	beq.n	8003f60 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003f5c:	f000 faea 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8003f60:	2110      	movs	r1, #16
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2280      	movs	r2, #128	; 0x80
 8003f66:	0192      	lsls	r2, r2, #6
 8003f68:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8003f6a:	187b      	adds	r3, r7, r1
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8003f70:	187b      	adds	r3, r7, r1
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8003f76:	187b      	adds	r3, r7, r1
 8003f78:	2200      	movs	r2, #0
 8003f7a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003f7c:	187a      	adds	r2, r7, r1
 8003f7e:	4b0e      	ldr	r3, [pc, #56]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003f80:	0011      	movs	r1, r2
 8003f82:	0018      	movs	r0, r3
 8003f84:	f004 fa32 	bl	80083ec <HAL_TIM_ConfigClockSource>
 8003f88:	1e03      	subs	r3, r0, #0
 8003f8a:	d001      	beq.n	8003f90 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003f8c:	f000 fad2 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	2200      	movs	r2, #0
 8003f9a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003f9c:	1d3a      	adds	r2, r7, #4
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <MX_TIM3_Init+0xb0>)
 8003fa0:	0011      	movs	r1, r2
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f004 ff08 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8003fa8:	1e03      	subs	r3, r0, #0
 8003faa:	d001      	beq.n	8003fb0 <MX_TIM3_Init+0xa8>
  {
    Error_Handler();
 8003fac:	f000 fac2 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003fb0:	46c0      	nop			; (mov r8, r8)
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b008      	add	sp, #32
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	200001d0 	.word	0x200001d0
 8003fbc:	40000400 	.word	0x40000400
 8003fc0:	0000ffff 	.word	0x0000ffff

08003fc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fca:	1d3b      	adds	r3, r7, #4
 8003fcc:	0018      	movs	r0, r3
 8003fce:	230c      	movs	r3, #12
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f005 f840 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003fd8:	4b16      	ldr	r3, [pc, #88]	; (8004034 <MX_TIM6_Init+0x70>)
 8003fda:	4a17      	ldr	r2, [pc, #92]	; (8004038 <MX_TIM6_Init+0x74>)
 8003fdc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8003fde:	4b15      	ldr	r3, [pc, #84]	; (8004034 <MX_TIM6_Init+0x70>)
 8003fe0:	22fa      	movs	r2, #250	; 0xfa
 8003fe2:	0092      	lsls	r2, r2, #2
 8003fe4:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <MX_TIM6_Init+0x70>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 900;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <MX_TIM6_Init+0x70>)
 8003fee:	22e1      	movs	r2, #225	; 0xe1
 8003ff0:	0092      	lsls	r2, r2, #2
 8003ff2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ff4:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <MX_TIM6_Init+0x70>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	; (8004034 <MX_TIM6_Init+0x70>)
 8003ffc:	0018      	movs	r0, r3
 8003ffe:	f003 fd5e 	bl	8007abe <HAL_TIM_Base_Init>
 8004002:	1e03      	subs	r3, r0, #0
 8004004:	d001      	beq.n	800400a <MX_TIM6_Init+0x46>
  {
    Error_Handler();
 8004006:	f000 fa95 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004010:	1d3b      	adds	r3, r7, #4
 8004012:	2200      	movs	r2, #0
 8004014:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8004016:	1d3a      	adds	r2, r7, #4
 8004018:	4b06      	ldr	r3, [pc, #24]	; (8004034 <MX_TIM6_Init+0x70>)
 800401a:	0011      	movs	r1, r2
 800401c:	0018      	movs	r0, r3
 800401e:	f004 fecb 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8004022:	1e03      	subs	r3, r0, #0
 8004024:	d001      	beq.n	800402a <MX_TIM6_Init+0x66>
  {
    Error_Handler();
 8004026:	f000 fa85 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800402a:	46c0      	nop			; (mov r8, r8)
 800402c:	46bd      	mov	sp, r7
 800402e:	b004      	add	sp, #16
 8004030:	bd80      	pop	{r7, pc}
 8004032:	46c0      	nop			; (mov r8, r8)
 8004034:	200002ac 	.word	0x200002ac
 8004038:	40001000 	.word	0x40001000

0800403c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	0018      	movs	r0, r3
 8004046:	230c      	movs	r3, #12
 8004048:	001a      	movs	r2, r3
 800404a:	2100      	movs	r1, #0
 800404c:	f005 f804 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004050:	4b15      	ldr	r3, [pc, #84]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004052:	4a16      	ldr	r2, [pc, #88]	; (80040ac <MX_TIM7_Init+0x70>)
 8004054:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 500;
 8004056:	4b14      	ldr	r3, [pc, #80]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004058:	22fa      	movs	r2, #250	; 0xfa
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800405e:	4b12      	ldr	r3, [pc, #72]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 250;
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004066:	22fa      	movs	r2, #250	; 0xfa
 8004068:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800406a:	4b0f      	ldr	r3, [pc, #60]	; (80040a8 <MX_TIM7_Init+0x6c>)
 800406c:	2200      	movs	r2, #0
 800406e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004072:	0018      	movs	r0, r3
 8004074:	f003 fd23 	bl	8007abe <HAL_TIM_Base_Init>
 8004078:	1e03      	subs	r3, r0, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 800407c:	f000 fa5a 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	2200      	movs	r2, #0
 8004084:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004086:	1d3b      	adds	r3, r7, #4
 8004088:	2200      	movs	r2, #0
 800408a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800408c:	1d3a      	adds	r2, r7, #4
 800408e:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <MX_TIM7_Init+0x6c>)
 8004090:	0011      	movs	r1, r2
 8004092:	0018      	movs	r0, r3
 8004094:	f004 fe90 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 8004098:	1e03      	subs	r3, r0, #0
 800409a:	d001      	beq.n	80040a0 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 800409c:	f000 fa4a 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b004      	add	sp, #16
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	200003dc 	.word	0x200003dc
 80040ac:	40001400 	.word	0x40001400

080040b0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040b6:	4a10      	ldr	r2, [pc, #64]	; (80040f8 <MX_TIM14_Init+0x48>)
 80040b8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 500;
 80040ba:	4b0e      	ldr	r3, [pc, #56]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040bc:	22fa      	movs	r2, #250	; 0xfa
 80040be:	0052      	lsls	r2, r2, #1
 80040c0:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 80040c8:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040ca:	22fa      	movs	r2, #250	; 0xfa
 80040cc:	0092      	lsls	r2, r2, #2
 80040ce:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040d0:	4b08      	ldr	r3, [pc, #32]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040d6:	4b07      	ldr	r3, [pc, #28]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040d8:	2280      	movs	r2, #128	; 0x80
 80040da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80040dc:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <MX_TIM14_Init+0x44>)
 80040de:	0018      	movs	r0, r3
 80040e0:	f003 fced 	bl	8007abe <HAL_TIM_Base_Init>
 80040e4:	1e03      	subs	r3, r0, #0
 80040e6:	d001      	beq.n	80040ec <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 80040e8:	f000 fa24 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80040ec:	46c0      	nop			; (mov r8, r8)
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	46c0      	nop			; (mov r8, r8)
 80040f4:	20000344 	.word	0x20000344
 80040f8:	40002000 	.word	0x40002000

080040fc <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b09c      	sub	sp, #112	; 0x70
 8004100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004102:	2360      	movs	r3, #96	; 0x60
 8004104:	18fb      	adds	r3, r7, r3
 8004106:	0018      	movs	r0, r3
 8004108:	2310      	movs	r3, #16
 800410a:	001a      	movs	r2, r3
 800410c:	2100      	movs	r1, #0
 800410e:	f004 ffa3 	bl	8009058 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004112:	2354      	movs	r3, #84	; 0x54
 8004114:	18fb      	adds	r3, r7, r3
 8004116:	0018      	movs	r0, r3
 8004118:	230c      	movs	r3, #12
 800411a:	001a      	movs	r2, r3
 800411c:	2100      	movs	r1, #0
 800411e:	f004 ff9b 	bl	8009058 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004122:	2338      	movs	r3, #56	; 0x38
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	0018      	movs	r0, r3
 8004128:	231c      	movs	r3, #28
 800412a:	001a      	movs	r2, r3
 800412c:	2100      	movs	r1, #0
 800412e:	f004 ff93 	bl	8009058 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004132:	1d3b      	adds	r3, r7, #4
 8004134:	0018      	movs	r0, r3
 8004136:	2334      	movs	r3, #52	; 0x34
 8004138:	001a      	movs	r2, r3
 800413a:	2100      	movs	r1, #0
 800413c:	f004 ff8c 	bl	8009058 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8004140:	4b47      	ldr	r3, [pc, #284]	; (8004260 <MX_TIM15_Init+0x164>)
 8004142:	4a48      	ldr	r2, [pc, #288]	; (8004264 <MX_TIM15_Init+0x168>)
 8004144:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8004146:	4b46      	ldr	r3, [pc, #280]	; (8004260 <MX_TIM15_Init+0x164>)
 8004148:	2200      	movs	r2, #0
 800414a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800414c:	4b44      	ldr	r3, [pc, #272]	; (8004260 <MX_TIM15_Init+0x164>)
 800414e:	2200      	movs	r2, #0
 8004150:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 17500;
 8004152:	4b43      	ldr	r3, [pc, #268]	; (8004260 <MX_TIM15_Init+0x164>)
 8004154:	4a44      	ldr	r2, [pc, #272]	; (8004268 <MX_TIM15_Init+0x16c>)
 8004156:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004158:	4b41      	ldr	r3, [pc, #260]	; (8004260 <MX_TIM15_Init+0x164>)
 800415a:	2200      	movs	r2, #0
 800415c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800415e:	4b40      	ldr	r3, [pc, #256]	; (8004260 <MX_TIM15_Init+0x164>)
 8004160:	2200      	movs	r2, #0
 8004162:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <MX_TIM15_Init+0x164>)
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800416a:	4b3d      	ldr	r3, [pc, #244]	; (8004260 <MX_TIM15_Init+0x164>)
 800416c:	0018      	movs	r0, r3
 800416e:	f003 fca6 	bl	8007abe <HAL_TIM_Base_Init>
 8004172:	1e03      	subs	r3, r0, #0
 8004174:	d001      	beq.n	800417a <MX_TIM15_Init+0x7e>
  {
    Error_Handler();
 8004176:	f000 f9dd 	bl	8004534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800417a:	2160      	movs	r1, #96	; 0x60
 800417c:	187b      	adds	r3, r7, r1
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	0152      	lsls	r2, r2, #5
 8004182:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8004184:	187a      	adds	r2, r7, r1
 8004186:	4b36      	ldr	r3, [pc, #216]	; (8004260 <MX_TIM15_Init+0x164>)
 8004188:	0011      	movs	r1, r2
 800418a:	0018      	movs	r0, r3
 800418c:	f004 f92e 	bl	80083ec <HAL_TIM_ConfigClockSource>
 8004190:	1e03      	subs	r3, r0, #0
 8004192:	d001      	beq.n	8004198 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 8004194:	f000 f9ce 	bl	8004534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8004198:	4b31      	ldr	r3, [pc, #196]	; (8004260 <MX_TIM15_Init+0x164>)
 800419a:	0018      	movs	r0, r3
 800419c:	f003 fdba 	bl	8007d14 <HAL_TIM_PWM_Init>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM15_Init+0xac>
  {
    Error_Handler();
 80041a4:	f000 f9c6 	bl	8004534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80041a8:	2154      	movs	r1, #84	; 0x54
 80041aa:	187b      	adds	r3, r7, r1
 80041ac:	2200      	movs	r2, #0
 80041ae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80041b0:	187b      	adds	r3, r7, r1
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80041b6:	187a      	adds	r2, r7, r1
 80041b8:	4b29      	ldr	r3, [pc, #164]	; (8004260 <MX_TIM15_Init+0x164>)
 80041ba:	0011      	movs	r1, r2
 80041bc:	0018      	movs	r0, r3
 80041be:	f004 fdfb 	bl	8008db8 <HAL_TIMEx_MasterConfigSynchronization>
 80041c2:	1e03      	subs	r3, r0, #0
 80041c4:	d001      	beq.n	80041ca <MX_TIM15_Init+0xce>
  {
    Error_Handler();
 80041c6:	f000 f9b5 	bl	8004534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041ca:	2138      	movs	r1, #56	; 0x38
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	2260      	movs	r2, #96	; 0x60
 80041d0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 200;
 80041d2:	187b      	adds	r3, r7, r1
 80041d4:	22c8      	movs	r2, #200	; 0xc8
 80041d6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041d8:	187b      	adds	r3, r7, r1
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80041de:	187b      	adds	r3, r7, r1
 80041e0:	2200      	movs	r2, #0
 80041e2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041e4:	187b      	adds	r3, r7, r1
 80041e6:	2200      	movs	r2, #0
 80041e8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80041ea:	187b      	adds	r3, r7, r1
 80041ec:	2200      	movs	r2, #0
 80041ee:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80041f0:	187b      	adds	r3, r7, r1
 80041f2:	2200      	movs	r2, #0
 80041f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80041f6:	1879      	adds	r1, r7, r1
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <MX_TIM15_Init+0x164>)
 80041fa:	2204      	movs	r2, #4
 80041fc:	0018      	movs	r0, r3
 80041fe:	f003 ffff 	bl	8008200 <HAL_TIM_PWM_ConfigChannel>
 8004202:	1e03      	subs	r3, r0, #0
 8004204:	d001      	beq.n	800420a <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8004206:	f000 f995 	bl	8004534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800420a:	1d3b      	adds	r3, r7, #4
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004210:	1d3b      	adds	r3, r7, #4
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004216:	1d3b      	adds	r3, r7, #4
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800421c:	1d3b      	adds	r3, r7, #4
 800421e:	2200      	movs	r2, #0
 8004220:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004222:	1d3b      	adds	r3, r7, #4
 8004224:	2200      	movs	r2, #0
 8004226:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	2280      	movs	r2, #128	; 0x80
 800422c:	0192      	lsls	r2, r2, #6
 800422e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004230:	1d3b      	adds	r3, r7, #4
 8004232:	2200      	movs	r2, #0
 8004234:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004236:	1d3b      	adds	r3, r7, #4
 8004238:	2200      	movs	r2, #0
 800423a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800423c:	1d3a      	adds	r2, r7, #4
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <MX_TIM15_Init+0x164>)
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f004 fe20 	bl	8008e88 <HAL_TIMEx_ConfigBreakDeadTime>
 8004248:	1e03      	subs	r3, r0, #0
 800424a:	d001      	beq.n	8004250 <MX_TIM15_Init+0x154>
  {
    Error_Handler();
 800424c:	f000 f972 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8004250:	4b03      	ldr	r3, [pc, #12]	; (8004260 <MX_TIM15_Init+0x164>)
 8004252:	0018      	movs	r0, r3
 8004254:	f000 ff00 	bl	8005058 <HAL_TIM_MspPostInit>

}
 8004258:	46c0      	nop			; (mov r8, r8)
 800425a:	46bd      	mov	sp, r7
 800425c:	b01c      	add	sp, #112	; 0x70
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000184 	.word	0x20000184
 8004264:	40014000 	.word	0x40014000
 8004268:	0000445c 	.word	0x0000445c

0800426c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8004270:	4b10      	ldr	r3, [pc, #64]	; (80042b4 <MX_TIM16_Init+0x48>)
 8004272:	4a11      	ldr	r2, [pc, #68]	; (80042b8 <MX_TIM16_Init+0x4c>)
 8004274:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1000;
 8004276:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <MX_TIM16_Init+0x48>)
 8004278:	22fa      	movs	r2, #250	; 0xfa
 800427a:	0092      	lsls	r2, r2, #2
 800427c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800427e:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <MX_TIM16_Init+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 900;
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <MX_TIM16_Init+0x48>)
 8004286:	22e1      	movs	r2, #225	; 0xe1
 8004288:	0092      	lsls	r2, r2, #2
 800428a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800428c:	4b09      	ldr	r3, [pc, #36]	; (80042b4 <MX_TIM16_Init+0x48>)
 800428e:	2200      	movs	r2, #0
 8004290:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8004292:	4b08      	ldr	r3, [pc, #32]	; (80042b4 <MX_TIM16_Init+0x48>)
 8004294:	2200      	movs	r2, #0
 8004296:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <MX_TIM16_Init+0x48>)
 800429a:	2200      	movs	r2, #0
 800429c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800429e:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <MX_TIM16_Init+0x48>)
 80042a0:	0018      	movs	r0, r3
 80042a2:	f003 fc0c 	bl	8007abe <HAL_TIM_Base_Init>
 80042a6:	1e03      	subs	r3, r0, #0
 80042a8:	d001      	beq.n	80042ae <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80042aa:	f000 f943 	bl	8004534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80042ae:	46c0      	nop			; (mov r8, r8)
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	20000390 	.word	0x20000390
 80042b8:	40014400 	.word	0x40014400

080042bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80042bc:	b590      	push	{r4, r7, lr}
 80042be:	b08b      	sub	sp, #44	; 0x2c
 80042c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042c2:	2414      	movs	r4, #20
 80042c4:	193b      	adds	r3, r7, r4
 80042c6:	0018      	movs	r0, r3
 80042c8:	2314      	movs	r3, #20
 80042ca:	001a      	movs	r2, r3
 80042cc:	2100      	movs	r1, #0
 80042ce:	f004 fec3 	bl	8009058 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80042d2:	4b92      	ldr	r3, [pc, #584]	; (800451c <MX_GPIO_Init+0x260>)
 80042d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042d6:	4b91      	ldr	r3, [pc, #580]	; (800451c <MX_GPIO_Init+0x260>)
 80042d8:	2104      	movs	r1, #4
 80042da:	430a      	orrs	r2, r1
 80042dc:	635a      	str	r2, [r3, #52]	; 0x34
 80042de:	4b8f      	ldr	r3, [pc, #572]	; (800451c <MX_GPIO_Init+0x260>)
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	2204      	movs	r2, #4
 80042e4:	4013      	ands	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80042ea:	4b8c      	ldr	r3, [pc, #560]	; (800451c <MX_GPIO_Init+0x260>)
 80042ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ee:	4b8b      	ldr	r3, [pc, #556]	; (800451c <MX_GPIO_Init+0x260>)
 80042f0:	2120      	movs	r1, #32
 80042f2:	430a      	orrs	r2, r1
 80042f4:	635a      	str	r2, [r3, #52]	; 0x34
 80042f6:	4b89      	ldr	r3, [pc, #548]	; (800451c <MX_GPIO_Init+0x260>)
 80042f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042fa:	2220      	movs	r2, #32
 80042fc:	4013      	ands	r3, r2
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004302:	4b86      	ldr	r3, [pc, #536]	; (800451c <MX_GPIO_Init+0x260>)
 8004304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004306:	4b85      	ldr	r3, [pc, #532]	; (800451c <MX_GPIO_Init+0x260>)
 8004308:	2101      	movs	r1, #1
 800430a:	430a      	orrs	r2, r1
 800430c:	635a      	str	r2, [r3, #52]	; 0x34
 800430e:	4b83      	ldr	r3, [pc, #524]	; (800451c <MX_GPIO_Init+0x260>)
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	2201      	movs	r2, #1
 8004314:	4013      	ands	r3, r2
 8004316:	60bb      	str	r3, [r7, #8]
 8004318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800431a:	4b80      	ldr	r3, [pc, #512]	; (800451c <MX_GPIO_Init+0x260>)
 800431c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800431e:	4b7f      	ldr	r3, [pc, #508]	; (800451c <MX_GPIO_Init+0x260>)
 8004320:	2102      	movs	r1, #2
 8004322:	430a      	orrs	r2, r1
 8004324:	635a      	str	r2, [r3, #52]	; 0x34
 8004326:	4b7d      	ldr	r3, [pc, #500]	; (800451c <MX_GPIO_Init+0x260>)
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	2202      	movs	r2, #2
 800432c:	4013      	ands	r3, r2
 800432e:	607b      	str	r3, [r7, #4]
 8004330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004332:	4b7a      	ldr	r3, [pc, #488]	; (800451c <MX_GPIO_Init+0x260>)
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	4b79      	ldr	r3, [pc, #484]	; (800451c <MX_GPIO_Init+0x260>)
 8004338:	2108      	movs	r1, #8
 800433a:	430a      	orrs	r2, r1
 800433c:	635a      	str	r2, [r3, #52]	; 0x34
 800433e:	4b77      	ldr	r3, [pc, #476]	; (800451c <MX_GPIO_Init+0x260>)
 8004340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004342:	2208      	movs	r2, #8
 8004344:	4013      	ands	r3, r2
 8004346:	603b      	str	r3, [r7, #0]
 8004348:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin|MUTING_B_Pin, GPIO_PIN_SET);
 800434a:	4b75      	ldr	r3, [pc, #468]	; (8004520 <MX_GPIO_Init+0x264>)
 800434c:	2201      	movs	r2, #1
 800434e:	210a      	movs	r1, #10
 8004350:	0018      	movs	r0, r3
 8004352:	f002 fa64 	bl	800681e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_S1_Pin|LED_S2_Pin|DISPLAY_C_Pin|DISPLAY_B_Pin
 8004356:	4973      	ldr	r1, [pc, #460]	; (8004524 <MX_GPIO_Init+0x268>)
 8004358:	23a0      	movs	r3, #160	; 0xa0
 800435a:	05db      	lsls	r3, r3, #23
 800435c:	2200      	movs	r2, #0
 800435e:	0018      	movs	r0, r3
 8004360:	f002 fa5d 	bl	800681e <HAL_GPIO_WritePin>
                          |DISPLAY_D2_Pin|DISPLAY_D1_Pin|DISPLAY_DP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_S3_Pin|LED_S4_Pin|DISPLAY_A_Pin|DISPLAY_D5_Pin
 8004364:	23be      	movs	r3, #190	; 0xbe
 8004366:	00db      	lsls	r3, r3, #3
 8004368:	486d      	ldr	r0, [pc, #436]	; (8004520 <MX_GPIO_Init+0x264>)
 800436a:	2200      	movs	r2, #0
 800436c:	0019      	movs	r1, r3
 800436e:	f002 fa56 	bl	800681e <HAL_GPIO_WritePin>
                          |DISPLAY_ON_Pin|DISABLE_5V_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_S5_Pin|LED_S6_Pin|LED_MAN_Pin|DISPLAY_G_Pin
 8004372:	496d      	ldr	r1, [pc, #436]	; (8004528 <MX_GPIO_Init+0x26c>)
 8004374:	4b6d      	ldr	r3, [pc, #436]	; (800452c <MX_GPIO_Init+0x270>)
 8004376:	2200      	movs	r2, #0
 8004378:	0018      	movs	r0, r3
 800437a:	f002 fa50 	bl	800681e <HAL_GPIO_WritePin>
                          |DISPLAY_F_Pin|DISPLAY_E_Pin|DISPLAY_D_Pin|KD_OUT_4_Pin
                          |KD_OUT_5_Pin|CENTER_LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DISPLAY_D4_Pin|DISPLAY_D3_Pin|KD_OUT_1_Pin|KD_OUT_2_Pin
 800437e:	23dc      	movs	r3, #220	; 0xdc
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	486b      	ldr	r0, [pc, #428]	; (8004530 <MX_GPIO_Init+0x274>)
 8004384:	2200      	movs	r2, #0
 8004386:	0019      	movs	r1, r3
 8004388:	f002 fa49 	bl	800681e <HAL_GPIO_WritePin>
                          |KD_OUT_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SCAN_STOP_Pin */
  GPIO_InitStruct.Pin = SCAN_STOP_Pin;
 800438c:	193b      	adds	r3, r7, r4
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004392:	193b      	adds	r3, r7, r4
 8004394:	2200      	movs	r2, #0
 8004396:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004398:	193b      	adds	r3, r7, r4
 800439a:	2201      	movs	r2, #1
 800439c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SCAN_STOP_GPIO_Port, &GPIO_InitStruct);
 800439e:	193b      	adds	r3, r7, r4
 80043a0:	4a5f      	ldr	r2, [pc, #380]	; (8004520 <MX_GPIO_Init+0x264>)
 80043a2:	0019      	movs	r1, r3
 80043a4:	0010      	movs	r0, r2
 80043a6:	f002 f8b9 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : MUTING_A_Pin */
  GPIO_InitStruct.Pin = MUTING_A_Pin;
 80043aa:	193b      	adds	r3, r7, r4
 80043ac:	2202      	movs	r2, #2
 80043ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043b0:	193b      	adds	r3, r7, r4
 80043b2:	2201      	movs	r2, #1
 80043b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043b6:	193b      	adds	r3, r7, r4
 80043b8:	2201      	movs	r2, #1
 80043ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	193b      	adds	r3, r7, r4
 80043be:	2200      	movs	r2, #0
 80043c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MUTING_A_GPIO_Port, &GPIO_InitStruct);
 80043c2:	193b      	adds	r3, r7, r4
 80043c4:	4a56      	ldr	r2, [pc, #344]	; (8004520 <MX_GPIO_Init+0x264>)
 80043c6:	0019      	movs	r1, r3
 80043c8:	0010      	movs	r0, r2
 80043ca:	f002 f8a7 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : MUTING_B_Pin LED_S3_Pin LED_S4_Pin DISPLAY_A_Pin
                           DISPLAY_D5_Pin DISPLAY_ON_Pin DISABLE_5V_Pin */
  GPIO_InitStruct.Pin = MUTING_B_Pin|LED_S3_Pin|LED_S4_Pin|DISPLAY_A_Pin
 80043ce:	0021      	movs	r1, r4
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	22bf      	movs	r2, #191	; 0xbf
 80043d4:	00d2      	lsls	r2, r2, #3
 80043d6:	601a      	str	r2, [r3, #0]
                          |DISPLAY_D5_Pin|DISPLAY_ON_Pin|DISABLE_5V_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043d8:	000c      	movs	r4, r1
 80043da:	193b      	adds	r3, r7, r4
 80043dc:	2201      	movs	r2, #1
 80043de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e0:	193b      	adds	r3, r7, r4
 80043e2:	2200      	movs	r2, #0
 80043e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e6:	193b      	adds	r3, r7, r4
 80043e8:	2200      	movs	r2, #0
 80043ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80043ec:	193b      	adds	r3, r7, r4
 80043ee:	4a4c      	ldr	r2, [pc, #304]	; (8004520 <MX_GPIO_Init+0x264>)
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f002 f892 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_S1_Pin LED_S2_Pin DISPLAY_C_Pin DISPLAY_B_Pin
                           DISPLAY_D2_Pin DISPLAY_D1_Pin DISPLAY_DP_Pin */
  GPIO_InitStruct.Pin = LED_S1_Pin|LED_S2_Pin|DISPLAY_C_Pin|DISPLAY_B_Pin
 80043f8:	193b      	adds	r3, r7, r4
 80043fa:	4a4a      	ldr	r2, [pc, #296]	; (8004524 <MX_GPIO_Init+0x268>)
 80043fc:	601a      	str	r2, [r3, #0]
                          |DISPLAY_D2_Pin|DISPLAY_D1_Pin|DISPLAY_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043fe:	193b      	adds	r3, r7, r4
 8004400:	2201      	movs	r2, #1
 8004402:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004404:	193b      	adds	r3, r7, r4
 8004406:	2200      	movs	r2, #0
 8004408:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	193b      	adds	r3, r7, r4
 800440c:	2200      	movs	r2, #0
 800440e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004410:	193a      	adds	r2, r7, r4
 8004412:	23a0      	movs	r3, #160	; 0xa0
 8004414:	05db      	lsls	r3, r3, #23
 8004416:	0011      	movs	r1, r2
 8004418:	0018      	movs	r0, r3
 800441a:	f002 f87f 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_S5_Pin LED_S6_Pin LED_MAN_Pin DISPLAY_G_Pin
                           DISPLAY_F_Pin DISPLAY_E_Pin DISPLAY_D_Pin KD_OUT_4_Pin
                           KD_OUT_5_Pin CENTER_LED_Pin */
  GPIO_InitStruct.Pin = LED_S5_Pin|LED_S6_Pin|LED_MAN_Pin|DISPLAY_G_Pin
 800441e:	193b      	adds	r3, r7, r4
 8004420:	4a41      	ldr	r2, [pc, #260]	; (8004528 <MX_GPIO_Init+0x26c>)
 8004422:	601a      	str	r2, [r3, #0]
                          |DISPLAY_F_Pin|DISPLAY_E_Pin|DISPLAY_D_Pin|KD_OUT_4_Pin
                          |KD_OUT_5_Pin|CENTER_LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004424:	193b      	adds	r3, r7, r4
 8004426:	2201      	movs	r2, #1
 8004428:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442a:	193b      	adds	r3, r7, r4
 800442c:	2200      	movs	r2, #0
 800442e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004430:	193b      	adds	r3, r7, r4
 8004432:	2200      	movs	r2, #0
 8004434:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004436:	193b      	adds	r3, r7, r4
 8004438:	4a3c      	ldr	r2, [pc, #240]	; (800452c <MX_GPIO_Init+0x270>)
 800443a:	0019      	movs	r1, r3
 800443c:	0010      	movs	r0, r2
 800443e:	f002 f86d 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : DISPLAY_D4_Pin DISPLAY_D3_Pin KD_OUT_1_Pin KD_OUT_2_Pin
                           KD_OUT_3_Pin */
  GPIO_InitStruct.Pin = DISPLAY_D4_Pin|DISPLAY_D3_Pin|KD_OUT_1_Pin|KD_OUT_2_Pin
 8004442:	0021      	movs	r1, r4
 8004444:	187b      	adds	r3, r7, r1
 8004446:	22dc      	movs	r2, #220	; 0xdc
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	601a      	str	r2, [r3, #0]
                          |KD_OUT_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800444c:	000c      	movs	r4, r1
 800444e:	193b      	adds	r3, r7, r4
 8004450:	2201      	movs	r2, #1
 8004452:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004454:	193b      	adds	r3, r7, r4
 8004456:	2200      	movs	r2, #0
 8004458:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	193b      	adds	r3, r7, r4
 800445c:	2200      	movs	r2, #0
 800445e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004460:	193b      	adds	r3, r7, r4
 8004462:	4a33      	ldr	r2, [pc, #204]	; (8004530 <MX_GPIO_Init+0x274>)
 8004464:	0019      	movs	r1, r3
 8004466:	0010      	movs	r0, r2
 8004468:	f002 f858 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : KD_IN_1_Pin */
  GPIO_InitStruct.Pin = KD_IN_1_Pin;
 800446c:	0021      	movs	r1, r4
 800446e:	187b      	adds	r3, r7, r1
 8004470:	2280      	movs	r2, #128	; 0x80
 8004472:	0092      	lsls	r2, r2, #2
 8004474:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004476:	000c      	movs	r4, r1
 8004478:	193b      	adds	r3, r7, r4
 800447a:	2200      	movs	r2, #0
 800447c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800447e:	193b      	adds	r3, r7, r4
 8004480:	2200      	movs	r2, #0
 8004482:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(KD_IN_1_GPIO_Port, &GPIO_InitStruct);
 8004484:	193b      	adds	r3, r7, r4
 8004486:	4a26      	ldr	r2, [pc, #152]	; (8004520 <MX_GPIO_Init+0x264>)
 8004488:	0019      	movs	r1, r3
 800448a:	0010      	movs	r0, r2
 800448c:	f002 f846 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : KD_IN_2_Pin KD_IN_3_Pin KD_IN_4_Pin */
  GPIO_InitStruct.Pin = KD_IN_2_Pin|KD_IN_3_Pin|KD_IN_4_Pin;
 8004490:	193b      	adds	r3, r7, r4
 8004492:	220b      	movs	r2, #11
 8004494:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004496:	193b      	adds	r3, r7, r4
 8004498:	2200      	movs	r2, #0
 800449a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449c:	193b      	adds	r3, r7, r4
 800449e:	2200      	movs	r2, #0
 80044a0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044a2:	193b      	adds	r3, r7, r4
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <MX_GPIO_Init+0x274>)
 80044a6:	0019      	movs	r1, r3
 80044a8:	0010      	movs	r0, r2
 80044aa:	f002 f837 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pins : MANUAL_Pin FM_AM_Pin */
  GPIO_InitStruct.Pin = MANUAL_Pin|FM_AM_Pin;
 80044ae:	193b      	adds	r3, r7, r4
 80044b0:	2260      	movs	r2, #96	; 0x60
 80044b2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044b4:	193b      	adds	r3, r7, r4
 80044b6:	2200      	movs	r2, #0
 80044b8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80044ba:	193b      	adds	r3, r7, r4
 80044bc:	2201      	movs	r2, #1
 80044be:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c0:	193b      	adds	r3, r7, r4
 80044c2:	4a1a      	ldr	r2, [pc, #104]	; (800452c <MX_GPIO_Init+0x270>)
 80044c4:	0019      	movs	r1, r3
 80044c6:	0010      	movs	r0, r2
 80044c8:	f002 f828 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : STANDBY_Pin */
  GPIO_InitStruct.Pin = STANDBY_Pin;
 80044cc:	0021      	movs	r1, r4
 80044ce:	187b      	adds	r3, r7, r1
 80044d0:	2280      	movs	r2, #128	; 0x80
 80044d2:	0052      	lsls	r2, r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d6:	000c      	movs	r4, r1
 80044d8:	193b      	adds	r3, r7, r4
 80044da:	2200      	movs	r2, #0
 80044dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	193b      	adds	r3, r7, r4
 80044e0:	2200      	movs	r2, #0
 80044e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STANDBY_GPIO_Port, &GPIO_InitStruct);
 80044e4:	193b      	adds	r3, r7, r4
 80044e6:	4a11      	ldr	r2, [pc, #68]	; (800452c <MX_GPIO_Init+0x270>)
 80044e8:	0019      	movs	r1, r3
 80044ea:	0010      	movs	r0, r2
 80044ec:	f002 f816 	bl	800651c <HAL_GPIO_Init>

  /*Configure GPIO pin : STANDBY_VERSION_Pin */
  GPIO_InitStruct.Pin = STANDBY_VERSION_Pin;
 80044f0:	0021      	movs	r1, r4
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	2280      	movs	r2, #128	; 0x80
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044fa:	187b      	adds	r3, r7, r1
 80044fc:	2200      	movs	r2, #0
 80044fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004500:	187b      	adds	r3, r7, r1
 8004502:	2202      	movs	r2, #2
 8004504:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(STANDBY_VERSION_GPIO_Port, &GPIO_InitStruct);
 8004506:	187b      	adds	r3, r7, r1
 8004508:	4a08      	ldr	r2, [pc, #32]	; (800452c <MX_GPIO_Init+0x270>)
 800450a:	0019      	movs	r1, r3
 800450c:	0010      	movs	r0, r2
 800450e:	f002 f805 	bl	800651c <HAL_GPIO_Init>

}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	46bd      	mov	sp, r7
 8004516:	b00b      	add	sp, #44	; 0x2c
 8004518:	bd90      	pop	{r4, r7, pc}
 800451a:	46c0      	nop			; (mov r8, r8)
 800451c:	40021000 	.word	0x40021000
 8004520:	50000800 	.word	0x50000800
 8004524:	00008fc0 	.word	0x00008fc0
 8004528:	0000f09f 	.word	0x0000f09f
 800452c:	50000400 	.word	0x50000400
 8004530:	50000c00 	.word	0x50000c00

08004534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004538:	b672      	cpsid	i
}
 800453a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800453c:	e7fe      	b.n	800453c <Error_Handler+0x8>
	...

08004540 <misc_get_revision>:
#include "misc.h"

int misc_get_revision()
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
	return (int)HAL_GPIO_ReadPin(GPIOB, STANDBY_VERSION_Pin);
 8004544:	2380      	movs	r3, #128	; 0x80
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4a04      	ldr	r2, [pc, #16]	; (800455c <misc_get_revision+0x1c>)
 800454a:	0019      	movs	r1, r3
 800454c:	0010      	movs	r0, r2
 800454e:	f002 f949 	bl	80067e4 <HAL_GPIO_ReadPin>
 8004552:	0003      	movs	r3, r0
}
 8004554:	0018      	movs	r0, r3
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	46c0      	nop			; (mov r8, r8)
 800455c:	50000400 	.word	0x50000400

08004560 <misc_is_standby>:

bool misc_is_standby()
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
	bool revision_a = misc_get_revision();
 8004566:	f7ff ffeb 	bl	8004540 <misc_get_revision>
 800456a:	0002      	movs	r2, r0
 800456c:	1dfb      	adds	r3, r7, #7
 800456e:	1e51      	subs	r1, r2, #1
 8004570:	418a      	sbcs	r2, r1
 8004572:	701a      	strb	r2, [r3, #0]
	bool standby = HAL_GPIO_ReadPin(GPIOB, STANDBY_Pin);
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	4a15      	ldr	r2, [pc, #84]	; (80045d0 <misc_is_standby+0x70>)
 800457a:	0019      	movs	r1, r3
 800457c:	0010      	movs	r0, r2
 800457e:	f002 f931 	bl	80067e4 <HAL_GPIO_ReadPin>
 8004582:	0003      	movs	r3, r0
 8004584:	001a      	movs	r2, r3
 8004586:	1dbb      	adds	r3, r7, #6
 8004588:	1e51      	subs	r1, r2, #1
 800458a:	418a      	sbcs	r2, r1
 800458c:	701a      	strb	r2, [r3, #0]

	return (revision_a && standby) || (!revision_a && !standby);
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <misc_is_standby+0x3e>
 8004596:	1dbb      	adds	r3, r7, #6
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10d      	bne.n	80045ba <misc_is_standby+0x5a>
 800459e:	1dfb      	adds	r3, r7, #7
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2201      	movs	r2, #1
 80045a4:	4053      	eors	r3, r2
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d008      	beq.n	80045be <misc_is_standby+0x5e>
 80045ac:	1dbb      	adds	r3, r7, #6
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2201      	movs	r2, #1
 80045b2:	4053      	eors	r3, r2
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d001      	beq.n	80045be <misc_is_standby+0x5e>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e000      	b.n	80045c0 <misc_is_standby+0x60>
 80045be:	2300      	movs	r3, #0
 80045c0:	1c1a      	adds	r2, r3, #0
 80045c2:	2301      	movs	r3, #1
 80045c4:	4013      	ands	r3, r2
 80045c6:	b2db      	uxtb	r3, r3
}
 80045c8:	0018      	movs	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	b002      	add	sp, #8
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	50000400 	.word	0x50000400

080045d4 <misc_is_manual>:

bool misc_is_manual()
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOB, MANUAL_Pin);
 80045d8:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <misc_is_manual+0x1c>)
 80045da:	2120      	movs	r1, #32
 80045dc:	0018      	movs	r0, r3
 80045de:	f002 f901 	bl	80067e4 <HAL_GPIO_ReadPin>
 80045e2:	0003      	movs	r3, r0
 80045e4:	425a      	negs	r2, r3
 80045e6:	4153      	adcs	r3, r2
 80045e8:	b2db      	uxtb	r3, r3
}
 80045ea:	0018      	movs	r0, r3
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	50000400 	.word	0x50000400

080045f4 <misc_mute>:

void misc_mute(bool on)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	0002      	movs	r2, r0
 80045fc:	1dfb      	adds	r3, r7, #7
 80045fe:	701a      	strb	r2, [r3, #0]
	bool revision_a = !misc_get_revision();
 8004600:	f7ff ff9e 	bl	8004540 <misc_get_revision>
 8004604:	0002      	movs	r2, r0
 8004606:	200f      	movs	r0, #15
 8004608:	183b      	adds	r3, r7, r0
 800460a:	4251      	negs	r1, r2
 800460c:	414a      	adcs	r2, r1
 800460e:	701a      	strb	r2, [r3, #0]

	if (revision_a)
 8004610:	183b      	adds	r3, r7, r0
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d011      	beq.n	800463c <misc_mute+0x48>
	{
		HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin, !on);
 8004618:	1dfb      	adds	r3, r7, #7
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	4053      	eors	r3, r2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	001a      	movs	r2, r3
 8004624:	4b0e      	ldr	r3, [pc, #56]	; (8004660 <misc_mute+0x6c>)
 8004626:	2102      	movs	r1, #2
 8004628:	0018      	movs	r0, r3
 800462a:	f002 f8f8 	bl	800681e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MUTING_B_Pin, GPIO_PIN_RESET);
 800462e:	4b0c      	ldr	r3, [pc, #48]	; (8004660 <misc_mute+0x6c>)
 8004630:	2200      	movs	r2, #0
 8004632:	2108      	movs	r1, #8
 8004634:	0018      	movs	r0, r3
 8004636:	f002 f8f2 	bl	800681e <HAL_GPIO_WritePin>
	}




}
 800463a:	e00c      	b.n	8004656 <misc_mute+0x62>
		HAL_GPIO_WritePin(GPIOC, MUTING_B_Pin, on);
 800463c:	1dfb      	adds	r3, r7, #7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4807      	ldr	r0, [pc, #28]	; (8004660 <misc_mute+0x6c>)
 8004642:	001a      	movs	r2, r3
 8004644:	2108      	movs	r1, #8
 8004646:	f002 f8ea 	bl	800681e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, MUTING_A_Pin, GPIO_PIN_RESET);
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <misc_mute+0x6c>)
 800464c:	2200      	movs	r2, #0
 800464e:	2102      	movs	r1, #2
 8004650:	0018      	movs	r0, r3
 8004652:	f002 f8e4 	bl	800681e <HAL_GPIO_WritePin>
}
 8004656:	46c0      	nop			; (mov r8, r8)
 8004658:	46bd      	mov	sp, r7
 800465a:	b004      	add	sp, #16
 800465c:	bd80      	pop	{r7, pc}
 800465e:	46c0      	nop			; (mov r8, r8)
 8004660:	50000800 	.word	0x50000800

08004664 <misc_get_mode>:

Mode misc_get_mode(int am_frequency)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	if (!HAL_GPIO_ReadPin(GPIOB, FM_AM_Pin))
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <misc_get_mode+0x3c>)
 800466e:	2140      	movs	r1, #64	; 0x40
 8004670:	0018      	movs	r0, r3
 8004672:	f002 f8b7 	bl	80067e4 <HAL_GPIO_ReadPin>
 8004676:	1e03      	subs	r3, r0, #0
 8004678:	d101      	bne.n	800467e <misc_get_mode+0x1a>
	{
		return FM;
 800467a:	2300      	movs	r3, #0
 800467c:	e00c      	b.n	8004698 <misc_get_mode+0x34>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, FM_AM_Pin) && am_frequency > 0)
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <misc_get_mode+0x3c>)
 8004680:	2140      	movs	r1, #64	; 0x40
 8004682:	0018      	movs	r0, r3
 8004684:	f002 f8ae 	bl	80067e4 <HAL_GPIO_ReadPin>
 8004688:	1e03      	subs	r3, r0, #0
 800468a:	d004      	beq.n	8004696 <misc_get_mode+0x32>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	dd01      	ble.n	8004696 <misc_get_mode+0x32>
	{
		return AM;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <misc_get_mode+0x34>
	}

	return OTHER;
 8004696:	2302      	movs	r3, #2
}
 8004698:	0018      	movs	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	b002      	add	sp, #8
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	50000400 	.word	0x50000400

080046a4 <station_fm_get>:

// RM0444 - Reference manual / PAGE 70
// https://www.st.com/resource/en/reference_manual/rm0444-stm32g0x1-advanced-armbased-32bit-mcus-stmicroelectronics.pdf

struct Station station_fm_get(uint8_t number)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
 80046ac:	0008      	movs	r0, r1
 80046ae:	1cf9      	adds	r1, r7, #3
 80046b0:	7008      	strb	r0, [r1, #0]
	uint32_t address = 0x0801F800 + 8 * number;
 80046b2:	1cf9      	adds	r1, r7, #3
 80046b4:	7809      	ldrb	r1, [r1, #0]
 80046b6:	481d      	ldr	r0, [pc, #116]	; (800472c <station_fm_get+0x88>)
 80046b8:	4684      	mov	ip, r0
 80046ba:	4461      	add	r1, ip
 80046bc:	00c9      	lsls	r1, r1, #3
 80046be:	61f9      	str	r1, [r7, #28]
	uint64_t value = *(uint32_t*)address;
 80046c0:	69f9      	ldr	r1, [r7, #28]
 80046c2:	6809      	ldr	r1, [r1, #0]
 80046c4:	6139      	str	r1, [r7, #16]
 80046c6:	2100      	movs	r1, #0
 80046c8:	6179      	str	r1, [r7, #20]

	struct Station x;
	x.Frequency = (value & 0xFFFF0000) >> 16;
 80046ca:	6979      	ldr	r1, [r7, #20]
 80046cc:	0409      	lsls	r1, r1, #16
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	0c02      	lsrs	r2, r0, #16
 80046d2:	430a      	orrs	r2, r1
 80046d4:	6979      	ldr	r1, [r7, #20]
 80046d6:	0c0b      	lsrs	r3, r1, #16
 80046d8:	0013      	movs	r3, r2
 80046da:	041b      	lsls	r3, r3, #16
 80046dc:	0c1a      	lsrs	r2, r3, #16
 80046de:	2108      	movs	r1, #8
 80046e0:	187b      	adds	r3, r7, r1
 80046e2:	601a      	str	r2, [r3, #0]
	x.DutyCycle = value & 0xFFFF;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	041b      	lsls	r3, r3, #16
 80046e8:	0c1a      	lsrs	r2, r3, #16
 80046ea:	187b      	adds	r3, r7, r1
 80046ec:	605a      	str	r2, [r3, #4]

	if (x.Frequency < 8750 || x.Frequency > 10800 || x.DutyCycle < 0 || x.DutyCycle > 17500)
 80046ee:	187b      	adds	r3, r7, r1
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a0f      	ldr	r2, [pc, #60]	; (8004730 <station_fm_get+0x8c>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d909      	bls.n	800470c <station_fm_get+0x68>
 80046f8:	187b      	adds	r3, r7, r1
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0d      	ldr	r2, [pc, #52]	; (8004734 <station_fm_get+0x90>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d804      	bhi.n	800470c <station_fm_get+0x68>
 8004702:	187b      	adds	r3, r7, r1
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	4a0c      	ldr	r2, [pc, #48]	; (8004738 <station_fm_get+0x94>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d906      	bls.n	800471a <station_fm_get+0x76>
	{
		x.Frequency = 8750;
 800470c:	2108      	movs	r1, #8
 800470e:	187b      	adds	r3, r7, r1
 8004710:	4a0a      	ldr	r2, [pc, #40]	; (800473c <station_fm_get+0x98>)
 8004712:	601a      	str	r2, [r3, #0]
		x.DutyCycle = 13000;
 8004714:	187b      	adds	r3, r7, r1
 8004716:	4a0a      	ldr	r2, [pc, #40]	; (8004740 <station_fm_get+0x9c>)
 8004718:	605a      	str	r2, [r3, #4]
	}

	return x;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	18ba      	adds	r2, r7, r2
 8004720:	ca03      	ldmia	r2!, {r0, r1}
 8004722:	c303      	stmia	r3!, {r0, r1}
}
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	46bd      	mov	sp, r7
 8004728:	b008      	add	sp, #32
 800472a:	bd80      	pop	{r7, pc}
 800472c:	01003f00 	.word	0x01003f00
 8004730:	0000222d 	.word	0x0000222d
 8004734:	00002a30 	.word	0x00002a30
 8004738:	0000445c 	.word	0x0000445c
 800473c:	0000222e 	.word	0x0000222e
 8004740:	000032c8 	.word	0x000032c8

08004744 <station_fm_set>:

void station_fm_set(uint8_t number, uint32_t frequency, uint32_t dutycycle)
{
 8004744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004746:	b0af      	sub	sp, #188	; 0xbc
 8004748:	af00      	add	r7, sp, #0
 800474a:	61b9      	str	r1, [r7, #24]
 800474c:	617a      	str	r2, [r7, #20]
 800474e:	230f      	movs	r3, #15
 8004750:	2210      	movs	r2, #16
 8004752:	4694      	mov	ip, r2
 8004754:	44bc      	add	ip, r7
 8004756:	4463      	add	r3, ip
 8004758:	1c02      	adds	r2, r0, #0
 800475a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 800475c:	239f      	movs	r3, #159	; 0x9f
 800475e:	2210      	movs	r2, #16
 8004760:	18b9      	adds	r1, r7, r2
 8004762:	18ce      	adds	r6, r1, r3
 8004764:	f001 fd88 	bl	8006278 <HAL_FLASH_Unlock>
 8004768:	0003      	movs	r3, r0
 800476a:	7033      	strb	r3, [r6, #0]
	status = FLASH_WaitForLastOperation(1000);
 800476c:	239f      	movs	r3, #159	; 0x9f
 800476e:	2210      	movs	r2, #16
 8004770:	18b9      	adds	r1, r7, r2
 8004772:	18ce      	adds	r6, r1, r3
 8004774:	23fa      	movs	r3, #250	; 0xfa
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	0018      	movs	r0, r3
 800477a:	f001 fdbd 	bl	80062f8 <FLASH_WaitForLastOperation>
 800477e:	0003      	movs	r3, r0
 8004780:	7033      	strb	r3, [r6, #0]

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);
 8004782:	4b75      	ldr	r3, [pc, #468]	; (8004958 <station_fm_set+0x214>)
 8004784:	2220      	movs	r2, #32
 8004786:	611a      	str	r2, [r3, #16]
	status = FLASH_WaitForLastOperation(1000);
 8004788:	239f      	movs	r3, #159	; 0x9f
 800478a:	2210      	movs	r2, #16
 800478c:	18b9      	adds	r1, r7, r2
 800478e:	18ce      	adds	r6, r1, r3
 8004790:	23fa      	movs	r3, #250	; 0xfa
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	0018      	movs	r0, r3
 8004796:	f001 fdaf 	bl	80062f8 <FLASH_WaitForLastOperation>
 800479a:	0003      	movs	r3, r0
 800479c:	7033      	strb	r3, [r6, #0]
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800479e:	4b6e      	ldr	r3, [pc, #440]	; (8004958 <station_fm_set+0x214>)
 80047a0:	695a      	ldr	r2, [r3, #20]
 80047a2:	4b6d      	ldr	r3, [pc, #436]	; (8004958 <station_fm_set+0x214>)
 80047a4:	2102      	movs	r1, #2
 80047a6:	438a      	bics	r2, r1
 80047a8:	615a      	str	r2, [r3, #20]
	status = FLASH_WaitForLastOperation(1000);
 80047aa:	239f      	movs	r3, #159	; 0x9f
 80047ac:	2210      	movs	r2, #16
 80047ae:	18ba      	adds	r2, r7, r2
 80047b0:	18d6      	adds	r6, r2, r3
 80047b2:	23fa      	movs	r3, #250	; 0xfa
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	0018      	movs	r0, r3
 80047b8:	f001 fd9e 	bl	80062f8 <FLASH_WaitForLastOperation>
 80047bc:	0003      	movs	r3, r0
 80047be:	7033      	strb	r3, [r6, #0]

	uint64_t stations[7][2]; // address / value
	for (int i = 0; i <= 6; i++)
 80047c0:	2300      	movs	r3, #0
 80047c2:	22a4      	movs	r2, #164	; 0xa4
 80047c4:	2110      	movs	r1, #16
 80047c6:	468c      	mov	ip, r1
 80047c8:	44bc      	add	ip, r7
 80047ca:	4462      	add	r2, ip
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	e03e      	b.n	800484e <station_fm_set+0x10a>
	{
		uint32_t x = 0x0801F800 + 8 * i;
 80047d0:	21a4      	movs	r1, #164	; 0xa4
 80047d2:	2010      	movs	r0, #16
 80047d4:	183b      	adds	r3, r7, r0
 80047d6:	185b      	adds	r3, r3, r1
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a60      	ldr	r2, [pc, #384]	; (800495c <station_fm_set+0x218>)
 80047dc:	4694      	mov	ip, r2
 80047de:	4463      	add	r3, ip
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	2698      	movs	r6, #152	; 0x98
 80047e4:	183a      	adds	r2, r7, r0
 80047e6:	1992      	adds	r2, r2, r6
 80047e8:	6013      	str	r3, [r2, #0]
		stations[i][0] = x;
 80047ea:	183b      	adds	r3, r7, r0
 80047ec:	199b      	adds	r3, r3, r6
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	2300      	movs	r3, #0
 80047f4:	60fb      	str	r3, [r7, #12]
 80047f6:	2328      	movs	r3, #40	; 0x28
 80047f8:	183a      	adds	r2, r7, r0
 80047fa:	18d2      	adds	r2, r2, r3
 80047fc:	0008      	movs	r0, r1
 80047fe:	2310      	movs	r3, #16
 8004800:	469c      	mov	ip, r3
 8004802:	44bc      	add	ip, r7
 8004804:	4461      	add	r1, ip
 8004806:	680b      	ldr	r3, [r1, #0]
 8004808:	011b      	lsls	r3, r3, #4
 800480a:	18d3      	adds	r3, r2, r3
 800480c:	68b9      	ldr	r1, [r7, #8]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6019      	str	r1, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
		stations[i][1] = *(uint32_t*)x;
 8004814:	2110      	movs	r1, #16
 8004816:	187b      	adds	r3, r7, r1
 8004818:	199a      	adds	r2, r3, r6
 800481a:	6813      	ldr	r3, [r2, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	603b      	str	r3, [r7, #0]
 8004820:	2300      	movs	r3, #0
 8004822:	607b      	str	r3, [r7, #4]
 8004824:	2328      	movs	r3, #40	; 0x28
 8004826:	187a      	adds	r2, r7, r1
 8004828:	18d2      	adds	r2, r2, r3
 800482a:	000e      	movs	r6, r1
 800482c:	187b      	adds	r3, r7, r1
 800482e:	181b      	adds	r3, r3, r0
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	011b      	lsls	r3, r3, #4
 8004834:	18d3      	adds	r3, r2, r3
 8004836:	3308      	adds	r3, #8
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	6019      	str	r1, [r3, #0]
 800483e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i <= 6; i++)
 8004840:	19bb      	adds	r3, r7, r6
 8004842:	181b      	adds	r3, r3, r0
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3301      	adds	r3, #1
 8004848:	19ba      	adds	r2, r7, r6
 800484a:	1812      	adds	r2, r2, r0
 800484c:	6013      	str	r3, [r2, #0]
 800484e:	23a4      	movs	r3, #164	; 0xa4
 8004850:	2210      	movs	r2, #16
 8004852:	4694      	mov	ip, r2
 8004854:	44bc      	add	ip, r7
 8004856:	4463      	add	r3, ip
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2b06      	cmp	r3, #6
 800485c:	ddb8      	ble.n	80047d0 <station_fm_set+0x8c>
	}
	stations[number][1] = (frequency << 16) + dutycycle;
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	041a      	lsls	r2, r3, #16
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	18d2      	adds	r2, r2, r3
 8004866:	230f      	movs	r3, #15
 8004868:	2110      	movs	r1, #16
 800486a:	468c      	mov	ip, r1
 800486c:	44bc      	add	ip, r7
 800486e:	4463      	add	r3, ip
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	0014      	movs	r4, r2
 8004874:	2200      	movs	r2, #0
 8004876:	0015      	movs	r5, r2
 8004878:	2228      	movs	r2, #40	; 0x28
 800487a:	2110      	movs	r1, #16
 800487c:	468c      	mov	ip, r1
 800487e:	44bc      	add	ip, r7
 8004880:	4462      	add	r2, ip
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	18d3      	adds	r3, r2, r3
 8004886:	3308      	adds	r3, #8
 8004888:	601c      	str	r4, [r3, #0]
 800488a:	605d      	str	r5, [r3, #4]

	FLASH_EraseInitTypeDef eraseInit =
 800488c:	2118      	movs	r1, #24
 800488e:	2610      	movs	r6, #16
 8004890:	19bb      	adds	r3, r7, r6
 8004892:	185b      	adds	r3, r3, r1
 8004894:	4a32      	ldr	r2, [pc, #200]	; (8004960 <station_fm_set+0x21c>)
 8004896:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004898:	c331      	stmia	r3!, {r0, r4, r5}
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	601a      	str	r2, [r3, #0]
		.Banks = FLASH_BANK_1,
		.Page = 63, // 63 = 0x0801F800 - 0x0801FFFF
		.NbPages = 1
	};

	uint32_t pageEraseError = 0;
 800489e:	2300      	movs	r3, #0
 80048a0:	627b      	str	r3, [r7, #36]	; 0x24
	status = HAL_FLASHEx_Erase(&eraseInit, &pageEraseError);
 80048a2:	239f      	movs	r3, #159	; 0x9f
 80048a4:	19ba      	adds	r2, r7, r6
 80048a6:	18d4      	adds	r4, r2, r3
 80048a8:	2314      	movs	r3, #20
 80048aa:	19ba      	adds	r2, r7, r6
 80048ac:	18d2      	adds	r2, r2, r3
 80048ae:	19bb      	adds	r3, r7, r6
 80048b0:	185b      	adds	r3, r3, r1
 80048b2:	0011      	movs	r1, r2
 80048b4:	0018      	movs	r0, r3
 80048b6:	f001 fd8d 	bl	80063d4 <HAL_FLASHEx_Erase>
 80048ba:	0003      	movs	r3, r0
 80048bc:	7023      	strb	r3, [r4, #0]

	for (int i = 0; i <= 6; i++)
 80048be:	2300      	movs	r3, #0
 80048c0:	22a0      	movs	r2, #160	; 0xa0
 80048c2:	2110      	movs	r1, #16
 80048c4:	468c      	mov	ip, r1
 80048c6:	44bc      	add	ip, r7
 80048c8:	4462      	add	r2, ip
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	e030      	b.n	8004930 <station_fm_set+0x1ec>
	{
		status = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)stations[i][0], stations[i][1]);
 80048ce:	2028      	movs	r0, #40	; 0x28
 80048d0:	2410      	movs	r4, #16
 80048d2:	193b      	adds	r3, r7, r4
 80048d4:	181a      	adds	r2, r3, r0
 80048d6:	25a0      	movs	r5, #160	; 0xa0
 80048d8:	193b      	adds	r3, r7, r4
 80048da:	195b      	adds	r3, r3, r5
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	18d3      	adds	r3, r2, r3
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	0011      	movs	r1, r2
 80048e8:	193b      	adds	r3, r7, r4
 80048ea:	181a      	adds	r2, r3, r0
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	195b      	adds	r3, r3, r5
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	011b      	lsls	r3, r3, #4
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	3308      	adds	r3, #8
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	269f      	movs	r6, #159	; 0x9f
 80048fe:	1938      	adds	r0, r7, r4
 8004900:	1984      	adds	r4, r0, r6
 8004902:	2001      	movs	r0, #1
 8004904:	f001 fc6a 	bl	80061dc <HAL_FLASH_Program>
 8004908:	0003      	movs	r3, r0
 800490a:	7023      	strb	r3, [r4, #0]
		status = FLASH_WaitForLastOperation(1000);
 800490c:	2410      	movs	r4, #16
 800490e:	193b      	adds	r3, r7, r4
 8004910:	199c      	adds	r4, r3, r6
 8004912:	23fa      	movs	r3, #250	; 0xfa
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	0018      	movs	r0, r3
 8004918:	f001 fcee 	bl	80062f8 <FLASH_WaitForLastOperation>
 800491c:	0003      	movs	r3, r0
 800491e:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i <= 6; i++)
 8004920:	2410      	movs	r4, #16
 8004922:	193b      	adds	r3, r7, r4
 8004924:	195b      	adds	r3, r3, r5
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3301      	adds	r3, #1
 800492a:	193a      	adds	r2, r7, r4
 800492c:	1952      	adds	r2, r2, r5
 800492e:	6013      	str	r3, [r2, #0]
 8004930:	23a0      	movs	r3, #160	; 0xa0
 8004932:	2210      	movs	r2, #16
 8004934:	4694      	mov	ip, r2
 8004936:	44bc      	add	ip, r7
 8004938:	4463      	add	r3, ip
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b06      	cmp	r3, #6
 800493e:	ddc6      	ble.n	80048ce <station_fm_set+0x18a>
	}

	status = HAL_FLASH_Lock();
 8004940:	239f      	movs	r3, #159	; 0x9f
 8004942:	2210      	movs	r2, #16
 8004944:	18ba      	adds	r2, r7, r2
 8004946:	18d4      	adds	r4, r2, r3
 8004948:	f001 fcba 	bl	80062c0 <HAL_FLASH_Lock>
 800494c:	0003      	movs	r3, r0
 800494e:	7023      	strb	r3, [r4, #0]
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	46bd      	mov	sp, r7
 8004954:	b02f      	add	sp, #188	; 0xbc
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004958:	40022000 	.word	0x40022000
 800495c:	01003f00 	.word	0x01003f00
 8004960:	080093f0 	.word	0x080093f0

08004964 <station_am_get>:

struct Station station_am_get(uint8_t number)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	0008      	movs	r0, r1
 800496e:	1cf9      	adds	r1, r7, #3
 8004970:	7008      	strb	r0, [r1, #0]
	uint32_t address = 0x801F000 + 8 * number;
 8004972:	1cf9      	adds	r1, r7, #3
 8004974:	7809      	ldrb	r1, [r1, #0]
 8004976:	481d      	ldr	r0, [pc, #116]	; (80049ec <station_am_get+0x88>)
 8004978:	4684      	mov	ip, r0
 800497a:	4461      	add	r1, ip
 800497c:	00c9      	lsls	r1, r1, #3
 800497e:	61f9      	str	r1, [r7, #28]
	uint64_t value = *(uint32_t*)address;
 8004980:	69f9      	ldr	r1, [r7, #28]
 8004982:	6809      	ldr	r1, [r1, #0]
 8004984:	6139      	str	r1, [r7, #16]
 8004986:	2100      	movs	r1, #0
 8004988:	6179      	str	r1, [r7, #20]

	struct Station x;
	x.Frequency = (value & 0xFFFF0000) >> 16;
 800498a:	6979      	ldr	r1, [r7, #20]
 800498c:	0409      	lsls	r1, r1, #16
 800498e:	6938      	ldr	r0, [r7, #16]
 8004990:	0c02      	lsrs	r2, r0, #16
 8004992:	430a      	orrs	r2, r1
 8004994:	6979      	ldr	r1, [r7, #20]
 8004996:	0c0b      	lsrs	r3, r1, #16
 8004998:	0013      	movs	r3, r2
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	0c1a      	lsrs	r2, r3, #16
 800499e:	2108      	movs	r1, #8
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	601a      	str	r2, [r3, #0]
	x.DutyCycle = value & 0xFFFF;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	041b      	lsls	r3, r3, #16
 80049a8:	0c1a      	lsrs	r2, r3, #16
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	605a      	str	r2, [r3, #4]

	if (x.Frequency < 531 || x.Frequency > 1602 || x.DutyCycle < 0 || x.DutyCycle > 17500)
 80049ae:	187b      	adds	r3, r7, r1
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0f      	ldr	r2, [pc, #60]	; (80049f0 <station_am_get+0x8c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d909      	bls.n	80049cc <station_am_get+0x68>
 80049b8:	187b      	adds	r3, r7, r1
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a0d      	ldr	r2, [pc, #52]	; (80049f4 <station_am_get+0x90>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d804      	bhi.n	80049cc <station_am_get+0x68>
 80049c2:	187b      	adds	r3, r7, r1
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a0c      	ldr	r2, [pc, #48]	; (80049f8 <station_am_get+0x94>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d906      	bls.n	80049da <station_am_get+0x76>
	{
		x.Frequency = 531;
 80049cc:	2108      	movs	r1, #8
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	4a0a      	ldr	r2, [pc, #40]	; (80049fc <station_am_get+0x98>)
 80049d2:	601a      	str	r2, [r3, #0]
		x.DutyCycle = 13000;
 80049d4:	187b      	adds	r3, r7, r1
 80049d6:	4a0a      	ldr	r2, [pc, #40]	; (8004a00 <station_am_get+0x9c>)
 80049d8:	605a      	str	r2, [r3, #4]
	}

	return x;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2208      	movs	r2, #8
 80049de:	18ba      	adds	r2, r7, r2
 80049e0:	ca03      	ldmia	r2!, {r0, r1}
 80049e2:	c303      	stmia	r3!, {r0, r1}
}
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b008      	add	sp, #32
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	01003e00 	.word	0x01003e00
 80049f0:	00000212 	.word	0x00000212
 80049f4:	00000642 	.word	0x00000642
 80049f8:	0000445c 	.word	0x0000445c
 80049fc:	00000213 	.word	0x00000213
 8004a00:	000032c8 	.word	0x000032c8

08004a04 <station_am_set>:

void station_am_set(uint8_t number, uint32_t frequency, uint32_t dutycycle)
{
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	b0af      	sub	sp, #188	; 0xbc
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	61b9      	str	r1, [r7, #24]
 8004a0c:	617a      	str	r2, [r7, #20]
 8004a0e:	230f      	movs	r3, #15
 8004a10:	2210      	movs	r2, #16
 8004a12:	4694      	mov	ip, r2
 8004a14:	44bc      	add	ip, r7
 8004a16:	4463      	add	r3, ip
 8004a18:	1c02      	adds	r2, r0, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_FLASH_Unlock();
 8004a1c:	239f      	movs	r3, #159	; 0x9f
 8004a1e:	2210      	movs	r2, #16
 8004a20:	18b9      	adds	r1, r7, r2
 8004a22:	18ce      	adds	r6, r1, r3
 8004a24:	f001 fc28 	bl	8006278 <HAL_FLASH_Unlock>
 8004a28:	0003      	movs	r3, r0
 8004a2a:	7033      	strb	r3, [r6, #0]
	status = FLASH_WaitForLastOperation(1000);
 8004a2c:	239f      	movs	r3, #159	; 0x9f
 8004a2e:	2210      	movs	r2, #16
 8004a30:	18b9      	adds	r1, r7, r2
 8004a32:	18ce      	adds	r6, r1, r3
 8004a34:	23fa      	movs	r3, #250	; 0xfa
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f001 fc5d 	bl	80062f8 <FLASH_WaitForLastOperation>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	7033      	strb	r3, [r6, #0]

	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR);
 8004a42:	4b75      	ldr	r3, [pc, #468]	; (8004c18 <station_am_set+0x214>)
 8004a44:	2220      	movs	r2, #32
 8004a46:	611a      	str	r2, [r3, #16]
	status = FLASH_WaitForLastOperation(1000);
 8004a48:	239f      	movs	r3, #159	; 0x9f
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	18b9      	adds	r1, r7, r2
 8004a4e:	18ce      	adds	r6, r1, r3
 8004a50:	23fa      	movs	r3, #250	; 0xfa
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	0018      	movs	r0, r3
 8004a56:	f001 fc4f 	bl	80062f8 <FLASH_WaitForLastOperation>
 8004a5a:	0003      	movs	r3, r0
 8004a5c:	7033      	strb	r3, [r6, #0]
	CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8004a5e:	4b6e      	ldr	r3, [pc, #440]	; (8004c18 <station_am_set+0x214>)
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	4b6d      	ldr	r3, [pc, #436]	; (8004c18 <station_am_set+0x214>)
 8004a64:	2102      	movs	r1, #2
 8004a66:	438a      	bics	r2, r1
 8004a68:	615a      	str	r2, [r3, #20]
	status = FLASH_WaitForLastOperation(1000);
 8004a6a:	239f      	movs	r3, #159	; 0x9f
 8004a6c:	2210      	movs	r2, #16
 8004a6e:	18ba      	adds	r2, r7, r2
 8004a70:	18d6      	adds	r6, r2, r3
 8004a72:	23fa      	movs	r3, #250	; 0xfa
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f001 fc3e 	bl	80062f8 <FLASH_WaitForLastOperation>
 8004a7c:	0003      	movs	r3, r0
 8004a7e:	7033      	strb	r3, [r6, #0]

	uint64_t stations[7][2]; // address / value
	for (int i = 0; i <= 6; i++)
 8004a80:	2300      	movs	r3, #0
 8004a82:	22a4      	movs	r2, #164	; 0xa4
 8004a84:	2110      	movs	r1, #16
 8004a86:	468c      	mov	ip, r1
 8004a88:	44bc      	add	ip, r7
 8004a8a:	4462      	add	r2, ip
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e03e      	b.n	8004b0e <station_am_set+0x10a>
	{
		uint32_t x = 0x801F000 + 8 * i;
 8004a90:	21a4      	movs	r1, #164	; 0xa4
 8004a92:	2010      	movs	r0, #16
 8004a94:	183b      	adds	r3, r7, r0
 8004a96:	185b      	adds	r3, r3, r1
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a60      	ldr	r2, [pc, #384]	; (8004c1c <station_am_set+0x218>)
 8004a9c:	4694      	mov	ip, r2
 8004a9e:	4463      	add	r3, ip
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	2698      	movs	r6, #152	; 0x98
 8004aa4:	183a      	adds	r2, r7, r0
 8004aa6:	1992      	adds	r2, r2, r6
 8004aa8:	6013      	str	r3, [r2, #0]
		stations[i][0] = x;
 8004aaa:	183b      	adds	r3, r7, r0
 8004aac:	199b      	adds	r3, r3, r6
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	2328      	movs	r3, #40	; 0x28
 8004ab8:	183a      	adds	r2, r7, r0
 8004aba:	18d2      	adds	r2, r2, r3
 8004abc:	0008      	movs	r0, r1
 8004abe:	2310      	movs	r3, #16
 8004ac0:	469c      	mov	ip, r3
 8004ac2:	44bc      	add	ip, r7
 8004ac4:	4461      	add	r1, ip
 8004ac6:	680b      	ldr	r3, [r1, #0]
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	18d3      	adds	r3, r2, r3
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	6019      	str	r1, [r3, #0]
 8004ad2:	605a      	str	r2, [r3, #4]
		stations[i][1] = *(uint32_t*)x;
 8004ad4:	2110      	movs	r1, #16
 8004ad6:	187b      	adds	r3, r7, r1
 8004ad8:	199a      	adds	r2, r3, r6
 8004ada:	6813      	ldr	r3, [r2, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	607b      	str	r3, [r7, #4]
 8004ae4:	2328      	movs	r3, #40	; 0x28
 8004ae6:	187a      	adds	r2, r7, r1
 8004ae8:	18d2      	adds	r2, r2, r3
 8004aea:	000e      	movs	r6, r1
 8004aec:	187b      	adds	r3, r7, r1
 8004aee:	181b      	adds	r3, r3, r0
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	18d3      	adds	r3, r2, r3
 8004af6:	3308      	adds	r3, #8
 8004af8:	6839      	ldr	r1, [r7, #0]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	6019      	str	r1, [r3, #0]
 8004afe:	605a      	str	r2, [r3, #4]
	for (int i = 0; i <= 6; i++)
 8004b00:	19bb      	adds	r3, r7, r6
 8004b02:	181b      	adds	r3, r3, r0
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	19ba      	adds	r2, r7, r6
 8004b0a:	1812      	adds	r2, r2, r0
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	23a4      	movs	r3, #164	; 0xa4
 8004b10:	2210      	movs	r2, #16
 8004b12:	4694      	mov	ip, r2
 8004b14:	44bc      	add	ip, r7
 8004b16:	4463      	add	r3, ip
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b06      	cmp	r3, #6
 8004b1c:	ddb8      	ble.n	8004a90 <station_am_set+0x8c>
	}
	stations[number][1] = (frequency << 16) + dutycycle;
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	18d2      	adds	r2, r2, r3
 8004b26:	230f      	movs	r3, #15
 8004b28:	2110      	movs	r1, #16
 8004b2a:	468c      	mov	ip, r1
 8004b2c:	44bc      	add	ip, r7
 8004b2e:	4463      	add	r3, ip
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	0014      	movs	r4, r2
 8004b34:	2200      	movs	r2, #0
 8004b36:	0015      	movs	r5, r2
 8004b38:	2228      	movs	r2, #40	; 0x28
 8004b3a:	2110      	movs	r1, #16
 8004b3c:	468c      	mov	ip, r1
 8004b3e:	44bc      	add	ip, r7
 8004b40:	4462      	add	r2, ip
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	18d3      	adds	r3, r2, r3
 8004b46:	3308      	adds	r3, #8
 8004b48:	601c      	str	r4, [r3, #0]
 8004b4a:	605d      	str	r5, [r3, #4]

	FLASH_EraseInitTypeDef eraseInit =
 8004b4c:	2118      	movs	r1, #24
 8004b4e:	2610      	movs	r6, #16
 8004b50:	19bb      	adds	r3, r7, r6
 8004b52:	185b      	adds	r3, r3, r1
 8004b54:	4a32      	ldr	r2, [pc, #200]	; (8004c20 <station_am_set+0x21c>)
 8004b56:	ca31      	ldmia	r2!, {r0, r4, r5}
 8004b58:	c331      	stmia	r3!, {r0, r4, r5}
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
		.Banks = FLASH_BANK_1,
		.Page = 62,
		.NbPages = 1
	};

	uint32_t pageEraseError = 0;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	627b      	str	r3, [r7, #36]	; 0x24
	status = HAL_FLASHEx_Erase(&eraseInit, &pageEraseError);
 8004b62:	239f      	movs	r3, #159	; 0x9f
 8004b64:	19ba      	adds	r2, r7, r6
 8004b66:	18d4      	adds	r4, r2, r3
 8004b68:	2314      	movs	r3, #20
 8004b6a:	19ba      	adds	r2, r7, r6
 8004b6c:	18d2      	adds	r2, r2, r3
 8004b6e:	19bb      	adds	r3, r7, r6
 8004b70:	185b      	adds	r3, r3, r1
 8004b72:	0011      	movs	r1, r2
 8004b74:	0018      	movs	r0, r3
 8004b76:	f001 fc2d 	bl	80063d4 <HAL_FLASHEx_Erase>
 8004b7a:	0003      	movs	r3, r0
 8004b7c:	7023      	strb	r3, [r4, #0]

	for (int i = 0; i <= 6; i++)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	22a0      	movs	r2, #160	; 0xa0
 8004b82:	2110      	movs	r1, #16
 8004b84:	468c      	mov	ip, r1
 8004b86:	44bc      	add	ip, r7
 8004b88:	4462      	add	r2, ip
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	e030      	b.n	8004bf0 <station_am_set+0x1ec>
	{
		status = HAL_FLASH_Program(TYPEPROGRAM_DOUBLEWORD, (uint32_t)stations[i][0], stations[i][1]);
 8004b8e:	2028      	movs	r0, #40	; 0x28
 8004b90:	2410      	movs	r4, #16
 8004b92:	193b      	adds	r3, r7, r4
 8004b94:	181a      	adds	r2, r3, r0
 8004b96:	25a0      	movs	r5, #160	; 0xa0
 8004b98:	193b      	adds	r3, r7, r4
 8004b9a:	195b      	adds	r3, r3, r5
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	011b      	lsls	r3, r3, #4
 8004ba0:	18d3      	adds	r3, r2, r3
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	0011      	movs	r1, r2
 8004ba8:	193b      	adds	r3, r7, r4
 8004baa:	181a      	adds	r2, r3, r0
 8004bac:	193b      	adds	r3, r7, r4
 8004bae:	195b      	adds	r3, r3, r5
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	011b      	lsls	r3, r3, #4
 8004bb4:	18d3      	adds	r3, r2, r3
 8004bb6:	3308      	adds	r3, #8
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	269f      	movs	r6, #159	; 0x9f
 8004bbe:	1938      	adds	r0, r7, r4
 8004bc0:	1984      	adds	r4, r0, r6
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f001 fb0a 	bl	80061dc <HAL_FLASH_Program>
 8004bc8:	0003      	movs	r3, r0
 8004bca:	7023      	strb	r3, [r4, #0]
		status = FLASH_WaitForLastOperation(1000);
 8004bcc:	2410      	movs	r4, #16
 8004bce:	193b      	adds	r3, r7, r4
 8004bd0:	199c      	adds	r4, r3, r6
 8004bd2:	23fa      	movs	r3, #250	; 0xfa
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f001 fb8e 	bl	80062f8 <FLASH_WaitForLastOperation>
 8004bdc:	0003      	movs	r3, r0
 8004bde:	7023      	strb	r3, [r4, #0]
	for (int i = 0; i <= 6; i++)
 8004be0:	2410      	movs	r4, #16
 8004be2:	193b      	adds	r3, r7, r4
 8004be4:	195b      	adds	r3, r3, r5
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	193a      	adds	r2, r7, r4
 8004bec:	1952      	adds	r2, r2, r5
 8004bee:	6013      	str	r3, [r2, #0]
 8004bf0:	23a0      	movs	r3, #160	; 0xa0
 8004bf2:	2210      	movs	r2, #16
 8004bf4:	4694      	mov	ip, r2
 8004bf6:	44bc      	add	ip, r7
 8004bf8:	4463      	add	r3, ip
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	ddc6      	ble.n	8004b8e <station_am_set+0x18a>
	}

	status = HAL_FLASH_Lock();
 8004c00:	239f      	movs	r3, #159	; 0x9f
 8004c02:	2210      	movs	r2, #16
 8004c04:	18ba      	adds	r2, r7, r2
 8004c06:	18d4      	adds	r4, r2, r3
 8004c08:	f001 fb5a 	bl	80062c0 <HAL_FLASH_Lock>
 8004c0c:	0003      	movs	r3, r0
 8004c0e:	7023      	strb	r3, [r4, #0]
}
 8004c10:	46c0      	nop			; (mov r8, r8)
 8004c12:	46bd      	mov	sp, r7
 8004c14:	b02f      	add	sp, #188	; 0xbc
 8004c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c18:	40022000 	.word	0x40022000
 8004c1c:	01003e00 	.word	0x01003e00
 8004c20:	08009400 	.word	0x08009400

08004c24 <station_led>:

void station_led(int number)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, LED_MAN_Pin, number == 0);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	425a      	negs	r2, r3
 8004c30:	4153      	adcs	r3, r2
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	001a      	movs	r2, r3
 8004c36:	4b26      	ldr	r3, [pc, #152]	; (8004cd0 <station_led+0xac>)
 8004c38:	2104      	movs	r1, #4
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f001 fdef 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_S1_Pin, number == 1);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	425a      	negs	r2, r3
 8004c46:	4153      	adcs	r3, r2
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	001a      	movs	r2, r3
 8004c4c:	23a0      	movs	r3, #160	; 0xa0
 8004c4e:	05db      	lsls	r3, r3, #23
 8004c50:	2140      	movs	r1, #64	; 0x40
 8004c52:	0018      	movs	r0, r3
 8004c54:	f001 fde3 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED_S2_Pin, number == 2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3b02      	subs	r3, #2
 8004c5c:	425a      	negs	r2, r3
 8004c5e:	4153      	adcs	r3, r2
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	001a      	movs	r2, r3
 8004c64:	23a0      	movs	r3, #160	; 0xa0
 8004c66:	05db      	lsls	r3, r3, #23
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	f001 fdd7 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_S3_Pin, number == 3);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3b03      	subs	r3, #3
 8004c74:	425a      	negs	r2, r3
 8004c76:	4153      	adcs	r3, r2
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <station_led+0xb0>)
 8004c7e:	2110      	movs	r1, #16
 8004c80:	0018      	movs	r0, r3
 8004c82:	f001 fdcc 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, LED_S4_Pin, number == 4);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	3b04      	subs	r3, #4
 8004c8a:	425a      	negs	r2, r3
 8004c8c:	4153      	adcs	r3, r2
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	001a      	movs	r2, r3
 8004c92:	4b10      	ldr	r3, [pc, #64]	; (8004cd4 <station_led+0xb0>)
 8004c94:	2120      	movs	r1, #32
 8004c96:	0018      	movs	r0, r3
 8004c98:	f001 fdc1 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_S5_Pin, number == 5);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b05      	subs	r3, #5
 8004ca0:	425a      	negs	r2, r3
 8004ca2:	4153      	adcs	r3, r2
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	001a      	movs	r2, r3
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <station_led+0xac>)
 8004caa:	2101      	movs	r1, #1
 8004cac:	0018      	movs	r0, r3
 8004cae:	f001 fdb6 	bl	800681e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED_S6_Pin, number == 6);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	3b06      	subs	r3, #6
 8004cb6:	425a      	negs	r2, r3
 8004cb8:	4153      	adcs	r3, r2
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4b04      	ldr	r3, [pc, #16]	; (8004cd0 <station_led+0xac>)
 8004cc0:	2102      	movs	r1, #2
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f001 fdab 	bl	800681e <HAL_GPIO_WritePin>
}
 8004cc8:	46c0      	nop			; (mov r8, r8)
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b002      	add	sp, #8
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	50000400 	.word	0x50000400
 8004cd4:	50000800 	.word	0x50000800

08004cd8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_MspInit+0x4c>)
 8004ce0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <HAL_MspInit+0x4c>)
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cea:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <HAL_MspInit+0x4c>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	2201      	movs	r2, #1
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	607b      	str	r3, [r7, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <HAL_MspInit+0x4c>)
 8004cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cfa:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <HAL_MspInit+0x4c>)
 8004cfc:	2180      	movs	r1, #128	; 0x80
 8004cfe:	0549      	lsls	r1, r1, #21
 8004d00:	430a      	orrs	r2, r1
 8004d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d04:	4b07      	ldr	r3, [pc, #28]	; (8004d24 <HAL_MspInit+0x4c>)
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	2380      	movs	r3, #128	; 0x80
 8004d0a:	055b      	lsls	r3, r3, #21
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	603b      	str	r3, [r7, #0]
 8004d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004d12:	23c0      	movs	r3, #192	; 0xc0
 8004d14:	00db      	lsls	r3, r3, #3
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 fb36 	bl	8005388 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d1c:	46c0      	nop			; (mov r8, r8)
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	b002      	add	sp, #8
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000

08004d28 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b08b      	sub	sp, #44	; 0x2c
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	2414      	movs	r4, #20
 8004d32:	193b      	adds	r3, r7, r4
 8004d34:	0018      	movs	r0, r3
 8004d36:	2314      	movs	r3, #20
 8004d38:	001a      	movs	r2, r3
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f004 f98c 	bl	8009058 <memset>
  if(hadc->Instance==ADC1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a18      	ldr	r2, [pc, #96]	; (8004da8 <HAL_ADC_MspInit+0x80>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d129      	bne.n	8004d9e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004d4a:	4b18      	ldr	r3, [pc, #96]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d4e:	4b17      	ldr	r3, [pc, #92]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	0349      	lsls	r1, r1, #13
 8004d54:	430a      	orrs	r2, r1
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
 8004d58:	4b14      	ldr	r3, [pc, #80]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d5c:	2380      	movs	r3, #128	; 0x80
 8004d5e:	035b      	lsls	r3, r3, #13
 8004d60:	4013      	ands	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
 8004d64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d6a:	4b10      	ldr	r3, [pc, #64]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	635a      	str	r2, [r3, #52]	; 0x34
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <HAL_ADC_MspInit+0x84>)
 8004d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d76:	2201      	movs	r2, #1
 8004d78:	4013      	ands	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = FREQUENCY_CALIBRATION_Pin;
 8004d7e:	193b      	adds	r3, r7, r4
 8004d80:	2201      	movs	r2, #1
 8004d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	2203      	movs	r2, #3
 8004d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	193b      	adds	r3, r7, r4
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(FREQUENCY_CALIBRATION_GPIO_Port, &GPIO_InitStruct);
 8004d90:	193a      	adds	r2, r7, r4
 8004d92:	23a0      	movs	r3, #160	; 0xa0
 8004d94:	05db      	lsls	r3, r3, #23
 8004d96:	0011      	movs	r1, r2
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f001 fbbf 	bl	800651c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	46bd      	mov	sp, r7
 8004da2:	b00b      	add	sp, #44	; 0x2c
 8004da4:	bd90      	pop	{r4, r7, pc}
 8004da6:	46c0      	nop			; (mov r8, r8)
 8004da8:	40012400 	.word	0x40012400
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a0d      	ldr	r2, [pc, #52]	; (8004df4 <HAL_RTC_MspInit+0x44>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d114      	bne.n	8004dec <HAL_RTC_MspInit+0x3c>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004dc2:	4b0d      	ldr	r3, [pc, #52]	; (8004df8 <HAL_RTC_MspInit+0x48>)
 8004dc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004dc6:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <HAL_RTC_MspInit+0x48>)
 8004dc8:	2180      	movs	r1, #128	; 0x80
 8004dca:	0209      	lsls	r1, r1, #8
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8004dd0:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <HAL_RTC_MspInit+0x48>)
 8004dd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dd4:	4b08      	ldr	r3, [pc, #32]	; (8004df8 <HAL_RTC_MspInit+0x48>)
 8004dd6:	2180      	movs	r1, #128	; 0x80
 8004dd8:	00c9      	lsls	r1, r1, #3
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	63da      	str	r2, [r3, #60]	; 0x3c
 8004dde:	4b06      	ldr	r3, [pc, #24]	; (8004df8 <HAL_RTC_MspInit+0x48>)
 8004de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004de2:	2380      	movs	r3, #128	; 0x80
 8004de4:	00db      	lsls	r3, r3, #3
 8004de6:	4013      	ands	r3, r2
 8004de8:	60fb      	str	r3, [r7, #12]
 8004dea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b004      	add	sp, #16
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40002800 	.word	0x40002800
 8004df8:	40021000 	.word	0x40021000

08004dfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004dfc:	b590      	push	{r4, r7, lr}
 8004dfe:	b091      	sub	sp, #68	; 0x44
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e04:	242c      	movs	r4, #44	; 0x2c
 8004e06:	193b      	adds	r3, r7, r4
 8004e08:	0018      	movs	r0, r3
 8004e0a:	2314      	movs	r3, #20
 8004e0c:	001a      	movs	r2, r3
 8004e0e:	2100      	movs	r1, #0
 8004e10:	f004 f922 	bl	8009058 <memset>
  if(htim_base->Instance==TIM1)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a86      	ldr	r2, [pc, #536]	; (8005034 <HAL_TIM_Base_MspInit+0x238>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d142      	bne.n	8004ea4 <HAL_TIM_Base_MspInit+0xa8>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e1e:	4b86      	ldr	r3, [pc, #536]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e22:	4b85      	ldr	r3, [pc, #532]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e24:	2180      	movs	r1, #128	; 0x80
 8004e26:	0109      	lsls	r1, r1, #4
 8004e28:	430a      	orrs	r2, r1
 8004e2a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e2c:	4b82      	ldr	r3, [pc, #520]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e30:	2380      	movs	r3, #128	; 0x80
 8004e32:	011b      	lsls	r3, r3, #4
 8004e34:	4013      	ands	r3, r2
 8004e36:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e38:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e3a:	4b7f      	ldr	r3, [pc, #508]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3e:	4b7e      	ldr	r3, [pc, #504]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e40:	2101      	movs	r1, #1
 8004e42:	430a      	orrs	r2, r1
 8004e44:	635a      	str	r2, [r3, #52]	; 0x34
 8004e46:	4b7c      	ldr	r3, [pc, #496]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM1 GPIO Configuration
    PA12 [PA10]     ------> TIM1_ETR
    */
    GPIO_InitStruct.Pin = AM_FREQUENCY_Pin;
 8004e52:	193b      	adds	r3, r7, r4
 8004e54:	2280      	movs	r2, #128	; 0x80
 8004e56:	0152      	lsls	r2, r2, #5
 8004e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e5a:	0021      	movs	r1, r4
 8004e5c:	187b      	adds	r3, r7, r1
 8004e5e:	2202      	movs	r2, #2
 8004e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e62:	187b      	adds	r3, r7, r1
 8004e64:	2200      	movs	r2, #0
 8004e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2202      	movs	r2, #2
 8004e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(AM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 8004e74:	187a      	adds	r2, r7, r1
 8004e76:	23a0      	movs	r3, #160	; 0xa0
 8004e78:	05db      	lsls	r3, r3, #23
 8004e7a:	0011      	movs	r1, r2
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f001 fb4d 	bl	800651c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8004e82:	2200      	movs	r2, #0
 8004e84:	2100      	movs	r1, #0
 8004e86:	200d      	movs	r0, #13
 8004e88:	f001 f976 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004e8c:	200d      	movs	r0, #13
 8004e8e:	f001 f988 	bl	80061a2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004e92:	2200      	movs	r2, #0
 8004e94:	2100      	movs	r1, #0
 8004e96:	200e      	movs	r0, #14
 8004e98:	f001 f96e 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004e9c:	200e      	movs	r0, #14
 8004e9e:	f001 f980 	bl	80061a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004ea2:	e0c2      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM3)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a64      	ldr	r2, [pc, #400]	; (800503c <HAL_TIM_Base_MspInit+0x240>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d136      	bne.n	8004f1c <HAL_TIM_Base_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eae:	4b62      	ldr	r3, [pc, #392]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004eb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004eb2:	4b61      	ldr	r3, [pc, #388]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004eb4:	2102      	movs	r1, #2
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004eba:	4b5f      	ldr	r3, [pc, #380]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	623b      	str	r3, [r7, #32]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ec6:	4b5c      	ldr	r3, [pc, #368]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eca:	4b5b      	ldr	r3, [pc, #364]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004ecc:	2108      	movs	r1, #8
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ed2:	4b59      	ldr	r3, [pc, #356]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	2208      	movs	r2, #8
 8004ed8:	4013      	ands	r3, r2
 8004eda:	61fb      	str	r3, [r7, #28]
 8004edc:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = FM_FREQUENCY_Pin;
 8004ede:	212c      	movs	r1, #44	; 0x2c
 8004ee0:	187b      	adds	r3, r7, r1
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee6:	187b      	adds	r3, r7, r1
 8004ee8:	2202      	movs	r2, #2
 8004eea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eec:	187b      	adds	r3, r7, r1
 8004eee:	2200      	movs	r2, #0
 8004ef0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ef2:	187b      	adds	r3, r7, r1
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004ef8:	187b      	adds	r3, r7, r1
 8004efa:	2201      	movs	r2, #1
 8004efc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(FM_FREQUENCY_GPIO_Port, &GPIO_InitStruct);
 8004efe:	187b      	adds	r3, r7, r1
 8004f00:	4a4f      	ldr	r2, [pc, #316]	; (8005040 <HAL_TIM_Base_MspInit+0x244>)
 8004f02:	0019      	movs	r1, r3
 8004f04:	0010      	movs	r0, r2
 8004f06:	f001 fb09 	bl	800651c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	2010      	movs	r0, #16
 8004f10:	f001 f932 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004f14:	2010      	movs	r0, #16
 8004f16:	f001 f944 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 8004f1a:	e086      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM6)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a48      	ldr	r2, [pc, #288]	; (8005044 <HAL_TIM_Base_MspInit+0x248>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d114      	bne.n	8004f50 <HAL_TIM_Base_MspInit+0x154>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f26:	4b44      	ldr	r3, [pc, #272]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f2a:	4b43      	ldr	r3, [pc, #268]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f2c:	2110      	movs	r1, #16
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f36:	2210      	movs	r2, #16
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
 8004f3c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004f3e:	2200      	movs	r2, #0
 8004f40:	2100      	movs	r1, #0
 8004f42:	2011      	movs	r0, #17
 8004f44:	f001 f918 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004f48:	2011      	movs	r0, #17
 8004f4a:	f001 f92a 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 8004f4e:	e06c      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM7)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a3c      	ldr	r2, [pc, #240]	; (8005048 <HAL_TIM_Base_MspInit+0x24c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d114      	bne.n	8004f84 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f5a:	4b37      	ldr	r3, [pc, #220]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f5e:	4b36      	ldr	r3, [pc, #216]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f60:	2120      	movs	r1, #32
 8004f62:	430a      	orrs	r2, r1
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f66:	4b34      	ldr	r3, [pc, #208]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f6a:	2220      	movs	r2, #32
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2100      	movs	r1, #0
 8004f76:	2012      	movs	r0, #18
 8004f78:	f001 f8fe 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004f7c:	2012      	movs	r0, #18
 8004f7e:	f001 f910 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 8004f82:	e052      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM14)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a30      	ldr	r2, [pc, #192]	; (800504c <HAL_TIM_Base_MspInit+0x250>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d116      	bne.n	8004fbc <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004f8e:	4b2a      	ldr	r3, [pc, #168]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	4b29      	ldr	r3, [pc, #164]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f94:	2180      	movs	r1, #128	; 0x80
 8004f96:	0209      	lsls	r1, r1, #8
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004f9c:	4b26      	ldr	r3, [pc, #152]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	613b      	str	r3, [r7, #16]
 8004fa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8004faa:	2200      	movs	r2, #0
 8004fac:	2100      	movs	r1, #0
 8004fae:	2013      	movs	r0, #19
 8004fb0:	f001 f8e2 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8004fb4:	2013      	movs	r0, #19
 8004fb6:	f001 f8f4 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 8004fba:	e036      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM15)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a23      	ldr	r2, [pc, #140]	; (8005050 <HAL_TIM_Base_MspInit+0x254>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d116      	bne.n	8004ff4 <HAL_TIM_Base_MspInit+0x1f8>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004fc6:	4b1c      	ldr	r3, [pc, #112]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004fc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fca:	4b1b      	ldr	r3, [pc, #108]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004fcc:	2180      	movs	r1, #128	; 0x80
 8004fce:	0249      	lsls	r1, r1, #9
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	641a      	str	r2, [r3, #64]	; 0x40
 8004fd4:	4b18      	ldr	r3, [pc, #96]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8004fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd8:	2380      	movs	r3, #128	; 0x80
 8004fda:	025b      	lsls	r3, r3, #9
 8004fdc:	4013      	ands	r3, r2
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	2014      	movs	r0, #20
 8004fe8:	f001 f8c6 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8004fec:	2014      	movs	r0, #20
 8004fee:	f001 f8d8 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 8004ff2:	e01a      	b.n	800502a <HAL_TIM_Base_MspInit+0x22e>
  else if(htim_base->Instance==TIM16)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a16      	ldr	r2, [pc, #88]	; (8005054 <HAL_TIM_Base_MspInit+0x258>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d115      	bne.n	800502a <HAL_TIM_Base_MspInit+0x22e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004ffe:	4b0e      	ldr	r3, [pc, #56]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8005000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005002:	4b0d      	ldr	r3, [pc, #52]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 8005004:	2180      	movs	r1, #128	; 0x80
 8005006:	0289      	lsls	r1, r1, #10
 8005008:	430a      	orrs	r2, r1
 800500a:	641a      	str	r2, [r3, #64]	; 0x40
 800500c:	4b0a      	ldr	r3, [pc, #40]	; (8005038 <HAL_TIM_Base_MspInit+0x23c>)
 800500e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005010:	2380      	movs	r3, #128	; 0x80
 8005012:	029b      	lsls	r3, r3, #10
 8005014:	4013      	ands	r3, r2
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800501a:	2200      	movs	r2, #0
 800501c:	2100      	movs	r1, #0
 800501e:	2015      	movs	r0, #21
 8005020:	f001 f8aa 	bl	8006178 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005024:	2015      	movs	r0, #21
 8005026:	f001 f8bc 	bl	80061a2 <HAL_NVIC_EnableIRQ>
}
 800502a:	46c0      	nop			; (mov r8, r8)
 800502c:	46bd      	mov	sp, r7
 800502e:	b011      	add	sp, #68	; 0x44
 8005030:	bd90      	pop	{r4, r7, pc}
 8005032:	46c0      	nop			; (mov r8, r8)
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40021000 	.word	0x40021000
 800503c:	40000400 	.word	0x40000400
 8005040:	50000c00 	.word	0x50000c00
 8005044:	40001000 	.word	0x40001000
 8005048:	40001400 	.word	0x40001400
 800504c:	40002000 	.word	0x40002000
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400

08005058 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b089      	sub	sp, #36	; 0x24
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005060:	240c      	movs	r4, #12
 8005062:	193b      	adds	r3, r7, r4
 8005064:	0018      	movs	r0, r3
 8005066:	2314      	movs	r3, #20
 8005068:	001a      	movs	r2, r3
 800506a:	2100      	movs	r1, #0
 800506c:	f003 fff4 	bl	8009058 <memset>
  if(htim->Instance==TIM15)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a14      	ldr	r2, [pc, #80]	; (80050c8 <HAL_TIM_MspPostInit+0x70>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d121      	bne.n	80050be <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspPostInit 0 */

  /* USER CODE END TIM15_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800507a:	4b14      	ldr	r3, [pc, #80]	; (80050cc <HAL_TIM_MspPostInit+0x74>)
 800507c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <HAL_TIM_MspPostInit+0x74>)
 8005080:	2104      	movs	r1, #4
 8005082:	430a      	orrs	r2, r1
 8005084:	635a      	str	r2, [r3, #52]	; 0x34
 8005086:	4b11      	ldr	r3, [pc, #68]	; (80050cc <HAL_TIM_MspPostInit+0x74>)
 8005088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800508a:	2204      	movs	r2, #4
 800508c:	4013      	ands	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]
 8005090:	68bb      	ldr	r3, [r7, #8]
    /**TIM15 GPIO Configuration
    PC2     ------> TIM15_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005092:	0021      	movs	r1, r4
 8005094:	187b      	adds	r3, r7, r1
 8005096:	2204      	movs	r2, #4
 8005098:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800509a:	187b      	adds	r3, r7, r1
 800509c:	2202      	movs	r2, #2
 800509e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050a0:	187b      	adds	r3, r7, r1
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a6:	187b      	adds	r3, r7, r1
 80050a8:	2200      	movs	r2, #0
 80050aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80050ac:	187b      	adds	r3, r7, r1
 80050ae:	2202      	movs	r2, #2
 80050b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050b2:	187b      	adds	r3, r7, r1
 80050b4:	4a06      	ldr	r2, [pc, #24]	; (80050d0 <HAL_TIM_MspPostInit+0x78>)
 80050b6:	0019      	movs	r1, r3
 80050b8:	0010      	movs	r0, r2
 80050ba:	f001 fa2f 	bl	800651c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	46bd      	mov	sp, r7
 80050c2:	b009      	add	sp, #36	; 0x24
 80050c4:	bd90      	pop	{r4, r7, pc}
 80050c6:	46c0      	nop			; (mov r8, r8)
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40021000 	.word	0x40021000
 80050d0:	50000800 	.word	0x50000800

080050d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80050d8:	f002 f8b8 	bl	800724c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050dc:	e7fe      	b.n	80050dc <NMI_Handler+0x8>

080050de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050e2:	e7fe      	b.n	80050e2 <HardFault_Handler+0x4>

080050e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80050e8:	46c0      	nop			; (mov r8, r8)
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050f2:	46c0      	nop			; (mov r8, r8)
 80050f4:	46bd      	mov	sp, r7
 80050f6:	bd80      	pop	{r7, pc}

080050f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80050fc:	f000 f904 	bl	8005308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005100:	46c0      	nop			; (mov r8, r8)
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800510e:	0018      	movs	r0, r3
 8005110:	f002 ff44 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8005114:	46c0      	nop			; (mov r8, r8)
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			; (mov r8, r8)
 800511c:	200002f8 	.word	0x200002f8

08005120 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <TIM1_CC_IRQHandler+0x14>)
 8005126:	0018      	movs	r0, r3
 8005128:	f002 ff38 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800512c:	46c0      	nop			; (mov r8, r8)
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	200002f8 	.word	0x200002f8

08005138 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800513c:	4b03      	ldr	r3, [pc, #12]	; (800514c <TIM3_IRQHandler+0x14>)
 800513e:	0018      	movs	r0, r3
 8005140:	f002 ff2c 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	200001d0 	.word	0x200001d0

08005150 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <TIM6_IRQHandler+0x14>)
 8005156:	0018      	movs	r0, r3
 8005158:	f002 ff20 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800515c:	46c0      	nop			; (mov r8, r8)
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	46c0      	nop			; (mov r8, r8)
 8005164:	200002ac 	.word	0x200002ac

08005168 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800516c:	4b03      	ldr	r3, [pc, #12]	; (800517c <TIM7_IRQHandler+0x14>)
 800516e:	0018      	movs	r0, r3
 8005170:	f002 ff14 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005174:	46c0      	nop			; (mov r8, r8)
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	200003dc 	.word	0x200003dc

08005180 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005184:	4b03      	ldr	r3, [pc, #12]	; (8005194 <TIM14_IRQHandler+0x14>)
 8005186:	0018      	movs	r0, r3
 8005188:	f002 ff08 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800518c:	46c0      	nop			; (mov r8, r8)
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	20000344 	.word	0x20000344

08005198 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 800519c:	4b03      	ldr	r3, [pc, #12]	; (80051ac <TIM15_IRQHandler+0x14>)
 800519e:	0018      	movs	r0, r3
 80051a0:	f002 fefc 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	20000184 	.word	0x20000184

080051b0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80051b4:	4b03      	ldr	r3, [pc, #12]	; (80051c4 <TIM16_IRQHandler+0x14>)
 80051b6:	0018      	movs	r0, r3
 80051b8:	f002 fef0 	bl	8007f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80051bc:	46c0      	nop			; (mov r8, r8)
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	20000390 	.word	0x20000390

080051c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80051cc:	4b03      	ldr	r3, [pc, #12]	; (80051dc <SystemInit+0x14>)
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	0512      	lsls	r2, r2, #20
 80051d2:	609a      	str	r2, [r3, #8]
#endif
}
 80051d4:	46c0      	nop			; (mov r8, r8)
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80051e0:	480d      	ldr	r0, [pc, #52]	; (8005218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80051e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80051e4:	f7ff fff0 	bl	80051c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051e8:	480c      	ldr	r0, [pc, #48]	; (800521c <LoopForever+0x6>)
  ldr r1, =_edata
 80051ea:	490d      	ldr	r1, [pc, #52]	; (8005220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051ec:	4a0d      	ldr	r2, [pc, #52]	; (8005224 <LoopForever+0xe>)
  movs r3, #0
 80051ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051f0:	e002      	b.n	80051f8 <LoopCopyDataInit>

080051f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051f6:	3304      	adds	r3, #4

080051f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051fc:	d3f9      	bcc.n	80051f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051fe:	4a0a      	ldr	r2, [pc, #40]	; (8005228 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005200:	4c0a      	ldr	r4, [pc, #40]	; (800522c <LoopForever+0x16>)
  movs r3, #0
 8005202:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005204:	e001      	b.n	800520a <LoopFillZerobss>

08005206 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005206:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005208:	3204      	adds	r2, #4

0800520a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800520a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800520c:	d3fb      	bcc.n	8005206 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800520e:	f003 feff 	bl	8009010 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005212:	f7fe f897 	bl	8003344 <main>

08005216 <LoopForever>:

LoopForever:
  b LoopForever
 8005216:	e7fe      	b.n	8005216 <LoopForever>
  ldr   r0, =_estack
 8005218:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800521c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005220:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8005224:	080095a0 	.word	0x080095a0
  ldr r2, =_sbss
 8005228:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 800522c:	2000042c 	.word	0x2000042c

08005230 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005230:	e7fe      	b.n	8005230 <ADC1_IRQHandler>
	...

08005234 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800523a:	1dfb      	adds	r3, r7, #7
 800523c:	2200      	movs	r2, #0
 800523e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005240:	4b0b      	ldr	r3, [pc, #44]	; (8005270 <HAL_Init+0x3c>)
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <HAL_Init+0x3c>)
 8005246:	2180      	movs	r1, #128	; 0x80
 8005248:	0049      	lsls	r1, r1, #1
 800524a:	430a      	orrs	r2, r1
 800524c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800524e:	2000      	movs	r0, #0
 8005250:	f000 f810 	bl	8005274 <HAL_InitTick>
 8005254:	1e03      	subs	r3, r0, #0
 8005256:	d003      	beq.n	8005260 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005258:	1dfb      	adds	r3, r7, #7
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]
 800525e:	e001      	b.n	8005264 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005260:	f7ff fd3a 	bl	8004cd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005264:	1dfb      	adds	r3, r7, #7
 8005266:	781b      	ldrb	r3, [r3, #0]
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b002      	add	sp, #8
 800526e:	bd80      	pop	{r7, pc}
 8005270:	40022000 	.word	0x40022000

08005274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005274:	b590      	push	{r4, r7, lr}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800527c:	230f      	movs	r3, #15
 800527e:	18fb      	adds	r3, r7, r3
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8005284:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HAL_InitTick+0x88>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02b      	beq.n	80052e4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800528c:	4b1c      	ldr	r3, [pc, #112]	; (8005300 <HAL_InitTick+0x8c>)
 800528e:	681c      	ldr	r4, [r3, #0]
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_InitTick+0x88>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	0019      	movs	r1, r3
 8005296:	23fa      	movs	r3, #250	; 0xfa
 8005298:	0098      	lsls	r0, r3, #2
 800529a:	f7fa ff31 	bl	8000100 <__udivsi3>
 800529e:	0003      	movs	r3, r0
 80052a0:	0019      	movs	r1, r3
 80052a2:	0020      	movs	r0, r4
 80052a4:	f7fa ff2c 	bl	8000100 <__udivsi3>
 80052a8:	0003      	movs	r3, r0
 80052aa:	0018      	movs	r0, r3
 80052ac:	f000 ff89 	bl	80061c2 <HAL_SYSTICK_Config>
 80052b0:	1e03      	subs	r3, r0, #0
 80052b2:	d112      	bne.n	80052da <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d80a      	bhi.n	80052d0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	2301      	movs	r3, #1
 80052be:	425b      	negs	r3, r3
 80052c0:	2200      	movs	r2, #0
 80052c2:	0018      	movs	r0, r3
 80052c4:	f000 ff58 	bl	8006178 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052c8:	4b0e      	ldr	r3, [pc, #56]	; (8005304 <HAL_InitTick+0x90>)
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	e00d      	b.n	80052ec <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80052d0:	230f      	movs	r3, #15
 80052d2:	18fb      	adds	r3, r7, r3
 80052d4:	2201      	movs	r2, #1
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e008      	b.n	80052ec <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052da:	230f      	movs	r3, #15
 80052dc:	18fb      	adds	r3, r7, r3
 80052de:	2201      	movs	r2, #1
 80052e0:	701a      	strb	r2, [r3, #0]
 80052e2:	e003      	b.n	80052ec <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052e4:	230f      	movs	r3, #15
 80052e6:	18fb      	adds	r3, r7, r3
 80052e8:	2201      	movs	r2, #1
 80052ea:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80052ec:	230f      	movs	r3, #15
 80052ee:	18fb      	adds	r3, r7, r3
 80052f0:	781b      	ldrb	r3, [r3, #0]
}
 80052f2:	0018      	movs	r0, r3
 80052f4:	46bd      	mov	sp, r7
 80052f6:	b005      	add	sp, #20
 80052f8:	bd90      	pop	{r4, r7, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	20000028 	.word	0x20000028
 8005300:	20000020 	.word	0x20000020
 8005304:	20000024 	.word	0x20000024

08005308 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800530c:	4b05      	ldr	r3, [pc, #20]	; (8005324 <HAL_IncTick+0x1c>)
 800530e:	781b      	ldrb	r3, [r3, #0]
 8005310:	001a      	movs	r2, r3
 8005312:	4b05      	ldr	r3, [pc, #20]	; (8005328 <HAL_IncTick+0x20>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	18d2      	adds	r2, r2, r3
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_IncTick+0x20>)
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	46c0      	nop			; (mov r8, r8)
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	46c0      	nop			; (mov r8, r8)
 8005324:	20000028 	.word	0x20000028
 8005328:	20000428 	.word	0x20000428

0800532c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  return uwTick;
 8005330:	4b02      	ldr	r3, [pc, #8]	; (800533c <HAL_GetTick+0x10>)
 8005332:	681b      	ldr	r3, [r3, #0]
}
 8005334:	0018      	movs	r0, r3
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	20000428 	.word	0x20000428

08005340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005348:	f7ff fff0 	bl	800532c <HAL_GetTick>
 800534c:	0003      	movs	r3, r0
 800534e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	3301      	adds	r3, #1
 8005358:	d005      	beq.n	8005366 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800535a:	4b0a      	ldr	r3, [pc, #40]	; (8005384 <HAL_Delay+0x44>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	001a      	movs	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	189b      	adds	r3, r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005366:	46c0      	nop			; (mov r8, r8)
 8005368:	f7ff ffe0 	bl	800532c <HAL_GetTick>
 800536c:	0002      	movs	r2, r0
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	1ad3      	subs	r3, r2, r3
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	429a      	cmp	r2, r3
 8005376:	d8f7      	bhi.n	8005368 <HAL_Delay+0x28>
  {
  }
}
 8005378:	46c0      	nop			; (mov r8, r8)
 800537a:	46c0      	nop			; (mov r8, r8)
 800537c:	46bd      	mov	sp, r7
 800537e:	b004      	add	sp, #16
 8005380:	bd80      	pop	{r7, pc}
 8005382:	46c0      	nop			; (mov r8, r8)
 8005384:	20000028 	.word	0x20000028

08005388 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a06      	ldr	r2, [pc, #24]	; (80053b0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005396:	4013      	ands	r3, r2
 8005398:	0019      	movs	r1, r3
 800539a:	4b04      	ldr	r3, [pc, #16]	; (80053ac <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	430a      	orrs	r2, r1
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	46bd      	mov	sp, r7
 80053a6:	b002      	add	sp, #8
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	46c0      	nop			; (mov r8, r8)
 80053ac:	40010000 	.word	0x40010000
 80053b0:	fffff9ff 	.word	0xfffff9ff

080053b4 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a05      	ldr	r2, [pc, #20]	; (80053d8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80053c4:	401a      	ands	r2, r3
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	601a      	str	r2, [r3, #0]
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	46bd      	mov	sp, r7
 80053d2:	b002      	add	sp, #8
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	46c0      	nop			; (mov r8, r8)
 80053d8:	fe3fffff 	.word	0xfe3fffff

080053dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	23e0      	movs	r3, #224	; 0xe0
 80053ea:	045b      	lsls	r3, r3, #17
 80053ec:	4013      	ands	r3, r2
}
 80053ee:	0018      	movs	r0, r3
 80053f0:	46bd      	mov	sp, r7
 80053f2:	b002      	add	sp, #8
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b084      	sub	sp, #16
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	2104      	movs	r1, #4
 800540a:	400a      	ands	r2, r1
 800540c:	2107      	movs	r1, #7
 800540e:	4091      	lsls	r1, r2
 8005410:	000a      	movs	r2, r1
 8005412:	43d2      	mvns	r2, r2
 8005414:	401a      	ands	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2104      	movs	r1, #4
 800541a:	400b      	ands	r3, r1
 800541c:	6879      	ldr	r1, [r7, #4]
 800541e:	4099      	lsls	r1, r3
 8005420:	000b      	movs	r3, r1
 8005422:	431a      	orrs	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8005428:	46c0      	nop			; (mov r8, r8)
 800542a:	46bd      	mov	sp, r7
 800542c:	b004      	add	sp, #16
 800542e:	bd80      	pop	{r7, pc}

08005430 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	23c0      	movs	r3, #192	; 0xc0
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	4013      	ands	r3, r2
 8005442:	d101      	bne.n	8005448 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005444:	2301      	movs	r3, #1
 8005446:	e000      	b.n	800544a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b002      	add	sp, #8
 8005450:	bd80      	pop	{r7, pc}

08005452 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	60f8      	str	r0, [r7, #12]
 800545a:	60b9      	str	r1, [r7, #8]
 800545c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	211f      	movs	r1, #31
 8005466:	400a      	ands	r2, r1
 8005468:	210f      	movs	r1, #15
 800546a:	4091      	lsls	r1, r2
 800546c:	000a      	movs	r2, r1
 800546e:	43d2      	mvns	r2, r2
 8005470:	401a      	ands	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	0e9b      	lsrs	r3, r3, #26
 8005476:	210f      	movs	r1, #15
 8005478:	4019      	ands	r1, r3
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	201f      	movs	r0, #31
 800547e:	4003      	ands	r3, r0
 8005480:	4099      	lsls	r1, r3
 8005482:	000b      	movs	r3, r1
 8005484:	431a      	orrs	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	b004      	add	sp, #16
 8005490:	bd80      	pop	{r7, pc}

08005492 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
 800549a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	035b      	lsls	r3, r3, #13
 80054a4:	0b5b      	lsrs	r3, r3, #13
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054ac:	46c0      	nop			; (mov r8, r8)
 80054ae:	46bd      	mov	sp, r7
 80054b0:	b002      	add	sp, #8
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	0352      	lsls	r2, r2, #13
 80054c6:	0b52      	lsrs	r2, r2, #13
 80054c8:	43d2      	mvns	r2, r2
 80054ca:	401a      	ands	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054d0:	46c0      	nop			; (mov r8, r8)
 80054d2:	46bd      	mov	sp, r7
 80054d4:	b002      	add	sp, #8
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	0212      	lsls	r2, r2, #8
 80054ec:	43d2      	mvns	r2, r2
 80054ee:	401a      	ands	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	021b      	lsls	r3, r3, #8
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	400b      	ands	r3, r1
 80054f8:	4904      	ldr	r1, [pc, #16]	; (800550c <LL_ADC_SetChannelSamplingTime+0x34>)
 80054fa:	400b      	ands	r3, r1
 80054fc:	431a      	orrs	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8005502:	46c0      	nop			; (mov r8, r8)
 8005504:	46bd      	mov	sp, r7
 8005506:	b004      	add	sp, #16
 8005508:	bd80      	pop	{r7, pc}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	07ffff00 	.word	0x07ffff00

08005510 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4a05      	ldr	r2, [pc, #20]	; (8005534 <LL_ADC_EnableInternalRegulator+0x24>)
 800551e:	4013      	ands	r3, r2
 8005520:	2280      	movs	r2, #128	; 0x80
 8005522:	0552      	lsls	r2, r2, #21
 8005524:	431a      	orrs	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800552a:	46c0      	nop			; (mov r8, r8)
 800552c:	46bd      	mov	sp, r7
 800552e:	b002      	add	sp, #8
 8005530:	bd80      	pop	{r7, pc}
 8005532:	46c0      	nop			; (mov r8, r8)
 8005534:	6fffffe8 	.word	0x6fffffe8

08005538 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	055b      	lsls	r3, r3, #21
 8005548:	401a      	ands	r2, r3
 800554a:	2380      	movs	r3, #128	; 0x80
 800554c:	055b      	lsls	r3, r3, #21
 800554e:	429a      	cmp	r2, r3
 8005550:	d101      	bne.n	8005556 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8005556:	2300      	movs	r3, #0
}
 8005558:	0018      	movs	r0, r3
 800555a:	46bd      	mov	sp, r7
 800555c:	b002      	add	sp, #8
 800555e:	bd80      	pop	{r7, pc}

08005560 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4a04      	ldr	r2, [pc, #16]	; (8005580 <LL_ADC_Enable+0x20>)
 800556e:	4013      	ands	r3, r2
 8005570:	2201      	movs	r2, #1
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005578:	46c0      	nop			; (mov r8, r8)
 800557a:	46bd      	mov	sp, r7
 800557c:	b002      	add	sp, #8
 800557e:	bd80      	pop	{r7, pc}
 8005580:	7fffffe8 	.word	0x7fffffe8

08005584 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	2201      	movs	r2, #1
 8005592:	4013      	ands	r3, r2
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <LL_ADC_IsEnabled+0x18>
 8005598:	2301      	movs	r3, #1
 800559a:	e000      	b.n	800559e <LL_ADC_IsEnabled+0x1a>
 800559c:	2300      	movs	r3, #0
}
 800559e:	0018      	movs	r0, r3
 80055a0:	46bd      	mov	sp, r7
 80055a2:	b002      	add	sp, #8
 80055a4:	bd80      	pop	{r7, pc}
	...

080055a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	4a04      	ldr	r2, [pc, #16]	; (80055c8 <LL_ADC_REG_StartConversion+0x20>)
 80055b6:	4013      	ands	r3, r2
 80055b8:	2204      	movs	r2, #4
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80055c0:	46c0      	nop			; (mov r8, r8)
 80055c2:	46bd      	mov	sp, r7
 80055c4:	b002      	add	sp, #8
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	7fffffe8 	.word	0x7fffffe8

080055cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	2204      	movs	r2, #4
 80055da:	4013      	ands	r3, r2
 80055dc:	2b04      	cmp	r3, #4
 80055de:	d101      	bne.n	80055e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80055e0:	2301      	movs	r3, #1
 80055e2:	e000      	b.n	80055e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	0018      	movs	r0, r3
 80055e8:	46bd      	mov	sp, r7
 80055ea:	b002      	add	sp, #8
 80055ec:	bd80      	pop	{r7, pc}
	...

080055f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b088      	sub	sp, #32
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80055f8:	231f      	movs	r3, #31
 80055fa:	18fb      	adds	r3, r7, r3
 80055fc:	2200      	movs	r2, #0
 80055fe:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8005600:	2300      	movs	r3, #0
 8005602:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8005604:	2300      	movs	r3, #0
 8005606:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005608:	2300      	movs	r3, #0
 800560a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e1ab      	b.n	800596e <HAL_ADC_Init+0x37e>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10a      	bne.n	8005634 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	0018      	movs	r0, r3
 8005622:	f7ff fb81 	bl	8004d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2254      	movs	r2, #84	; 0x54
 8005630:	2100      	movs	r1, #0
 8005632:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	0018      	movs	r0, r3
 800563a:	f7ff ff7d 	bl	8005538 <LL_ADC_IsInternalRegulatorEnabled>
 800563e:	1e03      	subs	r3, r0, #0
 8005640:	d114      	bne.n	800566c <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	0018      	movs	r0, r3
 8005648:	f7ff ff62 	bl	8005510 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800564c:	4bca      	ldr	r3, [pc, #808]	; (8005978 <HAL_ADC_Init+0x388>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	49ca      	ldr	r1, [pc, #808]	; (800597c <HAL_ADC_Init+0x38c>)
 8005652:	0018      	movs	r0, r3
 8005654:	f7fa fd54 	bl	8000100 <__udivsi3>
 8005658:	0003      	movs	r3, r0
 800565a:	005b      	lsls	r3, r3, #1
 800565c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800565e:	e002      	b.n	8005666 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	3b01      	subs	r3, #1
 8005664:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f9      	bne.n	8005660 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	0018      	movs	r0, r3
 8005672:	f7ff ff61 	bl	8005538 <LL_ADC_IsInternalRegulatorEnabled>
 8005676:	1e03      	subs	r3, r0, #0
 8005678:	d10f      	bne.n	800569a <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800567e:	2210      	movs	r2, #16
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800568a:	2201      	movs	r2, #1
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005692:	231f      	movs	r3, #31
 8005694:	18fb      	adds	r3, r7, r3
 8005696:	2201      	movs	r2, #1
 8005698:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	0018      	movs	r0, r3
 80056a0:	f7ff ff94 	bl	80055cc <LL_ADC_REG_IsConversionOngoing>
 80056a4:	0003      	movs	r3, r0
 80056a6:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	2210      	movs	r2, #16
 80056ae:	4013      	ands	r3, r2
 80056b0:	d000      	beq.n	80056b4 <HAL_ADC_Init+0xc4>
 80056b2:	e14f      	b.n	8005954 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d000      	beq.n	80056bc <HAL_ADC_Init+0xcc>
 80056ba:	e14b      	b.n	8005954 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c0:	4aaf      	ldr	r2, [pc, #700]	; (8005980 <HAL_ADC_Init+0x390>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	2202      	movs	r2, #2
 80056c6:	431a      	orrs	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7ff ff57 	bl	8005584 <LL_ADC_IsEnabled>
 80056d6:	1e03      	subs	r3, r0, #0
 80056d8:	d151      	bne.n	800577e <HAL_ADC_Init+0x18e>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2218      	movs	r2, #24
 80056e2:	4393      	bics	r3, r2
 80056e4:	0019      	movs	r1, r3
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	0f9b      	lsrs	r3, r3, #30
 80056f8:	079a      	lsls	r2, r3, #30
                   hadc->Init.Oversampling.Ratio         |
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80056fe:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.RightBitShift |
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                   hadc->Init.Oversampling.Ratio         |
 8005704:	431a      	orrs	r2, r3
                   hadc->Init.Oversampling.TriggeredMode |
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                   hadc->Init.Oversampling.RightBitShift |
 800570a:	431a      	orrs	r2, r3
                   hadc->Init.TriggerFrequencyMode
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                   hadc->Init.Oversampling.TriggeredMode |
 8005710:	4313      	orrs	r3, r2
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4313      	orrs	r3, r2
 8005716:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	223c      	movs	r2, #60	; 0x3c
 800571c:	5c9b      	ldrb	r3, [r3, r2]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d103      	bne.n	800572a <HAL_ADC_Init+0x13a>
      {
        SET_BIT(tmpCFGR2, ADC_CFGR2_OVSE);
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	2201      	movs	r2, #1
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	691b      	ldr	r3, [r3, #16]
 8005730:	4a94      	ldr	r2, [pc, #592]	; (8005984 <HAL_ADC_Init+0x394>)
 8005732:	4013      	ands	r3, r2
 8005734:	0019      	movs	r1, r3
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	430a      	orrs	r2, r1
 800573e:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	23c0      	movs	r3, #192	; 0xc0
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	429a      	cmp	r2, r3
 800574a:	d018      	beq.n	800577e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8005750:	2380      	movs	r3, #128	; 0x80
 8005752:	05db      	lsls	r3, r3, #23
 8005754:	429a      	cmp	r2, r3
 8005756:	d012      	beq.n	800577e <HAL_ADC_Init+0x18e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800575c:	2380      	movs	r3, #128	; 0x80
 800575e:	061b      	lsls	r3, r3, #24
 8005760:	429a      	cmp	r2, r3
 8005762:	d00c      	beq.n	800577e <HAL_ADC_Init+0x18e>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8005764:	4b88      	ldr	r3, [pc, #544]	; (8005988 <HAL_ADC_Init+0x398>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a88      	ldr	r2, [pc, #544]	; (800598c <HAL_ADC_Init+0x39c>)
 800576a:	4013      	ands	r3, r2
 800576c:	0019      	movs	r1, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	23f0      	movs	r3, #240	; 0xf0
 8005774:	039b      	lsls	r3, r3, #14
 8005776:	401a      	ands	r2, r3
 8005778:	4b83      	ldr	r3, [pc, #524]	; (8005988 <HAL_ADC_Init+0x398>)
 800577a:	430a      	orrs	r2, r1
 800577c:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	7e1b      	ldrb	r3, [r3, #24]
 8005782:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	7e5b      	ldrb	r3, [r3, #25]
 8005788:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800578a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	7e9b      	ldrb	r3, [r3, #26]
 8005790:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8005792:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <HAL_ADC_Init+0x1b2>
 800579c:	2380      	movs	r3, #128	; 0x80
 800579e:	015b      	lsls	r3, r3, #5
 80057a0:	e000      	b.n	80057a4 <HAL_ADC_Init+0x1b4>
 80057a2:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80057a4:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80057aa:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	691b      	ldr	r3, [r3, #16]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	da04      	bge.n	80057be <HAL_ADC_Init+0x1ce>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	005b      	lsls	r3, r3, #1
 80057ba:	085b      	lsrs	r3, r3, #1
 80057bc:	e001      	b.n	80057c2 <HAL_ADC_Init+0x1d2>
 80057be:	2380      	movs	r3, #128	; 0x80
 80057c0:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 80057c2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	212c      	movs	r1, #44	; 0x2c
 80057c8:	5c5b      	ldrb	r3, [r3, r1]
 80057ca:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80057cc:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	5c9b      	ldrb	r3, [r3, r2]
 80057da:	2b01      	cmp	r3, #1
 80057dc:	d115      	bne.n	800580a <HAL_ADC_Init+0x21a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	7e9b      	ldrb	r3, [r3, #26]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d105      	bne.n	80057f2 <HAL_ADC_Init+0x202>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2280      	movs	r2, #128	; 0x80
 80057ea:	0252      	lsls	r2, r2, #9
 80057ec:	4313      	orrs	r3, r2
 80057ee:	61bb      	str	r3, [r7, #24]
 80057f0:	e00b      	b.n	800580a <HAL_ADC_Init+0x21a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f6:	2220      	movs	r2, #32
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005802:	2201      	movs	r2, #1
 8005804:	431a      	orrs	r2, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <HAL_ADC_Init+0x238>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005816:	23e0      	movs	r3, #224	; 0xe0
 8005818:	005b      	lsls	r3, r3, #1
 800581a:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8005820:	4313      	orrs	r3, r2
 8005822:	69ba      	ldr	r2, [r7, #24]
 8005824:	4313      	orrs	r3, r2
 8005826:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	4a58      	ldr	r2, [pc, #352]	; (8005990 <HAL_ADC_Init+0x3a0>)
 8005830:	4013      	ands	r3, r2
 8005832:	0019      	movs	r1, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	430a      	orrs	r2, r1
 800583c:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	4a53      	ldr	r2, [pc, #332]	; (8005994 <HAL_ADC_Init+0x3a4>)
 8005846:	4013      	ands	r3, r2
 8005848:	0019      	movs	r1, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	430a      	orrs	r2, r1
 8005852:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800585c:	001a      	movs	r2, r3
 800585e:	2100      	movs	r1, #0
 8005860:	f7ff fdc9 	bl	80053f6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6818      	ldr	r0, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586c:	494a      	ldr	r1, [pc, #296]	; (8005998 <HAL_ADC_Init+0x3a8>)
 800586e:	001a      	movs	r2, r3
 8005870:	f7ff fdc1 	bl	80053f6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d109      	bne.n	8005890 <HAL_ADC_Init+0x2a0>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2110      	movs	r1, #16
 8005888:	4249      	negs	r1, r1
 800588a:	430a      	orrs	r2, r1
 800588c:	629a      	str	r2, [r3, #40]	; 0x28
 800588e:	e03a      	b.n	8005906 <HAL_ADC_Init+0x316>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	691a      	ldr	r2, [r3, #16]
 8005894:	2380      	movs	r3, #128	; 0x80
 8005896:	039b      	lsls	r3, r3, #14
 8005898:	429a      	cmp	r2, r3
 800589a:	d134      	bne.n	8005906 <HAL_ADC_Init+0x316>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 800589c:	2300      	movs	r3, #0
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	e00c      	b.n	80058bc <HAL_ADC_Init+0x2cc>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	009b      	lsls	r3, r3, #2
 80058aa:	40da      	lsrs	r2, r3
 80058ac:	0013      	movs	r3, r2
 80058ae:	220f      	movs	r2, #15
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b0f      	cmp	r3, #15
 80058b4:	d006      	beq.n	80058c4 <HAL_ADC_Init+0x2d4>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	3301      	adds	r3, #1
 80058ba:	613b      	str	r3, [r7, #16]
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	2b07      	cmp	r3, #7
 80058c0:	d9ef      	bls.n	80058a2 <HAL_ADC_Init+0x2b2>
 80058c2:	e000      	b.n	80058c6 <HAL_ADC_Init+0x2d6>
            ADC_CHSELR_SQ1)
        {
          break;
 80058c4:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d109      	bne.n	80058e0 <HAL_ADC_Init+0x2f0>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2110      	movs	r1, #16
 80058d8:	4249      	negs	r1, r1
 80058da:	430a      	orrs	r2, r1
 80058dc:	629a      	str	r2, [r3, #40]	; 0x28
 80058de:	e012      	b.n	8005906 <HAL_ADC_Init+0x316>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	221c      	movs	r2, #28
 80058f0:	4013      	ands	r3, r2
 80058f2:	2210      	movs	r2, #16
 80058f4:	4252      	negs	r2, r2
 80058f6:	409a      	lsls	r2, r3
 80058f8:	0011      	movs	r1, r2
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4a23      	ldr	r2, [pc, #140]	; (800599c <HAL_ADC_Init+0x3ac>)
 800590e:	4013      	ands	r3, r2
 8005910:	69ba      	ldr	r2, [r7, #24]
 8005912:	429a      	cmp	r2, r3
 8005914:	d10b      	bne.n	800592e <HAL_ADC_Init+0x33e>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	2203      	movs	r2, #3
 8005922:	4393      	bics	r3, r2
 8005924:	2201      	movs	r2, #1
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 800592c:	e01c      	b.n	8005968 <HAL_ADC_Init+0x378>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005932:	2212      	movs	r2, #18
 8005934:	4393      	bics	r3, r2
 8005936:	2210      	movs	r2, #16
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005942:	2201      	movs	r2, #1
 8005944:	431a      	orrs	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800594a:	231f      	movs	r3, #31
 800594c:	18fb      	adds	r3, r7, r3
 800594e:	2201      	movs	r2, #1
 8005950:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8005952:	e009      	b.n	8005968 <HAL_ADC_Init+0x378>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005958:	2210      	movs	r2, #16
 800595a:	431a      	orrs	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005960:	231f      	movs	r3, #31
 8005962:	18fb      	adds	r3, r7, r3
 8005964:	2201      	movs	r2, #1
 8005966:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005968:	231f      	movs	r3, #31
 800596a:	18fb      	adds	r3, r7, r3
 800596c:	781b      	ldrb	r3, [r3, #0]
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	b008      	add	sp, #32
 8005974:	bd80      	pop	{r7, pc}
 8005976:	46c0      	nop			; (mov r8, r8)
 8005978:	20000020 	.word	0x20000020
 800597c:	00030d40 	.word	0x00030d40
 8005980:	fffffefd 	.word	0xfffffefd
 8005984:	1ffffc02 	.word	0x1ffffc02
 8005988:	40012708 	.word	0x40012708
 800598c:	ffc3ffff 	.word	0xffc3ffff
 8005990:	fffe0219 	.word	0xfffe0219
 8005994:	dffffc02 	.word	0xdffffc02
 8005998:	07ffff04 	.word	0x07ffff04
 800599c:	833fffe7 	.word	0x833fffe7

080059a0 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80059a0:	b5b0      	push	{r4, r5, r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	0018      	movs	r0, r3
 80059ae:	f7ff fe0d 	bl	80055cc <LL_ADC_REG_IsConversionOngoing>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d135      	bne.n	8005a22 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2254      	movs	r2, #84	; 0x54
 80059ba:	5c9b      	ldrb	r3, [r3, r2]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d101      	bne.n	80059c4 <HAL_ADC_Start+0x24>
 80059c0:	2302      	movs	r3, #2
 80059c2:	e035      	b.n	8005a30 <HAL_ADC_Start+0x90>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2254      	movs	r2, #84	; 0x54
 80059c8:	2101      	movs	r1, #1
 80059ca:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80059cc:	250f      	movs	r5, #15
 80059ce:	197c      	adds	r4, r7, r5
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 faa6 	bl	8005f24 <ADC_Enable>
 80059d8:	0003      	movs	r3, r0
 80059da:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80059dc:	197b      	adds	r3, r7, r5
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d119      	bne.n	8005a18 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	4a13      	ldr	r2, [pc, #76]	; (8005a38 <HAL_ADC_Start+0x98>)
 80059ea:	4013      	ands	r3, r2
 80059ec:	2280      	movs	r2, #128	; 0x80
 80059ee:	0052      	lsls	r2, r2, #1
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	221c      	movs	r2, #28
 8005a02:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2254      	movs	r2, #84	; 0x54
 8005a08:	2100      	movs	r1, #0
 8005a0a:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	0018      	movs	r0, r3
 8005a12:	f7ff fdc9 	bl	80055a8 <LL_ADC_REG_StartConversion>
 8005a16:	e008      	b.n	8005a2a <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2254      	movs	r2, #84	; 0x54
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	5499      	strb	r1, [r3, r2]
 8005a20:	e003      	b.n	8005a2a <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005a22:	230f      	movs	r3, #15
 8005a24:	18fb      	adds	r3, r7, r3
 8005a26:	2202      	movs	r2, #2
 8005a28:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a2a:	230f      	movs	r3, #15
 8005a2c:	18fb      	adds	r3, r7, r3
 8005a2e:	781b      	ldrb	r3, [r3, #0]
}
 8005a30:	0018      	movs	r0, r3
 8005a32:	46bd      	mov	sp, r7
 8005a34:	b004      	add	sp, #16
 8005a36:	bdb0      	pop	{r4, r5, r7, pc}
 8005a38:	fffff0fe 	.word	0xfffff0fe

08005a3c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d102      	bne.n	8005a54 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8005a4e:	2308      	movs	r3, #8
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e00f      	b.n	8005a74 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	d007      	beq.n	8005a70 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a64:	2220      	movs	r2, #32
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e06c      	b.n	8005b4a <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8005a70:	2304      	movs	r3, #4
 8005a72:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8005a74:	f7ff fc5a 	bl	800532c <HAL_GetTick>
 8005a78:	0003      	movs	r3, r0
 8005a7a:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005a7c:	e019      	b.n	8005ab2 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	d016      	beq.n	8005ab2 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8005a84:	f7ff fc52 	bl	800532c <HAL_GetTick>
 8005a88:	0002      	movs	r2, r0
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d302      	bcc.n	8005a9a <HAL_ADC_PollForConversion+0x5e>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10b      	bne.n	8005ab2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9e:	2204      	movs	r2, #4
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2254      	movs	r2, #84	; 0x54
 8005aaa:	2100      	movs	r1, #0
 8005aac:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e04b      	b.n	8005b4a <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4013      	ands	r3, r2
 8005abc:	d0df      	beq.n	8005a7e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ac2:	2280      	movs	r2, #128	; 0x80
 8005ac4:	0092      	lsls	r2, r2, #2
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f7ff fcad 	bl	8005430 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005ad6:	1e03      	subs	r3, r0, #0
 8005ad8:	d02e      	beq.n	8005b38 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	7e9b      	ldrb	r3, [r3, #26]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d12a      	bne.n	8005b38 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b08      	cmp	r3, #8
 8005aee:	d123      	bne.n	8005b38 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	0018      	movs	r0, r3
 8005af6:	f7ff fd69 	bl	80055cc <LL_ADC_REG_IsConversionOngoing>
 8005afa:	1e03      	subs	r3, r0, #0
 8005afc:	d110      	bne.n	8005b20 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	685a      	ldr	r2, [r3, #4]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	210c      	movs	r1, #12
 8005b0a:	438a      	bics	r2, r1
 8005b0c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	4a10      	ldr	r2, [pc, #64]	; (8005b54 <HAL_ADC_PollForConversion+0x118>)
 8005b14:	4013      	ands	r3, r2
 8005b16:	2201      	movs	r2, #1
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	659a      	str	r2, [r3, #88]	; 0x58
 8005b1e:	e00b      	b.n	8005b38 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b24:	2220      	movs	r2, #32
 8005b26:	431a      	orrs	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b30:	2201      	movs	r2, #1
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	7e1b      	ldrb	r3, [r3, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d103      	bne.n	8005b48 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	220c      	movs	r2, #12
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	0018      	movs	r0, r3
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	b004      	add	sp, #16
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	fffffefe 	.word	0xfffffefe

08005b58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8005b66:	0018      	movs	r0, r3
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	b002      	add	sp, #8
 8005b6c:	bd80      	pop	{r7, pc}
	...

08005b70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b086      	sub	sp, #24
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b7a:	2317      	movs	r3, #23
 8005b7c:	18fb      	adds	r3, r7, r3
 8005b7e:	2200      	movs	r2, #0
 8005b80:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2254      	movs	r2, #84	; 0x54
 8005b8a:	5c9b      	ldrb	r3, [r3, r2]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_ADC_ConfigChannel+0x24>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e1c2      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x3aa>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2254      	movs	r2, #84	; 0x54
 8005b98:	2101      	movs	r1, #1
 8005b9a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f7ff fd13 	bl	80055cc <LL_ADC_REG_IsConversionOngoing>
 8005ba6:	1e03      	subs	r3, r0, #0
 8005ba8:	d000      	beq.n	8005bac <HAL_ADC_ConfigChannel+0x3c>
 8005baa:	e1a5      	b.n	8005ef8 <HAL_ADC_ConfigChannel+0x388>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2b02      	cmp	r3, #2
 8005bb2:	d100      	bne.n	8005bb6 <HAL_ADC_ConfigChannel+0x46>
 8005bb4:	e144      	b.n	8005e40 <HAL_ADC_ConfigChannel+0x2d0>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	2380      	movs	r3, #128	; 0x80
 8005bbc:	061b      	lsls	r3, r3, #24
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d004      	beq.n	8005bcc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005bc6:	4ac2      	ldr	r2, [pc, #776]	; (8005ed0 <HAL_ADC_ConfigChannel+0x360>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d108      	bne.n	8005bde <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	0019      	movs	r1, r3
 8005bd6:	0010      	movs	r0, r2
 8005bd8:	f7ff fc5b 	bl	8005492 <LL_ADC_REG_SetSequencerChAdd>
 8005bdc:	e0c9      	b.n	8005d72 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	211f      	movs	r1, #31
 8005be8:	400b      	ands	r3, r1
 8005bea:	210f      	movs	r1, #15
 8005bec:	4099      	lsls	r1, r3
 8005bee:	000b      	movs	r3, r1
 8005bf0:	43db      	mvns	r3, r3
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	0019      	movs	r1, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	035b      	lsls	r3, r3, #13
 8005bfc:	0b5b      	lsrs	r3, r3, #13
 8005bfe:	d105      	bne.n	8005c0c <HAL_ADC_ConfigChannel+0x9c>
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	0e9b      	lsrs	r3, r3, #26
 8005c06:	221f      	movs	r2, #31
 8005c08:	4013      	ands	r3, r2
 8005c0a:	e098      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2201      	movs	r2, #1
 8005c12:	4013      	ands	r3, r2
 8005c14:	d000      	beq.n	8005c18 <HAL_ADC_ConfigChannel+0xa8>
 8005c16:	e091      	b.n	8005d3c <HAL_ADC_ConfigChannel+0x1cc>
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	4013      	ands	r3, r2
 8005c20:	d000      	beq.n	8005c24 <HAL_ADC_ConfigChannel+0xb4>
 8005c22:	e089      	b.n	8005d38 <HAL_ADC_ConfigChannel+0x1c8>
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	2204      	movs	r2, #4
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	d000      	beq.n	8005c30 <HAL_ADC_ConfigChannel+0xc0>
 8005c2e:	e081      	b.n	8005d34 <HAL_ADC_ConfigChannel+0x1c4>
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2208      	movs	r2, #8
 8005c36:	4013      	ands	r3, r2
 8005c38:	d000      	beq.n	8005c3c <HAL_ADC_ConfigChannel+0xcc>
 8005c3a:	e079      	b.n	8005d30 <HAL_ADC_ConfigChannel+0x1c0>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2210      	movs	r2, #16
 8005c42:	4013      	ands	r3, r2
 8005c44:	d000      	beq.n	8005c48 <HAL_ADC_ConfigChannel+0xd8>
 8005c46:	e071      	b.n	8005d2c <HAL_ADC_ConfigChannel+0x1bc>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	4013      	ands	r3, r2
 8005c50:	d000      	beq.n	8005c54 <HAL_ADC_ConfigChannel+0xe4>
 8005c52:	e069      	b.n	8005d28 <HAL_ADC_ConfigChannel+0x1b8>
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2240      	movs	r2, #64	; 0x40
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d000      	beq.n	8005c60 <HAL_ADC_ConfigChannel+0xf0>
 8005c5e:	e061      	b.n	8005d24 <HAL_ADC_ConfigChannel+0x1b4>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2280      	movs	r2, #128	; 0x80
 8005c66:	4013      	ands	r3, r2
 8005c68:	d000      	beq.n	8005c6c <HAL_ADC_ConfigChannel+0xfc>
 8005c6a:	e059      	b.n	8005d20 <HAL_ADC_ConfigChannel+0x1b0>
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4013      	ands	r3, r2
 8005c76:	d151      	bne.n	8005d1c <HAL_ADC_ConfigChannel+0x1ac>
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4013      	ands	r3, r2
 8005c82:	d149      	bne.n	8005d18 <HAL_ADC_ConfigChannel+0x1a8>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	2380      	movs	r3, #128	; 0x80
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d141      	bne.n	8005d14 <HAL_ADC_ConfigChannel+0x1a4>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	4013      	ands	r3, r2
 8005c9a:	d139      	bne.n	8005d10 <HAL_ADC_ConfigChannel+0x1a0>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	2380      	movs	r3, #128	; 0x80
 8005ca2:	015b      	lsls	r3, r3, #5
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	d131      	bne.n	8005d0c <HAL_ADC_ConfigChannel+0x19c>
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	2380      	movs	r3, #128	; 0x80
 8005cae:	019b      	lsls	r3, r3, #6
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	d129      	bne.n	8005d08 <HAL_ADC_ConfigChannel+0x198>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	2380      	movs	r3, #128	; 0x80
 8005cba:	01db      	lsls	r3, r3, #7
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	d121      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x194>
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	2380      	movs	r3, #128	; 0x80
 8005cc6:	021b      	lsls	r3, r3, #8
 8005cc8:	4013      	ands	r3, r2
 8005cca:	d119      	bne.n	8005d00 <HAL_ADC_ConfigChannel+0x190>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	2380      	movs	r3, #128	; 0x80
 8005cd2:	025b      	lsls	r3, r3, #9
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	d111      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x18c>
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	2380      	movs	r3, #128	; 0x80
 8005cde:	029b      	lsls	r3, r3, #10
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d109      	bne.n	8005cf8 <HAL_ADC_ConfigChannel+0x188>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	2380      	movs	r3, #128	; 0x80
 8005cea:	02db      	lsls	r3, r3, #11
 8005cec:	4013      	ands	r3, r2
 8005cee:	d001      	beq.n	8005cf4 <HAL_ADC_ConfigChannel+0x184>
 8005cf0:	2312      	movs	r3, #18
 8005cf2:	e024      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e022      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005cf8:	2311      	movs	r3, #17
 8005cfa:	e020      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	e01e      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d00:	230f      	movs	r3, #15
 8005d02:	e01c      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d04:	230e      	movs	r3, #14
 8005d06:	e01a      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d08:	230d      	movs	r3, #13
 8005d0a:	e018      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d0c:	230c      	movs	r3, #12
 8005d0e:	e016      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d10:	230b      	movs	r3, #11
 8005d12:	e014      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d14:	230a      	movs	r3, #10
 8005d16:	e012      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d18:	2309      	movs	r3, #9
 8005d1a:	e010      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d1c:	2308      	movs	r3, #8
 8005d1e:	e00e      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d20:	2307      	movs	r3, #7
 8005d22:	e00c      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d24:	2306      	movs	r3, #6
 8005d26:	e00a      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d28:	2305      	movs	r3, #5
 8005d2a:	e008      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d2c:	2304      	movs	r3, #4
 8005d2e:	e006      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d30:	2303      	movs	r3, #3
 8005d32:	e004      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e002      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d38:	2301      	movs	r3, #1
 8005d3a:	e000      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x1ce>
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	6852      	ldr	r2, [r2, #4]
 8005d42:	201f      	movs	r0, #31
 8005d44:	4002      	ands	r2, r0
 8005d46:	4093      	lsls	r3, r2
 8005d48:	000a      	movs	r2, r1
 8005d4a:	431a      	orrs	r2, r3
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	089b      	lsrs	r3, r3, #2
 8005d56:	1c5a      	adds	r2, r3, #1
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d808      	bhi.n	8005d72 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	6859      	ldr	r1, [r3, #4]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	001a      	movs	r2, r3
 8005d6e:	f7ff fb70 	bl	8005452 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6819      	ldr	r1, [r3, #0]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	001a      	movs	r2, r3
 8005d80:	f7ff fbaa 	bl	80054d8 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	db00      	blt.n	8005d8e <HAL_ADC_ConfigChannel+0x21e>
 8005d8c:	e0be      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d8e:	4b51      	ldr	r3, [pc, #324]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005d90:	0018      	movs	r0, r3
 8005d92:	f7ff fb23 	bl	80053dc <LL_ADC_GetCommonPathInternalCh>
 8005d96:	0003      	movs	r3, r0
 8005d98:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a4e      	ldr	r2, [pc, #312]	; (8005ed8 <HAL_ADC_ConfigChannel+0x368>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d123      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x27c>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	2380      	movs	r3, #128	; 0x80
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dac:	d11e      	bne.n	8005dec <HAL_ADC_ConfigChannel+0x27c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2280      	movs	r2, #128	; 0x80
 8005db2:	0412      	lsls	r2, r2, #16
 8005db4:	4313      	orrs	r3, r2
 8005db6:	4a47      	ldr	r2, [pc, #284]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005db8:	0019      	movs	r1, r3
 8005dba:	0010      	movs	r0, r2
 8005dbc:	f7ff fafa 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8005dc0:	4b46      	ldr	r3, [pc, #280]	; (8005edc <HAL_ADC_ConfigChannel+0x36c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4946      	ldr	r1, [pc, #280]	; (8005ee0 <HAL_ADC_ConfigChannel+0x370>)
 8005dc6:	0018      	movs	r0, r3
 8005dc8:	f7fa f99a 	bl	8000100 <__udivsi3>
 8005dcc:	0003      	movs	r3, r0
 8005dce:	001a      	movs	r2, r3
 8005dd0:	0013      	movs	r3, r2
 8005dd2:	005b      	lsls	r3, r3, #1
 8005dd4:	189b      	adds	r3, r3, r2
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	3301      	adds	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005ddc:	e002      	b.n	8005de4 <HAL_ADC_ConfigChannel+0x274>
          {
            wait_loop_index--;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	3b01      	subs	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1f9      	bne.n	8005dde <HAL_ADC_ConfigChannel+0x26e>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005dea:	e08f      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a3c      	ldr	r2, [pc, #240]	; (8005ee4 <HAL_ADC_ConfigChannel+0x374>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d10e      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x2a4>
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	2380      	movs	r3, #128	; 0x80
 8005dfa:	045b      	lsls	r3, r3, #17
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d109      	bne.n	8005e14 <HAL_ADC_ConfigChannel+0x2a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e00:	693b      	ldr	r3, [r7, #16]
 8005e02:	2280      	movs	r2, #128	; 0x80
 8005e04:	0452      	lsls	r2, r2, #17
 8005e06:	4313      	orrs	r3, r2
 8005e08:	4a32      	ldr	r2, [pc, #200]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005e0a:	0019      	movs	r1, r3
 8005e0c:	0010      	movs	r0, r2
 8005e0e:	f7ff fad1 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
 8005e12:	e07b      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a33      	ldr	r2, [pc, #204]	; (8005ee8 <HAL_ADC_ConfigChannel+0x378>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d000      	beq.n	8005e20 <HAL_ADC_ConfigChannel+0x2b0>
 8005e1e:	e075      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	2380      	movs	r3, #128	; 0x80
 8005e24:	03db      	lsls	r3, r3, #15
 8005e26:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8005e28:	d000      	beq.n	8005e2c <HAL_ADC_ConfigChannel+0x2bc>
 8005e2a:	e06f      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	03d2      	lsls	r2, r2, #15
 8005e32:	4313      	orrs	r3, r2
 8005e34:	4a27      	ldr	r2, [pc, #156]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005e36:	0019      	movs	r1, r3
 8005e38:	0010      	movs	r0, r2
 8005e3a:	f7ff fabb 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
 8005e3e:	e065      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	2380      	movs	r3, #128	; 0x80
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d004      	beq.n	8005e56 <HAL_ADC_ConfigChannel+0x2e6>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8005e50:	4a1f      	ldr	r2, [pc, #124]	; (8005ed0 <HAL_ADC_ConfigChannel+0x360>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d107      	bne.n	8005e66 <HAL_ADC_ConfigChannel+0x2f6>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	0019      	movs	r1, r3
 8005e60:	0010      	movs	r0, r2
 8005e62:	f7ff fb27 	bl	80054b4 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	da4e      	bge.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e6e:	4b19      	ldr	r3, [pc, #100]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005e70:	0018      	movs	r0, r3
 8005e72:	f7ff fab3 	bl	80053dc <LL_ADC_GetCommonPathInternalCh>
 8005e76:	0003      	movs	r3, r0
 8005e78:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a16      	ldr	r2, [pc, #88]	; (8005ed8 <HAL_ADC_ConfigChannel+0x368>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d108      	bne.n	8005e96 <HAL_ADC_ConfigChannel+0x326>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	4a19      	ldr	r2, [pc, #100]	; (8005eec <HAL_ADC_ConfigChannel+0x37c>)
 8005e88:	4013      	ands	r3, r2
 8005e8a:	4a12      	ldr	r2, [pc, #72]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005e8c:	0019      	movs	r1, r3
 8005e8e:	0010      	movs	r0, r2
 8005e90:	f7ff fa90 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
 8005e94:	e03a      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VBAT)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a12      	ldr	r2, [pc, #72]	; (8005ee4 <HAL_ADC_ConfigChannel+0x374>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d108      	bne.n	8005eb2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	4a13      	ldr	r2, [pc, #76]	; (8005ef0 <HAL_ADC_ConfigChannel+0x380>)
 8005ea4:	4013      	ands	r3, r2
 8005ea6:	4a0b      	ldr	r2, [pc, #44]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005ea8:	0019      	movs	r1, r3
 8005eaa:	0010      	movs	r0, r2
 8005eac:	f7ff fa82 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
 8005eb0:	e02c      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a0c      	ldr	r2, [pc, #48]	; (8005ee8 <HAL_ADC_ConfigChannel+0x378>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d127      	bne.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4a0d      	ldr	r2, [pc, #52]	; (8005ef4 <HAL_ADC_ConfigChannel+0x384>)
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	4a04      	ldr	r2, [pc, #16]	; (8005ed4 <HAL_ADC_ConfigChannel+0x364>)
 8005ec4:	0019      	movs	r1, r3
 8005ec6:	0010      	movs	r0, r2
 8005ec8:	f7ff fa74 	bl	80053b4 <LL_ADC_SetCommonPathInternalCh>
 8005ecc:	e01e      	b.n	8005f0c <HAL_ADC_ConfigChannel+0x39c>
 8005ece:	46c0      	nop			; (mov r8, r8)
 8005ed0:	80000004 	.word	0x80000004
 8005ed4:	40012708 	.word	0x40012708
 8005ed8:	b0001000 	.word	0xb0001000
 8005edc:	20000020 	.word	0x20000020
 8005ee0:	00030d40 	.word	0x00030d40
 8005ee4:	b8004000 	.word	0xb8004000
 8005ee8:	b4002000 	.word	0xb4002000
 8005eec:	ff7fffff 	.word	0xff7fffff
 8005ef0:	feffffff 	.word	0xfeffffff
 8005ef4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005efc:	2220      	movs	r2, #32
 8005efe:	431a      	orrs	r2, r3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8005f04:	2317      	movs	r3, #23
 8005f06:	18fb      	adds	r3, r7, r3
 8005f08:	2201      	movs	r2, #1
 8005f0a:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2254      	movs	r2, #84	; 0x54
 8005f10:	2100      	movs	r1, #0
 8005f12:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8005f14:	2317      	movs	r3, #23
 8005f16:	18fb      	adds	r3, r7, r3
 8005f18:	781b      	ldrb	r3, [r3, #0]
}
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	b006      	add	sp, #24
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	46c0      	nop			; (mov r8, r8)

08005f24 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	0018      	movs	r0, r3
 8005f36:	f7ff fb25 	bl	8005584 <LL_ADC_IsEnabled>
 8005f3a:	1e03      	subs	r3, r0, #0
 8005f3c:	d162      	bne.n	8006004 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	4a32      	ldr	r2, [pc, #200]	; (8006010 <ADC_Enable+0xec>)
 8005f46:	4013      	ands	r3, r2
 8005f48:	d00d      	beq.n	8005f66 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4e:	2210      	movs	r2, #16
 8005f50:	431a      	orrs	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e04f      	b.n	8006006 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	0018      	movs	r0, r3
 8005f6c:	f7ff faf8 	bl	8005560 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8005f70:	4b28      	ldr	r3, [pc, #160]	; (8006014 <ADC_Enable+0xf0>)
 8005f72:	0018      	movs	r0, r3
 8005f74:	f7ff fa32 	bl	80053dc <LL_ADC_GetCommonPathInternalCh>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	2380      	movs	r3, #128	; 0x80
 8005f7c:	041b      	lsls	r3, r3, #16
 8005f7e:	4013      	ands	r3, r2
 8005f80:	d00f      	beq.n	8005fa2 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8005f82:	4b25      	ldr	r3, [pc, #148]	; (8006018 <ADC_Enable+0xf4>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4925      	ldr	r1, [pc, #148]	; (800601c <ADC_Enable+0xf8>)
 8005f88:	0018      	movs	r0, r3
 8005f8a:	f7fa f8b9 	bl	8000100 <__udivsi3>
 8005f8e:	0003      	movs	r3, r0
 8005f90:	3301      	adds	r3, #1
 8005f92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f94:	e002      	b.n	8005f9c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f9      	bne.n	8005f96 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	7e5b      	ldrb	r3, [r3, #25]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d02c      	beq.n	8006004 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8005faa:	f7ff f9bf 	bl	800532c <HAL_GetTick>
 8005fae:	0003      	movs	r3, r0
 8005fb0:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005fb2:	e020      	b.n	8005ff6 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7ff fae3 	bl	8005584 <LL_ADC_IsEnabled>
 8005fbe:	1e03      	subs	r3, r0, #0
 8005fc0:	d104      	bne.n	8005fcc <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	0018      	movs	r0, r3
 8005fc8:	f7ff faca 	bl	8005560 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005fcc:	f7ff f9ae 	bl	800532c <HAL_GetTick>
 8005fd0:	0002      	movs	r2, r0
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d90d      	bls.n	8005ff6 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fde:	2210      	movs	r2, #16
 8005fe0:	431a      	orrs	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fea:	2201      	movs	r2, #1
 8005fec:	431a      	orrs	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e007      	b.n	8006006 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b01      	cmp	r3, #1
 8006002:	d1d7      	bne.n	8005fb4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	0018      	movs	r0, r3
 8006008:	46bd      	mov	sp, r7
 800600a:	b004      	add	sp, #16
 800600c:	bd80      	pop	{r7, pc}
 800600e:	46c0      	nop			; (mov r8, r8)
 8006010:	80000017 	.word	0x80000017
 8006014:	40012708 	.word	0x40012708
 8006018:	20000020 	.word	0x20000020
 800601c:	00030d40 	.word	0x00030d40

08006020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b082      	sub	sp, #8
 8006024:	af00      	add	r7, sp, #0
 8006026:	0002      	movs	r2, r0
 8006028:	1dfb      	adds	r3, r7, #7
 800602a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800602c:	1dfb      	adds	r3, r7, #7
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b7f      	cmp	r3, #127	; 0x7f
 8006032:	d809      	bhi.n	8006048 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006034:	1dfb      	adds	r3, r7, #7
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	001a      	movs	r2, r3
 800603a:	231f      	movs	r3, #31
 800603c:	401a      	ands	r2, r3
 800603e:	4b04      	ldr	r3, [pc, #16]	; (8006050 <__NVIC_EnableIRQ+0x30>)
 8006040:	2101      	movs	r1, #1
 8006042:	4091      	lsls	r1, r2
 8006044:	000a      	movs	r2, r1
 8006046:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8006048:	46c0      	nop			; (mov r8, r8)
 800604a:	46bd      	mov	sp, r7
 800604c:	b002      	add	sp, #8
 800604e:	bd80      	pop	{r7, pc}
 8006050:	e000e100 	.word	0xe000e100

08006054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006054:	b590      	push	{r4, r7, lr}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	0002      	movs	r2, r0
 800605c:	6039      	str	r1, [r7, #0]
 800605e:	1dfb      	adds	r3, r7, #7
 8006060:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006062:	1dfb      	adds	r3, r7, #7
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	2b7f      	cmp	r3, #127	; 0x7f
 8006068:	d828      	bhi.n	80060bc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800606a:	4a2f      	ldr	r2, [pc, #188]	; (8006128 <__NVIC_SetPriority+0xd4>)
 800606c:	1dfb      	adds	r3, r7, #7
 800606e:	781b      	ldrb	r3, [r3, #0]
 8006070:	b25b      	sxtb	r3, r3
 8006072:	089b      	lsrs	r3, r3, #2
 8006074:	33c0      	adds	r3, #192	; 0xc0
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	589b      	ldr	r3, [r3, r2]
 800607a:	1dfa      	adds	r2, r7, #7
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	0011      	movs	r1, r2
 8006080:	2203      	movs	r2, #3
 8006082:	400a      	ands	r2, r1
 8006084:	00d2      	lsls	r2, r2, #3
 8006086:	21ff      	movs	r1, #255	; 0xff
 8006088:	4091      	lsls	r1, r2
 800608a:	000a      	movs	r2, r1
 800608c:	43d2      	mvns	r2, r2
 800608e:	401a      	ands	r2, r3
 8006090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	401a      	ands	r2, r3
 800609a:	1dfb      	adds	r3, r7, #7
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	0018      	movs	r0, r3
 80060a0:	2303      	movs	r3, #3
 80060a2:	4003      	ands	r3, r0
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060a8:	481f      	ldr	r0, [pc, #124]	; (8006128 <__NVIC_SetPriority+0xd4>)
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	b25b      	sxtb	r3, r3
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	430a      	orrs	r2, r1
 80060b4:	33c0      	adds	r3, #192	; 0xc0
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80060ba:	e031      	b.n	8006120 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060bc:	4a1b      	ldr	r2, [pc, #108]	; (800612c <__NVIC_SetPriority+0xd8>)
 80060be:	1dfb      	adds	r3, r7, #7
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	0019      	movs	r1, r3
 80060c4:	230f      	movs	r3, #15
 80060c6:	400b      	ands	r3, r1
 80060c8:	3b08      	subs	r3, #8
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	3306      	adds	r3, #6
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	18d3      	adds	r3, r2, r3
 80060d2:	3304      	adds	r3, #4
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	1dfa      	adds	r2, r7, #7
 80060d8:	7812      	ldrb	r2, [r2, #0]
 80060da:	0011      	movs	r1, r2
 80060dc:	2203      	movs	r2, #3
 80060de:	400a      	ands	r2, r1
 80060e0:	00d2      	lsls	r2, r2, #3
 80060e2:	21ff      	movs	r1, #255	; 0xff
 80060e4:	4091      	lsls	r1, r2
 80060e6:	000a      	movs	r2, r1
 80060e8:	43d2      	mvns	r2, r2
 80060ea:	401a      	ands	r2, r3
 80060ec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	019b      	lsls	r3, r3, #6
 80060f2:	22ff      	movs	r2, #255	; 0xff
 80060f4:	401a      	ands	r2, r3
 80060f6:	1dfb      	adds	r3, r7, #7
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	0018      	movs	r0, r3
 80060fc:	2303      	movs	r3, #3
 80060fe:	4003      	ands	r3, r0
 8006100:	00db      	lsls	r3, r3, #3
 8006102:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006104:	4809      	ldr	r0, [pc, #36]	; (800612c <__NVIC_SetPriority+0xd8>)
 8006106:	1dfb      	adds	r3, r7, #7
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	001c      	movs	r4, r3
 800610c:	230f      	movs	r3, #15
 800610e:	4023      	ands	r3, r4
 8006110:	3b08      	subs	r3, #8
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	430a      	orrs	r2, r1
 8006116:	3306      	adds	r3, #6
 8006118:	009b      	lsls	r3, r3, #2
 800611a:	18c3      	adds	r3, r0, r3
 800611c:	3304      	adds	r3, #4
 800611e:	601a      	str	r2, [r3, #0]
}
 8006120:	46c0      	nop			; (mov r8, r8)
 8006122:	46bd      	mov	sp, r7
 8006124:	b003      	add	sp, #12
 8006126:	bd90      	pop	{r4, r7, pc}
 8006128:	e000e100 	.word	0xe000e100
 800612c:	e000ed00 	.word	0xe000ed00

08006130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	2380      	movs	r3, #128	; 0x80
 800613e:	045b      	lsls	r3, r3, #17
 8006140:	429a      	cmp	r2, r3
 8006142:	d301      	bcc.n	8006148 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006144:	2301      	movs	r3, #1
 8006146:	e010      	b.n	800616a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <SysTick_Config+0x44>)
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	3a01      	subs	r2, #1
 800614e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006150:	2301      	movs	r3, #1
 8006152:	425b      	negs	r3, r3
 8006154:	2103      	movs	r1, #3
 8006156:	0018      	movs	r0, r3
 8006158:	f7ff ff7c 	bl	8006054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800615c:	4b05      	ldr	r3, [pc, #20]	; (8006174 <SysTick_Config+0x44>)
 800615e:	2200      	movs	r2, #0
 8006160:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006162:	4b04      	ldr	r3, [pc, #16]	; (8006174 <SysTick_Config+0x44>)
 8006164:	2207      	movs	r2, #7
 8006166:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006168:	2300      	movs	r3, #0
}
 800616a:	0018      	movs	r0, r3
 800616c:	46bd      	mov	sp, r7
 800616e:	b002      	add	sp, #8
 8006170:	bd80      	pop	{r7, pc}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	e000e010 	.word	0xe000e010

08006178 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60b9      	str	r1, [r7, #8]
 8006180:	607a      	str	r2, [r7, #4]
 8006182:	210f      	movs	r1, #15
 8006184:	187b      	adds	r3, r7, r1
 8006186:	1c02      	adds	r2, r0, #0
 8006188:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	187b      	adds	r3, r7, r1
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	b25b      	sxtb	r3, r3
 8006192:	0011      	movs	r1, r2
 8006194:	0018      	movs	r0, r3
 8006196:	f7ff ff5d 	bl	8006054 <__NVIC_SetPriority>
}
 800619a:	46c0      	nop			; (mov r8, r8)
 800619c:	46bd      	mov	sp, r7
 800619e:	b004      	add	sp, #16
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b082      	sub	sp, #8
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	0002      	movs	r2, r0
 80061aa:	1dfb      	adds	r3, r7, #7
 80061ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80061ae:	1dfb      	adds	r3, r7, #7
 80061b0:	781b      	ldrb	r3, [r3, #0]
 80061b2:	b25b      	sxtb	r3, r3
 80061b4:	0018      	movs	r0, r3
 80061b6:	f7ff ff33 	bl	8006020 <__NVIC_EnableIRQ>
}
 80061ba:	46c0      	nop			; (mov r8, r8)
 80061bc:	46bd      	mov	sp, r7
 80061be:	b002      	add	sp, #8
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b082      	sub	sp, #8
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	0018      	movs	r0, r3
 80061ce:	f7ff ffaf 	bl	8006130 <SysTick_Config>
 80061d2:	0003      	movs	r3, r0
}
 80061d4:	0018      	movs	r0, r3
 80061d6:	46bd      	mov	sp, r7
 80061d8:	b002      	add	sp, #8
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_FLASH_Program>:
  *               are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80061dc:	b5b0      	push	{r4, r5, r7, lr}
 80061de:	b086      	sub	sp, #24
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	603a      	str	r2, [r7, #0]
 80061e8:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80061ea:	4b21      	ldr	r3, [pc, #132]	; (8006270 <HAL_FLASH_Program+0x94>)
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_FLASH_Program+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e038      	b.n	8006268 <HAL_FLASH_Program+0x8c>
 80061f6:	4b1e      	ldr	r3, [pc, #120]	; (8006270 <HAL_FLASH_Program+0x94>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80061fc:	4b1c      	ldr	r3, [pc, #112]	; (8006270 <HAL_FLASH_Program+0x94>)
 80061fe:	2200      	movs	r2, #0
 8006200:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006202:	2517      	movs	r5, #23
 8006204:	197c      	adds	r4, r7, r5
 8006206:	23fa      	movs	r3, #250	; 0xfa
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	0018      	movs	r0, r3
 800620c:	f000 f874 	bl	80062f8 <FLASH_WaitForLastOperation>
 8006210:	0003      	movs	r3, r0
 8006212:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006214:	197b      	adds	r3, r7, r5
 8006216:	781b      	ldrb	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d11f      	bne.n	800625c <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d106      	bne.n	8006230 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	68b9      	ldr	r1, [r7, #8]
 8006228:	0008      	movs	r0, r1
 800622a:	f000 f8b3 	bl	8006394 <FLASH_Program_DoubleWord>
 800622e:	e005      	b.n	800623c <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8006230:	683a      	ldr	r2, [r7, #0]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	0011      	movs	r1, r2
 8006236:	0018      	movs	r0, r3
 8006238:	f003 f8d2 	bl	80093e0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800623c:	2317      	movs	r3, #23
 800623e:	18fc      	adds	r4, r7, r3
 8006240:	23fa      	movs	r3, #250	; 0xfa
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	0018      	movs	r0, r3
 8006246:	f000 f857 	bl	80062f8 <FLASH_WaitForLastOperation>
 800624a:	0003      	movs	r3, r0
 800624c:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800624e:	4b09      	ldr	r3, [pc, #36]	; (8006274 <HAL_FLASH_Program+0x98>)
 8006250:	695a      	ldr	r2, [r3, #20]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43d9      	mvns	r1, r3
 8006256:	4b07      	ldr	r3, [pc, #28]	; (8006274 <HAL_FLASH_Program+0x98>)
 8006258:	400a      	ands	r2, r1
 800625a:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800625c:	4b04      	ldr	r3, [pc, #16]	; (8006270 <HAL_FLASH_Program+0x94>)
 800625e:	2200      	movs	r2, #0
 8006260:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8006262:	2317      	movs	r3, #23
 8006264:	18fb      	adds	r3, r7, r3
 8006266:	781b      	ldrb	r3, [r3, #0]
}
 8006268:	0018      	movs	r0, r3
 800626a:	46bd      	mov	sp, r7
 800626c:	b006      	add	sp, #24
 800626e:	bdb0      	pop	{r4, r5, r7, pc}
 8006270:	20000168 	.word	0x20000168
 8006274:	40022000 	.word	0x40022000

08006278 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800627e:	1dfb      	adds	r3, r7, #7
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <HAL_FLASH_Unlock+0x3c>)
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	da0c      	bge.n	80062a6 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800628c:	4b09      	ldr	r3, [pc, #36]	; (80062b4 <HAL_FLASH_Unlock+0x3c>)
 800628e:	4a0a      	ldr	r2, [pc, #40]	; (80062b8 <HAL_FLASH_Unlock+0x40>)
 8006290:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006292:	4b08      	ldr	r3, [pc, #32]	; (80062b4 <HAL_FLASH_Unlock+0x3c>)
 8006294:	4a09      	ldr	r2, [pc, #36]	; (80062bc <HAL_FLASH_Unlock+0x44>)
 8006296:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <HAL_FLASH_Unlock+0x3c>)
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	2b00      	cmp	r3, #0
 800629e:	da02      	bge.n	80062a6 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 80062a0:	1dfb      	adds	r3, r7, #7
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80062a6:	1dfb      	adds	r3, r7, #7
 80062a8:	781b      	ldrb	r3, [r3, #0]
}
 80062aa:	0018      	movs	r0, r3
 80062ac:	46bd      	mov	sp, r7
 80062ae:	b002      	add	sp, #8
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	46c0      	nop			; (mov r8, r8)
 80062b4:	40022000 	.word	0x40022000
 80062b8:	45670123 	.word	0x45670123
 80062bc:	cdef89ab 	.word	0xcdef89ab

080062c0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80062c6:	1dfb      	adds	r3, r7, #7
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80062cc:	4b09      	ldr	r3, [pc, #36]	; (80062f4 <HAL_FLASH_Lock+0x34>)
 80062ce:	695a      	ldr	r2, [r3, #20]
 80062d0:	4b08      	ldr	r3, [pc, #32]	; (80062f4 <HAL_FLASH_Lock+0x34>)
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	0609      	lsls	r1, r1, #24
 80062d6:	430a      	orrs	r2, r1
 80062d8:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80062da:	4b06      	ldr	r3, [pc, #24]	; (80062f4 <HAL_FLASH_Lock+0x34>)
 80062dc:	695b      	ldr	r3, [r3, #20]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	da02      	bge.n	80062e8 <HAL_FLASH_Lock+0x28>
  {
    status = HAL_OK;
 80062e2:	1dfb      	adds	r3, r7, #7
 80062e4:	2200      	movs	r2, #0
 80062e6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
}
 80062ec:	0018      	movs	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	b002      	add	sp, #8
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	40022000 	.word	0x40022000

080062f8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  uint32_t error;
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  uint32_t timeout = HAL_GetTick() + Timeout;
 8006300:	f7ff f814 	bl	800532c <HAL_GetTick>
 8006304:	0002      	movs	r2, r0
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	189b      	adds	r3, r3, r2
 800630a:	60fb      	str	r3, [r7, #12]

  /* Wait if any operation is ongoing */
#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 800630c:	2380      	movs	r3, #128	; 0x80
 800630e:	025b      	lsls	r3, r3, #9
 8006310:	60bb      	str	r3, [r7, #8]
#endif

  while ((FLASH->SR & error) != 0x00U)
 8006312:	e007      	b.n	8006324 <FLASH_WaitForLastOperation+0x2c>
  {
    if (HAL_GetTick() >= timeout)
 8006314:	f7ff f80a 	bl	800532c <HAL_GetTick>
 8006318:	0002      	movs	r2, r0
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4293      	cmp	r3, r2
 800631e:	d801      	bhi.n	8006324 <FLASH_WaitForLastOperation+0x2c>
    {
      return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e02a      	b.n	800637a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & error) != 0x00U)
 8006324:	4b17      	ldr	r3, [pc, #92]	; (8006384 <FLASH_WaitForLastOperation+0x8c>)
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4013      	ands	r3, r2
 800632c:	d1f2      	bne.n	8006314 <FLASH_WaitForLastOperation+0x1c>
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 800632e:	4b15      	ldr	r3, [pc, #84]	; (8006384 <FLASH_WaitForLastOperation+0x8c>)
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <FLASH_WaitForLastOperation+0x90>)
 8006334:	4013      	ands	r3, r2
 8006336:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8006338:	4b12      	ldr	r3, [pc, #72]	; (8006384 <FLASH_WaitForLastOperation+0x8c>)
 800633a:	4a14      	ldr	r2, [pc, #80]	; (800638c <FLASH_WaitForLastOperation+0x94>)
 800633c:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <FLASH_WaitForLastOperation+0x56>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8006344:	4b12      	ldr	r3, [pc, #72]	; (8006390 <FLASH_WaitForLastOperation+0x98>)
 8006346:	68ba      	ldr	r2, [r7, #8]
 8006348:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	e015      	b.n	800637a <FLASH_WaitForLastOperation+0x82>
  }

  /* Wait for control register to be written */
  timeout = HAL_GetTick() + Timeout;
 800634e:	f7fe ffed 	bl	800532c <HAL_GetTick>
 8006352:	0002      	movs	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	189b      	adds	r3, r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800635a:	e007      	b.n	800636c <FLASH_WaitForLastOperation+0x74>
  {
    if (HAL_GetTick() >= timeout)
 800635c:	f7fe ffe6 	bl	800532c <HAL_GetTick>
 8006360:	0002      	movs	r2, r0
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4293      	cmp	r3, r2
 8006366:	d801      	bhi.n	800636c <FLASH_WaitForLastOperation+0x74>
    {
      return HAL_TIMEOUT;
 8006368:	2303      	movs	r3, #3
 800636a:	e006      	b.n	800637a <FLASH_WaitForLastOperation+0x82>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <FLASH_WaitForLastOperation+0x8c>)
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	2380      	movs	r3, #128	; 0x80
 8006372:	02db      	lsls	r3, r3, #11
 8006374:	4013      	ands	r3, r2
 8006376:	d1f1      	bne.n	800635c <FLASH_WaitForLastOperation+0x64>
    }
  }

  return HAL_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	0018      	movs	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	b004      	add	sp, #16
 8006380:	bd80      	pop	{r7, pc}
 8006382:	46c0      	nop			; (mov r8, r8)
 8006384:	40022000 	.word	0x40022000
 8006388:	000083fa 	.word	0x000083fa
 800638c:	000083fb 	.word	0x000083fb
 8006390:	20000168 	.word	0x20000168

08006394 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006394:	b5b0      	push	{r4, r5, r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	603a      	str	r2, [r7, #0]
 800639e:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80063a0:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <FLASH_Program_DoubleWord+0x3c>)
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <FLASH_Program_DoubleWord+0x3c>)
 80063a6:	2101      	movs	r1, #1
 80063a8:	430a      	orrs	r2, r1
 80063aa:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80063b2:	f3bf 8f6f 	isb	sy
}
 80063b6:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	001c      	movs	r4, r3
 80063bc:	2300      	movs	r3, #0
 80063be:	001d      	movs	r5, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	3304      	adds	r3, #4
 80063c4:	0022      	movs	r2, r4
 80063c6:	601a      	str	r2, [r3, #0]
}
 80063c8:	46c0      	nop			; (mov r8, r8)
 80063ca:	46bd      	mov	sp, r7
 80063cc:	b004      	add	sp, #16
 80063ce:	bdb0      	pop	{r4, r5, r7, pc}
 80063d0:	40022000 	.word	0x40022000

080063d4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80063d4:	b5b0      	push	{r4, r5, r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80063de:	4b35      	ldr	r3, [pc, #212]	; (80064b4 <HAL_FLASHEx_Erase+0xe0>)
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d101      	bne.n	80063ea <HAL_FLASHEx_Erase+0x16>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e05f      	b.n	80064aa <HAL_FLASHEx_Erase+0xd6>
 80063ea:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <HAL_FLASHEx_Erase+0xe0>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80063f0:	4b30      	ldr	r3, [pc, #192]	; (80064b4 <HAL_FLASHEx_Erase+0xe0>)
 80063f2:	2200      	movs	r2, #0
 80063f4:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80063f6:	250f      	movs	r5, #15
 80063f8:	197c      	adds	r4, r7, r5
 80063fa:	23fa      	movs	r3, #250	; 0xfa
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	0018      	movs	r0, r3
 8006400:	f7ff ff7a 	bl	80062f8 <FLASH_WaitForLastOperation>
 8006404:	0003      	movs	r3, r0
 8006406:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8006408:	002c      	movs	r4, r5
 800640a:	193b      	adds	r3, r7, r4
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d145      	bne.n	800649e <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2204      	movs	r2, #4
 8006416:	605a      	str	r2, [r3, #4]
#endif

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d10d      	bne.n	800643c <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	0018      	movs	r0, r3
 8006426:	f000 f849 	bl	80064bc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800642a:	193c      	adds	r4, r7, r4
 800642c:	23fa      	movs	r3, #250	; 0xfa
 800642e:	009b      	lsls	r3, r3, #2
 8006430:	0018      	movs	r0, r3
 8006432:	f7ff ff61 	bl	80062f8 <FLASH_WaitForLastOperation>
 8006436:	0003      	movs	r3, r0
 8006438:	7023      	strb	r3, [r4, #0]
 800643a:	e030      	b.n	800649e <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	2201      	movs	r2, #1
 8006440:	4252      	negs	r2, r2
 8006442:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	60bb      	str	r3, [r7, #8]
 800644a:	e01a      	b.n	8006482 <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	68ba      	ldr	r2, [r7, #8]
 8006452:	0011      	movs	r1, r2
 8006454:	0018      	movs	r0, r3
 8006456:	f000 f845 	bl	80064e4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800645a:	250f      	movs	r5, #15
 800645c:	197c      	adds	r4, r7, r5
 800645e:	23fa      	movs	r3, #250	; 0xfa
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	0018      	movs	r0, r3
 8006464:	f7ff ff48 	bl	80062f8 <FLASH_WaitForLastOperation>
 8006468:	0003      	movs	r3, r0
 800646a:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 800646c:	197b      	adds	r3, r7, r5
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68ba      	ldr	r2, [r7, #8]
 8006478:	601a      	str	r2, [r3, #0]
          break;
 800647a:	e00a      	b.n	8006492 <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	3301      	adds	r3, #1
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	18d3      	adds	r3, r2, r3
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	429a      	cmp	r2, r3
 8006490:	d3dc      	bcc.n	800644c <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006492:	4b09      	ldr	r3, [pc, #36]	; (80064b8 <HAL_FLASHEx_Erase+0xe4>)
 8006494:	695a      	ldr	r2, [r3, #20]
 8006496:	4b08      	ldr	r3, [pc, #32]	; (80064b8 <HAL_FLASHEx_Erase+0xe4>)
 8006498:	2102      	movs	r1, #2
 800649a:	438a      	bics	r2, r1
 800649c:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800649e:	4b05      	ldr	r3, [pc, #20]	; (80064b4 <HAL_FLASHEx_Erase+0xe0>)
 80064a0:	2200      	movs	r2, #0
 80064a2:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80064a4:	230f      	movs	r3, #15
 80064a6:	18fb      	adds	r3, r7, r3
 80064a8:	781b      	ldrb	r3, [r3, #0]
}
 80064aa:	0018      	movs	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	b004      	add	sp, #16
 80064b0:	bdb0      	pop	{r4, r5, r7, pc}
 80064b2:	46c0      	nop			; (mov r8, r8)
 80064b4:	20000168 	.word	0x20000168
 80064b8:	40022000 	.word	0x40022000

080064bc <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 80064c4:	4b06      	ldr	r3, [pc, #24]	; (80064e0 <FLASH_MassErase+0x24>)
 80064c6:	695a      	ldr	r2, [r3, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	431a      	orrs	r2, r3
 80064cc:	4b04      	ldr	r3, [pc, #16]	; (80064e0 <FLASH_MassErase+0x24>)
 80064ce:	2180      	movs	r1, #128	; 0x80
 80064d0:	0249      	lsls	r1, r1, #9
 80064d2:	430a      	orrs	r2, r1
 80064d4:	615a      	str	r2, [r3, #20]
}
 80064d6:	46c0      	nop			; (mov r8, r8)
 80064d8:	46bd      	mov	sp, r7
 80064da:	b002      	add	sp, #8
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	46c0      	nop			; (mov r8, r8)
 80064e0:	40022000 	.word	0x40022000

080064e4 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <FLASH_PageErase+0x2c>)
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	4a08      	ldr	r2, [pc, #32]	; (8006514 <FLASH_PageErase+0x30>)
 80064f4:	4013      	ands	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
    tmp &= ~FLASH_CR_BKER;
  }
#endif

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	00da      	lsls	r2, r3, #3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	431a      	orrs	r2, r3
 8006500:	4b03      	ldr	r3, [pc, #12]	; (8006510 <FLASH_PageErase+0x2c>)
 8006502:	4905      	ldr	r1, [pc, #20]	; (8006518 <FLASH_PageErase+0x34>)
 8006504:	430a      	orrs	r2, r1
 8006506:	615a      	str	r2, [r3, #20]
}
 8006508:	46c0      	nop			; (mov r8, r8)
 800650a:	46bd      	mov	sp, r7
 800650c:	b004      	add	sp, #16
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40022000 	.word	0x40022000
 8006514:	fffffe07 	.word	0xfffffe07
 8006518:	00010002 	.word	0x00010002

0800651c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006526:	2300      	movs	r3, #0
 8006528:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800652a:	e147      	b.n	80067bc <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2101      	movs	r1, #1
 8006532:	697a      	ldr	r2, [r7, #20]
 8006534:	4091      	lsls	r1, r2
 8006536:	000a      	movs	r2, r1
 8006538:	4013      	ands	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d100      	bne.n	8006544 <HAL_GPIO_Init+0x28>
 8006542:	e138      	b.n	80067b6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d00b      	beq.n	8006564 <HAL_GPIO_Init+0x48>
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	2b02      	cmp	r3, #2
 8006552:	d007      	beq.n	8006564 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006558:	2b11      	cmp	r3, #17
 800655a:	d003      	beq.n	8006564 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	2b12      	cmp	r3, #18
 8006562:	d130      	bne.n	80065c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	2203      	movs	r2, #3
 8006570:	409a      	lsls	r2, r3
 8006572:	0013      	movs	r3, r2
 8006574:	43da      	mvns	r2, r3
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4013      	ands	r3, r2
 800657a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	409a      	lsls	r2, r3
 8006586:	0013      	movs	r3, r2
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800659a:	2201      	movs	r2, #1
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	409a      	lsls	r2, r3
 80065a0:	0013      	movs	r3, r2
 80065a2:	43da      	mvns	r2, r3
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	4013      	ands	r3, r2
 80065a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	091b      	lsrs	r3, r3, #4
 80065b0:	2201      	movs	r2, #1
 80065b2:	401a      	ands	r2, r3
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	409a      	lsls	r2, r3
 80065b8:	0013      	movs	r3, r2
 80065ba:	693a      	ldr	r2, [r7, #16]
 80065bc:	4313      	orrs	r3, r2
 80065be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	693a      	ldr	r2, [r7, #16]
 80065c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	2203      	movs	r2, #3
 80065d2:	409a      	lsls	r2, r3
 80065d4:	0013      	movs	r3, r2
 80065d6:	43da      	mvns	r2, r3
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	4013      	ands	r3, r2
 80065dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	689a      	ldr	r2, [r3, #8]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	409a      	lsls	r2, r3
 80065e8:	0013      	movs	r3, r2
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d003      	beq.n	8006606 <HAL_GPIO_Init+0xea>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b12      	cmp	r3, #18
 8006604:	d123      	bne.n	800664e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	08da      	lsrs	r2, r3, #3
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3208      	adds	r2, #8
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	58d3      	ldr	r3, [r2, r3]
 8006612:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	2207      	movs	r2, #7
 8006618:	4013      	ands	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	220f      	movs	r2, #15
 800661e:	409a      	lsls	r2, r3
 8006620:	0013      	movs	r3, r2
 8006622:	43da      	mvns	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	4013      	ands	r3, r2
 8006628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	691a      	ldr	r2, [r3, #16]
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2107      	movs	r1, #7
 8006632:	400b      	ands	r3, r1
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	409a      	lsls	r2, r3
 8006638:	0013      	movs	r3, r2
 800663a:	693a      	ldr	r2, [r7, #16]
 800663c:	4313      	orrs	r3, r2
 800663e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	08da      	lsrs	r2, r3, #3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	3208      	adds	r2, #8
 8006648:	0092      	lsls	r2, r2, #2
 800664a:	6939      	ldr	r1, [r7, #16]
 800664c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	2203      	movs	r2, #3
 800665a:	409a      	lsls	r2, r3
 800665c:	0013      	movs	r3, r2
 800665e:	43da      	mvns	r2, r3
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	4013      	ands	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	2203      	movs	r2, #3
 800666c:	401a      	ands	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	409a      	lsls	r2, r3
 8006674:	0013      	movs	r3, r2
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	055b      	lsls	r3, r3, #21
 800668a:	4013      	ands	r3, r2
 800668c:	d100      	bne.n	8006690 <HAL_GPIO_Init+0x174>
 800668e:	e092      	b.n	80067b6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006690:	4a50      	ldr	r2, [pc, #320]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	089b      	lsrs	r3, r3, #2
 8006696:	3318      	adds	r3, #24
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	589b      	ldr	r3, [r3, r2]
 800669c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	2203      	movs	r2, #3
 80066a2:	4013      	ands	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	220f      	movs	r2, #15
 80066a8:	409a      	lsls	r2, r3
 80066aa:	0013      	movs	r3, r2
 80066ac:	43da      	mvns	r2, r3
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4013      	ands	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	23a0      	movs	r3, #160	; 0xa0
 80066b8:	05db      	lsls	r3, r3, #23
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d013      	beq.n	80066e6 <HAL_GPIO_Init+0x1ca>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a45      	ldr	r2, [pc, #276]	; (80067d8 <HAL_GPIO_Init+0x2bc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d00d      	beq.n	80066e2 <HAL_GPIO_Init+0x1c6>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a44      	ldr	r2, [pc, #272]	; (80067dc <HAL_GPIO_Init+0x2c0>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d007      	beq.n	80066de <HAL_GPIO_Init+0x1c2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a43      	ldr	r2, [pc, #268]	; (80067e0 <HAL_GPIO_Init+0x2c4>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d101      	bne.n	80066da <HAL_GPIO_Init+0x1be>
 80066d6:	2303      	movs	r3, #3
 80066d8:	e006      	b.n	80066e8 <HAL_GPIO_Init+0x1cc>
 80066da:	2305      	movs	r3, #5
 80066dc:	e004      	b.n	80066e8 <HAL_GPIO_Init+0x1cc>
 80066de:	2302      	movs	r3, #2
 80066e0:	e002      	b.n	80066e8 <HAL_GPIO_Init+0x1cc>
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <HAL_GPIO_Init+0x1cc>
 80066e6:	2300      	movs	r3, #0
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	2103      	movs	r1, #3
 80066ec:	400a      	ands	r2, r1
 80066ee:	00d2      	lsls	r2, r2, #3
 80066f0:	4093      	lsls	r3, r2
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	4313      	orrs	r3, r2
 80066f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80066f8:	4936      	ldr	r1, [pc, #216]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	089b      	lsrs	r3, r3, #2
 80066fe:	3318      	adds	r3, #24
 8006700:	009b      	lsls	r3, r3, #2
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006706:	4a33      	ldr	r2, [pc, #204]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	58d3      	ldr	r3, [r2, r3]
 800670c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	43da      	mvns	r2, r3
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	4013      	ands	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	2380      	movs	r3, #128	; 0x80
 800671e:	025b      	lsls	r3, r3, #9
 8006720:	4013      	ands	r3, r2
 8006722:	d003      	beq.n	800672c <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800672c:	4929      	ldr	r1, [pc, #164]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 800672e:	2280      	movs	r2, #128	; 0x80
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8006734:	4a27      	ldr	r2, [pc, #156]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 8006736:	2384      	movs	r3, #132	; 0x84
 8006738:	58d3      	ldr	r3, [r2, r3]
 800673a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	43da      	mvns	r2, r3
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	4013      	ands	r3, r2
 8006744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	2380      	movs	r3, #128	; 0x80
 800674c:	029b      	lsls	r3, r3, #10
 800674e:	4013      	ands	r3, r2
 8006750:	d003      	beq.n	800675a <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8006752:	693a      	ldr	r2, [r7, #16]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800675a:	491e      	ldr	r1, [pc, #120]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 800675c:	2284      	movs	r2, #132	; 0x84
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006762:	4b1c      	ldr	r3, [pc, #112]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	43da      	mvns	r2, r3
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	4013      	ands	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	2380      	movs	r3, #128	; 0x80
 8006778:	035b      	lsls	r3, r3, #13
 800677a:	4013      	ands	r3, r2
 800677c:	d003      	beq.n	8006786 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	4313      	orrs	r3, r2
 8006784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006786:	4b13      	ldr	r3, [pc, #76]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800678c:	4b11      	ldr	r3, [pc, #68]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	43da      	mvns	r2, r3
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	4013      	ands	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	685a      	ldr	r2, [r3, #4]
 80067a0:	2380      	movs	r3, #128	; 0x80
 80067a2:	039b      	lsls	r3, r3, #14
 80067a4:	4013      	ands	r3, r2
 80067a6:	d003      	beq.n	80067b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80067a8:	693a      	ldr	r2, [r7, #16]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80067b0:	4b08      	ldr	r3, [pc, #32]	; (80067d4 <HAL_GPIO_Init+0x2b8>)
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	3301      	adds	r3, #1
 80067ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	40da      	lsrs	r2, r3
 80067c4:	1e13      	subs	r3, r2, #0
 80067c6:	d000      	beq.n	80067ca <HAL_GPIO_Init+0x2ae>
 80067c8:	e6b0      	b.n	800652c <HAL_GPIO_Init+0x10>
  }
}
 80067ca:	46c0      	nop			; (mov r8, r8)
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	46bd      	mov	sp, r7
 80067d0:	b006      	add	sp, #24
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	40021800 	.word	0x40021800
 80067d8:	50000400 	.word	0x50000400
 80067dc:	50000800 	.word	0x50000800
 80067e0:	50000c00 	.word	0x50000c00

080067e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	000a      	movs	r2, r1
 80067ee:	1cbb      	adds	r3, r7, #2
 80067f0:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	1cba      	adds	r2, r7, #2
 80067f8:	8812      	ldrh	r2, [r2, #0]
 80067fa:	4013      	ands	r3, r2
 80067fc:	d004      	beq.n	8006808 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80067fe:	230f      	movs	r3, #15
 8006800:	18fb      	adds	r3, r7, r3
 8006802:	2201      	movs	r2, #1
 8006804:	701a      	strb	r2, [r3, #0]
 8006806:	e003      	b.n	8006810 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006808:	230f      	movs	r3, #15
 800680a:	18fb      	adds	r3, r7, r3
 800680c:	2200      	movs	r2, #0
 800680e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006810:	230f      	movs	r3, #15
 8006812:	18fb      	adds	r3, r7, r3
 8006814:	781b      	ldrb	r3, [r3, #0]
}
 8006816:	0018      	movs	r0, r3
 8006818:	46bd      	mov	sp, r7
 800681a:	b004      	add	sp, #16
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	0008      	movs	r0, r1
 8006828:	0011      	movs	r1, r2
 800682a:	1cbb      	adds	r3, r7, #2
 800682c:	1c02      	adds	r2, r0, #0
 800682e:	801a      	strh	r2, [r3, #0]
 8006830:	1c7b      	adds	r3, r7, #1
 8006832:	1c0a      	adds	r2, r1, #0
 8006834:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006836:	1c7b      	adds	r3, r7, #1
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d004      	beq.n	8006848 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800683e:	1cbb      	adds	r3, r7, #2
 8006840:	881a      	ldrh	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006846:	e003      	b.n	8006850 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006848:	1cbb      	adds	r3, r7, #2
 800684a:	881a      	ldrh	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006850:	46c0      	nop			; (mov r8, r8)
 8006852:	46bd      	mov	sp, r7
 8006854:	b002      	add	sp, #8
 8006856:	bd80      	pop	{r7, pc}

08006858 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <HAL_PWR_EnableBkUpAccess+0x18>)
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	4b03      	ldr	r3, [pc, #12]	; (8006870 <HAL_PWR_EnableBkUpAccess+0x18>)
 8006862:	2180      	movs	r1, #128	; 0x80
 8006864:	0049      	lsls	r1, r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]
}
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}
 8006870:	40007000 	.word	0x40007000

08006874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a19      	ldr	r2, [pc, #100]	; (80068e8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006882:	4013      	ands	r3, r2
 8006884:	0019      	movs	r1, r3
 8006886:	4b17      	ldr	r3, [pc, #92]	; (80068e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006888:	687a      	ldr	r2, [r7, #4]
 800688a:	430a      	orrs	r2, r1
 800688c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	2380      	movs	r3, #128	; 0x80
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	429a      	cmp	r2, r3
 8006896:	d11f      	bne.n	80068d8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8006898:	4b14      	ldr	r3, [pc, #80]	; (80068ec <HAL_PWREx_ControlVoltageScaling+0x78>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	0013      	movs	r3, r2
 800689e:	005b      	lsls	r3, r3, #1
 80068a0:	189b      	adds	r3, r3, r2
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	4912      	ldr	r1, [pc, #72]	; (80068f0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80068a6:	0018      	movs	r0, r3
 80068a8:	f7f9 fc2a 	bl	8000100 <__udivsi3>
 80068ac:	0003      	movs	r3, r0
 80068ae:	3301      	adds	r3, #1
 80068b0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068b2:	e008      	b.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e001      	b.n	80068c6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80068c2:	2303      	movs	r3, #3
 80068c4:	e009      	b.n	80068da <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068c6:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	2380      	movs	r3, #128	; 0x80
 80068cc:	00db      	lsls	r3, r3, #3
 80068ce:	401a      	ands	r2, r3
 80068d0:	2380      	movs	r3, #128	; 0x80
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d0ed      	beq.n	80068b4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80068d8:	2300      	movs	r3, #0
}
 80068da:	0018      	movs	r0, r3
 80068dc:	46bd      	mov	sp, r7
 80068de:	b004      	add	sp, #16
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	46c0      	nop			; (mov r8, r8)
 80068e4:	40007000 	.word	0x40007000
 80068e8:	fffff9ff 	.word	0xfffff9ff
 80068ec:	20000020 	.word	0x20000020
 80068f0:	000f4240 	.word	0x000f4240

080068f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b088      	sub	sp, #32
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e2f9      	b.n	8006efa <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	4013      	ands	r3, r2
 800690e:	d100      	bne.n	8006912 <HAL_RCC_OscConfig+0x1e>
 8006910:	e07c      	b.n	8006a0c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006912:	4bc3      	ldr	r3, [pc, #780]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	2238      	movs	r2, #56	; 0x38
 8006918:	4013      	ands	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800691c:	4bc0      	ldr	r3, [pc, #768]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2203      	movs	r2, #3
 8006922:	4013      	ands	r3, r2
 8006924:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	2b10      	cmp	r3, #16
 800692a:	d102      	bne.n	8006932 <HAL_RCC_OscConfig+0x3e>
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b03      	cmp	r3, #3
 8006930:	d002      	beq.n	8006938 <HAL_RCC_OscConfig+0x44>
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	2b08      	cmp	r3, #8
 8006936:	d10b      	bne.n	8006950 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006938:	4bb9      	ldr	r3, [pc, #740]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	029b      	lsls	r3, r3, #10
 8006940:	4013      	ands	r3, r2
 8006942:	d062      	beq.n	8006a0a <HAL_RCC_OscConfig+0x116>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d15e      	bne.n	8006a0a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e2d4      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	2380      	movs	r3, #128	; 0x80
 8006956:	025b      	lsls	r3, r3, #9
 8006958:	429a      	cmp	r2, r3
 800695a:	d107      	bne.n	800696c <HAL_RCC_OscConfig+0x78>
 800695c:	4bb0      	ldr	r3, [pc, #704]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	4baf      	ldr	r3, [pc, #700]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006962:	2180      	movs	r1, #128	; 0x80
 8006964:	0249      	lsls	r1, r1, #9
 8006966:	430a      	orrs	r2, r1
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	e020      	b.n	80069ae <HAL_RCC_OscConfig+0xba>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	23a0      	movs	r3, #160	; 0xa0
 8006972:	02db      	lsls	r3, r3, #11
 8006974:	429a      	cmp	r2, r3
 8006976:	d10e      	bne.n	8006996 <HAL_RCC_OscConfig+0xa2>
 8006978:	4ba9      	ldr	r3, [pc, #676]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	4ba8      	ldr	r3, [pc, #672]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800697e:	2180      	movs	r1, #128	; 0x80
 8006980:	02c9      	lsls	r1, r1, #11
 8006982:	430a      	orrs	r2, r1
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	4ba6      	ldr	r3, [pc, #664]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	4ba5      	ldr	r3, [pc, #660]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	0249      	lsls	r1, r1, #9
 8006990:	430a      	orrs	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	e00b      	b.n	80069ae <HAL_RCC_OscConfig+0xba>
 8006996:	4ba2      	ldr	r3, [pc, #648]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	4ba1      	ldr	r3, [pc, #644]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 800699c:	49a1      	ldr	r1, [pc, #644]	; (8006c24 <HAL_RCC_OscConfig+0x330>)
 800699e:	400a      	ands	r2, r1
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	4b9f      	ldr	r3, [pc, #636]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4b9e      	ldr	r3, [pc, #632]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 80069a8:	499f      	ldr	r1, [pc, #636]	; (8006c28 <HAL_RCC_OscConfig+0x334>)
 80069aa:	400a      	ands	r2, r1
 80069ac:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d014      	beq.n	80069e0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fe fcb9 	bl	800532c <HAL_GetTick>
 80069ba:	0003      	movs	r3, r0
 80069bc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069c0:	f7fe fcb4 	bl	800532c <HAL_GetTick>
 80069c4:	0002      	movs	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b64      	cmp	r3, #100	; 0x64
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e293      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069d2:	4b93      	ldr	r3, [pc, #588]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	2380      	movs	r3, #128	; 0x80
 80069d8:	029b      	lsls	r3, r3, #10
 80069da:	4013      	ands	r3, r2
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0xcc>
 80069de:	e015      	b.n	8006a0c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e0:	f7fe fca4 	bl	800532c <HAL_GetTick>
 80069e4:	0003      	movs	r3, r0
 80069e6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069e8:	e008      	b.n	80069fc <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069ea:	f7fe fc9f 	bl	800532c <HAL_GetTick>
 80069ee:	0002      	movs	r2, r0
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2b64      	cmp	r3, #100	; 0x64
 80069f6:	d901      	bls.n	80069fc <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80069f8:	2303      	movs	r3, #3
 80069fa:	e27e      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80069fc:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	029b      	lsls	r3, r3, #10
 8006a04:	4013      	ands	r3, r2
 8006a06:	d1f0      	bne.n	80069ea <HAL_RCC_OscConfig+0xf6>
 8006a08:	e000      	b.n	8006a0c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2202      	movs	r2, #2
 8006a12:	4013      	ands	r3, r2
 8006a14:	d100      	bne.n	8006a18 <HAL_RCC_OscConfig+0x124>
 8006a16:	e099      	b.n	8006b4c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a18:	4b81      	ldr	r3, [pc, #516]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2238      	movs	r2, #56	; 0x38
 8006a1e:	4013      	ands	r3, r2
 8006a20:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a22:	4b7f      	ldr	r3, [pc, #508]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	2203      	movs	r2, #3
 8006a28:	4013      	ands	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b10      	cmp	r3, #16
 8006a30:	d102      	bne.n	8006a38 <HAL_RCC_OscConfig+0x144>
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d002      	beq.n	8006a3e <HAL_RCC_OscConfig+0x14a>
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d135      	bne.n	8006aaa <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a3e:	4b78      	ldr	r3, [pc, #480]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	2380      	movs	r3, #128	; 0x80
 8006a44:	00db      	lsls	r3, r3, #3
 8006a46:	4013      	ands	r3, r2
 8006a48:	d005      	beq.n	8006a56 <HAL_RCC_OscConfig+0x162>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e251      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a56:	4b72      	ldr	r3, [pc, #456]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	4a74      	ldr	r2, [pc, #464]	; (8006c2c <HAL_RCC_OscConfig+0x338>)
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	0019      	movs	r1, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	695b      	ldr	r3, [r3, #20]
 8006a64:	021a      	lsls	r2, r3, #8
 8006a66:	4b6e      	ldr	r3, [pc, #440]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a68:	430a      	orrs	r2, r1
 8006a6a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d112      	bne.n	8006a98 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006a72:	4b6b      	ldr	r3, [pc, #428]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4a6e      	ldr	r2, [pc, #440]	; (8006c30 <HAL_RCC_OscConfig+0x33c>)
 8006a78:	4013      	ands	r3, r2
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691a      	ldr	r2, [r3, #16]
 8006a80:	4b67      	ldr	r3, [pc, #412]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a82:	430a      	orrs	r2, r1
 8006a84:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	0adb      	lsrs	r3, r3, #11
 8006a8c:	2207      	movs	r2, #7
 8006a8e:	4013      	ands	r3, r2
 8006a90:	4a68      	ldr	r2, [pc, #416]	; (8006c34 <HAL_RCC_OscConfig+0x340>)
 8006a92:	40da      	lsrs	r2, r3
 8006a94:	4b68      	ldr	r3, [pc, #416]	; (8006c38 <HAL_RCC_OscConfig+0x344>)
 8006a96:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a98:	4b68      	ldr	r3, [pc, #416]	; (8006c3c <HAL_RCC_OscConfig+0x348>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	0018      	movs	r0, r3
 8006a9e:	f7fe fbe9 	bl	8005274 <HAL_InitTick>
 8006aa2:	1e03      	subs	r3, r0, #0
 8006aa4:	d051      	beq.n	8006b4a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e227      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d030      	beq.n	8006b14 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8006ab2:	4b5b      	ldr	r3, [pc, #364]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a5e      	ldr	r2, [pc, #376]	; (8006c30 <HAL_RCC_OscConfig+0x33c>)
 8006ab8:	4013      	ands	r3, r2
 8006aba:	0019      	movs	r1, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	691a      	ldr	r2, [r3, #16]
 8006ac0:	4b57      	ldr	r3, [pc, #348]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006ac2:	430a      	orrs	r2, r1
 8006ac4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006ac6:	4b56      	ldr	r3, [pc, #344]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006ac8:	681a      	ldr	r2, [r3, #0]
 8006aca:	4b55      	ldr	r3, [pc, #340]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	0049      	lsls	r1, r1, #1
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad4:	f7fe fc2a 	bl	800532c <HAL_GetTick>
 8006ad8:	0003      	movs	r3, r0
 8006ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006adc:	e008      	b.n	8006af0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ade:	f7fe fc25 	bl	800532c <HAL_GetTick>
 8006ae2:	0002      	movs	r2, r0
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e204      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006af0:	4b4b      	ldr	r3, [pc, #300]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	00db      	lsls	r3, r3, #3
 8006af8:	4013      	ands	r3, r2
 8006afa:	d0f0      	beq.n	8006ade <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006afc:	4b48      	ldr	r3, [pc, #288]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	4a4a      	ldr	r2, [pc, #296]	; (8006c2c <HAL_RCC_OscConfig+0x338>)
 8006b02:	4013      	ands	r3, r2
 8006b04:	0019      	movs	r1, r3
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	695b      	ldr	r3, [r3, #20]
 8006b0a:	021a      	lsls	r2, r3, #8
 8006b0c:	4b44      	ldr	r3, [pc, #272]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	e01b      	b.n	8006b4c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8006b14:	4b42      	ldr	r3, [pc, #264]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	4b41      	ldr	r3, [pc, #260]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b1a:	4949      	ldr	r1, [pc, #292]	; (8006c40 <HAL_RCC_OscConfig+0x34c>)
 8006b1c:	400a      	ands	r2, r1
 8006b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b20:	f7fe fc04 	bl	800532c <HAL_GetTick>
 8006b24:	0003      	movs	r3, r0
 8006b26:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b28:	e008      	b.n	8006b3c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b2a:	f7fe fbff 	bl	800532c <HAL_GetTick>
 8006b2e:	0002      	movs	r2, r0
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d901      	bls.n	8006b3c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006b38:	2303      	movs	r3, #3
 8006b3a:	e1de      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b3c:	4b38      	ldr	r3, [pc, #224]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b3e:	681a      	ldr	r2, [r3, #0]
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4013      	ands	r3, r2
 8006b46:	d1f0      	bne.n	8006b2a <HAL_RCC_OscConfig+0x236>
 8006b48:	e000      	b.n	8006b4c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2208      	movs	r2, #8
 8006b52:	4013      	ands	r3, r2
 8006b54:	d047      	beq.n	8006be6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006b56:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2238      	movs	r2, #56	; 0x38
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b18      	cmp	r3, #24
 8006b60:	d10a      	bne.n	8006b78 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b66:	2202      	movs	r2, #2
 8006b68:	4013      	ands	r3, r2
 8006b6a:	d03c      	beq.n	8006be6 <HAL_RCC_OscConfig+0x2f2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d138      	bne.n	8006be6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e1c0      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d019      	beq.n	8006bb4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006b84:	4b26      	ldr	r3, [pc, #152]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006b86:	2101      	movs	r1, #1
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b8c:	f7fe fbce 	bl	800532c <HAL_GetTick>
 8006b90:	0003      	movs	r3, r0
 8006b92:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b94:	e008      	b.n	8006ba8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b96:	f7fe fbc9 	bl	800532c <HAL_GetTick>
 8006b9a:	0002      	movs	r2, r0
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	d901      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e1a8      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ba8:	4b1d      	ldr	r3, [pc, #116]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bac:	2202      	movs	r2, #2
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d0f1      	beq.n	8006b96 <HAL_RCC_OscConfig+0x2a2>
 8006bb2:	e018      	b.n	8006be6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006bb4:	4b1a      	ldr	r3, [pc, #104]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006bb6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006bb8:	4b19      	ldr	r3, [pc, #100]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006bba:	2101      	movs	r1, #1
 8006bbc:	438a      	bics	r2, r1
 8006bbe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc0:	f7fe fbb4 	bl	800532c <HAL_GetTick>
 8006bc4:	0003      	movs	r3, r0
 8006bc6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bc8:	e008      	b.n	8006bdc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bca:	f7fe fbaf 	bl	800532c <HAL_GetTick>
 8006bce:	0002      	movs	r2, r0
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d901      	bls.n	8006bdc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8006bd8:	2303      	movs	r3, #3
 8006bda:	e18e      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006bdc:	4b10      	ldr	r3, [pc, #64]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006bde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006be0:	2202      	movs	r2, #2
 8006be2:	4013      	ands	r3, r2
 8006be4:	d1f1      	bne.n	8006bca <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2204      	movs	r2, #4
 8006bec:	4013      	ands	r3, r2
 8006bee:	d100      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x2fe>
 8006bf0:	e0c6      	b.n	8006d80 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bf2:	231f      	movs	r3, #31
 8006bf4:	18fb      	adds	r3, r7, r3
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006bfa:	4b09      	ldr	r3, [pc, #36]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2238      	movs	r2, #56	; 0x38
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d11e      	bne.n	8006c44 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_OscConfig+0x32c>)
 8006c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <HAL_RCC_OscConfig+0x31e>
 8006c10:	e0b6      	b.n	8006d80 <HAL_RCC_OscConfig+0x48c>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d000      	beq.n	8006c1c <HAL_RCC_OscConfig+0x328>
 8006c1a:	e0b1      	b.n	8006d80 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e16c      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	fffeffff 	.word	0xfffeffff
 8006c28:	fffbffff 	.word	0xfffbffff
 8006c2c:	ffff80ff 	.word	0xffff80ff
 8006c30:	ffffc7ff 	.word	0xffffc7ff
 8006c34:	00f42400 	.word	0x00f42400
 8006c38:	20000020 	.word	0x20000020
 8006c3c:	20000024 	.word	0x20000024
 8006c40:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006c44:	4baf      	ldr	r3, [pc, #700]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c48:	2380      	movs	r3, #128	; 0x80
 8006c4a:	055b      	lsls	r3, r3, #21
 8006c4c:	4013      	ands	r3, r2
 8006c4e:	d101      	bne.n	8006c54 <HAL_RCC_OscConfig+0x360>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <HAL_RCC_OscConfig+0x362>
 8006c54:	2300      	movs	r3, #0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d011      	beq.n	8006c7e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006c5a:	4baa      	ldr	r3, [pc, #680]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5e:	4ba9      	ldr	r3, [pc, #676]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	0549      	lsls	r1, r1, #21
 8006c64:	430a      	orrs	r2, r1
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8006c68:	4ba6      	ldr	r3, [pc, #664]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c6c:	2380      	movs	r3, #128	; 0x80
 8006c6e:	055b      	lsls	r3, r3, #21
 8006c70:	4013      	ands	r3, r2
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006c76:	231f      	movs	r3, #31
 8006c78:	18fb      	adds	r3, r7, r3
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c7e:	4ba2      	ldr	r3, [pc, #648]	; (8006f08 <HAL_RCC_OscConfig+0x614>)
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	2380      	movs	r3, #128	; 0x80
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4013      	ands	r3, r2
 8006c88:	d11a      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c8a:	4b9f      	ldr	r3, [pc, #636]	; (8006f08 <HAL_RCC_OscConfig+0x614>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b9e      	ldr	r3, [pc, #632]	; (8006f08 <HAL_RCC_OscConfig+0x614>)
 8006c90:	2180      	movs	r1, #128	; 0x80
 8006c92:	0049      	lsls	r1, r1, #1
 8006c94:	430a      	orrs	r2, r1
 8006c96:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006c98:	f7fe fb48 	bl	800532c <HAL_GetTick>
 8006c9c:	0003      	movs	r3, r0
 8006c9e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ca0:	e008      	b.n	8006cb4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ca2:	f7fe fb43 	bl	800532c <HAL_GetTick>
 8006ca6:	0002      	movs	r2, r0
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	d901      	bls.n	8006cb4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006cb0:	2303      	movs	r3, #3
 8006cb2:	e122      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cb4:	4b94      	ldr	r3, [pc, #592]	; (8006f08 <HAL_RCC_OscConfig+0x614>)
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	2380      	movs	r3, #128	; 0x80
 8006cba:	005b      	lsls	r3, r3, #1
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	d0f0      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d106      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x3e2>
 8006cc8:	4b8e      	ldr	r3, [pc, #568]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ccc:	4b8d      	ldr	r3, [pc, #564]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cce:	2101      	movs	r1, #1
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cd4:	e01c      	b.n	8006d10 <HAL_RCC_OscConfig+0x41c>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	2b05      	cmp	r3, #5
 8006cdc:	d10c      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x404>
 8006cde:	4b89      	ldr	r3, [pc, #548]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006ce0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ce2:	4b88      	ldr	r3, [pc, #544]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006ce4:	2104      	movs	r1, #4
 8006ce6:	430a      	orrs	r2, r1
 8006ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cea:	4b86      	ldr	r3, [pc, #536]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cee:	4b85      	ldr	r3, [pc, #532]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	430a      	orrs	r2, r1
 8006cf4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006cf6:	e00b      	b.n	8006d10 <HAL_RCC_OscConfig+0x41c>
 8006cf8:	4b82      	ldr	r3, [pc, #520]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006cfc:	4b81      	ldr	r3, [pc, #516]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006cfe:	2101      	movs	r1, #1
 8006d00:	438a      	bics	r2, r1
 8006d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8006d04:	4b7f      	ldr	r3, [pc, #508]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006d08:	4b7e      	ldr	r3, [pc, #504]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d0a:	2104      	movs	r1, #4
 8006d0c:	438a      	bics	r2, r1
 8006d0e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d014      	beq.n	8006d42 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d18:	f7fe fb08 	bl	800532c <HAL_GetTick>
 8006d1c:	0003      	movs	r3, r0
 8006d1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d20:	e009      	b.n	8006d36 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d22:	f7fe fb03 	bl	800532c <HAL_GetTick>
 8006d26:	0002      	movs	r2, r0
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	4a77      	ldr	r2, [pc, #476]	; (8006f0c <HAL_RCC_OscConfig+0x618>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d901      	bls.n	8006d36 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e0e1      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d36:	4b73      	ldr	r3, [pc, #460]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_RCC_OscConfig+0x42e>
 8006d40:	e013      	b.n	8006d6a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d42:	f7fe faf3 	bl	800532c <HAL_GetTick>
 8006d46:	0003      	movs	r3, r0
 8006d48:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d4a:	e009      	b.n	8006d60 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d4c:	f7fe faee 	bl	800532c <HAL_GetTick>
 8006d50:	0002      	movs	r2, r0
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	4a6d      	ldr	r2, [pc, #436]	; (8006f0c <HAL_RCC_OscConfig+0x618>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d901      	bls.n	8006d60 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e0cc      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d60:	4b68      	ldr	r3, [pc, #416]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d64:	2202      	movs	r2, #2
 8006d66:	4013      	ands	r3, r2
 8006d68:	d1f0      	bne.n	8006d4c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006d6a:	231f      	movs	r3, #31
 8006d6c:	18fb      	adds	r3, r7, r3
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d105      	bne.n	8006d80 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006d74:	4b63      	ldr	r3, [pc, #396]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d78:	4b62      	ldr	r3, [pc, #392]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d7a:	4965      	ldr	r1, [pc, #404]	; (8006f10 <HAL_RCC_OscConfig+0x61c>)
 8006d7c:	400a      	ands	r2, r1
 8006d7e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d100      	bne.n	8006d8a <HAL_RCC_OscConfig+0x496>
 8006d88:	e0b6      	b.n	8006ef8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d8a:	4b5e      	ldr	r3, [pc, #376]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	2238      	movs	r2, #56	; 0x38
 8006d90:	4013      	ands	r3, r2
 8006d92:	2b10      	cmp	r3, #16
 8006d94:	d100      	bne.n	8006d98 <HAL_RCC_OscConfig+0x4a4>
 8006d96:	e07e      	b.n	8006e96 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d153      	bne.n	8006e48 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006da0:	4b58      	ldr	r3, [pc, #352]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b57      	ldr	r3, [pc, #348]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006da6:	495b      	ldr	r1, [pc, #364]	; (8006f14 <HAL_RCC_OscConfig+0x620>)
 8006da8:	400a      	ands	r2, r1
 8006daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dac:	f7fe fabe 	bl	800532c <HAL_GetTick>
 8006db0:	0003      	movs	r3, r0
 8006db2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006db4:	e008      	b.n	8006dc8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006db6:	f7fe fab9 	bl	800532c <HAL_GetTick>
 8006dba:	0002      	movs	r2, r0
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	1ad3      	subs	r3, r2, r3
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d901      	bls.n	8006dc8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006dc4:	2303      	movs	r3, #3
 8006dc6:	e098      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc8:	4b4e      	ldr	r3, [pc, #312]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	049b      	lsls	r3, r3, #18
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d1f0      	bne.n	8006db6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dd4:	4b4b      	ldr	r3, [pc, #300]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006dd6:	68db      	ldr	r3, [r3, #12]
 8006dd8:	4a4f      	ldr	r2, [pc, #316]	; (8006f18 <HAL_RCC_OscConfig+0x624>)
 8006dda:	4013      	ands	r3, r2
 8006ddc:	0019      	movs	r1, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1a      	ldr	r2, [r3, #32]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de6:	431a      	orrs	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dec:	021b      	lsls	r3, r3, #8
 8006dee:	431a      	orrs	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df4:	431a      	orrs	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dfa:	431a      	orrs	r2, r3
 8006dfc:	4b41      	ldr	r3, [pc, #260]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e02:	4b40      	ldr	r3, [pc, #256]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b3f      	ldr	r3, [pc, #252]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e08:	2180      	movs	r1, #128	; 0x80
 8006e0a:	0449      	lsls	r1, r1, #17
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006e10:	4b3c      	ldr	r3, [pc, #240]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e12:	68da      	ldr	r2, [r3, #12]
 8006e14:	4b3b      	ldr	r3, [pc, #236]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e16:	2180      	movs	r1, #128	; 0x80
 8006e18:	0549      	lsls	r1, r1, #21
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1e:	f7fe fa85 	bl	800532c <HAL_GetTick>
 8006e22:	0003      	movs	r3, r0
 8006e24:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e26:	e008      	b.n	8006e3a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e28:	f7fe fa80 	bl	800532c <HAL_GetTick>
 8006e2c:	0002      	movs	r2, r0
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d901      	bls.n	8006e3a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8006e36:	2303      	movs	r3, #3
 8006e38:	e05f      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e3a:	4b32      	ldr	r3, [pc, #200]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	2380      	movs	r3, #128	; 0x80
 8006e40:	049b      	lsls	r3, r3, #18
 8006e42:	4013      	ands	r3, r2
 8006e44:	d0f0      	beq.n	8006e28 <HAL_RCC_OscConfig+0x534>
 8006e46:	e057      	b.n	8006ef8 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e48:	4b2e      	ldr	r3, [pc, #184]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	4b2d      	ldr	r3, [pc, #180]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e4e:	4931      	ldr	r1, [pc, #196]	; (8006f14 <HAL_RCC_OscConfig+0x620>)
 8006e50:	400a      	ands	r2, r1
 8006e52:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8006e54:	4b2b      	ldr	r3, [pc, #172]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e56:	68da      	ldr	r2, [r3, #12]
 8006e58:	4b2a      	ldr	r3, [pc, #168]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e5a:	2103      	movs	r1, #3
 8006e5c:	438a      	bics	r2, r1
 8006e5e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8006e60:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	4b27      	ldr	r3, [pc, #156]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e66:	492d      	ldr	r1, [pc, #180]	; (8006f1c <HAL_RCC_OscConfig+0x628>)
 8006e68:	400a      	ands	r2, r1
 8006e6a:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e6c:	f7fe fa5e 	bl	800532c <HAL_GetTick>
 8006e70:	0003      	movs	r3, r0
 8006e72:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e74:	e008      	b.n	8006e88 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e76:	f7fe fa59 	bl	800532c <HAL_GetTick>
 8006e7a:	0002      	movs	r2, r0
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	2b02      	cmp	r3, #2
 8006e82:	d901      	bls.n	8006e88 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8006e84:	2303      	movs	r3, #3
 8006e86:	e038      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e88:	4b1e      	ldr	r3, [pc, #120]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	2380      	movs	r3, #128	; 0x80
 8006e8e:	049b      	lsls	r3, r3, #18
 8006e90:	4013      	ands	r3, r2
 8006e92:	d1f0      	bne.n	8006e76 <HAL_RCC_OscConfig+0x582>
 8006e94:	e030      	b.n	8006ef8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d101      	bne.n	8006ea2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	e02b      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006ea2:	4b18      	ldr	r3, [pc, #96]	; (8006f04 <HAL_RCC_OscConfig+0x610>)
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	2203      	movs	r2, #3
 8006eac:	401a      	ands	r2, r3
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d11e      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	2270      	movs	r2, #112	; 0x70
 8006eba:	401a      	ands	r2, r3
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d117      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ec4:	697a      	ldr	r2, [r7, #20]
 8006ec6:	23fe      	movs	r3, #254	; 0xfe
 8006ec8:	01db      	lsls	r3, r3, #7
 8006eca:	401a      	ands	r2, r3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d10e      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	23f8      	movs	r3, #248	; 0xf8
 8006eda:	039b      	lsls	r3, r3, #14
 8006edc:	401a      	ands	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d106      	bne.n	8006ef4 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	0f5b      	lsrs	r3, r3, #29
 8006eea:	075a      	lsls	r2, r3, #29
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	0018      	movs	r0, r3
 8006efc:	46bd      	mov	sp, r7
 8006efe:	b008      	add	sp, #32
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	46c0      	nop			; (mov r8, r8)
 8006f04:	40021000 	.word	0x40021000
 8006f08:	40007000 	.word	0x40007000
 8006f0c:	00001388 	.word	0x00001388
 8006f10:	efffffff 	.word	0xefffffff
 8006f14:	feffffff 	.word	0xfeffffff
 8006f18:	1fc1808c 	.word	0x1fc1808c
 8006f1c:	effeffff 	.word	0xeffeffff

08006f20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e0e9      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f34:	4b76      	ldr	r3, [pc, #472]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2207      	movs	r2, #7
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	683a      	ldr	r2, [r7, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d91e      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f42:	4b73      	ldr	r3, [pc, #460]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2207      	movs	r2, #7
 8006f48:	4393      	bics	r3, r2
 8006f4a:	0019      	movs	r1, r3
 8006f4c:	4b70      	ldr	r3, [pc, #448]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f54:	f7fe f9ea 	bl	800532c <HAL_GetTick>
 8006f58:	0003      	movs	r3, r0
 8006f5a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f5c:	e009      	b.n	8006f72 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f5e:	f7fe f9e5 	bl	800532c <HAL_GetTick>
 8006f62:	0002      	movs	r2, r0
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	4a6a      	ldr	r2, [pc, #424]	; (8007114 <HAL_RCC_ClockConfig+0x1f4>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e0ca      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006f72:	4b67      	ldr	r3, [pc, #412]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2207      	movs	r2, #7
 8006f78:	4013      	ands	r3, r2
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d1ee      	bne.n	8006f5e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2202      	movs	r2, #2
 8006f86:	4013      	ands	r3, r2
 8006f88:	d015      	beq.n	8006fb6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2204      	movs	r2, #4
 8006f90:	4013      	ands	r3, r2
 8006f92:	d006      	beq.n	8006fa2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006f94:	4b60      	ldr	r3, [pc, #384]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006f96:	689a      	ldr	r2, [r3, #8]
 8006f98:	4b5f      	ldr	r3, [pc, #380]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006f9a:	21e0      	movs	r1, #224	; 0xe0
 8006f9c:	01c9      	lsls	r1, r1, #7
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fa2:	4b5d      	ldr	r3, [pc, #372]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006fa4:	689b      	ldr	r3, [r3, #8]
 8006fa6:	4a5d      	ldr	r2, [pc, #372]	; (800711c <HAL_RCC_ClockConfig+0x1fc>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	0019      	movs	r1, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689a      	ldr	r2, [r3, #8]
 8006fb0:	4b59      	ldr	r3, [pc, #356]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d057      	beq.n	8007070 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d107      	bne.n	8006fd8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fc8:	4b53      	ldr	r3, [pc, #332]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	2380      	movs	r3, #128	; 0x80
 8006fce:	029b      	lsls	r3, r3, #10
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d12b      	bne.n	800702c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e097      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d107      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fe0:	4b4d      	ldr	r3, [pc, #308]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	2380      	movs	r3, #128	; 0x80
 8006fe6:	049b      	lsls	r3, r3, #18
 8006fe8:	4013      	ands	r3, r2
 8006fea:	d11f      	bne.n	800702c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e08b      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d107      	bne.n	8007008 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ff8:	4b47      	ldr	r3, [pc, #284]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	2380      	movs	r3, #128	; 0x80
 8006ffe:	00db      	lsls	r3, r3, #3
 8007000:	4013      	ands	r3, r2
 8007002:	d113      	bne.n	800702c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e07f      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	2b03      	cmp	r3, #3
 800700e:	d106      	bne.n	800701e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007010:	4b41      	ldr	r3, [pc, #260]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8007012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007014:	2202      	movs	r2, #2
 8007016:	4013      	ands	r3, r2
 8007018:	d108      	bne.n	800702c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e074      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800701e:	4b3e      	ldr	r3, [pc, #248]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8007020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007022:	2202      	movs	r2, #2
 8007024:	4013      	ands	r3, r2
 8007026:	d101      	bne.n	800702c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e06d      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800702c:	4b3a      	ldr	r3, [pc, #232]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	2207      	movs	r2, #7
 8007032:	4393      	bics	r3, r2
 8007034:	0019      	movs	r1, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	4b37      	ldr	r3, [pc, #220]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 800703c:	430a      	orrs	r2, r1
 800703e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007040:	f7fe f974 	bl	800532c <HAL_GetTick>
 8007044:	0003      	movs	r3, r0
 8007046:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007048:	e009      	b.n	800705e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800704a:	f7fe f96f 	bl	800532c <HAL_GetTick>
 800704e:	0002      	movs	r2, r0
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <HAL_RCC_ClockConfig+0x1f4>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d901      	bls.n	800705e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e054      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705e:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	2238      	movs	r2, #56	; 0x38
 8007064:	401a      	ands	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	00db      	lsls	r3, r3, #3
 800706c:	429a      	cmp	r2, r3
 800706e:	d1ec      	bne.n	800704a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007070:	4b27      	ldr	r3, [pc, #156]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2207      	movs	r2, #7
 8007076:	4013      	ands	r3, r2
 8007078:	683a      	ldr	r2, [r7, #0]
 800707a:	429a      	cmp	r2, r3
 800707c:	d21e      	bcs.n	80070bc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707e:	4b24      	ldr	r3, [pc, #144]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2207      	movs	r2, #7
 8007084:	4393      	bics	r3, r2
 8007086:	0019      	movs	r1, r3
 8007088:	4b21      	ldr	r3, [pc, #132]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 800708a:	683a      	ldr	r2, [r7, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007090:	f7fe f94c 	bl	800532c <HAL_GetTick>
 8007094:	0003      	movs	r3, r0
 8007096:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8007098:	e009      	b.n	80070ae <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800709a:	f7fe f947 	bl	800532c <HAL_GetTick>
 800709e:	0002      	movs	r2, r0
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	4a1b      	ldr	r2, [pc, #108]	; (8007114 <HAL_RCC_ClockConfig+0x1f4>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d901      	bls.n	80070ae <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80070aa:	2303      	movs	r3, #3
 80070ac:	e02c      	b.n	8007108 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80070ae:	4b18      	ldr	r3, [pc, #96]	; (8007110 <HAL_RCC_ClockConfig+0x1f0>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2207      	movs	r2, #7
 80070b4:	4013      	ands	r3, r2
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d1ee      	bne.n	800709a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	2204      	movs	r2, #4
 80070c2:	4013      	ands	r3, r2
 80070c4:	d009      	beq.n	80070da <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80070c6:	4b14      	ldr	r3, [pc, #80]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	4a15      	ldr	r2, [pc, #84]	; (8007120 <HAL_RCC_ClockConfig+0x200>)
 80070cc:	4013      	ands	r3, r2
 80070ce:	0019      	movs	r1, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68da      	ldr	r2, [r3, #12]
 80070d4:	4b10      	ldr	r3, [pc, #64]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 80070d6:	430a      	orrs	r2, r1
 80070d8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80070da:	f000 f829 	bl	8007130 <HAL_RCC_GetSysClockFreq>
 80070de:	0001      	movs	r1, r0
 80070e0:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <HAL_RCC_ClockConfig+0x1f8>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	220f      	movs	r2, #15
 80070e8:	401a      	ands	r2, r3
 80070ea:	4b0e      	ldr	r3, [pc, #56]	; (8007124 <HAL_RCC_ClockConfig+0x204>)
 80070ec:	0092      	lsls	r2, r2, #2
 80070ee:	58d3      	ldr	r3, [r2, r3]
 80070f0:	221f      	movs	r2, #31
 80070f2:	4013      	ands	r3, r2
 80070f4:	000a      	movs	r2, r1
 80070f6:	40da      	lsrs	r2, r3
 80070f8:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_RCC_ClockConfig+0x208>)
 80070fa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070fc:	4b0b      	ldr	r3, [pc, #44]	; (800712c <HAL_RCC_ClockConfig+0x20c>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	0018      	movs	r0, r3
 8007102:	f7fe f8b7 	bl	8005274 <HAL_InitTick>
 8007106:	0003      	movs	r3, r0
}
 8007108:	0018      	movs	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	b004      	add	sp, #16
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40022000 	.word	0x40022000
 8007114:	00001388 	.word	0x00001388
 8007118:	40021000 	.word	0x40021000
 800711c:	fffff0ff 	.word	0xfffff0ff
 8007120:	ffff8fff 	.word	0xffff8fff
 8007124:	080094d0 	.word	0x080094d0
 8007128:	20000020 	.word	0x20000020
 800712c:	20000024 	.word	0x20000024

08007130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b086      	sub	sp, #24
 8007134:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007136:	4b3c      	ldr	r3, [pc, #240]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	2238      	movs	r2, #56	; 0x38
 800713c:	4013      	ands	r3, r2
 800713e:	d10f      	bne.n	8007160 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8007140:	4b39      	ldr	r3, [pc, #228]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0adb      	lsrs	r3, r3, #11
 8007146:	2207      	movs	r2, #7
 8007148:	4013      	ands	r3, r2
 800714a:	2201      	movs	r2, #1
 800714c:	409a      	lsls	r2, r3
 800714e:	0013      	movs	r3, r2
 8007150:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	4835      	ldr	r0, [pc, #212]	; (800722c <HAL_RCC_GetSysClockFreq+0xfc>)
 8007156:	f7f8 ffd3 	bl	8000100 <__udivsi3>
 800715a:	0003      	movs	r3, r0
 800715c:	613b      	str	r3, [r7, #16]
 800715e:	e05d      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007160:	4b31      	ldr	r3, [pc, #196]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	2238      	movs	r2, #56	; 0x38
 8007166:	4013      	ands	r3, r2
 8007168:	2b08      	cmp	r3, #8
 800716a:	d102      	bne.n	8007172 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800716c:	4b2f      	ldr	r3, [pc, #188]	; (800722c <HAL_RCC_GetSysClockFreq+0xfc>)
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	e054      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007172:	4b2d      	ldr	r3, [pc, #180]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	2238      	movs	r2, #56	; 0x38
 8007178:	4013      	ands	r3, r2
 800717a:	2b10      	cmp	r3, #16
 800717c:	d138      	bne.n	80071f0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800717e:	4b2a      	ldr	r3, [pc, #168]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2203      	movs	r2, #3
 8007184:	4013      	ands	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007188:	4b27      	ldr	r3, [pc, #156]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	091b      	lsrs	r3, r3, #4
 800718e:	2207      	movs	r2, #7
 8007190:	4013      	ands	r3, r2
 8007192:	3301      	adds	r3, #1
 8007194:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2b03      	cmp	r3, #3
 800719a:	d10d      	bne.n	80071b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	4823      	ldr	r0, [pc, #140]	; (800722c <HAL_RCC_GetSysClockFreq+0xfc>)
 80071a0:	f7f8 ffae 	bl	8000100 <__udivsi3>
 80071a4:	0003      	movs	r3, r0
 80071a6:	0019      	movs	r1, r3
 80071a8:	4b1f      	ldr	r3, [pc, #124]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	0a1b      	lsrs	r3, r3, #8
 80071ae:	227f      	movs	r2, #127	; 0x7f
 80071b0:	4013      	ands	r3, r2
 80071b2:	434b      	muls	r3, r1
 80071b4:	617b      	str	r3, [r7, #20]
        break;
 80071b6:	e00d      	b.n	80071d4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80071b8:	68b9      	ldr	r1, [r7, #8]
 80071ba:	481c      	ldr	r0, [pc, #112]	; (800722c <HAL_RCC_GetSysClockFreq+0xfc>)
 80071bc:	f7f8 ffa0 	bl	8000100 <__udivsi3>
 80071c0:	0003      	movs	r3, r0
 80071c2:	0019      	movs	r1, r3
 80071c4:	4b18      	ldr	r3, [pc, #96]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	0a1b      	lsrs	r3, r3, #8
 80071ca:	227f      	movs	r2, #127	; 0x7f
 80071cc:	4013      	ands	r3, r2
 80071ce:	434b      	muls	r3, r1
 80071d0:	617b      	str	r3, [r7, #20]
        break;
 80071d2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80071d4:	4b14      	ldr	r3, [pc, #80]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071d6:	68db      	ldr	r3, [r3, #12]
 80071d8:	0f5b      	lsrs	r3, r3, #29
 80071da:	2207      	movs	r2, #7
 80071dc:	4013      	ands	r3, r2
 80071de:	3301      	adds	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80071e2:	6879      	ldr	r1, [r7, #4]
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f7f8 ff8b 	bl	8000100 <__udivsi3>
 80071ea:	0003      	movs	r3, r0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	e015      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80071f0:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	2238      	movs	r2, #56	; 0x38
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d103      	bne.n	8007204 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80071fc:	2380      	movs	r3, #128	; 0x80
 80071fe:	021b      	lsls	r3, r3, #8
 8007200:	613b      	str	r3, [r7, #16]
 8007202:	e00b      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <HAL_RCC_GetSysClockFreq+0xf8>)
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2238      	movs	r2, #56	; 0x38
 800720a:	4013      	ands	r3, r2
 800720c:	2b18      	cmp	r3, #24
 800720e:	d103      	bne.n	8007218 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8007210:	23fa      	movs	r3, #250	; 0xfa
 8007212:	01db      	lsls	r3, r3, #7
 8007214:	613b      	str	r3, [r7, #16]
 8007216:	e001      	b.n	800721c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800721c:	693b      	ldr	r3, [r7, #16]
}
 800721e:	0018      	movs	r0, r3
 8007220:	46bd      	mov	sp, r7
 8007222:	b006      	add	sp, #24
 8007224:	bd80      	pop	{r7, pc}
 8007226:	46c0      	nop			; (mov r8, r8)
 8007228:	40021000 	.word	0x40021000
 800722c:	00f42400 	.word	0x00f42400

08007230 <HAL_RCC_EnableCSS>:
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @note   The Clock Security System can only be cleared by reset.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <HAL_RCC_EnableCSS+0x18>)
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	4b03      	ldr	r3, [pc, #12]	; (8007248 <HAL_RCC_EnableCSS+0x18>)
 800723a:	2180      	movs	r1, #128	; 0x80
 800723c:	0309      	lsls	r1, r1, #12
 800723e:	430a      	orrs	r2, r1
 8007240:	601a      	str	r2, [r3, #0]
}
 8007242:	46c0      	nop			; (mov r8, r8)
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	40021000 	.word	0x40021000

0800724c <HAL_RCC_NMI_IRQHandler>:
  * @brief Handle the RCC Clock Security System interrupt request.
  * @note  This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
  uint32_t itflag = RCC->CIFR;
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <HAL_RCC_NMI_IRQHandler+0x3c>)
 8007254:	69db      	ldr	r3, [r3, #28]
 8007256:	607b      	str	r3, [r7, #4]

  /* Clear interrupt flags related to CSS */
  RCC->CICR = (itflag & (RCC_CIFR_CSSF | RCC_CIFR_LSECSSF));
 8007258:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <HAL_RCC_NMI_IRQHandler+0x3c>)
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	22c0      	movs	r2, #192	; 0xc0
 800725e:	0092      	lsls	r2, r2, #2
 8007260:	400a      	ands	r2, r1
 8007262:	621a      	str	r2, [r3, #32]

  /* Check RCC CSSF interrupt flag  */
  if ((itflag & RCC_CIFR_CSSF) != 0x00u)
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	2380      	movs	r3, #128	; 0x80
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4013      	ands	r3, r2
 800726c:	d001      	beq.n	8007272 <HAL_RCC_NMI_IRQHandler+0x26>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800726e:	f000 f80d 	bl	800728c <HAL_RCC_CSSCallback>
  }

  /* Check RCC LSECSSF interrupt flag  */
  if ((itflag & RCC_CIFR_LSECSSF) != 0x00u)
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	2380      	movs	r3, #128	; 0x80
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4013      	ands	r3, r2
 800727a:	d001      	beq.n	8007280 <HAL_RCC_NMI_IRQHandler+0x34>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_LSECSSCallback();
 800727c:	f000 f80b 	bl	8007296 <HAL_RCC_LSECSSCallback>
  }
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	46bd      	mov	sp, r7
 8007284:	b002      	add	sp, #8
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40021000 	.word	0x40021000

0800728c <HAL_RCC_CSSCallback>:
/**
  * @brief Handle the RCC HSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCC_CSSCallback should be implemented in the user file
   */
}
 8007290:	46c0      	nop			; (mov r8, r8)
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_RCC_LSECSSCallback>:
/**
  * @brief  RCC LSE Clock Security System interrupt callback.
  * @retval none
  */
__weak void HAL_RCC_LSECSSCallback(void)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RCC_LSECSSCallback should be implemented in the user file
   */
}
 800729a:	46c0      	nop			; (mov r8, r8)
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80072a8:	2313      	movs	r3, #19
 80072aa:	18fb      	adds	r3, r7, r3
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072b0:	2312      	movs	r3, #18
 80072b2:	18fb      	adds	r3, r7, r3
 80072b4:	2200      	movs	r2, #0
 80072b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	2380      	movs	r3, #128	; 0x80
 80072be:	029b      	lsls	r3, r3, #10
 80072c0:	4013      	ands	r3, r2
 80072c2:	d100      	bne.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80072c4:	e0a3      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072c6:	2011      	movs	r0, #17
 80072c8:	183b      	adds	r3, r7, r0
 80072ca:	2200      	movs	r2, #0
 80072cc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072ce:	4b86      	ldr	r3, [pc, #536]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d2:	2380      	movs	r3, #128	; 0x80
 80072d4:	055b      	lsls	r3, r3, #21
 80072d6:	4013      	ands	r3, r2
 80072d8:	d110      	bne.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072da:	4b83      	ldr	r3, [pc, #524]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072de:	4b82      	ldr	r3, [pc, #520]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072e0:	2180      	movs	r1, #128	; 0x80
 80072e2:	0549      	lsls	r1, r1, #21
 80072e4:	430a      	orrs	r2, r1
 80072e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80072e8:	4b7f      	ldr	r3, [pc, #508]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80072ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	055b      	lsls	r3, r3, #21
 80072f0:	4013      	ands	r3, r2
 80072f2:	60bb      	str	r3, [r7, #8]
 80072f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072f6:	183b      	adds	r3, r7, r0
 80072f8:	2201      	movs	r2, #1
 80072fa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072fc:	4b7b      	ldr	r3, [pc, #492]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b7a      	ldr	r3, [pc, #488]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8007302:	2180      	movs	r1, #128	; 0x80
 8007304:	0049      	lsls	r1, r1, #1
 8007306:	430a      	orrs	r2, r1
 8007308:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800730a:	f7fe f80f 	bl	800532c <HAL_GetTick>
 800730e:	0003      	movs	r3, r0
 8007310:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007312:	e00b      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007314:	f7fe f80a 	bl	800532c <HAL_GetTick>
 8007318:	0002      	movs	r2, r0
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	2b02      	cmp	r3, #2
 8007320:	d904      	bls.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8007322:	2313      	movs	r3, #19
 8007324:	18fb      	adds	r3, r7, r3
 8007326:	2203      	movs	r2, #3
 8007328:	701a      	strb	r2, [r3, #0]
        break;
 800732a:	e005      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800732c:	4b6f      	ldr	r3, [pc, #444]	; (80074ec <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4013      	ands	r3, r2
 8007336:	d0ed      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007338:	2313      	movs	r3, #19
 800733a:	18fb      	adds	r3, r7, r3
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d154      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007342:	4b69      	ldr	r3, [pc, #420]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007344:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007346:	23c0      	movs	r3, #192	; 0xc0
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4013      	ands	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d019      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	697a      	ldr	r2, [r7, #20]
 800735a:	429a      	cmp	r2, r3
 800735c:	d014      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800735e:	4b62      	ldr	r3, [pc, #392]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007362:	4a63      	ldr	r2, [pc, #396]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8007364:	4013      	ands	r3, r2
 8007366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007368:	4b5f      	ldr	r3, [pc, #380]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800736a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800736c:	4b5e      	ldr	r3, [pc, #376]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800736e:	2180      	movs	r1, #128	; 0x80
 8007370:	0249      	lsls	r1, r1, #9
 8007372:	430a      	orrs	r2, r1
 8007374:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007376:	4b5c      	ldr	r3, [pc, #368]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007378:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800737a:	4b5b      	ldr	r3, [pc, #364]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800737c:	495d      	ldr	r1, [pc, #372]	; (80074f4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800737e:	400a      	ands	r2, r1
 8007380:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007382:	4b59      	ldr	r3, [pc, #356]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2201      	movs	r2, #1
 800738c:	4013      	ands	r3, r2
 800738e:	d016      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fd ffcc 	bl	800532c <HAL_GetTick>
 8007394:	0003      	movs	r3, r0
 8007396:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007398:	e00c      	b.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739a:	f7fd ffc7 	bl	800532c <HAL_GetTick>
 800739e:	0002      	movs	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	4a54      	ldr	r2, [pc, #336]	; (80074f8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d904      	bls.n	80073b4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80073aa:	2313      	movs	r3, #19
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	2203      	movs	r2, #3
 80073b0:	701a      	strb	r2, [r3, #0]
            break;
 80073b2:	e004      	b.n	80073be <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b4:	4b4c      	ldr	r3, [pc, #304]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80073b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b8:	2202      	movs	r2, #2
 80073ba:	4013      	ands	r3, r2
 80073bc:	d0ed      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80073be:	2313      	movs	r3, #19
 80073c0:	18fb      	adds	r3, r7, r3
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c8:	4b47      	ldr	r3, [pc, #284]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	4a48      	ldr	r2, [pc, #288]	; (80074f0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80073ce:	4013      	ands	r3, r2
 80073d0:	0019      	movs	r1, r3
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	699a      	ldr	r2, [r3, #24]
 80073d6:	4b44      	ldr	r3, [pc, #272]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80073d8:	430a      	orrs	r2, r1
 80073da:	65da      	str	r2, [r3, #92]	; 0x5c
 80073dc:	e00c      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073de:	2312      	movs	r3, #18
 80073e0:	18fb      	adds	r3, r7, r3
 80073e2:	2213      	movs	r2, #19
 80073e4:	18ba      	adds	r2, r7, r2
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e005      	b.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	2312      	movs	r3, #18
 80073ee:	18fb      	adds	r3, r7, r3
 80073f0:	2213      	movs	r2, #19
 80073f2:	18ba      	adds	r2, r7, r2
 80073f4:	7812      	ldrb	r2, [r2, #0]
 80073f6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073f8:	2311      	movs	r3, #17
 80073fa:	18fb      	adds	r3, r7, r3
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d105      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007402:	4b39      	ldr	r3, [pc, #228]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007404:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007406:	4b38      	ldr	r3, [pc, #224]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007408:	493c      	ldr	r1, [pc, #240]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800740a:	400a      	ands	r2, r1
 800740c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	2201      	movs	r2, #1
 8007414:	4013      	ands	r3, r2
 8007416:	d009      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007418:	4b33      	ldr	r3, [pc, #204]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	2203      	movs	r2, #3
 800741e:	4393      	bics	r3, r2
 8007420:	0019      	movs	r1, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	4b30      	ldr	r3, [pc, #192]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007428:	430a      	orrs	r2, r1
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	2202      	movs	r2, #2
 8007432:	4013      	ands	r3, r2
 8007434:	d009      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007436:	4b2c      	ldr	r3, [pc, #176]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800743a:	220c      	movs	r2, #12
 800743c:	4393      	bics	r3, r2
 800743e:	0019      	movs	r1, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	4b28      	ldr	r3, [pc, #160]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007446:	430a      	orrs	r2, r1
 8007448:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	2220      	movs	r2, #32
 8007450:	4013      	ands	r3, r2
 8007452:	d009      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007454:	4b24      	ldr	r3, [pc, #144]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007458:	4a29      	ldr	r2, [pc, #164]	; (8007500 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800745a:	4013      	ands	r3, r2
 800745c:	0019      	movs	r1, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	68da      	ldr	r2, [r3, #12]
 8007462:	4b21      	ldr	r3, [pc, #132]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007464:	430a      	orrs	r2, r1
 8007466:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	01db      	lsls	r3, r3, #7
 8007470:	4013      	ands	r3, r2
 8007472:	d015      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007474:	4b1c      	ldr	r3, [pc, #112]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	0899      	lsrs	r1, r3, #2
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	695a      	ldr	r2, [r3, #20]
 8007480:	4b19      	ldr	r3, [pc, #100]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007482:	430a      	orrs	r2, r1
 8007484:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695a      	ldr	r2, [r3, #20]
 800748a:	2380      	movs	r3, #128	; 0x80
 800748c:	05db      	lsls	r3, r3, #23
 800748e:	429a      	cmp	r2, r3
 8007490:	d106      	bne.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007494:	68da      	ldr	r2, [r3, #12]
 8007496:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8007498:	2180      	movs	r1, #128	; 0x80
 800749a:	0249      	lsls	r1, r1, #9
 800749c:	430a      	orrs	r2, r1
 800749e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	2380      	movs	r3, #128	; 0x80
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	4013      	ands	r3, r2
 80074aa:	d016      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80074ac:	4b0e      	ldr	r3, [pc, #56]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80074b2:	4013      	ands	r3, r2
 80074b4:	0019      	movs	r1, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691a      	ldr	r2, [r3, #16]
 80074ba:	4b0b      	ldr	r3, [pc, #44]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074bc:	430a      	orrs	r2, r1
 80074be:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	691a      	ldr	r2, [r3, #16]
 80074c4:	2380      	movs	r3, #128	; 0x80
 80074c6:	01db      	lsls	r3, r3, #7
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d106      	bne.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80074cc:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074ce:	68da      	ldr	r2, [r3, #12]
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80074d2:	2180      	movs	r1, #128	; 0x80
 80074d4:	0249      	lsls	r1, r1, #9
 80074d6:	430a      	orrs	r2, r1
 80074d8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80074da:	2312      	movs	r3, #18
 80074dc:	18fb      	adds	r3, r7, r3
 80074de:	781b      	ldrb	r3, [r3, #0]
}
 80074e0:	0018      	movs	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	b006      	add	sp, #24
 80074e6:	bd80      	pop	{r7, pc}
 80074e8:	40021000 	.word	0x40021000
 80074ec:	40007000 	.word	0x40007000
 80074f0:	fffffcff 	.word	0xfffffcff
 80074f4:	fffeffff 	.word	0xfffeffff
 80074f8:	00001388 	.word	0x00001388
 80074fc:	efffffff 	.word	0xefffffff
 8007500:	ffffcfff 	.word	0xffffcfff
 8007504:	ffff3fff 	.word	0xffff3fff

08007508 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007508:	b5b0      	push	{r4, r5, r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007510:	230f      	movs	r3, #15
 8007512:	18fb      	adds	r3, r7, r3
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d100      	bne.n	8007520 <HAL_RTC_Init+0x18>
 800751e:	e080      	b.n	8007622 <HAL_RTC_Init+0x11a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

  if(hrtc->State == HAL_RTC_STATE_RESET)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	2229      	movs	r2, #41	; 0x29
 8007524:	5c9b      	ldrb	r3, [r3, r2]
 8007526:	b2db      	uxtb	r3, r3
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10b      	bne.n	8007544 <HAL_RTC_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2228      	movs	r2, #40	; 0x28
 8007530:	2100      	movs	r1, #0
 8007532:	5499      	strb	r1, [r3, r2]

    /* Process TAMP peripheral offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2288      	movs	r2, #136	; 0x88
 8007538:	0212      	lsls	r2, r2, #8
 800753a:	605a      	str	r2, [r3, #4]
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
#else
    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	0018      	movs	r0, r3
 8007540:	f7fd fc36 	bl	8004db0 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
  }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2229      	movs	r2, #41	; 0x29
 8007548:	2102      	movs	r1, #2
 800754a:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	22ca      	movs	r2, #202	; 0xca
 8007552:	625a      	str	r2, [r3, #36]	; 0x24
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	2253      	movs	r2, #83	; 0x53
 800755a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800755c:	250f      	movs	r5, #15
 800755e:	197c      	adds	r4, r7, r5
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	0018      	movs	r0, r3
 8007564:	f000 f9df 	bl	8007926 <RTC_EnterInitMode>
 8007568:	0003      	movs	r3, r0
 800756a:	7023      	strb	r3, [r4, #0]
    if(status == HAL_OK)
 800756c:	0028      	movs	r0, r5
 800756e:	183b      	adds	r3, r7, r0
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d148      	bne.n	8007608 <HAL_RTC_Init+0x100>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	699a      	ldr	r2, [r3, #24]
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	492b      	ldr	r1, [pc, #172]	; (8007630 <HAL_RTC_Init+0x128>)
 8007582:	400a      	ands	r2, r1
 8007584:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6999      	ldr	r1, [r3, #24]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	431a      	orrs	r2, r3
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	431a      	orrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6912      	ldr	r2, [r2, #16]
 80075ac:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6919      	ldr	r1, [r3, #16]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	041a      	lsls	r2, r3, #16
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	430a      	orrs	r2, r1
 80075c0:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80075c2:	0005      	movs	r5, r0
 80075c4:	183c      	adds	r4, r7, r0
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	0018      	movs	r0, r3
 80075ca:	f000 f9ef 	bl	80079ac <RTC_ExitInitMode>
 80075ce:	0003      	movs	r3, r0
 80075d0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80075d2:	197b      	adds	r3, r7, r5
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d116      	bne.n	8007608 <HAL_RTC_Init+0x100>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699a      	ldr	r2, [r3, #24]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	00d2      	lsls	r2, r2, #3
 80075e6:	08d2      	lsrs	r2, r2, #3
 80075e8:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6999      	ldr	r1, [r3, #24]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a1b      	ldr	r3, [r3, #32]
 80075f8:	431a      	orrs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	699b      	ldr	r3, [r3, #24]
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	619a      	str	r2, [r3, #24]
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	22ff      	movs	r2, #255	; 0xff
 800760e:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8007610:	230f      	movs	r3, #15
 8007612:	18fb      	adds	r3, r7, r3
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <HAL_RTC_Init+0x11a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2229      	movs	r2, #41	; 0x29
 800761e:	2101      	movs	r1, #1
 8007620:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8007622:	230f      	movs	r3, #15
 8007624:	18fb      	adds	r3, r7, r3
 8007626:	781b      	ldrb	r3, [r3, #0]
}
 8007628:	0018      	movs	r0, r3
 800762a:	46bd      	mov	sp, r7
 800762c:	b004      	add	sp, #16
 800762e:	bdb0      	pop	{r4, r5, r7, pc}
 8007630:	fb8fffbf 	.word	0xfb8fffbf

08007634 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007634:	b5b0      	push	{r4, r5, r7, lr}
 8007636:	b086      	sub	sp, #24
 8007638:	af00      	add	r7, sp, #0
 800763a:	60f8      	str	r0, [r7, #12]
 800763c:	60b9      	str	r1, [r7, #8]
 800763e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2228      	movs	r2, #40	; 0x28
 8007644:	5c9b      	ldrb	r3, [r3, r2]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_RTC_SetTime+0x1a>
 800764a:	2302      	movs	r3, #2
 800764c:	e092      	b.n	8007774 <HAL_RTC_SetTime+0x140>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2228      	movs	r2, #40	; 0x28
 8007652:	2101      	movs	r1, #1
 8007654:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2229      	movs	r2, #41	; 0x29
 800765a:	2102      	movs	r1, #2
 800765c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	22ca      	movs	r2, #202	; 0xca
 8007664:	625a      	str	r2, [r3, #36]	; 0x24
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	2253      	movs	r2, #83	; 0x53
 800766c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800766e:	2513      	movs	r5, #19
 8007670:	197c      	adds	r4, r7, r5
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	0018      	movs	r0, r3
 8007676:	f000 f956 	bl	8007926 <RTC_EnterInitMode>
 800767a:	0003      	movs	r3, r0
 800767c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 800767e:	197b      	adds	r3, r7, r5
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d162      	bne.n	800774c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d125      	bne.n	80076d8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	2240      	movs	r2, #64	; 0x40
 8007694:	4013      	ands	r3, r2
 8007696:	d102      	bne.n	800769e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	0018      	movs	r0, r3
 80076a4:	f000 f9c6 	bl	8007a34 <RTC_ByteToBcd2>
 80076a8:	0003      	movs	r3, r0
 80076aa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	785b      	ldrb	r3, [r3, #1]
 80076b0:	0018      	movs	r0, r3
 80076b2:	f000 f9bf 	bl	8007a34 <RTC_ByteToBcd2>
 80076b6:	0003      	movs	r3, r0
 80076b8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076ba:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	789b      	ldrb	r3, [r3, #2]
 80076c0:	0018      	movs	r0, r3
 80076c2:	f000 f9b7 	bl	8007a34 <RTC_ByteToBcd2>
 80076c6:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076c8:	0022      	movs	r2, r4
 80076ca:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	78db      	ldrb	r3, [r3, #3]
 80076d0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076d2:	4313      	orrs	r3, r2
 80076d4:	617b      	str	r3, [r7, #20]
 80076d6:	e017      	b.n	8007708 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	699b      	ldr	r3, [r3, #24]
 80076de:	2240      	movs	r2, #64	; 0x40
 80076e0:	4013      	ands	r3, r2
 80076e2:	d102      	bne.n	80076ea <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	785b      	ldrb	r3, [r3, #1]
 80076f4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80076f6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80076fc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	78db      	ldrb	r3, [r3, #3]
 8007702:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007704:	4313      	orrs	r3, r2
 8007706:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	491b      	ldr	r1, [pc, #108]	; (800777c <HAL_RTC_SetTime+0x148>)
 8007710:	400a      	ands	r2, r1
 8007712:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	699a      	ldr	r2, [r3, #24]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4918      	ldr	r1, [pc, #96]	; (8007780 <HAL_RTC_SetTime+0x14c>)
 8007720:	400a      	ands	r2, r1
 8007722:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	6999      	ldr	r1, [r3, #24]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	68da      	ldr	r2, [r3, #12]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	431a      	orrs	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	430a      	orrs	r2, r1
 800773a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800773c:	2313      	movs	r3, #19
 800773e:	18fc      	adds	r4, r7, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	0018      	movs	r0, r3
 8007744:	f000 f932 	bl	80079ac <RTC_ExitInitMode>
 8007748:	0003      	movs	r3, r0
 800774a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	22ff      	movs	r2, #255	; 0xff
 8007752:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8007754:	2313      	movs	r3, #19
 8007756:	18fb      	adds	r3, r7, r3
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d103      	bne.n	8007766 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2229      	movs	r2, #41	; 0x29
 8007762:	2101      	movs	r1, #1
 8007764:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2228      	movs	r2, #40	; 0x28
 800776a:	2100      	movs	r1, #0
 800776c:	5499      	strb	r1, [r3, r2]

  return status;
 800776e:	2313      	movs	r3, #19
 8007770:	18fb      	adds	r3, r7, r3
 8007772:	781b      	ldrb	r3, [r3, #0]
}
 8007774:	0018      	movs	r0, r3
 8007776:	46bd      	mov	sp, r7
 8007778:	b006      	add	sp, #24
 800777a:	bdb0      	pop	{r4, r5, r7, pc}
 800777c:	007f7f7f 	.word	0x007f7f7f
 8007780:	fffbffff 	.word	0xfffbffff

08007784 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b086      	sub	sp, #24
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	689a      	ldr	r2, [r3, #8]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	045b      	lsls	r3, r3, #17
 80077a2:	0c5a      	lsrs	r2, r3, #17
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a22      	ldr	r2, [pc, #136]	; (8007838 <HAL_RTC_GetTime+0xb4>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	0c1b      	lsrs	r3, r3, #16
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	223f      	movs	r2, #63	; 0x3f
 80077bc:	4013      	ands	r3, r2
 80077be:	b2da      	uxtb	r2, r3
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	0a1b      	lsrs	r3, r3, #8
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	227f      	movs	r2, #127	; 0x7f
 80077cc:	4013      	ands	r3, r2
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	227f      	movs	r2, #127	; 0x7f
 80077da:	4013      	ands	r3, r2
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	0d9b      	lsrs	r3, r3, #22
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	2201      	movs	r2, #1
 80077ea:	4013      	ands	r3, r2
 80077ec:	b2da      	uxtb	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d11a      	bne.n	800782e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	0018      	movs	r0, r3
 80077fe:	f000 f941 	bl	8007a84 <RTC_Bcd2ToByte>
 8007802:	0003      	movs	r3, r0
 8007804:	001a      	movs	r2, r3
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	785b      	ldrb	r3, [r3, #1]
 800780e:	0018      	movs	r0, r3
 8007810:	f000 f938 	bl	8007a84 <RTC_Bcd2ToByte>
 8007814:	0003      	movs	r3, r0
 8007816:	001a      	movs	r2, r3
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	789b      	ldrb	r3, [r3, #2]
 8007820:	0018      	movs	r0, r3
 8007822:	f000 f92f 	bl	8007a84 <RTC_Bcd2ToByte>
 8007826:	0003      	movs	r3, r0
 8007828:	001a      	movs	r2, r3
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	0018      	movs	r0, r3
 8007832:	46bd      	mov	sp, r7
 8007834:	b006      	add	sp, #24
 8007836:	bd80      	pop	{r7, pc}
 8007838:	007f7f7f 	.word	0x007f7f7f

0800783c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	4a21      	ldr	r2, [pc, #132]	; (80078d4 <HAL_RTC_GetDate+0x98>)
 8007850:	4013      	ands	r3, r2
 8007852:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	b2da      	uxtb	r2, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	0a1b      	lsrs	r3, r3, #8
 8007862:	b2db      	uxtb	r3, r3
 8007864:	221f      	movs	r2, #31
 8007866:	4013      	ands	r3, r2
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	223f      	movs	r2, #63	; 0x3f
 8007874:	4013      	ands	r3, r2
 8007876:	b2da      	uxtb	r2, r3
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	0b5b      	lsrs	r3, r3, #13
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2207      	movs	r2, #7
 8007884:	4013      	ands	r3, r2
 8007886:	b2da      	uxtb	r2, r3
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d11a      	bne.n	80078c8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	78db      	ldrb	r3, [r3, #3]
 8007896:	0018      	movs	r0, r3
 8007898:	f000 f8f4 	bl	8007a84 <RTC_Bcd2ToByte>
 800789c:	0003      	movs	r3, r0
 800789e:	001a      	movs	r2, r3
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	0018      	movs	r0, r3
 80078aa:	f000 f8eb 	bl	8007a84 <RTC_Bcd2ToByte>
 80078ae:	0003      	movs	r3, r0
 80078b0:	001a      	movs	r2, r3
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	789b      	ldrb	r3, [r3, #2]
 80078ba:	0018      	movs	r0, r3
 80078bc:	f000 f8e2 	bl	8007a84 <RTC_Bcd2ToByte>
 80078c0:	0003      	movs	r3, r0
 80078c2:	001a      	movs	r2, r3
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	0018      	movs	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b006      	add	sp, #24
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	00ffff3f 	.word	0x00ffff3f

080078d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68da      	ldr	r2, [r3, #12]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	21a0      	movs	r1, #160	; 0xa0
 80078ec:	438a      	bics	r2, r1
 80078ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80078f0:	f7fd fd1c 	bl	800532c <HAL_GetTick>
 80078f4:	0003      	movs	r3, r0
 80078f6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80078f8:	e00a      	b.n	8007910 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80078fa:	f7fd fd17 	bl	800532c <HAL_GetTick>
 80078fe:	0002      	movs	r2, r0
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	1ad2      	subs	r2, r2, r3
 8007904:	23fa      	movs	r3, #250	; 0xfa
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	429a      	cmp	r2, r3
 800790a:	d901      	bls.n	8007910 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e006      	b.n	800791e <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	2220      	movs	r2, #32
 8007918:	4013      	ands	r3, r2
 800791a:	d0ee      	beq.n	80078fa <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	0018      	movs	r0, r3
 8007920:	46bd      	mov	sp, r7
 8007922:	b004      	add	sp, #16
 8007924:	bd80      	pop	{r7, pc}

08007926 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007926:	b580      	push	{r7, lr}
 8007928:	b084      	sub	sp, #16
 800792a:	af00      	add	r7, sp, #0
 800792c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 800792e:	230f      	movs	r3, #15
 8007930:	18fb      	adds	r3, r7, r3
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2240      	movs	r2, #64	; 0x40
 800793e:	4013      	ands	r3, r2
 8007940:	d12c      	bne.n	800799c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2180      	movs	r1, #128	; 0x80
 800794e:	430a      	orrs	r2, r1
 8007950:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007952:	f7fd fceb 	bl	800532c <HAL_GetTick>
 8007956:	0003      	movs	r3, r0
 8007958:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800795a:	e014      	b.n	8007986 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800795c:	f7fd fce6 	bl	800532c <HAL_GetTick>
 8007960:	0002      	movs	r2, r0
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	1ad2      	subs	r2, r2, r3
 8007966:	200f      	movs	r0, #15
 8007968:	183b      	adds	r3, r7, r0
 800796a:	1839      	adds	r1, r7, r0
 800796c:	7809      	ldrb	r1, [r1, #0]
 800796e:	7019      	strb	r1, [r3, #0]
 8007970:	23fa      	movs	r3, #250	; 0xfa
 8007972:	009b      	lsls	r3, r3, #2
 8007974:	429a      	cmp	r2, r3
 8007976:	d906      	bls.n	8007986 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8007978:	183b      	adds	r3, r7, r0
 800797a:	2203      	movs	r2, #3
 800797c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2229      	movs	r2, #41	; 0x29
 8007982:	2103      	movs	r1, #3
 8007984:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	2240      	movs	r2, #64	; 0x40
 800798e:	4013      	ands	r3, r2
 8007990:	d104      	bne.n	800799c <RTC_EnterInitMode+0x76>
 8007992:	230f      	movs	r3, #15
 8007994:	18fb      	adds	r3, r7, r3
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	2b03      	cmp	r3, #3
 800799a:	d1df      	bne.n	800795c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800799c:	230f      	movs	r3, #15
 800799e:	18fb      	adds	r3, r7, r3
 80079a0:	781b      	ldrb	r3, [r3, #0]
}
 80079a2:	0018      	movs	r0, r3
 80079a4:	46bd      	mov	sp, r7
 80079a6:	b004      	add	sp, #16
 80079a8:	bd80      	pop	{r7, pc}
	...

080079ac <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80079ac:	b590      	push	{r4, r7, lr}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079b4:	240f      	movs	r4, #15
 80079b6:	193b      	adds	r3, r7, r4
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80079bc:	4b1c      	ldr	r3, [pc, #112]	; (8007a30 <RTC_ExitInitMode+0x84>)
 80079be:	68da      	ldr	r2, [r3, #12]
 80079c0:	4b1b      	ldr	r3, [pc, #108]	; (8007a30 <RTC_ExitInitMode+0x84>)
 80079c2:	2180      	movs	r1, #128	; 0x80
 80079c4:	438a      	bics	r2, r1
 80079c6:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80079c8:	4b19      	ldr	r3, [pc, #100]	; (8007a30 <RTC_ExitInitMode+0x84>)
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	2220      	movs	r2, #32
 80079ce:	4013      	ands	r3, r2
 80079d0:	d10d      	bne.n	80079ee <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	0018      	movs	r0, r3
 80079d6:	f7ff ff7f 	bl	80078d8 <HAL_RTC_WaitForSynchro>
 80079da:	1e03      	subs	r3, r0, #0
 80079dc:	d021      	beq.n	8007a22 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2229      	movs	r2, #41	; 0x29
 80079e2:	2103      	movs	r1, #3
 80079e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80079e6:	193b      	adds	r3, r7, r4
 80079e8:	2203      	movs	r2, #3
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e019      	b.n	8007a22 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80079ee:	4b10      	ldr	r3, [pc, #64]	; (8007a30 <RTC_ExitInitMode+0x84>)
 80079f0:	699a      	ldr	r2, [r3, #24]
 80079f2:	4b0f      	ldr	r3, [pc, #60]	; (8007a30 <RTC_ExitInitMode+0x84>)
 80079f4:	2120      	movs	r1, #32
 80079f6:	438a      	bics	r2, r1
 80079f8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	0018      	movs	r0, r3
 80079fe:	f7ff ff6b 	bl	80078d8 <HAL_RTC_WaitForSynchro>
 8007a02:	1e03      	subs	r3, r0, #0
 8007a04:	d007      	beq.n	8007a16 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2229      	movs	r2, #41	; 0x29
 8007a0a:	2103      	movs	r1, #3
 8007a0c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8007a0e:	230f      	movs	r3, #15
 8007a10:	18fb      	adds	r3, r7, r3
 8007a12:	2203      	movs	r2, #3
 8007a14:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007a16:	4b06      	ldr	r3, [pc, #24]	; (8007a30 <RTC_ExitInitMode+0x84>)
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <RTC_ExitInitMode+0x84>)
 8007a1c:	2120      	movs	r1, #32
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	619a      	str	r2, [r3, #24]
  }

  return status;
 8007a22:	230f      	movs	r3, #15
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	781b      	ldrb	r3, [r3, #0]
}
 8007a28:	0018      	movs	r0, r3
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	b005      	add	sp, #20
 8007a2e:	bd90      	pop	{r4, r7, pc}
 8007a30:	40002800 	.word	0x40002800

08007a34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	0002      	movs	r2, r0
 8007a3c:	1dfb      	adds	r3, r7, #7
 8007a3e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8007a40:	2300      	movs	r3, #0
 8007a42:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8007a44:	230b      	movs	r3, #11
 8007a46:	18fb      	adds	r3, r7, r3
 8007a48:	1dfa      	adds	r2, r7, #7
 8007a4a:	7812      	ldrb	r2, [r2, #0]
 8007a4c:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 8007a4e:	e008      	b.n	8007a62 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8007a56:	220b      	movs	r2, #11
 8007a58:	18bb      	adds	r3, r7, r2
 8007a5a:	18ba      	adds	r2, r7, r2
 8007a5c:	7812      	ldrb	r2, [r2, #0]
 8007a5e:	3a0a      	subs	r2, #10
 8007a60:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8007a62:	210b      	movs	r1, #11
 8007a64:	187b      	adds	r3, r7, r1
 8007a66:	781b      	ldrb	r3, [r3, #0]
 8007a68:	2b09      	cmp	r3, #9
 8007a6a:	d8f1      	bhi.n	8007a50 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	187b      	adds	r3, r7, r1
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	b2db      	uxtb	r3, r3
}
 8007a7c:	0018      	movs	r0, r3
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b004      	add	sp, #16
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	1dfb      	adds	r3, r7, #7
 8007a8e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8007a90:	1dfb      	adds	r3, r7, #7
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	091b      	lsrs	r3, r3, #4
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	001a      	movs	r2, r3
 8007a9a:	0013      	movs	r3, r2
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	189b      	adds	r3, r3, r2
 8007aa0:	005b      	lsls	r3, r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	210f      	movs	r1, #15
 8007aae:	400b      	ands	r3, r1
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	18d3      	adds	r3, r2, r3
 8007ab4:	b2db      	uxtb	r3, r3
}
 8007ab6:	0018      	movs	r0, r3
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	b004      	add	sp, #16
 8007abc:	bd80      	pop	{r7, pc}

08007abe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b082      	sub	sp, #8
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d101      	bne.n	8007ad0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e04a      	b.n	8007b66 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	223d      	movs	r2, #61	; 0x3d
 8007ad4:	5c9b      	ldrb	r3, [r3, r2]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	223c      	movs	r2, #60	; 0x3c
 8007ae0:	2100      	movs	r1, #0
 8007ae2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	0018      	movs	r0, r3
 8007ae8:	f7fd f988 	bl	8004dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	223d      	movs	r2, #61	; 0x3d
 8007af0:	2102      	movs	r1, #2
 8007af2:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	0019      	movs	r1, r3
 8007afe:	0010      	movs	r0, r2
 8007b00:	f000 fd60 	bl	80085c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2248      	movs	r2, #72	; 0x48
 8007b08:	2101      	movs	r1, #1
 8007b0a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	223e      	movs	r2, #62	; 0x3e
 8007b10:	2101      	movs	r1, #1
 8007b12:	5499      	strb	r1, [r3, r2]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	223f      	movs	r2, #63	; 0x3f
 8007b18:	2101      	movs	r1, #1
 8007b1a:	5499      	strb	r1, [r3, r2]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2240      	movs	r2, #64	; 0x40
 8007b20:	2101      	movs	r1, #1
 8007b22:	5499      	strb	r1, [r3, r2]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2241      	movs	r2, #65	; 0x41
 8007b28:	2101      	movs	r1, #1
 8007b2a:	5499      	strb	r1, [r3, r2]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2242      	movs	r2, #66	; 0x42
 8007b30:	2101      	movs	r1, #1
 8007b32:	5499      	strb	r1, [r3, r2]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2243      	movs	r2, #67	; 0x43
 8007b38:	2101      	movs	r1, #1
 8007b3a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2244      	movs	r2, #68	; 0x44
 8007b40:	2101      	movs	r1, #1
 8007b42:	5499      	strb	r1, [r3, r2]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2245      	movs	r2, #69	; 0x45
 8007b48:	2101      	movs	r1, #1
 8007b4a:	5499      	strb	r1, [r3, r2]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2246      	movs	r2, #70	; 0x46
 8007b50:	2101      	movs	r1, #1
 8007b52:	5499      	strb	r1, [r3, r2]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2247      	movs	r2, #71	; 0x47
 8007b58:	2101      	movs	r1, #1
 8007b5a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	223d      	movs	r2, #61	; 0x3d
 8007b60:	2101      	movs	r1, #1
 8007b62:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b64:	2300      	movs	r3, #0
}
 8007b66:	0018      	movs	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	b002      	add	sp, #8
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b084      	sub	sp, #16
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	223d      	movs	r2, #61	; 0x3d
 8007b7c:	5c9b      	ldrb	r3, [r3, r2]
 8007b7e:	b2db      	uxtb	r3, r3
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d001      	beq.n	8007b88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	e034      	b.n	8007bf2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	223d      	movs	r2, #61	; 0x3d
 8007b8c:	2102      	movs	r1, #2
 8007b8e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a19      	ldr	r2, [pc, #100]	; (8007bfc <HAL_TIM_Base_Start+0x8c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d009      	beq.n	8007bae <HAL_TIM_Base_Start+0x3e>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a18      	ldr	r2, [pc, #96]	; (8007c00 <HAL_TIM_Base_Start+0x90>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d004      	beq.n	8007bae <HAL_TIM_Base_Start+0x3e>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a16      	ldr	r2, [pc, #88]	; (8007c04 <HAL_TIM_Base_Start+0x94>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d116      	bne.n	8007bdc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	4a14      	ldr	r2, [pc, #80]	; (8007c08 <HAL_TIM_Base_Start+0x98>)
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2b06      	cmp	r3, #6
 8007bbe:	d016      	beq.n	8007bee <HAL_TIM_Base_Start+0x7e>
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	2380      	movs	r3, #128	; 0x80
 8007bc4:	025b      	lsls	r3, r3, #9
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d011      	beq.n	8007bee <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bda:	e008      	b.n	8007bee <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	681a      	ldr	r2, [r3, #0]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2101      	movs	r1, #1
 8007be8:	430a      	orrs	r2, r1
 8007bea:	601a      	str	r2, [r3, #0]
 8007bec:	e000      	b.n	8007bf0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bee:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	0018      	movs	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	b004      	add	sp, #16
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	40012c00 	.word	0x40012c00
 8007c00:	40000400 	.word	0x40000400
 8007c04:	40014000 	.word	0x40014000
 8007c08:	00010007 	.word	0x00010007

08007c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	223d      	movs	r2, #61	; 0x3d
 8007c18:	5c9b      	ldrb	r3, [r3, r2]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d001      	beq.n	8007c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e03c      	b.n	8007c9e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	223d      	movs	r2, #61	; 0x3d
 8007c28:	2102      	movs	r1, #2
 8007c2a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2101      	movs	r1, #1
 8007c38:	430a      	orrs	r2, r1
 8007c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a19      	ldr	r2, [pc, #100]	; (8007ca8 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d009      	beq.n	8007c5a <HAL_TIM_Base_Start_IT+0x4e>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a18      	ldr	r2, [pc, #96]	; (8007cac <HAL_TIM_Base_Start_IT+0xa0>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d004      	beq.n	8007c5a <HAL_TIM_Base_Start_IT+0x4e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a16      	ldr	r2, [pc, #88]	; (8007cb0 <HAL_TIM_Base_Start_IT+0xa4>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d116      	bne.n	8007c88 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	4a14      	ldr	r2, [pc, #80]	; (8007cb4 <HAL_TIM_Base_Start_IT+0xa8>)
 8007c62:	4013      	ands	r3, r2
 8007c64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b06      	cmp	r3, #6
 8007c6a:	d016      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0x8e>
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	2380      	movs	r3, #128	; 0x80
 8007c70:	025b      	lsls	r3, r3, #9
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d011      	beq.n	8007c9a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2101      	movs	r1, #1
 8007c82:	430a      	orrs	r2, r1
 8007c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c86:	e008      	b.n	8007c9a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681a      	ldr	r2, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2101      	movs	r1, #1
 8007c94:	430a      	orrs	r2, r1
 8007c96:	601a      	str	r2, [r3, #0]
 8007c98:	e000      	b.n	8007c9c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c9a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	b004      	add	sp, #16
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	40012c00 	.word	0x40012c00
 8007cac:	40000400 	.word	0x40000400
 8007cb0:	40014000 	.word	0x40014000
 8007cb4:	00010007 	.word	0x00010007

08007cb8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2101      	movs	r1, #1
 8007ccc:	438a      	bics	r2, r1
 8007cce:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
 8007cd6:	4a0d      	ldr	r2, [pc, #52]	; (8007d0c <HAL_TIM_Base_Stop_IT+0x54>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d10d      	bne.n	8007cf8 <HAL_TIM_Base_Stop_IT+0x40>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	4a0b      	ldr	r2, [pc, #44]	; (8007d10 <HAL_TIM_Base_Stop_IT+0x58>)
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	d107      	bne.n	8007cf8 <HAL_TIM_Base_Stop_IT+0x40>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	438a      	bics	r2, r1
 8007cf6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	223d      	movs	r2, #61	; 0x3d
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	0018      	movs	r0, r3
 8007d04:	46bd      	mov	sp, r7
 8007d06:	b002      	add	sp, #8
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	46c0      	nop			; (mov r8, r8)
 8007d0c:	00001111 	.word	0x00001111
 8007d10:	00000444 	.word	0x00000444

08007d14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e04a      	b.n	8007dbc <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	223d      	movs	r2, #61	; 0x3d
 8007d2a:	5c9b      	ldrb	r3, [r3, r2]
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	223c      	movs	r2, #60	; 0x3c
 8007d36:	2100      	movs	r1, #0
 8007d38:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	0018      	movs	r0, r3
 8007d3e:	f000 f841 	bl	8007dc4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	223d      	movs	r2, #61	; 0x3d
 8007d46:	2102      	movs	r1, #2
 8007d48:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	3304      	adds	r3, #4
 8007d52:	0019      	movs	r1, r3
 8007d54:	0010      	movs	r0, r2
 8007d56:	f000 fc35 	bl	80085c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2248      	movs	r2, #72	; 0x48
 8007d5e:	2101      	movs	r1, #1
 8007d60:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	223e      	movs	r2, #62	; 0x3e
 8007d66:	2101      	movs	r1, #1
 8007d68:	5499      	strb	r1, [r3, r2]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	223f      	movs	r2, #63	; 0x3f
 8007d6e:	2101      	movs	r1, #1
 8007d70:	5499      	strb	r1, [r3, r2]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2240      	movs	r2, #64	; 0x40
 8007d76:	2101      	movs	r1, #1
 8007d78:	5499      	strb	r1, [r3, r2]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2241      	movs	r2, #65	; 0x41
 8007d7e:	2101      	movs	r1, #1
 8007d80:	5499      	strb	r1, [r3, r2]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2242      	movs	r2, #66	; 0x42
 8007d86:	2101      	movs	r1, #1
 8007d88:	5499      	strb	r1, [r3, r2]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2243      	movs	r2, #67	; 0x43
 8007d8e:	2101      	movs	r1, #1
 8007d90:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2244      	movs	r2, #68	; 0x44
 8007d96:	2101      	movs	r1, #1
 8007d98:	5499      	strb	r1, [r3, r2]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2245      	movs	r2, #69	; 0x45
 8007d9e:	2101      	movs	r1, #1
 8007da0:	5499      	strb	r1, [r3, r2]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2246      	movs	r2, #70	; 0x46
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2247      	movs	r2, #71	; 0x47
 8007dae:	2101      	movs	r1, #1
 8007db0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	223d      	movs	r2, #61	; 0x3d
 8007db6:	2101      	movs	r1, #1
 8007db8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007dba:	2300      	movs	r3, #0
}
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	b002      	add	sp, #8
 8007dc2:	bd80      	pop	{r7, pc}

08007dc4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007dcc:	46c0      	nop			; (mov r8, r8)
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	b002      	add	sp, #8
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d108      	bne.n	8007df6 <HAL_TIM_PWM_Start+0x22>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	223e      	movs	r2, #62	; 0x3e
 8007de8:	5c9b      	ldrb	r3, [r3, r2]
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	3b01      	subs	r3, #1
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	4193      	sbcs	r3, r2
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	e037      	b.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d108      	bne.n	8007e0e <HAL_TIM_PWM_Start+0x3a>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	223f      	movs	r2, #63	; 0x3f
 8007e00:	5c9b      	ldrb	r3, [r3, r2]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	3b01      	subs	r3, #1
 8007e06:	1e5a      	subs	r2, r3, #1
 8007e08:	4193      	sbcs	r3, r2
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	e02b      	b.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	2b08      	cmp	r3, #8
 8007e12:	d108      	bne.n	8007e26 <HAL_TIM_PWM_Start+0x52>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2240      	movs	r2, #64	; 0x40
 8007e18:	5c9b      	ldrb	r3, [r3, r2]
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	1e5a      	subs	r2, r3, #1
 8007e20:	4193      	sbcs	r3, r2
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	e01f      	b.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	2b0c      	cmp	r3, #12
 8007e2a:	d108      	bne.n	8007e3e <HAL_TIM_PWM_Start+0x6a>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2241      	movs	r2, #65	; 0x41
 8007e30:	5c9b      	ldrb	r3, [r3, r2]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	3b01      	subs	r3, #1
 8007e36:	1e5a      	subs	r2, r3, #1
 8007e38:	4193      	sbcs	r3, r2
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	e013      	b.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	2b10      	cmp	r3, #16
 8007e42:	d108      	bne.n	8007e56 <HAL_TIM_PWM_Start+0x82>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2242      	movs	r2, #66	; 0x42
 8007e48:	5c9b      	ldrb	r3, [r3, r2]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	3b01      	subs	r3, #1
 8007e4e:	1e5a      	subs	r2, r3, #1
 8007e50:	4193      	sbcs	r3, r2
 8007e52:	b2db      	uxtb	r3, r3
 8007e54:	e007      	b.n	8007e66 <HAL_TIM_PWM_Start+0x92>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2243      	movs	r2, #67	; 0x43
 8007e5a:	5c9b      	ldrb	r3, [r3, r2]
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	1e5a      	subs	r2, r3, #1
 8007e62:	4193      	sbcs	r3, r2
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d001      	beq.n	8007e6e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e085      	b.n	8007f7a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <HAL_TIM_PWM_Start+0xaa>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	223e      	movs	r2, #62	; 0x3e
 8007e78:	2102      	movs	r1, #2
 8007e7a:	5499      	strb	r1, [r3, r2]
 8007e7c:	e023      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xf2>
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d104      	bne.n	8007e8e <HAL_TIM_PWM_Start+0xba>
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	223f      	movs	r2, #63	; 0x3f
 8007e88:	2102      	movs	r1, #2
 8007e8a:	5499      	strb	r1, [r3, r2]
 8007e8c:	e01b      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xf2>
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b08      	cmp	r3, #8
 8007e92:	d104      	bne.n	8007e9e <HAL_TIM_PWM_Start+0xca>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2240      	movs	r2, #64	; 0x40
 8007e98:	2102      	movs	r1, #2
 8007e9a:	5499      	strb	r1, [r3, r2]
 8007e9c:	e013      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xf2>
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	2b0c      	cmp	r3, #12
 8007ea2:	d104      	bne.n	8007eae <HAL_TIM_PWM_Start+0xda>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2241      	movs	r2, #65	; 0x41
 8007ea8:	2102      	movs	r1, #2
 8007eaa:	5499      	strb	r1, [r3, r2]
 8007eac:	e00b      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xf2>
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	2b10      	cmp	r3, #16
 8007eb2:	d104      	bne.n	8007ebe <HAL_TIM_PWM_Start+0xea>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2242      	movs	r2, #66	; 0x42
 8007eb8:	2102      	movs	r1, #2
 8007eba:	5499      	strb	r1, [r3, r2]
 8007ebc:	e003      	b.n	8007ec6 <HAL_TIM_PWM_Start+0xf2>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2243      	movs	r2, #67	; 0x43
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	6839      	ldr	r1, [r7, #0]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	0018      	movs	r0, r3
 8007ed0:	f000 ff4e 	bl	8008d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a2a      	ldr	r2, [pc, #168]	; (8007f84 <HAL_TIM_PWM_Start+0x1b0>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d00e      	beq.n	8007efc <HAL_TIM_PWM_Start+0x128>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a29      	ldr	r2, [pc, #164]	; (8007f88 <HAL_TIM_PWM_Start+0x1b4>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d009      	beq.n	8007efc <HAL_TIM_PWM_Start+0x128>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a27      	ldr	r2, [pc, #156]	; (8007f8c <HAL_TIM_PWM_Start+0x1b8>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d004      	beq.n	8007efc <HAL_TIM_PWM_Start+0x128>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a26      	ldr	r2, [pc, #152]	; (8007f90 <HAL_TIM_PWM_Start+0x1bc>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d101      	bne.n	8007f00 <HAL_TIM_PWM_Start+0x12c>
 8007efc:	2301      	movs	r3, #1
 8007efe:	e000      	b.n	8007f02 <HAL_TIM_PWM_Start+0x12e>
 8007f00:	2300      	movs	r3, #0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d008      	beq.n	8007f18 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2180      	movs	r1, #128	; 0x80
 8007f12:	0209      	lsls	r1, r1, #8
 8007f14:	430a      	orrs	r2, r1
 8007f16:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a19      	ldr	r2, [pc, #100]	; (8007f84 <HAL_TIM_PWM_Start+0x1b0>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d009      	beq.n	8007f36 <HAL_TIM_PWM_Start+0x162>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a1b      	ldr	r2, [pc, #108]	; (8007f94 <HAL_TIM_PWM_Start+0x1c0>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_TIM_PWM_Start+0x162>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a15      	ldr	r2, [pc, #84]	; (8007f88 <HAL_TIM_PWM_Start+0x1b4>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d116      	bne.n	8007f64 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	4a16      	ldr	r2, [pc, #88]	; (8007f98 <HAL_TIM_PWM_Start+0x1c4>)
 8007f3e:	4013      	ands	r3, r2
 8007f40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b06      	cmp	r3, #6
 8007f46:	d016      	beq.n	8007f76 <HAL_TIM_PWM_Start+0x1a2>
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	2380      	movs	r3, #128	; 0x80
 8007f4c:	025b      	lsls	r3, r3, #9
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d011      	beq.n	8007f76 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	681a      	ldr	r2, [r3, #0]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2101      	movs	r1, #1
 8007f5e:	430a      	orrs	r2, r1
 8007f60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	e008      	b.n	8007f76 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2101      	movs	r1, #1
 8007f70:	430a      	orrs	r2, r1
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	e000      	b.n	8007f78 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f76:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007f78:	2300      	movs	r3, #0
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	b004      	add	sp, #16
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	46c0      	nop			; (mov r8, r8)
 8007f84:	40012c00 	.word	0x40012c00
 8007f88:	40014000 	.word	0x40014000
 8007f8c:	40014400 	.word	0x40014400
 8007f90:	40014800 	.word	0x40014800
 8007f94:	40000400 	.word	0x40000400
 8007f98:	00010007 	.word	0x00010007

08007f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	2202      	movs	r2, #2
 8007fac:	4013      	ands	r3, r2
 8007fae:	2b02      	cmp	r3, #2
 8007fb0:	d124      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68db      	ldr	r3, [r3, #12]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	4013      	ands	r3, r2
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d11d      	bne.n	8007ffc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2203      	movs	r2, #3
 8007fc6:	4252      	negs	r2, r2
 8007fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2201      	movs	r2, #1
 8007fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	4013      	ands	r3, r2
 8007fda:	d004      	beq.n	8007fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f000 fad8 	bl	8008594 <HAL_TIM_IC_CaptureCallback>
 8007fe4:	e007      	b.n	8007ff6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	0018      	movs	r0, r3
 8007fea:	f000 facb 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f000 fad7 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2204      	movs	r2, #4
 8008004:	4013      	ands	r3, r2
 8008006:	2b04      	cmp	r3, #4
 8008008:	d125      	bne.n	8008056 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	2204      	movs	r2, #4
 8008012:	4013      	ands	r3, r2
 8008014:	2b04      	cmp	r3, #4
 8008016:	d11e      	bne.n	8008056 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2205      	movs	r2, #5
 800801e:	4252      	negs	r2, r2
 8008020:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699a      	ldr	r2, [r3, #24]
 800802e:	23c0      	movs	r3, #192	; 0xc0
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4013      	ands	r3, r2
 8008034:	d004      	beq.n	8008040 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	0018      	movs	r0, r3
 800803a:	f000 faab 	bl	8008594 <HAL_TIM_IC_CaptureCallback>
 800803e:	e007      	b.n	8008050 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	0018      	movs	r0, r3
 8008044:	f000 fa9e 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	0018      	movs	r0, r3
 800804c:	f000 faaa 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	2208      	movs	r2, #8
 800805e:	4013      	ands	r3, r2
 8008060:	2b08      	cmp	r3, #8
 8008062:	d124      	bne.n	80080ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	68db      	ldr	r3, [r3, #12]
 800806a:	2208      	movs	r2, #8
 800806c:	4013      	ands	r3, r2
 800806e:	2b08      	cmp	r3, #8
 8008070:	d11d      	bne.n	80080ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2209      	movs	r2, #9
 8008078:	4252      	negs	r2, r2
 800807a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2204      	movs	r2, #4
 8008080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	2203      	movs	r2, #3
 800808a:	4013      	ands	r3, r2
 800808c:	d004      	beq.n	8008098 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0018      	movs	r0, r3
 8008092:	f000 fa7f 	bl	8008594 <HAL_TIM_IC_CaptureCallback>
 8008096:	e007      	b.n	80080a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	0018      	movs	r0, r3
 800809c:	f000 fa72 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	0018      	movs	r0, r3
 80080a4:	f000 fa7e 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	2210      	movs	r2, #16
 80080b6:	4013      	ands	r3, r2
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d125      	bne.n	8008108 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2210      	movs	r2, #16
 80080c4:	4013      	ands	r3, r2
 80080c6:	2b10      	cmp	r3, #16
 80080c8:	d11e      	bne.n	8008108 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2211      	movs	r2, #17
 80080d0:	4252      	negs	r2, r2
 80080d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2208      	movs	r2, #8
 80080d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	69da      	ldr	r2, [r3, #28]
 80080e0:	23c0      	movs	r3, #192	; 0xc0
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4013      	ands	r3, r2
 80080e6:	d004      	beq.n	80080f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	0018      	movs	r0, r3
 80080ec:	f000 fa52 	bl	8008594 <HAL_TIM_IC_CaptureCallback>
 80080f0:	e007      	b.n	8008102 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	0018      	movs	r0, r3
 80080f6:	f000 fa45 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	0018      	movs	r0, r3
 80080fe:	f000 fa51 	bl	80085a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	2201      	movs	r2, #1
 8008110:	4013      	ands	r3, r2
 8008112:	2b01      	cmp	r3, #1
 8008114:	d10f      	bne.n	8008136 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2201      	movs	r2, #1
 800811e:	4013      	ands	r3, r2
 8008120:	2b01      	cmp	r3, #1
 8008122:	d108      	bne.n	8008136 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2202      	movs	r2, #2
 800812a:	4252      	negs	r2, r2
 800812c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	0018      	movs	r0, r3
 8008132:	f7fa fd5b 	bl	8002bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2280      	movs	r2, #128	; 0x80
 800813e:	4013      	ands	r3, r2
 8008140:	2b80      	cmp	r3, #128	; 0x80
 8008142:	d10f      	bne.n	8008164 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2280      	movs	r2, #128	; 0x80
 800814c:	4013      	ands	r3, r2
 800814e:	2b80      	cmp	r3, #128	; 0x80
 8008150:	d108      	bne.n	8008164 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2281      	movs	r2, #129	; 0x81
 8008158:	4252      	negs	r2, r2
 800815a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	0018      	movs	r0, r3
 8008160:	f000 ff40 	bl	8008fe4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	691a      	ldr	r2, [r3, #16]
 800816a:	2380      	movs	r3, #128	; 0x80
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	401a      	ands	r2, r3
 8008170:	2380      	movs	r3, #128	; 0x80
 8008172:	005b      	lsls	r3, r3, #1
 8008174:	429a      	cmp	r2, r3
 8008176:	d10e      	bne.n	8008196 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2280      	movs	r2, #128	; 0x80
 8008180:	4013      	ands	r3, r2
 8008182:	2b80      	cmp	r3, #128	; 0x80
 8008184:	d107      	bne.n	8008196 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <HAL_TIM_IRQHandler+0x260>)
 800818c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	0018      	movs	r0, r3
 8008192:	f000 ff2f 	bl	8008ff4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	691b      	ldr	r3, [r3, #16]
 800819c:	2240      	movs	r2, #64	; 0x40
 800819e:	4013      	ands	r3, r2
 80081a0:	2b40      	cmp	r3, #64	; 0x40
 80081a2:	d10f      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	68db      	ldr	r3, [r3, #12]
 80081aa:	2240      	movs	r2, #64	; 0x40
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b40      	cmp	r3, #64	; 0x40
 80081b0:	d108      	bne.n	80081c4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2241      	movs	r2, #65	; 0x41
 80081b8:	4252      	negs	r2, r2
 80081ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	0018      	movs	r0, r3
 80081c0:	f000 f9f8 	bl	80085b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	691b      	ldr	r3, [r3, #16]
 80081ca:	2220      	movs	r2, #32
 80081cc:	4013      	ands	r3, r2
 80081ce:	2b20      	cmp	r3, #32
 80081d0:	d10f      	bne.n	80081f2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68db      	ldr	r3, [r3, #12]
 80081d8:	2220      	movs	r2, #32
 80081da:	4013      	ands	r3, r2
 80081dc:	2b20      	cmp	r3, #32
 80081de:	d108      	bne.n	80081f2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	2221      	movs	r2, #33	; 0x21
 80081e6:	4252      	negs	r2, r2
 80081e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	0018      	movs	r0, r3
 80081ee:	f000 fef1 	bl	8008fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80081f2:	46c0      	nop			; (mov r8, r8)
 80081f4:	46bd      	mov	sp, r7
 80081f6:	b002      	add	sp, #8
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	46c0      	nop			; (mov r8, r8)
 80081fc:	fffffeff 	.word	0xfffffeff

08008200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	223c      	movs	r2, #60	; 0x3c
 8008210:	5c9b      	ldrb	r3, [r3, r2]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d101      	bne.n	800821a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008216:	2302      	movs	r3, #2
 8008218:	e0df      	b.n	80083da <HAL_TIM_PWM_ConfigChannel+0x1da>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	223c      	movs	r2, #60	; 0x3c
 800821e:	2101      	movs	r1, #1
 8008220:	5499      	strb	r1, [r3, r2]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2b14      	cmp	r3, #20
 8008226:	d900      	bls.n	800822a <HAL_TIM_PWM_ConfigChannel+0x2a>
 8008228:	e0d1      	b.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x1ce>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	009a      	lsls	r2, r3, #2
 800822e:	4b6d      	ldr	r3, [pc, #436]	; (80083e4 <HAL_TIM_PWM_ConfigChannel+0x1e4>)
 8008230:	18d3      	adds	r3, r2, r3
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	0011      	movs	r1, r2
 800823e:	0018      	movs	r0, r3
 8008240:	f000 fa36 	bl	80086b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	699a      	ldr	r2, [r3, #24]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2108      	movs	r1, #8
 8008250:	430a      	orrs	r2, r1
 8008252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	699a      	ldr	r2, [r3, #24]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2104      	movs	r1, #4
 8008260:	438a      	bics	r2, r1
 8008262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	6999      	ldr	r1, [r3, #24]
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	691a      	ldr	r2, [r3, #16]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	430a      	orrs	r2, r1
 8008274:	619a      	str	r2, [r3, #24]
      break;
 8008276:	e0ab      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	0011      	movs	r1, r2
 8008280:	0018      	movs	r0, r3
 8008282:	f000 fa9f 	bl	80087c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	699a      	ldr	r2, [r3, #24]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2180      	movs	r1, #128	; 0x80
 8008292:	0109      	lsls	r1, r1, #4
 8008294:	430a      	orrs	r2, r1
 8008296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	699a      	ldr	r2, [r3, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4951      	ldr	r1, [pc, #324]	; (80083e8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80082a4:	400a      	ands	r2, r1
 80082a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	6999      	ldr	r1, [r3, #24]
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	021a      	lsls	r2, r3, #8
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	619a      	str	r2, [r3, #24]
      break;
 80082bc:	e088      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	0011      	movs	r1, r2
 80082c6:	0018      	movs	r0, r3
 80082c8:	f000 fb00 	bl	80088cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	69da      	ldr	r2, [r3, #28]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2108      	movs	r1, #8
 80082d8:	430a      	orrs	r2, r1
 80082da:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69da      	ldr	r2, [r3, #28]
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	2104      	movs	r1, #4
 80082e8:	438a      	bics	r2, r1
 80082ea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	69d9      	ldr	r1, [r3, #28]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	61da      	str	r2, [r3, #28]
      break;
 80082fe:	e067      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	0011      	movs	r1, r2
 8008308:	0018      	movs	r0, r3
 800830a:	f000 fb67 	bl	80089dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	69da      	ldr	r2, [r3, #28]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2180      	movs	r1, #128	; 0x80
 800831a:	0109      	lsls	r1, r1, #4
 800831c:	430a      	orrs	r2, r1
 800831e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	69da      	ldr	r2, [r3, #28]
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	492f      	ldr	r1, [pc, #188]	; (80083e8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 800832c:	400a      	ands	r2, r1
 800832e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	69d9      	ldr	r1, [r3, #28]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	021a      	lsls	r2, r3, #8
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	430a      	orrs	r2, r1
 8008342:	61da      	str	r2, [r3, #28]
      break;
 8008344:	e044      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68ba      	ldr	r2, [r7, #8]
 800834c:	0011      	movs	r1, r2
 800834e:	0018      	movs	r0, r3
 8008350:	f000 fbae 	bl	8008ab0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2108      	movs	r1, #8
 8008360:	430a      	orrs	r2, r1
 8008362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2104      	movs	r1, #4
 8008370:	438a      	bics	r2, r1
 8008372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008386:	e023      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68ba      	ldr	r2, [r7, #8]
 800838e:	0011      	movs	r1, r2
 8008390:	0018      	movs	r0, r3
 8008392:	f000 fbed 	bl	8008b70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2180      	movs	r1, #128	; 0x80
 80083a2:	0109      	lsls	r1, r1, #4
 80083a4:	430a      	orrs	r2, r1
 80083a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	490d      	ldr	r1, [pc, #52]	; (80083e8 <HAL_TIM_PWM_ConfigChannel+0x1e8>)
 80083b4:	400a      	ands	r2, r1
 80083b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	021a      	lsls	r2, r3, #8
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	430a      	orrs	r2, r1
 80083ca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80083cc:	e000      	b.n	80083d0 <HAL_TIM_PWM_ConfigChannel+0x1d0>
    }

    default:
      break;
 80083ce:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	223c      	movs	r2, #60	; 0x3c
 80083d4:	2100      	movs	r1, #0
 80083d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	0018      	movs	r0, r3
 80083dc:	46bd      	mov	sp, r7
 80083de:	b004      	add	sp, #16
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	46c0      	nop			; (mov r8, r8)
 80083e4:	08009510 	.word	0x08009510
 80083e8:	fffffbff 	.word	0xfffffbff

080083ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	223c      	movs	r2, #60	; 0x3c
 80083fa:	5c9b      	ldrb	r3, [r3, r2]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d101      	bne.n	8008404 <HAL_TIM_ConfigClockSource+0x18>
 8008400:	2302      	movs	r3, #2
 8008402:	e0b7      	b.n	8008574 <HAL_TIM_ConfigClockSource+0x188>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	223c      	movs	r2, #60	; 0x3c
 8008408:	2101      	movs	r1, #1
 800840a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	223d      	movs	r2, #61	; 0x3d
 8008410:	2102      	movs	r1, #2
 8008412:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	4a57      	ldr	r2, [pc, #348]	; (800857c <HAL_TIM_ConfigClockSource+0x190>)
 8008420:	4013      	ands	r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	4a56      	ldr	r2, [pc, #344]	; (8008580 <HAL_TIM_ConfigClockSource+0x194>)
 8008428:	4013      	ands	r3, r2
 800842a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2280      	movs	r2, #128	; 0x80
 800843a:	0192      	lsls	r2, r2, #6
 800843c:	4293      	cmp	r3, r2
 800843e:	d040      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0xd6>
 8008440:	2280      	movs	r2, #128	; 0x80
 8008442:	0192      	lsls	r2, r2, #6
 8008444:	4293      	cmp	r3, r2
 8008446:	d900      	bls.n	800844a <HAL_TIM_ConfigClockSource+0x5e>
 8008448:	e088      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 800844a:	2280      	movs	r2, #128	; 0x80
 800844c:	0152      	lsls	r2, r2, #5
 800844e:	4293      	cmp	r3, r2
 8008450:	d100      	bne.n	8008454 <HAL_TIM_ConfigClockSource+0x68>
 8008452:	e085      	b.n	8008560 <HAL_TIM_ConfigClockSource+0x174>
 8008454:	2280      	movs	r2, #128	; 0x80
 8008456:	0152      	lsls	r2, r2, #5
 8008458:	4293      	cmp	r3, r2
 800845a:	d900      	bls.n	800845e <HAL_TIM_ConfigClockSource+0x72>
 800845c:	e07e      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 800845e:	2b70      	cmp	r3, #112	; 0x70
 8008460:	d018      	beq.n	8008494 <HAL_TIM_ConfigClockSource+0xa8>
 8008462:	d900      	bls.n	8008466 <HAL_TIM_ConfigClockSource+0x7a>
 8008464:	e07a      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 8008466:	2b60      	cmp	r3, #96	; 0x60
 8008468:	d04f      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x11e>
 800846a:	d900      	bls.n	800846e <HAL_TIM_ConfigClockSource+0x82>
 800846c:	e076      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 800846e:	2b50      	cmp	r3, #80	; 0x50
 8008470:	d03b      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0xfe>
 8008472:	d900      	bls.n	8008476 <HAL_TIM_ConfigClockSource+0x8a>
 8008474:	e072      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 8008476:	2b40      	cmp	r3, #64	; 0x40
 8008478:	d057      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x13e>
 800847a:	d900      	bls.n	800847e <HAL_TIM_ConfigClockSource+0x92>
 800847c:	e06e      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 800847e:	2b30      	cmp	r3, #48	; 0x30
 8008480:	d063      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15e>
 8008482:	d86b      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 8008484:	2b20      	cmp	r3, #32
 8008486:	d060      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15e>
 8008488:	d868      	bhi.n	800855c <HAL_TIM_ConfigClockSource+0x170>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d05d      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15e>
 800848e:	2b10      	cmp	r3, #16
 8008490:	d05b      	beq.n	800854a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008492:	e063      	b.n	800855c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6818      	ldr	r0, [r3, #0]
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6899      	ldr	r1, [r3, #8]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	f000 fc44 	bl	8008d30 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2277      	movs	r2, #119	; 0x77
 80084b4:	4313      	orrs	r3, r2
 80084b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	68fa      	ldr	r2, [r7, #12]
 80084be:	609a      	str	r2, [r3, #8]
      break;
 80084c0:	e04f      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6899      	ldr	r1, [r3, #8]
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	685a      	ldr	r2, [r3, #4]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	68db      	ldr	r3, [r3, #12]
 80084d2:	f000 fc2d 	bl	8008d30 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	689a      	ldr	r2, [r3, #8]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2180      	movs	r1, #128	; 0x80
 80084e2:	01c9      	lsls	r1, r1, #7
 80084e4:	430a      	orrs	r2, r1
 80084e6:	609a      	str	r2, [r3, #8]
      break;
 80084e8:	e03b      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	001a      	movs	r2, r3
 80084f8:	f000 fb9e 	bl	8008c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2150      	movs	r1, #80	; 0x50
 8008502:	0018      	movs	r0, r3
 8008504:	f000 fbf8 	bl	8008cf8 <TIM_ITRx_SetConfig>
      break;
 8008508:	e02b      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	001a      	movs	r2, r3
 8008518:	f000 fbbc 	bl	8008c94 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2160      	movs	r1, #96	; 0x60
 8008522:	0018      	movs	r0, r3
 8008524:	f000 fbe8 	bl	8008cf8 <TIM_ITRx_SetConfig>
      break;
 8008528:	e01b      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6818      	ldr	r0, [r3, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6859      	ldr	r1, [r3, #4]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	68db      	ldr	r3, [r3, #12]
 8008536:	001a      	movs	r2, r3
 8008538:	f000 fb7e 	bl	8008c38 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2140      	movs	r1, #64	; 0x40
 8008542:	0018      	movs	r0, r3
 8008544:	f000 fbd8 	bl	8008cf8 <TIM_ITRx_SetConfig>
      break;
 8008548:	e00b      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	0019      	movs	r1, r3
 8008554:	0010      	movs	r0, r2
 8008556:	f000 fbcf 	bl	8008cf8 <TIM_ITRx_SetConfig>
        break;
 800855a:	e002      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800855c:	46c0      	nop			; (mov r8, r8)
 800855e:	e000      	b.n	8008562 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8008560:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	223d      	movs	r2, #61	; 0x3d
 8008566:	2101      	movs	r1, #1
 8008568:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	223c      	movs	r2, #60	; 0x3c
 800856e:	2100      	movs	r1, #0
 8008570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	0018      	movs	r0, r3
 8008576:	46bd      	mov	sp, r7
 8008578:	b004      	add	sp, #16
 800857a:	bd80      	pop	{r7, pc}
 800857c:	ffceff88 	.word	0xffceff88
 8008580:	ffff00ff 	.word	0xffff00ff

08008584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800858c:	46c0      	nop			; (mov r8, r8)
 800858e:	46bd      	mov	sp, r7
 8008590:	b002      	add	sp, #8
 8008592:	bd80      	pop	{r7, pc}

08008594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800859c:	46c0      	nop			; (mov r8, r8)
 800859e:	46bd      	mov	sp, r7
 80085a0:	b002      	add	sp, #8
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085ac:	46c0      	nop			; (mov r8, r8)
 80085ae:	46bd      	mov	sp, r7
 80085b0:	b002      	add	sp, #8
 80085b2:	bd80      	pop	{r7, pc}

080085b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b082      	sub	sp, #8
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085bc:	46c0      	nop			; (mov r8, r8)
 80085be:	46bd      	mov	sp, r7
 80085c0:	b002      	add	sp, #8
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4a2f      	ldr	r2, [pc, #188]	; (8008694 <TIM_Base_SetConfig+0xd0>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d003      	beq.n	80085e4 <TIM_Base_SetConfig+0x20>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4a2e      	ldr	r2, [pc, #184]	; (8008698 <TIM_Base_SetConfig+0xd4>)
 80085e0:	4293      	cmp	r3, r2
 80085e2:	d108      	bne.n	80085f6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2270      	movs	r2, #112	; 0x70
 80085e8:	4393      	bics	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	68fa      	ldr	r2, [r7, #12]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a26      	ldr	r2, [pc, #152]	; (8008694 <TIM_Base_SetConfig+0xd0>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d013      	beq.n	8008626 <TIM_Base_SetConfig+0x62>
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4a25      	ldr	r2, [pc, #148]	; (8008698 <TIM_Base_SetConfig+0xd4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d00f      	beq.n	8008626 <TIM_Base_SetConfig+0x62>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	4a24      	ldr	r2, [pc, #144]	; (800869c <TIM_Base_SetConfig+0xd8>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00b      	beq.n	8008626 <TIM_Base_SetConfig+0x62>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	4a23      	ldr	r2, [pc, #140]	; (80086a0 <TIM_Base_SetConfig+0xdc>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d007      	beq.n	8008626 <TIM_Base_SetConfig+0x62>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	4a22      	ldr	r2, [pc, #136]	; (80086a4 <TIM_Base_SetConfig+0xe0>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d003      	beq.n	8008626 <TIM_Base_SetConfig+0x62>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	4a21      	ldr	r2, [pc, #132]	; (80086a8 <TIM_Base_SetConfig+0xe4>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d108      	bne.n	8008638 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	4a20      	ldr	r2, [pc, #128]	; (80086ac <TIM_Base_SetConfig+0xe8>)
 800862a:	4013      	ands	r3, r2
 800862c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	4313      	orrs	r3, r2
 8008636:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2280      	movs	r2, #128	; 0x80
 800863c:	4393      	bics	r3, r2
 800863e:	001a      	movs	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	695b      	ldr	r3, [r3, #20]
 8008644:	4313      	orrs	r3, r2
 8008646:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	689a      	ldr	r2, [r3, #8]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	4a0c      	ldr	r2, [pc, #48]	; (8008694 <TIM_Base_SetConfig+0xd0>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00b      	beq.n	800867e <TIM_Base_SetConfig+0xba>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	4a0d      	ldr	r2, [pc, #52]	; (80086a0 <TIM_Base_SetConfig+0xdc>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <TIM_Base_SetConfig+0xba>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a0c      	ldr	r2, [pc, #48]	; (80086a4 <TIM_Base_SetConfig+0xe0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_Base_SetConfig+0xba>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a0b      	ldr	r2, [pc, #44]	; (80086a8 <TIM_Base_SetConfig+0xe4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d103      	bne.n	8008686 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	691a      	ldr	r2, [r3, #16]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2201      	movs	r2, #1
 800868a:	615a      	str	r2, [r3, #20]
}
 800868c:	46c0      	nop			; (mov r8, r8)
 800868e:	46bd      	mov	sp, r7
 8008690:	b004      	add	sp, #16
 8008692:	bd80      	pop	{r7, pc}
 8008694:	40012c00 	.word	0x40012c00
 8008698:	40000400 	.word	0x40000400
 800869c:	40002000 	.word	0x40002000
 80086a0:	40014000 	.word	0x40014000
 80086a4:	40014400 	.word	0x40014400
 80086a8:	40014800 	.word	0x40014800
 80086ac:	fffffcff 	.word	0xfffffcff

080086b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b086      	sub	sp, #24
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	2201      	movs	r2, #1
 80086c0:	4393      	bics	r3, r2
 80086c2:	001a      	movs	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a1b      	ldr	r3, [r3, #32]
 80086cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	699b      	ldr	r3, [r3, #24]
 80086d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a32      	ldr	r2, [pc, #200]	; (80087a8 <TIM_OC1_SetConfig+0xf8>)
 80086de:	4013      	ands	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2203      	movs	r2, #3
 80086e6:	4393      	bics	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	4313      	orrs	r3, r2
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2202      	movs	r2, #2
 80086f8:	4393      	bics	r3, r2
 80086fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a28      	ldr	r2, [pc, #160]	; (80087ac <TIM_OC1_SetConfig+0xfc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d00b      	beq.n	8008726 <TIM_OC1_SetConfig+0x76>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a27      	ldr	r2, [pc, #156]	; (80087b0 <TIM_OC1_SetConfig+0x100>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d007      	beq.n	8008726 <TIM_OC1_SetConfig+0x76>
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	4a26      	ldr	r2, [pc, #152]	; (80087b4 <TIM_OC1_SetConfig+0x104>)
 800871a:	4293      	cmp	r3, r2
 800871c:	d003      	beq.n	8008726 <TIM_OC1_SetConfig+0x76>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	4a25      	ldr	r2, [pc, #148]	; (80087b8 <TIM_OC1_SetConfig+0x108>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d10c      	bne.n	8008740 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	2208      	movs	r2, #8
 800872a:	4393      	bics	r3, r2
 800872c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	2204      	movs	r2, #4
 800873c:	4393      	bics	r3, r2
 800873e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a1a      	ldr	r2, [pc, #104]	; (80087ac <TIM_OC1_SetConfig+0xfc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_OC1_SetConfig+0xb0>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a19      	ldr	r2, [pc, #100]	; (80087b0 <TIM_OC1_SetConfig+0x100>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC1_SetConfig+0xb0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a18      	ldr	r2, [pc, #96]	; (80087b4 <TIM_OC1_SetConfig+0x104>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC1_SetConfig+0xb0>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a17      	ldr	r2, [pc, #92]	; (80087b8 <TIM_OC1_SetConfig+0x108>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d111      	bne.n	8008784 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	4a16      	ldr	r2, [pc, #88]	; (80087bc <TIM_OC1_SetConfig+0x10c>)
 8008764:	4013      	ands	r3, r2
 8008766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	4a15      	ldr	r2, [pc, #84]	; (80087c0 <TIM_OC1_SetConfig+0x110>)
 800876c:	4013      	ands	r3, r2
 800876e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	693a      	ldr	r2, [r7, #16]
 8008776:	4313      	orrs	r3, r2
 8008778:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	699b      	ldr	r3, [r3, #24]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	693a      	ldr	r2, [r7, #16]
 8008788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	697a      	ldr	r2, [r7, #20]
 800879c:	621a      	str	r2, [r3, #32]
}
 800879e:	46c0      	nop			; (mov r8, r8)
 80087a0:	46bd      	mov	sp, r7
 80087a2:	b006      	add	sp, #24
 80087a4:	bd80      	pop	{r7, pc}
 80087a6:	46c0      	nop			; (mov r8, r8)
 80087a8:	fffeff8f 	.word	0xfffeff8f
 80087ac:	40012c00 	.word	0x40012c00
 80087b0:	40014000 	.word	0x40014000
 80087b4:	40014400 	.word	0x40014400
 80087b8:	40014800 	.word	0x40014800
 80087bc:	fffffeff 	.word	0xfffffeff
 80087c0:	fffffdff 	.word	0xfffffdff

080087c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6a1b      	ldr	r3, [r3, #32]
 80087d2:	2210      	movs	r2, #16
 80087d4:	4393      	bics	r3, r2
 80087d6:	001a      	movs	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a1b      	ldr	r3, [r3, #32]
 80087e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	699b      	ldr	r3, [r3, #24]
 80087ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	4a2e      	ldr	r2, [pc, #184]	; (80088ac <TIM_OC2_SetConfig+0xe8>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	4a2d      	ldr	r2, [pc, #180]	; (80088b0 <TIM_OC2_SetConfig+0xec>)
 80087fa:	4013      	ands	r3, r2
 80087fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	021b      	lsls	r3, r3, #8
 8008804:	68fa      	ldr	r2, [r7, #12]
 8008806:	4313      	orrs	r3, r2
 8008808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2220      	movs	r2, #32
 800880e:	4393      	bics	r3, r2
 8008810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	011b      	lsls	r3, r3, #4
 8008818:	697a      	ldr	r2, [r7, #20]
 800881a:	4313      	orrs	r3, r2
 800881c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a24      	ldr	r2, [pc, #144]	; (80088b4 <TIM_OC2_SetConfig+0xf0>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d10d      	bne.n	8008842 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	2280      	movs	r2, #128	; 0x80
 800882a:	4393      	bics	r3, r2
 800882c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	011b      	lsls	r3, r3, #4
 8008834:	697a      	ldr	r2, [r7, #20]
 8008836:	4313      	orrs	r3, r2
 8008838:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800883a:	697b      	ldr	r3, [r7, #20]
 800883c:	2240      	movs	r2, #64	; 0x40
 800883e:	4393      	bics	r3, r2
 8008840:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a1b      	ldr	r2, [pc, #108]	; (80088b4 <TIM_OC2_SetConfig+0xf0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <TIM_OC2_SetConfig+0x9e>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a1a      	ldr	r2, [pc, #104]	; (80088b8 <TIM_OC2_SetConfig+0xf4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <TIM_OC2_SetConfig+0x9e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a19      	ldr	r2, [pc, #100]	; (80088bc <TIM_OC2_SetConfig+0xf8>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_OC2_SetConfig+0x9e>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a18      	ldr	r2, [pc, #96]	; (80088c0 <TIM_OC2_SetConfig+0xfc>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d113      	bne.n	800888a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4a17      	ldr	r2, [pc, #92]	; (80088c4 <TIM_OC2_SetConfig+0x100>)
 8008866:	4013      	ands	r3, r2
 8008868:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	4a16      	ldr	r2, [pc, #88]	; (80088c8 <TIM_OC2_SetConfig+0x104>)
 800886e:	4013      	ands	r3, r2
 8008870:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	693a      	ldr	r2, [r7, #16]
 800887a:	4313      	orrs	r3, r2
 800887c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	699b      	ldr	r3, [r3, #24]
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	4313      	orrs	r3, r2
 8008888:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685a      	ldr	r2, [r3, #4]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	46c0      	nop			; (mov r8, r8)
 80088a6:	46bd      	mov	sp, r7
 80088a8:	b006      	add	sp, #24
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	feff8fff 	.word	0xfeff8fff
 80088b0:	fffffcff 	.word	0xfffffcff
 80088b4:	40012c00 	.word	0x40012c00
 80088b8:	40014000 	.word	0x40014000
 80088bc:	40014400 	.word	0x40014400
 80088c0:	40014800 	.word	0x40014800
 80088c4:	fffffbff 	.word	0xfffffbff
 80088c8:	fffff7ff 	.word	0xfffff7ff

080088cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b086      	sub	sp, #24
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	4a35      	ldr	r2, [pc, #212]	; (80089b0 <TIM_OC3_SetConfig+0xe4>)
 80088dc:	401a      	ands	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	69db      	ldr	r3, [r3, #28]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4a2f      	ldr	r2, [pc, #188]	; (80089b4 <TIM_OC3_SetConfig+0xe8>)
 80088f8:	4013      	ands	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2203      	movs	r2, #3
 8008900:	4393      	bics	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4a29      	ldr	r2, [pc, #164]	; (80089b8 <TIM_OC3_SetConfig+0xec>)
 8008912:	4013      	ands	r3, r2
 8008914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	021b      	lsls	r3, r3, #8
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	4313      	orrs	r3, r2
 8008920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a25      	ldr	r2, [pc, #148]	; (80089bc <TIM_OC3_SetConfig+0xf0>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d10d      	bne.n	8008946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	4a24      	ldr	r2, [pc, #144]	; (80089c0 <TIM_OC3_SetConfig+0xf4>)
 800892e:	4013      	ands	r3, r2
 8008930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	021b      	lsls	r3, r3, #8
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	4a20      	ldr	r2, [pc, #128]	; (80089c4 <TIM_OC3_SetConfig+0xf8>)
 8008942:	4013      	ands	r3, r2
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a1c      	ldr	r2, [pc, #112]	; (80089bc <TIM_OC3_SetConfig+0xf0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d00b      	beq.n	8008966 <TIM_OC3_SetConfig+0x9a>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a1d      	ldr	r2, [pc, #116]	; (80089c8 <TIM_OC3_SetConfig+0xfc>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d007      	beq.n	8008966 <TIM_OC3_SetConfig+0x9a>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <TIM_OC3_SetConfig+0x100>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d003      	beq.n	8008966 <TIM_OC3_SetConfig+0x9a>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <TIM_OC3_SetConfig+0x104>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d113      	bne.n	800898e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <TIM_OC3_SetConfig+0x108>)
 800896a:	4013      	ands	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	4a19      	ldr	r2, [pc, #100]	; (80089d8 <TIM_OC3_SetConfig+0x10c>)
 8008972:	4013      	ands	r3, r2
 8008974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	011b      	lsls	r3, r3, #4
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	699b      	ldr	r3, [r3, #24]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	621a      	str	r2, [r3, #32]
}
 80089a8:	46c0      	nop			; (mov r8, r8)
 80089aa:	46bd      	mov	sp, r7
 80089ac:	b006      	add	sp, #24
 80089ae:	bd80      	pop	{r7, pc}
 80089b0:	fffffeff 	.word	0xfffffeff
 80089b4:	fffeff8f 	.word	0xfffeff8f
 80089b8:	fffffdff 	.word	0xfffffdff
 80089bc:	40012c00 	.word	0x40012c00
 80089c0:	fffff7ff 	.word	0xfffff7ff
 80089c4:	fffffbff 	.word	0xfffffbff
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800
 80089d4:	ffffefff 	.word	0xffffefff
 80089d8:	ffffdfff 	.word	0xffffdfff

080089dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b086      	sub	sp, #24
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	4a28      	ldr	r2, [pc, #160]	; (8008a8c <TIM_OC4_SetConfig+0xb0>)
 80089ec:	401a      	ands	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69db      	ldr	r3, [r3, #28]
 8008a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <TIM_OC4_SetConfig+0xb4>)
 8008a08:	4013      	ands	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	4a21      	ldr	r2, [pc, #132]	; (8008a94 <TIM_OC4_SetConfig+0xb8>)
 8008a10:	4013      	ands	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	4a1d      	ldr	r2, [pc, #116]	; (8008a98 <TIM_OC4_SetConfig+0xbc>)
 8008a24:	4013      	ands	r3, r2
 8008a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	689b      	ldr	r3, [r3, #8]
 8008a2c:	031b      	lsls	r3, r3, #12
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a19      	ldr	r2, [pc, #100]	; (8008a9c <TIM_OC4_SetConfig+0xc0>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d00b      	beq.n	8008a54 <TIM_OC4_SetConfig+0x78>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4a18      	ldr	r2, [pc, #96]	; (8008aa0 <TIM_OC4_SetConfig+0xc4>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d007      	beq.n	8008a54 <TIM_OC4_SetConfig+0x78>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	4a17      	ldr	r2, [pc, #92]	; (8008aa4 <TIM_OC4_SetConfig+0xc8>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d003      	beq.n	8008a54 <TIM_OC4_SetConfig+0x78>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	4a16      	ldr	r2, [pc, #88]	; (8008aa8 <TIM_OC4_SetConfig+0xcc>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d109      	bne.n	8008a68 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	4a15      	ldr	r2, [pc, #84]	; (8008aac <TIM_OC4_SetConfig+0xd0>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	019b      	lsls	r3, r3, #6
 8008a62:	697a      	ldr	r2, [r7, #20]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	693a      	ldr	r2, [r7, #16]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	46c0      	nop			; (mov r8, r8)
 8008a84:	46bd      	mov	sp, r7
 8008a86:	b006      	add	sp, #24
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	46c0      	nop			; (mov r8, r8)
 8008a8c:	ffffefff 	.word	0xffffefff
 8008a90:	feff8fff 	.word	0xfeff8fff
 8008a94:	fffffcff 	.word	0xfffffcff
 8008a98:	ffffdfff 	.word	0xffffdfff
 8008a9c:	40012c00 	.word	0x40012c00
 8008aa0:	40014000 	.word	0x40014000
 8008aa4:	40014400 	.word	0x40014400
 8008aa8:	40014800 	.word	0x40014800
 8008aac:	ffffbfff 	.word	0xffffbfff

08008ab0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b086      	sub	sp, #24
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a1b      	ldr	r3, [r3, #32]
 8008abe:	4a25      	ldr	r2, [pc, #148]	; (8008b54 <TIM_OC5_SetConfig+0xa4>)
 8008ac0:	401a      	ands	r2, r3
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	4a1f      	ldr	r2, [pc, #124]	; (8008b58 <TIM_OC5_SetConfig+0xa8>)
 8008adc:	4013      	ands	r3, r2
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4a1b      	ldr	r2, [pc, #108]	; (8008b5c <TIM_OC5_SetConfig+0xac>)
 8008aee:	4013      	ands	r3, r2
 8008af0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	041b      	lsls	r3, r3, #16
 8008af8:	693a      	ldr	r2, [r7, #16]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a17      	ldr	r2, [pc, #92]	; (8008b60 <TIM_OC5_SetConfig+0xb0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d00b      	beq.n	8008b1e <TIM_OC5_SetConfig+0x6e>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a16      	ldr	r2, [pc, #88]	; (8008b64 <TIM_OC5_SetConfig+0xb4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d007      	beq.n	8008b1e <TIM_OC5_SetConfig+0x6e>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a15      	ldr	r2, [pc, #84]	; (8008b68 <TIM_OC5_SetConfig+0xb8>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d003      	beq.n	8008b1e <TIM_OC5_SetConfig+0x6e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a14      	ldr	r2, [pc, #80]	; (8008b6c <TIM_OC5_SetConfig+0xbc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d109      	bne.n	8008b32 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	4a0c      	ldr	r2, [pc, #48]	; (8008b54 <TIM_OC5_SetConfig+0xa4>)
 8008b22:	4013      	ands	r3, r2
 8008b24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	695b      	ldr	r3, [r3, #20]
 8008b2a:	021b      	lsls	r3, r3, #8
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	46c0      	nop			; (mov r8, r8)
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	b006      	add	sp, #24
 8008b52:	bd80      	pop	{r7, pc}
 8008b54:	fffeffff 	.word	0xfffeffff
 8008b58:	fffeff8f 	.word	0xfffeff8f
 8008b5c:	fffdffff 	.word	0xfffdffff
 8008b60:	40012c00 	.word	0x40012c00
 8008b64:	40014000 	.word	0x40014000
 8008b68:	40014400 	.word	0x40014400
 8008b6c:	40014800 	.word	0x40014800

08008b70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b086      	sub	sp, #24
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	4a26      	ldr	r2, [pc, #152]	; (8008c18 <TIM_OC6_SetConfig+0xa8>)
 8008b80:	401a      	ands	r2, r3
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4a20      	ldr	r2, [pc, #128]	; (8008c1c <TIM_OC6_SetConfig+0xac>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	021b      	lsls	r3, r3, #8
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	4a1c      	ldr	r2, [pc, #112]	; (8008c20 <TIM_OC6_SetConfig+0xb0>)
 8008bb0:	4013      	ands	r3, r2
 8008bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	051b      	lsls	r3, r3, #20
 8008bba:	693a      	ldr	r2, [r7, #16]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	4a18      	ldr	r2, [pc, #96]	; (8008c24 <TIM_OC6_SetConfig+0xb4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d00b      	beq.n	8008be0 <TIM_OC6_SetConfig+0x70>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a17      	ldr	r2, [pc, #92]	; (8008c28 <TIM_OC6_SetConfig+0xb8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d007      	beq.n	8008be0 <TIM_OC6_SetConfig+0x70>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a16      	ldr	r2, [pc, #88]	; (8008c2c <TIM_OC6_SetConfig+0xbc>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d003      	beq.n	8008be0 <TIM_OC6_SetConfig+0x70>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a15      	ldr	r2, [pc, #84]	; (8008c30 <TIM_OC6_SetConfig+0xc0>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d109      	bne.n	8008bf4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	4a14      	ldr	r2, [pc, #80]	; (8008c34 <TIM_OC6_SetConfig+0xc4>)
 8008be4:	4013      	ands	r3, r2
 8008be6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	695b      	ldr	r3, [r3, #20]
 8008bec:	029b      	lsls	r3, r3, #10
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685a      	ldr	r2, [r3, #4]
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	693a      	ldr	r2, [r7, #16]
 8008c0c:	621a      	str	r2, [r3, #32]
}
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	46bd      	mov	sp, r7
 8008c12:	b006      	add	sp, #24
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	46c0      	nop			; (mov r8, r8)
 8008c18:	ffefffff 	.word	0xffefffff
 8008c1c:	feff8fff 	.word	0xfeff8fff
 8008c20:	ffdfffff 	.word	0xffdfffff
 8008c24:	40012c00 	.word	0x40012c00
 8008c28:	40014000 	.word	0x40014000
 8008c2c:	40014400 	.word	0x40014400
 8008c30:	40014800 	.word	0x40014800
 8008c34:	fffbffff 	.word	0xfffbffff

08008c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	2201      	movs	r2, #1
 8008c50:	4393      	bics	r3, r2
 8008c52:	001a      	movs	r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	22f0      	movs	r2, #240	; 0xf0
 8008c62:	4393      	bics	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	011b      	lsls	r3, r3, #4
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	220a      	movs	r2, #10
 8008c74:	4393      	bics	r3, r2
 8008c76:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	621a      	str	r2, [r3, #32]
}
 8008c8c:	46c0      	nop			; (mov r8, r8)
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	b006      	add	sp, #24
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b086      	sub	sp, #24
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	2210      	movs	r2, #16
 8008ca6:	4393      	bics	r3, r2
 8008ca8:	001a      	movs	r2, r3
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	4a0d      	ldr	r2, [pc, #52]	; (8008cf4 <TIM_TI2_ConfigInputStage+0x60>)
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	031b      	lsls	r3, r3, #12
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	22a0      	movs	r2, #160	; 0xa0
 8008cd0:	4393      	bics	r3, r2
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	46c0      	nop			; (mov r8, r8)
 8008cec:	46bd      	mov	sp, r7
 8008cee:	b006      	add	sp, #24
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	46c0      	nop			; (mov r8, r8)
 8008cf4:	ffff0fff 	.word	0xffff0fff

08008cf8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	4a08      	ldr	r2, [pc, #32]	; (8008d2c <TIM_ITRx_SetConfig+0x34>)
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d10:	683a      	ldr	r2, [r7, #0]
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	2207      	movs	r2, #7
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	68fa      	ldr	r2, [r7, #12]
 8008d20:	609a      	str	r2, [r3, #8]
}
 8008d22:	46c0      	nop			; (mov r8, r8)
 8008d24:	46bd      	mov	sp, r7
 8008d26:	b004      	add	sp, #16
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	46c0      	nop			; (mov r8, r8)
 8008d2c:	ffcfff8f 	.word	0xffcfff8f

08008d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b086      	sub	sp, #24
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	60f8      	str	r0, [r7, #12]
 8008d38:	60b9      	str	r1, [r7, #8]
 8008d3a:	607a      	str	r2, [r7, #4]
 8008d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	4a09      	ldr	r2, [pc, #36]	; (8008d6c <TIM_ETR_SetConfig+0x3c>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	021a      	lsls	r2, r3, #8
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	697a      	ldr	r2, [r7, #20]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	697a      	ldr	r2, [r7, #20]
 8008d62:	609a      	str	r2, [r3, #8]
}
 8008d64:	46c0      	nop			; (mov r8, r8)
 8008d66:	46bd      	mov	sp, r7
 8008d68:	b006      	add	sp, #24
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	ffff00ff 	.word	0xffff00ff

08008d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	60f8      	str	r0, [r7, #12]
 8008d78:	60b9      	str	r1, [r7, #8]
 8008d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	221f      	movs	r2, #31
 8008d80:	4013      	ands	r3, r2
 8008d82:	2201      	movs	r2, #1
 8008d84:	409a      	lsls	r2, r3
 8008d86:	0013      	movs	r3, r2
 8008d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	43d2      	mvns	r2, r2
 8008d92:	401a      	ands	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	6a1a      	ldr	r2, [r3, #32]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	211f      	movs	r1, #31
 8008da0:	400b      	ands	r3, r1
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	4099      	lsls	r1, r3
 8008da6:	000b      	movs	r3, r1
 8008da8:	431a      	orrs	r2, r3
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	621a      	str	r2, [r3, #32]
}
 8008dae:	46c0      	nop			; (mov r8, r8)
 8008db0:	46bd      	mov	sp, r7
 8008db2:	b006      	add	sp, #24
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	223c      	movs	r2, #60	; 0x3c
 8008dc6:	5c9b      	ldrb	r3, [r3, r2]
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d101      	bne.n	8008dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008dcc:	2302      	movs	r3, #2
 8008dce:	e04f      	b.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	223c      	movs	r2, #60	; 0x3c
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	223d      	movs	r2, #61	; 0x3d
 8008ddc:	2102      	movs	r1, #2
 8008dde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a20      	ldr	r2, [pc, #128]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d108      	bne.n	8008e0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a1f      	ldr	r2, [pc, #124]	; (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008dfe:	4013      	ands	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	68fa      	ldr	r2, [r7, #12]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2270      	movs	r2, #112	; 0x70
 8008e10:	4393      	bics	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	68fa      	ldr	r2, [r7, #12]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	4a13      	ldr	r2, [pc, #76]	; (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d009      	beq.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d004      	beq.n	8008e44 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a11      	ldr	r2, [pc, #68]	; (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d10c      	bne.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2280      	movs	r2, #128	; 0x80
 8008e48:	4393      	bics	r3, r2
 8008e4a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	68ba      	ldr	r2, [r7, #8]
 8008e52:	4313      	orrs	r3, r2
 8008e54:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68ba      	ldr	r2, [r7, #8]
 8008e5c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	223d      	movs	r2, #61	; 0x3d
 8008e62:	2101      	movs	r1, #1
 8008e64:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	223c      	movs	r2, #60	; 0x3c
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008e6e:	2300      	movs	r3, #0
}
 8008e70:	0018      	movs	r0, r3
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b004      	add	sp, #16
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	40012c00 	.word	0x40012c00
 8008e7c:	ff0fffff 	.word	0xff0fffff
 8008e80:	40000400 	.word	0x40000400
 8008e84:	40014000 	.word	0x40014000

08008e88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	223c      	movs	r2, #60	; 0x3c
 8008e9a:	5c9b      	ldrb	r3, [r3, r2]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e079      	b.n	8008f98 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	223c      	movs	r2, #60	; 0x3c
 8008ea8:	2101      	movs	r1, #1
 8008eaa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	22ff      	movs	r2, #255	; 0xff
 8008eb0:	4393      	bics	r3, r2
 8008eb2:	001a      	movs	r2, r3
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4a38      	ldr	r2, [pc, #224]	; (8008fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8008ec0:	401a      	ands	r2, r3
 8008ec2:	683b      	ldr	r3, [r7, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	4a35      	ldr	r2, [pc, #212]	; (8008fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008ece:	401a      	ands	r2, r3
 8008ed0:	683b      	ldr	r3, [r7, #0]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	4a33      	ldr	r2, [pc, #204]	; (8008fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008edc:	401a      	ands	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4a30      	ldr	r2, [pc, #192]	; (8008fac <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008eea:	401a      	ands	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	4a2e      	ldr	r2, [pc, #184]	; (8008fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8008ef8:	401a      	ands	r2, r3
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	695b      	ldr	r3, [r3, #20]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	4a2b      	ldr	r2, [pc, #172]	; (8008fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8008f06:	401a      	ands	r2, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4a29      	ldr	r2, [pc, #164]	; (8008fb8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8008f14:	401a      	ands	r2, r3
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	699b      	ldr	r3, [r3, #24]
 8008f1a:	041b      	lsls	r3, r3, #16
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a25      	ldr	r2, [pc, #148]	; (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d106      	bne.n	8008f38 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4a24      	ldr	r2, [pc, #144]	; (8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008f2e:	401a      	ands	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4a1f      	ldr	r2, [pc, #124]	; (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d121      	bne.n	8008f86 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	4a1f      	ldr	r2, [pc, #124]	; (8008fc4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008f46:	401a      	ands	r2, r3
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f4c:	051b      	lsls	r3, r3, #20
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	4a1c      	ldr	r2, [pc, #112]	; (8008fc8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8008f56:	401a      	ands	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	6a1b      	ldr	r3, [r3, #32]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4a1a      	ldr	r2, [pc, #104]	; (8008fcc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8008f64:	401a      	ands	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a12      	ldr	r2, [pc, #72]	; (8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d106      	bne.n	8008f86 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	4a15      	ldr	r2, [pc, #84]	; (8008fd0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8008f7c:	401a      	ands	r2, r3
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68fa      	ldr	r2, [r7, #12]
 8008f8c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	223c      	movs	r2, #60	; 0x3c
 8008f92:	2100      	movs	r1, #0
 8008f94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008f96:	2300      	movs	r3, #0
}
 8008f98:	0018      	movs	r0, r3
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	b004      	add	sp, #16
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	fffffcff 	.word	0xfffffcff
 8008fa4:	fffffbff 	.word	0xfffffbff
 8008fa8:	fffff7ff 	.word	0xfffff7ff
 8008fac:	ffffefff 	.word	0xffffefff
 8008fb0:	ffffdfff 	.word	0xffffdfff
 8008fb4:	ffffbfff 	.word	0xffffbfff
 8008fb8:	fff0ffff 	.word	0xfff0ffff
 8008fbc:	40012c00 	.word	0x40012c00
 8008fc0:	efffffff 	.word	0xefffffff
 8008fc4:	ff0fffff 	.word	0xff0fffff
 8008fc8:	feffffff 	.word	0xfeffffff
 8008fcc:	fdffffff 	.word	0xfdffffff
 8008fd0:	dfffffff 	.word	0xdfffffff

08008fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008fdc:	46c0      	nop			; (mov r8, r8)
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	b002      	add	sp, #8
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	b002      	add	sp, #8
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b082      	sub	sp, #8
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ffc:	46c0      	nop			; (mov r8, r8)
 8008ffe:	46bd      	mov	sp, r7
 8009000:	b002      	add	sp, #8
 8009002:	bd80      	pop	{r7, pc}

08009004 <__errno>:
 8009004:	4b01      	ldr	r3, [pc, #4]	; (800900c <__errno+0x8>)
 8009006:	6818      	ldr	r0, [r3, #0]
 8009008:	4770      	bx	lr
 800900a:	46c0      	nop			; (mov r8, r8)
 800900c:	2000002c 	.word	0x2000002c

08009010 <__libc_init_array>:
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	2600      	movs	r6, #0
 8009014:	4d0c      	ldr	r5, [pc, #48]	; (8009048 <__libc_init_array+0x38>)
 8009016:	4c0d      	ldr	r4, [pc, #52]	; (800904c <__libc_init_array+0x3c>)
 8009018:	1b64      	subs	r4, r4, r5
 800901a:	10a4      	asrs	r4, r4, #2
 800901c:	42a6      	cmp	r6, r4
 800901e:	d109      	bne.n	8009034 <__libc_init_array+0x24>
 8009020:	2600      	movs	r6, #0
 8009022:	f000 f9cf 	bl	80093c4 <_init>
 8009026:	4d0a      	ldr	r5, [pc, #40]	; (8009050 <__libc_init_array+0x40>)
 8009028:	4c0a      	ldr	r4, [pc, #40]	; (8009054 <__libc_init_array+0x44>)
 800902a:	1b64      	subs	r4, r4, r5
 800902c:	10a4      	asrs	r4, r4, #2
 800902e:	42a6      	cmp	r6, r4
 8009030:	d105      	bne.n	800903e <__libc_init_array+0x2e>
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	00b3      	lsls	r3, r6, #2
 8009036:	58eb      	ldr	r3, [r5, r3]
 8009038:	4798      	blx	r3
 800903a:	3601      	adds	r6, #1
 800903c:	e7ee      	b.n	800901c <__libc_init_array+0xc>
 800903e:	00b3      	lsls	r3, r6, #2
 8009040:	58eb      	ldr	r3, [r5, r3]
 8009042:	4798      	blx	r3
 8009044:	3601      	adds	r6, #1
 8009046:	e7f2      	b.n	800902e <__libc_init_array+0x1e>
 8009048:	08009598 	.word	0x08009598
 800904c:	08009598 	.word	0x08009598
 8009050:	08009598 	.word	0x08009598
 8009054:	0800959c 	.word	0x0800959c

08009058 <memset>:
 8009058:	0003      	movs	r3, r0
 800905a:	1882      	adds	r2, r0, r2
 800905c:	4293      	cmp	r3, r2
 800905e:	d100      	bne.n	8009062 <memset+0xa>
 8009060:	4770      	bx	lr
 8009062:	7019      	strb	r1, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	e7f9      	b.n	800905c <memset+0x4>

08009068 <exp>:
 8009068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906a:	0004      	movs	r4, r0
 800906c:	000d      	movs	r5, r1
 800906e:	f000 f839 	bl	80090e4 <__ieee754_exp>
 8009072:	4b16      	ldr	r3, [pc, #88]	; (80090cc <exp+0x64>)
 8009074:	0006      	movs	r6, r0
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	000f      	movs	r7, r1
 800907a:	b25b      	sxtb	r3, r3
 800907c:	3301      	adds	r3, #1
 800907e:	d013      	beq.n	80090a8 <exp+0x40>
 8009080:	0020      	movs	r0, r4
 8009082:	0029      	movs	r1, r5
 8009084:	f000 f996 	bl	80093b4 <finite>
 8009088:	2800      	cmp	r0, #0
 800908a:	d00d      	beq.n	80090a8 <exp+0x40>
 800908c:	0020      	movs	r0, r4
 800908e:	0029      	movs	r1, r5
 8009090:	4a0f      	ldr	r2, [pc, #60]	; (80090d0 <exp+0x68>)
 8009092:	4b10      	ldr	r3, [pc, #64]	; (80090d4 <exp+0x6c>)
 8009094:	f7f7 f9d4 	bl	8000440 <__aeabi_dcmpgt>
 8009098:	2800      	cmp	r0, #0
 800909a:	d008      	beq.n	80090ae <exp+0x46>
 800909c:	f7ff ffb2 	bl	8009004 <__errno>
 80090a0:	2322      	movs	r3, #34	; 0x22
 80090a2:	2600      	movs	r6, #0
 80090a4:	4f0c      	ldr	r7, [pc, #48]	; (80090d8 <exp+0x70>)
 80090a6:	6003      	str	r3, [r0, #0]
 80090a8:	0030      	movs	r0, r6
 80090aa:	0039      	movs	r1, r7
 80090ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090ae:	0020      	movs	r0, r4
 80090b0:	0029      	movs	r1, r5
 80090b2:	4a0a      	ldr	r2, [pc, #40]	; (80090dc <exp+0x74>)
 80090b4:	4b0a      	ldr	r3, [pc, #40]	; (80090e0 <exp+0x78>)
 80090b6:	f7f7 f9af 	bl	8000418 <__aeabi_dcmplt>
 80090ba:	2800      	cmp	r0, #0
 80090bc:	d0f4      	beq.n	80090a8 <exp+0x40>
 80090be:	f7ff ffa1 	bl	8009004 <__errno>
 80090c2:	2322      	movs	r3, #34	; 0x22
 80090c4:	2600      	movs	r6, #0
 80090c6:	2700      	movs	r7, #0
 80090c8:	6003      	str	r3, [r0, #0]
 80090ca:	e7ed      	b.n	80090a8 <exp+0x40>
 80090cc:	20000090 	.word	0x20000090
 80090d0:	fefa39ef 	.word	0xfefa39ef
 80090d4:	40862e42 	.word	0x40862e42
 80090d8:	7ff00000 	.word	0x7ff00000
 80090dc:	d52d3051 	.word	0xd52d3051
 80090e0:	c0874910 	.word	0xc0874910

080090e4 <__ieee754_exp>:
 80090e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80090e6:	004b      	lsls	r3, r1, #1
 80090e8:	000c      	movs	r4, r1
 80090ea:	0fce      	lsrs	r6, r1, #31
 80090ec:	4991      	ldr	r1, [pc, #580]	; (8009334 <__ieee754_exp+0x250>)
 80090ee:	0005      	movs	r5, r0
 80090f0:	b089      	sub	sp, #36	; 0x24
 80090f2:	085b      	lsrs	r3, r3, #1
 80090f4:	428b      	cmp	r3, r1
 80090f6:	d92f      	bls.n	8009158 <__ieee754_exp+0x74>
 80090f8:	498f      	ldr	r1, [pc, #572]	; (8009338 <__ieee754_exp+0x254>)
 80090fa:	428b      	cmp	r3, r1
 80090fc:	d912      	bls.n	8009124 <__ieee754_exp+0x40>
 80090fe:	0323      	lsls	r3, r4, #12
 8009100:	0b1b      	lsrs	r3, r3, #12
 8009102:	4303      	orrs	r3, r0
 8009104:	d008      	beq.n	8009118 <__ieee754_exp+0x34>
 8009106:	0002      	movs	r2, r0
 8009108:	0023      	movs	r3, r4
 800910a:	0028      	movs	r0, r5
 800910c:	0021      	movs	r1, r4
 800910e:	f7f7 f9ab 	bl	8000468 <__aeabi_dadd>
 8009112:	0005      	movs	r5, r0
 8009114:	000c      	movs	r4, r1
 8009116:	e001      	b.n	800911c <__ieee754_exp+0x38>
 8009118:	2e00      	cmp	r6, #0
 800911a:	d11a      	bne.n	8009152 <__ieee754_exp+0x6e>
 800911c:	0028      	movs	r0, r5
 800911e:	0021      	movs	r1, r4
 8009120:	b009      	add	sp, #36	; 0x24
 8009122:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009124:	0021      	movs	r1, r4
 8009126:	4a85      	ldr	r2, [pc, #532]	; (800933c <__ieee754_exp+0x258>)
 8009128:	4b85      	ldr	r3, [pc, #532]	; (8009340 <__ieee754_exp+0x25c>)
 800912a:	f7f7 f989 	bl	8000440 <__aeabi_dcmpgt>
 800912e:	2800      	cmp	r0, #0
 8009130:	d006      	beq.n	8009140 <__ieee754_exp+0x5c>
 8009132:	4a84      	ldr	r2, [pc, #528]	; (8009344 <__ieee754_exp+0x260>)
 8009134:	4b84      	ldr	r3, [pc, #528]	; (8009348 <__ieee754_exp+0x264>)
 8009136:	0010      	movs	r0, r2
 8009138:	0019      	movs	r1, r3
 800913a:	f7f8 f905 	bl	8001348 <__aeabi_dmul>
 800913e:	e7e8      	b.n	8009112 <__ieee754_exp+0x2e>
 8009140:	0028      	movs	r0, r5
 8009142:	0021      	movs	r1, r4
 8009144:	4a81      	ldr	r2, [pc, #516]	; (800934c <__ieee754_exp+0x268>)
 8009146:	4b82      	ldr	r3, [pc, #520]	; (8009350 <__ieee754_exp+0x26c>)
 8009148:	f7f7 f966 	bl	8000418 <__aeabi_dcmplt>
 800914c:	2800      	cmp	r0, #0
 800914e:	d100      	bne.n	8009152 <__ieee754_exp+0x6e>
 8009150:	e07c      	b.n	800924c <__ieee754_exp+0x168>
 8009152:	2500      	movs	r5, #0
 8009154:	002c      	movs	r4, r5
 8009156:	e7e1      	b.n	800911c <__ieee754_exp+0x38>
 8009158:	4a7e      	ldr	r2, [pc, #504]	; (8009354 <__ieee754_exp+0x270>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d800      	bhi.n	8009160 <__ieee754_exp+0x7c>
 800915e:	e09e      	b.n	800929e <__ieee754_exp+0x1ba>
 8009160:	4a7d      	ldr	r2, [pc, #500]	; (8009358 <__ieee754_exp+0x274>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d872      	bhi.n	800924c <__ieee754_exp+0x168>
 8009166:	4b7d      	ldr	r3, [pc, #500]	; (800935c <__ieee754_exp+0x278>)
 8009168:	00f7      	lsls	r7, r6, #3
 800916a:	19db      	adds	r3, r3, r7
 800916c:	0021      	movs	r1, r4
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	f7f8 fb55 	bl	8001820 <__aeabi_dsub>
 8009176:	9002      	str	r0, [sp, #8]
 8009178:	9103      	str	r1, [sp, #12]
 800917a:	2001      	movs	r0, #1
 800917c:	4b78      	ldr	r3, [pc, #480]	; (8009360 <__ieee754_exp+0x27c>)
 800917e:	1b80      	subs	r0, r0, r6
 8009180:	19df      	adds	r7, r3, r7
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	687c      	ldr	r4, [r7, #4]
 8009186:	9304      	str	r3, [sp, #16]
 8009188:	9405      	str	r4, [sp, #20]
 800918a:	1b83      	subs	r3, r0, r6
 800918c:	9301      	str	r3, [sp, #4]
 800918e:	9a04      	ldr	r2, [sp, #16]
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	9802      	ldr	r0, [sp, #8]
 8009194:	9903      	ldr	r1, [sp, #12]
 8009196:	f7f8 fb43 	bl	8001820 <__aeabi_dsub>
 800919a:	0005      	movs	r5, r0
 800919c:	000c      	movs	r4, r1
 800919e:	002a      	movs	r2, r5
 80091a0:	0023      	movs	r3, r4
 80091a2:	0028      	movs	r0, r5
 80091a4:	0021      	movs	r1, r4
 80091a6:	f7f8 f8cf 	bl	8001348 <__aeabi_dmul>
 80091aa:	0006      	movs	r6, r0
 80091ac:	000f      	movs	r7, r1
 80091ae:	4a6d      	ldr	r2, [pc, #436]	; (8009364 <__ieee754_exp+0x280>)
 80091b0:	4b6d      	ldr	r3, [pc, #436]	; (8009368 <__ieee754_exp+0x284>)
 80091b2:	f7f8 f8c9 	bl	8001348 <__aeabi_dmul>
 80091b6:	4a6d      	ldr	r2, [pc, #436]	; (800936c <__ieee754_exp+0x288>)
 80091b8:	4b6d      	ldr	r3, [pc, #436]	; (8009370 <__ieee754_exp+0x28c>)
 80091ba:	f7f8 fb31 	bl	8001820 <__aeabi_dsub>
 80091be:	0032      	movs	r2, r6
 80091c0:	003b      	movs	r3, r7
 80091c2:	f7f8 f8c1 	bl	8001348 <__aeabi_dmul>
 80091c6:	4a6b      	ldr	r2, [pc, #428]	; (8009374 <__ieee754_exp+0x290>)
 80091c8:	4b6b      	ldr	r3, [pc, #428]	; (8009378 <__ieee754_exp+0x294>)
 80091ca:	f7f7 f94d 	bl	8000468 <__aeabi_dadd>
 80091ce:	0032      	movs	r2, r6
 80091d0:	003b      	movs	r3, r7
 80091d2:	f7f8 f8b9 	bl	8001348 <__aeabi_dmul>
 80091d6:	4a69      	ldr	r2, [pc, #420]	; (800937c <__ieee754_exp+0x298>)
 80091d8:	4b69      	ldr	r3, [pc, #420]	; (8009380 <__ieee754_exp+0x29c>)
 80091da:	f7f8 fb21 	bl	8001820 <__aeabi_dsub>
 80091de:	0032      	movs	r2, r6
 80091e0:	003b      	movs	r3, r7
 80091e2:	f7f8 f8b1 	bl	8001348 <__aeabi_dmul>
 80091e6:	4a67      	ldr	r2, [pc, #412]	; (8009384 <__ieee754_exp+0x2a0>)
 80091e8:	4b67      	ldr	r3, [pc, #412]	; (8009388 <__ieee754_exp+0x2a4>)
 80091ea:	f7f7 f93d 	bl	8000468 <__aeabi_dadd>
 80091ee:	0032      	movs	r2, r6
 80091f0:	003b      	movs	r3, r7
 80091f2:	f7f8 f8a9 	bl	8001348 <__aeabi_dmul>
 80091f6:	0002      	movs	r2, r0
 80091f8:	000b      	movs	r3, r1
 80091fa:	0028      	movs	r0, r5
 80091fc:	0021      	movs	r1, r4
 80091fe:	f7f8 fb0f 	bl	8001820 <__aeabi_dsub>
 8009202:	000b      	movs	r3, r1
 8009204:	0002      	movs	r2, r0
 8009206:	0006      	movs	r6, r0
 8009208:	000f      	movs	r7, r1
 800920a:	0028      	movs	r0, r5
 800920c:	0021      	movs	r1, r4
 800920e:	f7f8 f89b 	bl	8001348 <__aeabi_dmul>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	9006      	str	r0, [sp, #24]
 8009216:	9107      	str	r1, [sp, #28]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d156      	bne.n	80092ca <__ieee754_exp+0x1e6>
 800921c:	2380      	movs	r3, #128	; 0x80
 800921e:	2200      	movs	r2, #0
 8009220:	0030      	movs	r0, r6
 8009222:	0039      	movs	r1, r7
 8009224:	05db      	lsls	r3, r3, #23
 8009226:	f7f8 fafb 	bl	8001820 <__aeabi_dsub>
 800922a:	0002      	movs	r2, r0
 800922c:	000b      	movs	r3, r1
 800922e:	9806      	ldr	r0, [sp, #24]
 8009230:	9907      	ldr	r1, [sp, #28]
 8009232:	f7f7 fc83 	bl	8000b3c <__aeabi_ddiv>
 8009236:	002a      	movs	r2, r5
 8009238:	0023      	movs	r3, r4
 800923a:	f7f8 faf1 	bl	8001820 <__aeabi_dsub>
 800923e:	0002      	movs	r2, r0
 8009240:	000b      	movs	r3, r1
 8009242:	2000      	movs	r0, #0
 8009244:	4951      	ldr	r1, [pc, #324]	; (800938c <__ieee754_exp+0x2a8>)
 8009246:	f7f8 faeb 	bl	8001820 <__aeabi_dsub>
 800924a:	e762      	b.n	8009112 <__ieee754_exp+0x2e>
 800924c:	4850      	ldr	r0, [pc, #320]	; (8009390 <__ieee754_exp+0x2ac>)
 800924e:	00f6      	lsls	r6, r6, #3
 8009250:	1986      	adds	r6, r0, r6
 8009252:	4a50      	ldr	r2, [pc, #320]	; (8009394 <__ieee754_exp+0x2b0>)
 8009254:	4b50      	ldr	r3, [pc, #320]	; (8009398 <__ieee754_exp+0x2b4>)
 8009256:	0028      	movs	r0, r5
 8009258:	0021      	movs	r1, r4
 800925a:	f7f8 f875 	bl	8001348 <__aeabi_dmul>
 800925e:	6832      	ldr	r2, [r6, #0]
 8009260:	6873      	ldr	r3, [r6, #4]
 8009262:	f7f7 f901 	bl	8000468 <__aeabi_dadd>
 8009266:	f7f8 fe6d 	bl	8001f44 <__aeabi_d2iz>
 800926a:	9001      	str	r0, [sp, #4]
 800926c:	f7f8 fea0 	bl	8001fb0 <__aeabi_i2d>
 8009270:	4a4a      	ldr	r2, [pc, #296]	; (800939c <__ieee754_exp+0x2b8>)
 8009272:	4b4b      	ldr	r3, [pc, #300]	; (80093a0 <__ieee754_exp+0x2bc>)
 8009274:	0006      	movs	r6, r0
 8009276:	000f      	movs	r7, r1
 8009278:	f7f8 f866 	bl	8001348 <__aeabi_dmul>
 800927c:	0002      	movs	r2, r0
 800927e:	000b      	movs	r3, r1
 8009280:	0028      	movs	r0, r5
 8009282:	0021      	movs	r1, r4
 8009284:	f7f8 facc 	bl	8001820 <__aeabi_dsub>
 8009288:	4a46      	ldr	r2, [pc, #280]	; (80093a4 <__ieee754_exp+0x2c0>)
 800928a:	9002      	str	r0, [sp, #8]
 800928c:	9103      	str	r1, [sp, #12]
 800928e:	4b46      	ldr	r3, [pc, #280]	; (80093a8 <__ieee754_exp+0x2c4>)
 8009290:	0030      	movs	r0, r6
 8009292:	0039      	movs	r1, r7
 8009294:	f7f8 f858 	bl	8001348 <__aeabi_dmul>
 8009298:	9004      	str	r0, [sp, #16]
 800929a:	9105      	str	r1, [sp, #20]
 800929c:	e777      	b.n	800918e <__ieee754_exp+0xaa>
 800929e:	4a43      	ldr	r2, [pc, #268]	; (80093ac <__ieee754_exp+0x2c8>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d80d      	bhi.n	80092c0 <__ieee754_exp+0x1dc>
 80092a4:	4a27      	ldr	r2, [pc, #156]	; (8009344 <__ieee754_exp+0x260>)
 80092a6:	4b28      	ldr	r3, [pc, #160]	; (8009348 <__ieee754_exp+0x264>)
 80092a8:	0021      	movs	r1, r4
 80092aa:	f7f7 f8dd 	bl	8000468 <__aeabi_dadd>
 80092ae:	2200      	movs	r2, #0
 80092b0:	4b36      	ldr	r3, [pc, #216]	; (800938c <__ieee754_exp+0x2a8>)
 80092b2:	f7f7 f8c5 	bl	8000440 <__aeabi_dcmpgt>
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d005      	beq.n	80092c6 <__ieee754_exp+0x1e2>
 80092ba:	2200      	movs	r2, #0
 80092bc:	4b33      	ldr	r3, [pc, #204]	; (800938c <__ieee754_exp+0x2a8>)
 80092be:	e724      	b.n	800910a <__ieee754_exp+0x26>
 80092c0:	2300      	movs	r3, #0
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	e76b      	b.n	800919e <__ieee754_exp+0xba>
 80092c6:	9001      	str	r0, [sp, #4]
 80092c8:	e769      	b.n	800919e <__ieee754_exp+0xba>
 80092ca:	2180      	movs	r1, #128	; 0x80
 80092cc:	0032      	movs	r2, r6
 80092ce:	003b      	movs	r3, r7
 80092d0:	2000      	movs	r0, #0
 80092d2:	05c9      	lsls	r1, r1, #23
 80092d4:	f7f8 faa4 	bl	8001820 <__aeabi_dsub>
 80092d8:	0002      	movs	r2, r0
 80092da:	000b      	movs	r3, r1
 80092dc:	9806      	ldr	r0, [sp, #24]
 80092de:	9907      	ldr	r1, [sp, #28]
 80092e0:	f7f7 fc2c 	bl	8000b3c <__aeabi_ddiv>
 80092e4:	0002      	movs	r2, r0
 80092e6:	000b      	movs	r3, r1
 80092e8:	9804      	ldr	r0, [sp, #16]
 80092ea:	9905      	ldr	r1, [sp, #20]
 80092ec:	f7f8 fa98 	bl	8001820 <__aeabi_dsub>
 80092f0:	9a02      	ldr	r2, [sp, #8]
 80092f2:	9b03      	ldr	r3, [sp, #12]
 80092f4:	f7f8 fa94 	bl	8001820 <__aeabi_dsub>
 80092f8:	0002      	movs	r2, r0
 80092fa:	000b      	movs	r3, r1
 80092fc:	2000      	movs	r0, #0
 80092fe:	4923      	ldr	r1, [pc, #140]	; (800938c <__ieee754_exp+0x2a8>)
 8009300:	f7f8 fa8e 	bl	8001820 <__aeabi_dsub>
 8009304:	4b2a      	ldr	r3, [pc, #168]	; (80093b0 <__ieee754_exp+0x2cc>)
 8009306:	9a01      	ldr	r2, [sp, #4]
 8009308:	0004      	movs	r4, r0
 800930a:	000d      	movs	r5, r1
 800930c:	429a      	cmp	r2, r3
 800930e:	db05      	blt.n	800931c <__ieee754_exp+0x238>
 8009310:	9901      	ldr	r1, [sp, #4]
 8009312:	0508      	lsls	r0, r1, #20
 8009314:	1943      	adds	r3, r0, r5
 8009316:	0025      	movs	r5, r4
 8009318:	001c      	movs	r4, r3
 800931a:	e6ff      	b.n	800911c <__ieee754_exp+0x38>
 800931c:	22fa      	movs	r2, #250	; 0xfa
 800931e:	0092      	lsls	r2, r2, #2
 8009320:	4694      	mov	ip, r2
 8009322:	9b01      	ldr	r3, [sp, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	4463      	add	r3, ip
 8009328:	051b      	lsls	r3, r3, #20
 800932a:	1859      	adds	r1, r3, r1
 800932c:	23b8      	movs	r3, #184	; 0xb8
 800932e:	045b      	lsls	r3, r3, #17
 8009330:	e703      	b.n	800913a <__ieee754_exp+0x56>
 8009332:	46c0      	nop			; (mov r8, r8)
 8009334:	40862e41 	.word	0x40862e41
 8009338:	7fefffff 	.word	0x7fefffff
 800933c:	fefa39ef 	.word	0xfefa39ef
 8009340:	40862e42 	.word	0x40862e42
 8009344:	8800759c 	.word	0x8800759c
 8009348:	7e37e43c 	.word	0x7e37e43c
 800934c:	d52d3051 	.word	0xd52d3051
 8009350:	c0874910 	.word	0xc0874910
 8009354:	3fd62e42 	.word	0x3fd62e42
 8009358:	3ff0a2b1 	.word	0x3ff0a2b1
 800935c:	08009578 	.word	0x08009578
 8009360:	08009588 	.word	0x08009588
 8009364:	72bea4d0 	.word	0x72bea4d0
 8009368:	3e663769 	.word	0x3e663769
 800936c:	c5d26bf1 	.word	0xc5d26bf1
 8009370:	3ebbbd41 	.word	0x3ebbbd41
 8009374:	af25de2c 	.word	0xaf25de2c
 8009378:	3f11566a 	.word	0x3f11566a
 800937c:	16bebd93 	.word	0x16bebd93
 8009380:	3f66c16c 	.word	0x3f66c16c
 8009384:	5555553e 	.word	0x5555553e
 8009388:	3fc55555 	.word	0x3fc55555
 800938c:	3ff00000 	.word	0x3ff00000
 8009390:	08009568 	.word	0x08009568
 8009394:	652b82fe 	.word	0x652b82fe
 8009398:	3ff71547 	.word	0x3ff71547
 800939c:	fee00000 	.word	0xfee00000
 80093a0:	3fe62e42 	.word	0x3fe62e42
 80093a4:	35793c76 	.word	0x35793c76
 80093a8:	3dea39ef 	.word	0x3dea39ef
 80093ac:	3e2fffff 	.word	0x3e2fffff
 80093b0:	fffffc03 	.word	0xfffffc03

080093b4 <finite>:
 80093b4:	4b02      	ldr	r3, [pc, #8]	; (80093c0 <finite+0xc>)
 80093b6:	0048      	lsls	r0, r1, #1
 80093b8:	0840      	lsrs	r0, r0, #1
 80093ba:	18c0      	adds	r0, r0, r3
 80093bc:	0fc0      	lsrs	r0, r0, #31
 80093be:	4770      	bx	lr
 80093c0:	80100000 	.word	0x80100000

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	46c0      	nop			; (mov r8, r8)
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	46c0      	nop			; (mov r8, r8)
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
 80093dc:	0000      	movs	r0, r0
	...

080093e0 <__FLASH_Program_Fast_veneer>:
 80093e0:	b401      	push	{r0}
 80093e2:	4802      	ldr	r0, [pc, #8]	; (80093ec <__FLASH_Program_Fast_veneer+0xc>)
 80093e4:	4684      	mov	ip, r0
 80093e6:	bc01      	pop	{r0}
 80093e8:	4760      	bx	ip
 80093ea:	bf00      	nop
 80093ec:	20000095 	.word	0x20000095

Disassembly of section .data:

20000000 <FREQUENCY_CALIBRATION>:
20000000:	1eb851ec 3fefeb85                       .Q.....?

20000008 <FM_FREQUENCY>:
20000008:	0000222e                                ."..

2000000c <MODE>:
2000000c:	00000002                                ....

20000010 <STATION>:
20000010:	ffffffff                                ....

20000014 <STANDBY_DISPLAY_ON>:
20000014:	                                         .

20000015 <LOCK_FREQUENCY>:
20000015:	                                         ...

20000018 <AM_FREQUENCY>:
20000018:	00000213                                ....

2000001c <COLD_START>:
2000001c:	00000001                                ....

20000020 <SystemCoreClock>:
20000020:	00f42400                                .$..

20000024 <uwTickPrio>:
20000024:	00000004                                ....

20000028 <uwTickFreq>:
20000028:	00000001                                ....

2000002c <_impure_ptr>:
2000002c:	20000030                                0.. 

20000030 <impure_data>:
	...

20000090 <__fdlib_version>:
20000090:	000000ff                                ....

20000094 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000094:	b580      	push	{r7, lr}
20000096:	b088      	sub	sp, #32
20000098:	af00      	add	r7, sp, #0
2000009a:	6078      	str	r0, [r7, #4]
2000009c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000009e:	231f      	movs	r3, #31
200000a0:	18fb      	adds	r3, r7, r3
200000a2:	2200      	movs	r2, #0
200000a4:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
200000a6:	687b      	ldr	r3, [r7, #4]
200000a8:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
200000aa:	683b      	ldr	r3, [r7, #0]
200000ac:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
200000ae:	4b1a      	ldr	r3, [pc, #104]	; (20000118 <FLASH_Program_Fast+0x84>)
200000b0:	695a      	ldr	r2, [r3, #20]
200000b2:	4b19      	ldr	r3, [pc, #100]	; (20000118 <FLASH_Program_Fast+0x84>)
200000b4:	2180      	movs	r1, #128	; 0x80
200000b6:	02c9      	lsls	r1, r1, #11
200000b8:	430a      	orrs	r2, r1
200000ba:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000bc:	f3ef 8310 	mrs	r3, PRIMASK
200000c0:	60fb      	str	r3, [r7, #12]
  return(result);
200000c2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000c6:	b672      	cpsid	i
}
200000c8:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ca:	e00f      	b.n	200000ec <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000cc:	697a      	ldr	r2, [r7, #20]
200000ce:	69bb      	ldr	r3, [r7, #24]
200000d0:	6812      	ldr	r2, [r2, #0]
200000d2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000d4:	697b      	ldr	r3, [r7, #20]
200000d6:	3304      	adds	r3, #4
200000d8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000da:	69bb      	ldr	r3, [r7, #24]
200000dc:	3304      	adds	r3, #4
200000de:	61bb      	str	r3, [r7, #24]
    index++;
200000e0:	211f      	movs	r1, #31
200000e2:	187b      	adds	r3, r7, r1
200000e4:	781a      	ldrb	r2, [r3, #0]
200000e6:	187b      	adds	r3, r7, r1
200000e8:	3201      	adds	r2, #1
200000ea:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000ec:	231f      	movs	r3, #31
200000ee:	18fb      	adds	r3, r7, r3
200000f0:	781b      	ldrb	r3, [r3, #0]
200000f2:	2b3f      	cmp	r3, #63	; 0x3f
200000f4:	d9ea      	bls.n	200000cc <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000f6:	46c0      	nop			; (mov r8, r8)
200000f8:	4b07      	ldr	r3, [pc, #28]	; (20000118 <FLASH_Program_Fast+0x84>)
200000fa:	691a      	ldr	r2, [r3, #16]
200000fc:	2380      	movs	r3, #128	; 0x80
200000fe:	025b      	lsls	r3, r3, #9
20000100:	4013      	ands	r3, r2
20000102:	d1f9      	bne.n	200000f8 <FLASH_Program_Fast+0x64>
20000104:	693b      	ldr	r3, [r7, #16]
20000106:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000108:	68bb      	ldr	r3, [r7, #8]
2000010a:	f383 8810 	msr	PRIMASK, r3
}
2000010e:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000110:	46c0      	nop			; (mov r8, r8)
20000112:	46bd      	mov	sp, r7
20000114:	b008      	add	sp, #32
20000116:	bd80      	pop	{r7, pc}
20000118:	40022000 	.word	0x40022000
